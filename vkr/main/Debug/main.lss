
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  00004652  00004706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004652  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  008001d0  008001d0  000047d6  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  000047d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000047fe  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004830  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000818  00000000  00000000  00004870  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010b16  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d7a  00000000  00000000  00015b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000046de  00000000  00000000  00018918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015bc  00000000  00000000  0001cff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004088  00000000  00000000  0001e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005ff3  00000000  00000000  0002263c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000750  00000000  00000000  0002862f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__ctors_end>
       4:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
       8:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
       c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      10:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      14:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      18:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      1c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      20:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      24:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      28:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      2c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      30:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      34:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      38:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      3c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      40:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__vector_16>
      44:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      48:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__vector_18>
      4c:	0c 94 51 1e 	jmp	0x3ca2	; 0x3ca2 <__vector_19>
      50:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      54:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      58:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      5c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      60:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__vector_24>
      64:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
      68:	c7 07       	cpc	r28, r23
      6a:	33 07       	cpc	r19, r19
      6c:	39 07       	cpc	r19, r25
      6e:	36 07       	cpc	r19, r22
      70:	3c 07       	cpc	r19, r28
      72:	3f 07       	cpc	r19, r31
      74:	42 07       	cpc	r20, r18
      76:	45 07       	cpc	r20, r21
      78:	48 07       	cpc	r20, r24
      7a:	4b 07       	cpc	r20, r27
      7c:	d9 07       	cpc	r29, r25
      7e:	d9 07       	cpc	r29, r25
      80:	d9 07       	cpc	r29, r25
      82:	4e 07       	cpc	r20, r30
      84:	75 07       	cpc	r23, r21
      86:	d9 07       	cpc	r29, r25
      88:	9c 07       	cpc	r25, r28
      8a:	9f 07       	cpc	r25, r31
      8c:	a2 07       	cpc	r26, r18
      8e:	aa 07       	cpc	r26, r26
      90:	ad 07       	cpc	r26, r29
      92:	b0 07       	cpc	r27, r16
      94:	d9 07       	cpc	r29, r25
      96:	d9 07       	cpc	r29, r25
      98:	d9 07       	cpc	r29, r25
      9a:	d9 07       	cpc	r29, r25
      9c:	d9 07       	cpc	r29, r25
      9e:	d9 07       	cpc	r29, r25
      a0:	d9 07       	cpc	r29, r25
      a2:	d9 07       	cpc	r29, r25
      a4:	b8 07       	cpc	r27, r24
      a6:	38 09       	sbc	r19, r8
      a8:	55 09       	sbc	r21, r5
      aa:	55 09       	sbc	r21, r5
      ac:	a6 09       	sbc	r26, r6
      ae:	a6 09       	sbc	r26, r6
      b0:	a6 09       	sbc	r26, r6
      b2:	a6 09       	sbc	r26, r6
      b4:	a6 09       	sbc	r26, r6
      b6:	a6 09       	sbc	r26, r6
      b8:	57 09       	sbc	r21, r7
      ba:	8f 0a       	sbc	r8, r31
      bc:	8f 0a       	sbc	r8, r31
      be:	d2 09       	sbc	r29, r2
      c0:	ea 09       	sbc	r30, r10
      c2:	02 0a       	sbc	r0, r18
      c4:	81 0a       	sbc	r8, r17
      c6:	83 0a       	sbc	r8, r19
      c8:	85 0a       	sbc	r8, r21
      ca:	88 0a       	sbc	r8, r24
      cc:	8a 0a       	sbc	r8, r26
      ce:	8c 0a       	sbc	r8, r28
      d0:	3a 0e       	add	r3, r26
      d2:	4d 0e       	add	r4, r29
      d4:	3d 0e       	add	r3, r29
      d6:	50 0e       	add	r5, r16
      d8:	59 0e       	add	r5, r25
      da:	62 0e       	add	r6, r18
      dc:	6b 0e       	add	r6, r27
      de:	74 0e       	add	r7, r20
      e0:	7d 0e       	add	r7, r29
      e2:	84 12       	cpse	r8, r20
      e4:	d0 12       	cpse	r13, r16
      e6:	b7 12       	cpse	r11, r23
      e8:	06 13       	cpse	r16, r22
      ea:	19 13       	cpse	r17, r25
      ec:	2c 13       	cpse	r18, r28
      ee:	3f 13       	cpse	r19, r31
      f0:	52 13       	cpse	r21, r18
      f2:	65 13       	cpse	r22, r21
      f4:	e3 12       	cpse	r14, r19

000000f6 <__trampolines_end>:
      f6:	47 41       	sbci	r20, 0x17	; 23
      f8:	49 4e       	sbci	r20, 0xE9	; 233
      fa:	5f 54       	subi	r21, 0x4F	; 79
      fc:	57 4f       	sbci	r21, 0xF7	; 247
      fe:	54 48       	sbci	r21, 0x84	; 132
     100:	49 52       	subi	r20, 0x29	; 41
     102:	44 53       	subi	r20, 0x34	; 52
	...

00000105 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_4>:
     105:	47 41 49 4e 5f 53 49 58 54 45 45 4e 00              GAIN_SIXTEEN.

00000112 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_3>:
     112:	47 41 49 4e 5f 45 49 47 48 54 00                    GAIN_EIGHT.

0000011d <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_2>:
     11d:	47 41 49 4e 5f 46 4f 55 52 00                       GAIN_FOUR.

00000127 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_1>:
     127:	47 41 49 4e 5f 54 57 4f 00                          GAIN_TWO.

00000130 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_0>:
     130:	47 41 49 4e 5f 4f 4e 45 00                          GAIN_ONE.

00000139 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c>:
     139:	41 44 53 3a 20 00                                   ADS: .

0000013f <_ZZ21button2LongPressStartvE3__c>:
     13f:	2a 2a 4d 65 61 73 75 72 65 6d 65 6e 74 20 53 74     **Measurement St
     14f:	6f 70 65 64 21 00                                   oped!.

00000155 <_ZZ21button1LongPressStartvE3__c>:
     155:	49 6d 70 65 64 61 6e 63 65 20 73 65 74 75 70 00     Impedance setup.

00000165 <_ZZ12button1ClickvE3__c>:
     165:	2a 2a 4d 65 61 73 75 72 65 6d 65 6e 74 20 53 74     **Measurement St
     175:	61 72 74 65 64 21 00                                arted!.

0000017c <_ZZ14setupImpedancevE3__c_4>:
     17c:	2d 2d 2d 2d 2d 2d 00                                ------.

00000183 <_ZZ14setupImpedancevE3__c_3>:
     183:	2d 2d 2d 65 6e 64 2d 2d 2d 00                       ---end---.

0000018d <_ZZ14setupImpedancevE3__c_2>:
     18d:	52 3d 00                                            R=.

00000190 <_ZZ14setupImpedancevE3__c_1>:
     190:	41 3d 00                                            A=.

00000193 <_ZZ14setupImpedancevE3__c_0>:
     193:	56 3d 00                                            V=.

00000196 <_ZZ14setupImpedancevE3__c>:
     196:	49 6d 70 65 64 61 6e 63 65 20 73 65 74 75 70 00     Impedance setup.

000001a6 <_ZZ12lcdClearCellhhhE3__c>:
     1a6:	20 00                                                .

000001a8 <_ZZ22showStaticWindingCharsvE3__c_1>:
     1a8:	45 3d 00                                            E=.

000001ab <_ZZ22showStaticWindingCharsvE3__c_0>:
     1ab:	56 3d 00                                            V=.

000001ae <_ZZ22showStaticWindingCharsvE3__c>:
     1ae:	49 3d 00                                            I=.

000001b1 <_ZZ22showWindingCharsValueshE3__c_0>:
     1b1:	25 00                                               %.

000001b3 <_ZZ22showWindingCharsValueshE3__c>:
     1b3:	2b 00                                               +.

000001b5 <_ZZ18showStaticAmperagevE3__c_0>:
     1b5:	4d 00                                               M.

000001b7 <_ZZ18showStaticAmperagevE3__c>:
     1b7:	50 00                                               P.

000001b9 <_ZZ19displayStaticAsModevE3__c_25>:
     1b9:	53 65 74 75 70 20 72 65 71 75 69 72 65 64 00        Setup required.

000001c8 <_ZZ19displayStaticAsModevE3__c_24>:
     1c8:	4f 6f 6f 6f 70 73 21 00                             Oooops!.

000001d0 <_ZZ19displayStaticAsModevE3__c_23>:
     1d0:	42 31 3d 77 6f 72 6b 3b 20 42 32 3d 73 74 6f 70     B1=work; B2=stop
	...

000001e1 <_ZZ19displayStaticAsModevE3__c_22>:
     1e1:	4d 65 61 73 75 72 65 6d 65 6e 74 00                 Measurement.

000001ed <_ZZ19displayStaticAsModevE3__c_21>:
     1ed:	41 43 00                                            AC.

000001f0 <_ZZ19displayStaticAsModevE3__c_20>:
     1f0:	42 43 00                                            BC.

000001f3 <_ZZ19displayStaticAsModevE3__c_19>:
     1f3:	41 42 00                                            AB.

000001f6 <_ZZ19displayStaticAsModevE3__c_18>:
     1f6:	41 43 20 44 00                                      AC D.

000001fb <_ZZ19displayStaticAsModevE3__c_17>:
     1fb:	42 43 20 44 00                                      BC D.

00000200 <_ZZ19displayStaticAsModevE3__c_16>:
     200:	41 42 20 44 00                                      AB D.

00000205 <_ZZ19displayStaticAsModevE3__c_15>:
     205:	65 25 00                                            e%.

00000208 <_ZZ19displayStaticAsModevE3__c_14>:
     208:	49 33 3d 00                                         I3=.

0000020c <_ZZ19displayStaticAsModevE3__c_13>:
     20c:	49 32 3d 00                                         I2=.

00000210 <_ZZ19displayStaticAsModevE3__c_12>:
     210:	49 31 3d 00                                         I1=.

00000214 <_ZZ19displayStaticAsModevE3__c_11>:
     214:	41 43 3d 00                                         AC=.

00000218 <_ZZ19displayStaticAsModevE3__c_10>:
     218:	42 43 3d 00                                         BC=.

0000021c <_ZZ19displayStaticAsModevE3__c_9>:
     21c:	41 42 3d 00                                         AB=.

00000220 <_ZZ19displayStaticAsModevE3__c_8>:
     220:	45 43 6f 75 6e 74 00                                ECount.

00000227 <_ZZ19displayStaticAsModevE3__c_7>:
     227:	41 6d 20 41 43 00                                   Am AC.

0000022d <_ZZ19displayStaticAsModevE3__c_6>:
     22d:	41 6d 20 42 43 00                                   Am BC.

00000233 <_ZZ19displayStaticAsModevE3__c_5>:
     233:	41 6d 20 41 42 00                                   Am AB.

00000239 <_ZZ19displayStaticAsModevE3__c_4>:
     239:	56 6d 20 41 43 00                                   Vm AC.

0000023f <_ZZ19displayStaticAsModevE3__c_3>:
     23f:	56 6d 20 42 43 00                                   Vm BC.

00000245 <_ZZ19displayStaticAsModevE3__c_2>:
     245:	56 6d 20 41 42 00                                   Vm AB.

0000024b <_ZZ19displayStaticAsModevE3__c_1>:
     24b:	56 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     V gain maxV/step
	...

0000025c <_ZZ19displayStaticAsModevE3__c_0>:
     25c:	41 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     A gain maxV/step
	...

0000026d <_ZZ19displayStaticAsModevE3__c>:
     26d:	43 6f 6e 6e 65 63 74 69 6f 6e 20 74 79 70 65 00     Connection type.

0000027d <_ZZ19lcdPrintCriticalLvlhE3__c>:
     27d:	2b 00                                               +.

0000027f <_ZZ27lcdPrinRoundedCurErrorLevelhE3__c>:
     27f:	2b 00                                               +.

00000281 <_ZZ13displayAsModevE3__c_10>:
     281:	23 00                                               #.

00000283 <_ZZ13displayAsModevE3__c_9>:
     283:	23 00                                               #.

00000285 <_ZZ13displayAsModevE3__c_8>:
     285:	4d 20 00                                            M .

00000288 <_ZZ13displayAsModevE3__c_7>:
     288:	23 00                                               #.

0000028a <_ZZ13displayAsModevE3__c_6>:
     28a:	23 00                                               #.

0000028c <_ZZ13displayAsModevE3__c_5>:
     28c:	50 20 00                                            P .

0000028f <_ZZ13displayAsModevE3__c_4>:
     28f:	78 00                                               x.

00000291 <_ZZ13displayAsModevE3__c_3>:
     291:	52 33 3d 00                                         R3=.

00000295 <_ZZ13displayAsModevE3__c_2>:
     295:	52 32 3d 00                                         R2=.

00000299 <_ZZ13displayAsModevE3__c_1>:
     299:	52 31 3d 00                                         R1=.

0000029d <_ZZ13displayAsModevE3__c_0>:
     29d:	54 72 69 61 6e 67 6c 65 00                          Triangle.

000002a6 <_ZZ13displayAsModevE3__c>:
     2a6:	53 74 61 72 00                                      Star.

000002ab <_ZZ12showGainInfovE3__c_4>:
     2ab:	30 2e 32 35 36 20 30 2e 30 30 37 38 31 32 35 00     0.256 0.0078125.

000002bb <_ZZ12showGainInfovE3__c_3>:
     2bb:	30 2e 35 31 32 20 30 2e 30 31 35 36 32 35 00        0.512 0.015625.

000002ca <_ZZ12showGainInfovE3__c_2>:
     2ca:	31 2e 30 32 34 20 30 2e 30 33 31 32 35 00           1.024 0.03125.

000002d8 <_ZZ12showGainInfovE3__c_1>:
     2d8:	32 2e 30 34 38 20 30 2e 30 36 32 35 00              2.048 0.0625.

000002e5 <_ZZ12showGainInfovE3__c_0>:
     2e5:	34 2e 30 39 36 20 30 2e 31 32 35 00                 4.096 0.125.

000002f1 <_ZZ12showGainInfovE3__c>:
     2f1:	36 2e 31 34 34 20 30 2e 31 38 37 35 00              6.144 0.1875.

000002fe <_ZZ4loopE3__c_9>:
     2fe:	68 61 2d 68 61 2c 20 69 74 27 73 20 6a 6f 6b 65     ha-ha, it's joke
     30e:	2e 20 54 68 65 72 65 20 61 72 65 20 6e 6f 74 20     . There are not 
     31e:	65 78 69 73 74 73 20 63 72 69 74 69 63 61 6c 20     exists critical 
     32e:	65 72 72 6f 72 00                                   error.

00000334 <_ZZ4loopE3__c_8>:
     334:	57 41 52 4e 49 4e 47 21 21 21 20 4d 65 61 73 75     WARNING!!! Measu
     344:	72 65 6d 65 6e 74 20 53 74 6f 70 65 64 20 49 43     rement Stoped IC
     354:	20 45 58 49 53 54 53 21 00                           EXISTS!.

0000035d <_ZZ4loopE3__c_7>:
     35d:	50 72 6f 62 61 62 6c 79 20 65 72 72 6f 72 20 65     Probably error e
     36d:	78 69 73 74 73 00                                   xists.

00000373 <_ZZ4loopE3__c_6>:
     373:	2d 2d 2d 65 6e 64 2d 2d 2d 00                       ---end---.

0000037d <_ZZ4loopE3__c_5>:
     37d:	2d 2d 2d 00                                         ---.

00000381 <_ZZ4loopE3__c_4>:
     381:	65 72 72 6f 72 20 3d 20 00                          error = .

0000038a <_ZZ4loopE3__c_3>:
     38a:	70 65 72 66 65 63 74 20 61 6d 70 65 72 61 67 65     perfect amperage
     39a:	20 3d 20 00                                          = .

0000039e <_ZZ4loopE3__c_2>:
     39e:	6d 65 61 73 75 72 65 64 20 61 6d 70 65 72 61 67     measured amperag
     3ae:	65 20 3d 20 00                                      e = .

000003b3 <_ZZ4loopE3__c_1>:
     3b3:	6d 65 61 73 75 72 65 64 20 76 6f 6c 74 61 67 65     measured voltage
     3c3:	20 3d 20 00                                          = .

000003c7 <_ZZ4loopE3__c_0>:
     3c7:	7c 00                                               |.

000003c9 <_ZZ4loopE3__c>:
     3c9:	57 69 6e 64 69 6e 67 20 7c 00                       Winding |.

000003d3 <_ZZ18checkIsReadyToWorkvE3__c>:
     3d3:	4e 65 65 64 20 73 65 74 75 70 20 70 61 72 61 6d     Need setup param
     3e3:	73 00                                               s.

000003e5 <_ZZ5setupE3__c_19>:
     3e5:	53 74 61 6e 64 20 62 79 2e 2e 2e 00                 Stand by....

000003f1 <_ZZ5setupE3__c_18>:
     3f1:	43 6f 6d 70 6c 65 74 65 64 21 00                    Completed!.

000003fc <_ZZ5setupE3__c_17>:
     3fc:	44 65 62 75 67 20 6d 6f 64 65 00                    Debug mode.

00000407 <_ZZ5setupE3__c_16>:
     407:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 61 63     amperage_mult_ac
     417:	3a 20 00                                            : .

0000041a <_ZZ5setupE3__c_15>:
     41a:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 62 63     amperage_mult_bc
     42a:	3a 20 00                                            : .

0000042d <_ZZ5setupE3__c_14>:
     42d:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 61 62     amperage_mult_ab
     43d:	3a 20 00                                            : .

00000440 <_ZZ5setupE3__c_13>:
     440:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 61 63 3a     voltage_mult_ac:
     450:	20 00                                                .

00000452 <_ZZ5setupE3__c_12>:
     452:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 62 63 3a     voltage_mult_bc:
     462:	20 00                                                .

00000464 <_ZZ5setupE3__c_11>:
     464:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 61 62 3a     voltage_mult_ab:
     474:	20 00                                                .

00000476 <_ZZ5setupE3__c_10>:
     476:	69 6d 70 65 64 61 6e 63 65 5f 61 63 3a 20 00        impedance_ac: .

00000485 <_ZZ5setupE3__c_9>:
     485:	69 6d 70 65 64 61 6e 63 65 5f 62 63 3a 20 00        impedance_bc: .

00000494 <_ZZ5setupE3__c_8>:
     494:	69 6d 70 65 64 61 6e 63 65 5f 61 62 3a 20 00        impedance_ab: .

000004a3 <_ZZ5setupE3__c_7>:
     4a3:	63 6f 6e 6e 65 63 74 69 6f 6e 5f 74 79 70 65 3a     connection_type:
     4b3:	20 00                                                .

000004b5 <_ZZ5setupE3__c_6>:
     4b5:	67 61 69 6e 5f 76 6f 6c 74 61 67 65 3a 20 00        gain_voltage: .

000004c4 <_ZZ5setupE3__c_5>:
     4c4:	67 61 69 6e 5f 61 6d 70 65 72 61 67 65 3a 20 00     gain_amperage: .

000004d4 <_ZZ5setupE3__c_4>:
     4d4:	45 45 50 52 4f 4d 20 76 61 6c 75 65 73 3a 00        EEPROM values:.

000004e3 <_ZZ5setupE3__c_3>:
     4e3:	45 45 50 52 4f 4d 20 66 69 72 73 74 20 73 74 61     EEPROM first sta
     4f3:	72 74 20 77 72 69 74 65 64 21 00                    rt writed!.

000004fe <_ZZ5setupE3__c_2>:
     4fe:	42 75 74 74 6f 6e 20 32 20 69 6e 69 74 65 64 21     Button 2 inited!
	...

0000050f <_ZZ5setupE3__c_1>:
     50f:	42 75 74 74 6f 6e 20 31 20 69 6e 69 74 65 64 21     Button 1 inited!
	...

00000520 <_ZZ5setupE3__c_0>:
     520:	4c 43 44 20 69 6e 69 74 65 64 21 00                 LCD inited!.

0000052c <_ZZ5setupE3__c>:
     52c:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 2e 2e     Initialization..
     53c:	2e 00                                               ..

0000053e <digital_pin_to_timer_PGM>:
     53e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     54e:	00 00 00 00                                         ....

00000552 <digital_pin_to_bit_mask_PGM>:
     552:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     562:	04 08 10 20                                         ... 

00000566 <digital_pin_to_port_PGM>:
     566:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     576:	03 03 03 03                                         ....

0000057a <port_to_input_PGM>:
     57a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000584 <port_to_output_PGM>:
     584:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000058e <port_to_mode_PGM>:
     58e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000598 <__ctors_start>:
     598:	d8 13       	cpse	r29, r24
     59a:	9c 1a       	sub	r9, r28
     59c:	81 1e       	adc	r8, r17

0000059e <__ctors_end>:
     59e:	11 24       	eor	r1, r1
     5a0:	1f be       	out	0x3f, r1	; 63
     5a2:	cf ef       	ldi	r28, 0xFF	; 255
     5a4:	d8 e0       	ldi	r29, 0x08	; 8
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	cd bf       	out	0x3d, r28	; 61

000005aa <__do_copy_data>:
     5aa:	11 e0       	ldi	r17, 0x01	; 1
     5ac:	a0 e0       	ldi	r26, 0x00	; 0
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	e2 e5       	ldi	r30, 0x52	; 82
     5b2:	f6 e4       	ldi	r31, 0x46	; 70
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__do_copy_data+0x10>
     5b6:	05 90       	lpm	r0, Z+
     5b8:	0d 92       	st	X+, r0
     5ba:	a0 3d       	cpi	r26, 0xD0	; 208
     5bc:	b1 07       	cpc	r27, r17
     5be:	d9 f7       	brne	.-10     	; 0x5b6 <__do_copy_data+0xc>

000005c0 <__do_clear_bss>:
     5c0:	23 e0       	ldi	r18, 0x03	; 3
     5c2:	a0 ed       	ldi	r26, 0xD0	; 208
     5c4:	b1 e0       	ldi	r27, 0x01	; 1
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <.do_clear_bss_start>

000005c8 <.do_clear_bss_loop>:
     5c8:	1d 92       	st	X+, r1

000005ca <.do_clear_bss_start>:
     5ca:	af 3c       	cpi	r26, 0xCF	; 207
     5cc:	b2 07       	cpc	r27, r18
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <.do_clear_bss_loop>

000005d0 <__do_global_ctors>:
     5d0:	12 e0       	ldi	r17, 0x02	; 2
     5d2:	cf ec       	ldi	r28, 0xCF	; 207
     5d4:	d2 e0       	ldi	r29, 0x02	; 2
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__do_global_ctors+0x10>
     5d8:	21 97       	sbiw	r28, 0x01	; 1
     5da:	fe 01       	movw	r30, r28
     5dc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <__tablejump2__>
     5e0:	cc 3c       	cpi	r28, 0xCC	; 204
     5e2:	d1 07       	cpc	r29, r17
     5e4:	c9 f7       	brne	.-14     	; 0x5d8 <__do_global_ctors+0x8>
     5e6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <main>
     5ea:	0c 94 27 23 	jmp	0x464e	; 0x464e <_exit>

000005ee <__bad_interrupt>:
     5ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005f2 <_Z18checkIsReadyToWorkv>:
}

/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	c1 ef       	ldi	r28, 0xF1	; 241
     5f8:	d1 e0       	ldi	r29, 0x01	; 1
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
     5fa:	69 91       	ld	r22, Y+
     5fc:	79 91       	ld	r23, Y+
     5fe:	89 91       	ld	r24, Y+
     600:	99 91       	ld	r25, Y+
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	a9 01       	movw	r20, r18
     608:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
     60c:	88 23       	and	r24, r24
     60e:	e1 f0       	breq	.+56     	; 0x648 <_Z18checkIsReadyToWorkv+0x56>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	a9 01       	movw	r20, r18
     616:	6f 89       	ldd	r22, Y+23	; 0x17
     618:	78 8d       	ldd	r23, Y+24	; 0x18
     61a:	89 8d       	ldd	r24, Y+25	; 0x19
     61c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     61e:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
     622:	88 23       	and	r24, r24
     624:	89 f0       	breq	.+34     	; 0x648 <_Z18checkIsReadyToWorkv+0x56>
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	a9 01       	movw	r20, r18
     62c:	6b 85       	ldd	r22, Y+11	; 0x0b
     62e:	7c 85       	ldd	r23, Y+12	; 0x0c
     630:	8d 85       	ldd	r24, Y+13	; 0x0d
     632:	9e 85       	ldd	r25, Y+14	; 0x0e
     634:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
     638:	88 23       	and	r24, r24
     63a:	31 f0       	breq	.+12     	; 0x648 <_Z18checkIsReadyToWorkv+0x56>
/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	cd 3f       	cpi	r28, 0xFD	; 253
     640:	d8 07       	cpc	r29, r24
     642:	d9 f6       	brne	.-74     	; 0x5fa <_Z18checkIsReadyToWorkv+0x8>

/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
	bool isReadyToWork = true;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	01 c0       	rjmp	.+2      	; 0x64a <_Z18checkIsReadyToWorkv+0x58>
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
			isReadyToWork = false;
     648:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
		
	settings.isSetupMode = false;
     64a:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <settings+0x12>
	if (isReadyToWork) {
     64e:	88 23       	and	r24, r24
     650:	31 f0       	breq	.+12     	; 0x65e <_Z18checkIsReadyToWorkv+0x6c>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
     652:	8e e1       	ldi	r24, 0x1E	; 30
     654:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <modeWork>
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
	}
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret
		
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
     65e:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <modeWork>
		Serial.println(F("Need setup params"));
     662:	63 ed       	ldi	r22, 0xD3	; 211
     664:	73 e0       	ldi	r23, 0x03	; 3
     666:	89 e2       	ldi	r24, 0x29	; 41
     668:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
     66e:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>

00000672 <_Z11initAvgVarsv>:
}

/*
	Обнуление переменных - средние значения характеристик и сбрасываем счетчик измерений
*/
void initAvgVars() {
     672:	e3 e6       	ldi	r30, 0x63	; 99
     674:	f1 e0       	ldi	r31, 0x01	; 1
	for (byte i = 0; i < 3; i++) {
		adsChars.sumVoltage[i] = 0;
     676:	11 92       	st	Z+, r1
     678:	11 92       	st	Z+, r1
     67a:	11 92       	st	Z+, r1
     67c:	11 92       	st	Z+, r1
		adsChars.sumMeasuredAmperage[i] = 0;
     67e:	10 86       	std	Z+8, r1	; 0x08
     680:	11 86       	std	Z+9, r1	; 0x09
     682:	12 86       	std	Z+10, r1	; 0x0a
     684:	13 86       	std	Z+11, r1	; 0x0b

/*
	Обнуление переменных - средние значения характеристик и сбрасываем счетчик измерений
*/
void initAvgVars() {
	for (byte i = 0; i < 3; i++) {
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	ef 36       	cpi	r30, 0x6F	; 111
     68a:	f8 07       	cpc	r31, r24
     68c:	a1 f7       	brne	.-24     	; 0x676 <_Z11initAvgVarsv+0x4>
		adsChars.sumVoltage[i] = 0;
		adsChars.sumMeasuredAmperage[i] = 0;
	}
	adsChars.currentMeasurement = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <adsChars+0x3d>
     694:	08 95       	ret

00000696 <_Z12button1Clickv>:
}

/*
	Обработчика короткого клика первой клавиши
*/
void button1Click() {
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
	// Если мы в настройках сопротивления то ничего не делать
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
     69e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <modeWork>
     6a2:	8a 30       	cpi	r24, 0x0A	; 10
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <_Z12button1Clickv+0x12>
     6a6:	7e c0       	rjmp	.+252    	; 0x7a4 <_Z12button1Clickv+0x10e>
		return;
	}
	// Если мы в любых других настройках
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	98 0f       	add	r25, r24
     6ac:	9a 30       	cpi	r25, 0x0A	; 10
     6ae:	08 f0       	brcs	.+2      	; 0x6b2 <_Z12button1Clickv+0x1c>
     6b0:	53 c0       	rjmp	.+166    	; 0x758 <_Z12button1Clickv+0xc2>
		lcdUpdateScreen = true;
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	01 f5       	brne	.+64     	; 0x6fc <_Z12button1Clickv+0x66>
			// Режим выбора подключения обмотки - изменяем его
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR;
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	a9 01       	movw	r20, r18
     6c2:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <setDigit>
     6c6:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <setDigit+0x1>
     6ca:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <setDigit+0x2>
     6ce:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <setDigit+0x3>
     6d2:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
     6d6:	88 23       	and	r24, r24
     6d8:	21 f0       	breq	.+8      	; 0x6e2 <_Z12button1Clickv+0x4c>
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	dc 01       	movw	r26, r24
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <_Z12button1Clickv+0x54>
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	a0 e8       	ldi	r26, 0x80	; 128
     6e8:	bf e3       	ldi	r27, 0x3F	; 63
     6ea:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <setDigit>
     6ee:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <setDigit+0x1>
     6f2:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <setDigit+0x2>
     6f6:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <setDigit+0x3>
     6fa:	54 c0       	rjmp	.+168    	; 0x7a4 <_Z12button1Clickv+0x10e>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в большую сторону
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			// Любой другой режим увеличиваем значение на величину curMultiplier
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     6fc:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <setDigit+0x4>
     700:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <setDigit+0x5>
     704:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <setDigit+0x6>
     708:	50 91 ea 01 	lds	r21, 0x01EA	; 0x8001ea <setDigit+0x7>
     70c:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <setDigit>
     710:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <setDigit+0x1>
     714:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <setDigit+0x2>
     718:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <setDigit+0x3>
     71c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
     720:	6b 01       	movw	r12, r22
     722:	7c 01       	movw	r14, r24
			if (setDigit.value >= 1000) {
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	4a e7       	ldi	r20, 0x7A	; 122
     72a:	54 e4       	ldi	r21, 0x44	; 68
     72c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     730:	87 ff       	sbrs	r24, 7
     732:	09 c0       	rjmp	.+18     	; 0x746 <_Z12button1Clickv+0xb0>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в большую сторону
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			// Любой другой режим увеличиваем значение на величину curMultiplier
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     734:	c0 92 e3 01 	sts	0x01E3, r12	; 0x8001e3 <setDigit>
     738:	d0 92 e4 01 	sts	0x01E4, r13	; 0x8001e4 <setDigit+0x1>
     73c:	e0 92 e5 01 	sts	0x01E5, r14	; 0x8001e5 <setDigit+0x2>
     740:	f0 92 e6 01 	sts	0x01E6, r15	; 0x8001e6 <setDigit+0x3>
     744:	2f c0       	rjmp	.+94     	; 0x7a4 <_Z12button1Clickv+0x10e>
			if (setDigit.value >= 1000) {
				setDigit.value = 0;
     746:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <setDigit>
     74a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <setDigit+0x1>
     74e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <setDigit+0x2>
     752:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <setDigit+0x3>
     756:	26 c0       	rjmp	.+76     	; 0x7a4 <_Z12button1Clickv+0x10e>
		}
		return;	
	}
	
	// В режиме отображения данных листаем вперед меню
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
     758:	93 ef       	ldi	r25, 0xF3	; 243
     75a:	98 0f       	add	r25, r24
     75c:	99 30       	cpi	r25, 0x09	; 9
     75e:	40 f4       	brcc	.+16     	; 0x770 <_Z12button1Clickv+0xda>
		modeWork.current = modeWork.current == MW_SHOWING_STOP? MW_SHOWING_START: modeWork.current + 1;
     760:	85 31       	cpi	r24, 0x15	; 21
     762:	11 f0       	breq	.+4      	; 0x768 <_Z12button1Clickv+0xd2>
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	01 c0       	rjmp	.+2      	; 0x76a <_Z12button1Clickv+0xd4>
     768:	8d e0       	ldi	r24, 0x0D	; 13
     76a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <modeWork>
		return;
     76e:	1a c0       	rjmp	.+52     	; 0x7a4 <_Z12button1Clickv+0x10e>
	}
	
	// Если вопрос о начале измерений, то клик его подтверждает
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
     770:	8e 31       	cpi	r24, 0x1E	; 30
     772:	c1 f4       	brne	.+48     	; 0x7a4 <_Z12button1Clickv+0x10e>
		modeWork.current = MW_SHOWING_START;
     774:	8d e0       	ldi	r24, 0x0D	; 13
     776:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <modeWork>
		settings.isReadyToWork = MM_WORK;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <settings>
		icError.hasIC = false;
     780:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_start+0x12>
		digitalWrite(RELAY, LOW);
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	81 e1       	ldi	r24, 0x11	; 17
     788:	0e 94 65 22 	call	0x44ca	; 0x44ca <digitalWrite>
		
		Serial.println(F("**Measurement Started!"));
     78c:	65 e6       	ldi	r22, 0x65	; 101
     78e:	71 e0       	ldi	r23, 0x01	; 1
     790:	89 e2       	ldi	r24, 0x29	; 41
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
		initAvgVars();
		return;
	}
}
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	df 90       	pop	r13
     79e:	cf 90       	pop	r12
		settings.isReadyToWork = MM_WORK;
		icError.hasIC = false;
		digitalWrite(RELAY, LOW);
		
		Serial.println(F("**Measurement Started!"));
		initAvgVars();
     7a0:	0c 94 39 03 	jmp	0x672	; 0x672 <_Z11initAvgVarsv>
		return;
	}
}
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	cf 90       	pop	r12
     7ac:	08 95       	ret

000007ae <_Z19getICLevelByWindingh>:
/*
	Получения степени отклонения силы тока идеального от измеренного по обмотке
	_amperage - измеренное значение тока
	_num - номер обмотки
*/
float getICLevelByWinding(byte _num) {
     7ae:	8f 92       	push	r8
     7b0:	9f 92       	push	r9
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
	if (adsChars.perfectAmperage[_num] >= adsChars.measuredAmperage[_num]) {
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	fc 01       	movw	r30, r24
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	e9 5a       	subi	r30, 0xA9	; 169
     7cc:	fe 4f       	sbci	r31, 0xFE	; 254
     7ce:	80 80       	ld	r8, Z
     7d0:	91 80       	ldd	r9, Z+1	; 0x01
     7d2:	a2 80       	ldd	r10, Z+2	; 0x02
     7d4:	b3 80       	ldd	r11, Z+3	; 0x03
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	fc 01       	movw	r30, r24
     7e0:	e5 5b       	subi	r30, 0xB5	; 181
     7e2:	fe 4f       	sbci	r31, 0xFE	; 254
     7e4:	c0 80       	ld	r12, Z
     7e6:	d1 80       	ldd	r13, Z+1	; 0x01
     7e8:	e2 80       	ldd	r14, Z+2	; 0x02
     7ea:	f3 80       	ldd	r15, Z+3	; 0x03
     7ec:	a7 01       	movw	r20, r14
     7ee:	96 01       	movw	r18, r12
     7f0:	c5 01       	movw	r24, r10
     7f2:	b4 01       	movw	r22, r8
     7f4:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     7f8:	87 ff       	sbrs	r24, 7
     7fa:	34 c0       	rjmp	.+104    	; 0x864 <_Z19getICLevelByWindingh+0xb6>
		return 0;
	}
	return abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]) * 100.0 / ( adsChars.perfectAmperage[_num] + icError.criticalSingle);
     7fc:	a5 01       	movw	r20, r10
     7fe:	94 01       	movw	r18, r8
     800:	c7 01       	movw	r24, r14
     802:	b6 01       	movw	r22, r12
     804:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
     808:	6b 01       	movw	r12, r22
     80a:	7c 01       	movw	r14, r24
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	a9 01       	movw	r20, r18
     812:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     816:	18 16       	cp	r1, r24
     818:	3c f4       	brge	.+14     	; 0x828 <_Z19getICLevelByWindingh+0x7a>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	48 ec       	ldi	r20, 0xC8	; 200
     820:	52 e4       	ldi	r21, 0x42	; 66
     822:	c7 01       	movw	r24, r14
     824:	b6 01       	movw	r22, r12
     826:	07 c0       	rjmp	.+14     	; 0x836 <_Z19getICLevelByWindingh+0x88>
     828:	c7 01       	movw	r24, r14
     82a:	b6 01       	movw	r22, r12
     82c:	90 58       	subi	r25, 0x80	; 128
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	48 ec       	ldi	r20, 0xC8	; 200
     834:	52 e4       	ldi	r21, 0x42	; 66
     836:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
     83a:	6b 01       	movw	r12, r22
     83c:	7c 01       	movw	r14, r24
     83e:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <__data_start+0x17>
     842:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <__data_start+0x18>
     846:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <__data_start+0x19>
     84a:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <__data_start+0x1a>
     84e:	c5 01       	movw	r24, r10
     850:	b4 01       	movw	r22, r8
     852:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	c7 01       	movw	r24, r14
     85c:	b6 01       	movw	r22, r12
     85e:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
     862:	03 c0       	rjmp	.+6      	; 0x86a <_Z19getICLevelByWindingh+0xbc>
	_amperage - измеренное значение тока
	_num - номер обмотки
*/
float getICLevelByWinding(byte _num) {
	if (adsChars.perfectAmperage[_num] >= adsChars.measuredAmperage[_num]) {
		return 0;
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	cb 01       	movw	r24, r22
	}
	return abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]) * 100.0 / ( adsChars.perfectAmperage[_num] + icError.criticalSingle);
}
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	bf 90       	pop	r11
     874:	af 90       	pop	r10
     876:	9f 90       	pop	r9
     878:	8f 90       	pop	r8
     87a:	08 95       	ret

0000087c <_Z19isSingleErrorExistsffh>:
 * Ошибка проверяется только при положительных разностях
 * _amperage - массив измеренных токов
 * _voltage - массив измеренных напряжений
 * index - индекс
*/
bool isSingleErrorExists(float _amperage, float _voltage, byte index) {
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	6b 01       	movw	r12, r22
     888:	7c 01       	movw	r14, r24
     88a:	ca 01       	movw	r24, r20
     88c:	b9 01       	movw	r22, r18
	// высчитываем идеальный ток и отнимаем измеренный
	float divAmperage = _amperage - (_voltage / settings.impedance[index]);
     88e:	24 e0       	ldi	r18, 0x04	; 4
     890:	02 9f       	mul	r16, r18
     892:	f0 01       	movw	r30, r0
     894:	11 24       	eor	r1, r1
     896:	e5 51       	subi	r30, 0x15	; 21
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	26 81       	ldd	r18, Z+6	; 0x06
     89c:	37 81       	ldd	r19, Z+7	; 0x07
     89e:	40 85       	ldd	r20, Z+8	; 0x08
     8a0:	51 85       	ldd	r21, Z+9	; 0x09
     8a2:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	c7 01       	movw	r24, r14
     8ac:	b6 01       	movw	r22, r12
     8ae:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
     8b2:	6b 01       	movw	r12, r22
     8b4:	7c 01       	movw	r14, r24
	if (divAmperage <= 0) {
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	a9 01       	movw	r20, r18
     8bc:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
     8c0:	18 16       	cp	r1, r24
     8c2:	74 f4       	brge	.+28     	; 0x8e0 <_Z19isSingleErrorExistsffh+0x64>
		return false;
	}
	return divAmperage >= icError.criticalSingle;
     8c4:	01 e0       	ldi	r16, 0x01	; 1
     8c6:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <__data_start+0x17>
     8ca:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <__data_start+0x18>
     8ce:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <__data_start+0x19>
     8d2:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <__data_start+0x1a>
     8d6:	c7 01       	movw	r24, r14
     8d8:	b6 01       	movw	r22, r12
     8da:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     8de:	87 fd       	sbrc	r24, 7
*/
bool isSingleErrorExists(float _amperage, float _voltage, byte index) {
	// высчитываем идеальный ток и отнимаем измеренный
	float divAmperage = _amperage - (_voltage / settings.impedance[index]);
	if (divAmperage <= 0) {
		return false;
     8e0:	00 e0       	ldi	r16, 0x00	; 0
	}
	return divAmperage >= icError.criticalSingle;
}
     8e2:	80 2f       	mov	r24, r16
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	08 95       	ret

000008f0 <_Z12getAdsParamsv>:
}

/**
 * Получение параметров с АЦП
 */
void getAdsParams() {
     8f0:	2f 92       	push	r2
     8f2:	3f 92       	push	r3
     8f4:	4f 92       	push	r4
     8f6:	5f 92       	push	r5
     8f8:	6f 92       	push	r6
     8fa:	7f 92       	push	r7
     8fc:	8f 92       	push	r8
     8fe:	9f 92       	push	r9
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	a6 97       	sbiw	r28, 0x26	; 38
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
	// Временные данные по напряжению, току и иделаьному току
	float measuredVoltage[3] = {0, 0, 0};
     924:	1d 86       	std	Y+13, r1	; 0x0d
     926:	1e 86       	std	Y+14, r1	; 0x0e
     928:	1f 86       	std	Y+15, r1	; 0x0f
     92a:	18 8a       	std	Y+16, r1	; 0x10
     92c:	19 8a       	std	Y+17, r1	; 0x11
     92e:	1a 8a       	std	Y+18, r1	; 0x12
     930:	1b 8a       	std	Y+19, r1	; 0x13
     932:	1c 8a       	std	Y+20, r1	; 0x14
     934:	1d 8a       	std	Y+21, r1	; 0x15
     936:	1e 8a       	std	Y+22, r1	; 0x16
     938:	1f 8a       	std	Y+23, r1	; 0x17
     93a:	18 8e       	std	Y+24, r1	; 0x18
	float measuredAmperage[3] = {0, 0, 0};
     93c:	19 82       	std	Y+1, r1	; 0x01
     93e:	1a 82       	std	Y+2, r1	; 0x02
     940:	1b 82       	std	Y+3, r1	; 0x03
     942:	1c 82       	std	Y+4, r1	; 0x04
     944:	1d 82       	std	Y+5, r1	; 0x05
     946:	1e 82       	std	Y+6, r1	; 0x06
     948:	1f 82       	std	Y+7, r1	; 0x07
     94a:	18 86       	std	Y+8, r1	; 0x08
     94c:	19 86       	std	Y+9, r1	; 0x09
     94e:	1a 86       	std	Y+10, r1	; 0x0a
     950:	1b 86       	std	Y+11, r1	; 0x0b
     952:	1c 86       	std	Y+12, r1	; 0x0c
     954:	1e 01       	movw	r2, r28
     956:	2d e0       	ldi	r18, 0x0D	; 13
     958:	22 0e       	add	r2, r18
     95a:	31 1c       	adc	r3, r1
     95c:	ce 01       	movw	r24, r28
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	6c 01       	movw	r12, r24
     962:	7c 01       	movw	r14, r24
     964:	51 01       	movw	r10, r2
	float perfectAmperage[3] = {0, 0, 0};
		
	// получение данных с ацп для кжадой обмотки
	for (byte i = 0; i < 3; i++) {
     966:	10 e0       	ldi	r17, 0x00	; 0
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
     968:	61 2f       	mov	r22, r17
     96a:	80 e6       	ldi	r24, 0x60	; 96
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     972:	bc 01       	movw	r22, r24
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__floatunsisf>
     97c:	d5 01       	movw	r26, r10
     97e:	6d 93       	st	X+, r22
     980:	7d 93       	st	X+, r23
     982:	8d 93       	st	X+, r24
     984:	9d 93       	st	X+, r25
     986:	5d 01       	movw	r10, r26
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
     988:	61 2f       	mov	r22, r17
     98a:	8b e5       	ldi	r24, 0x5B	; 91
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     992:	bc 01       	movw	r22, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__floatunsisf>
     99c:	f7 01       	movw	r30, r14
     99e:	61 93       	st	Z+, r22
     9a0:	71 93       	st	Z+, r23
     9a2:	81 93       	st	Z+, r24
     9a4:	91 93       	st	Z+, r25
     9a6:	7f 01       	movw	r14, r30
	float measuredVoltage[3] = {0, 0, 0};
	float measuredAmperage[3] = {0, 0, 0};
	float perfectAmperage[3] = {0, 0, 0};
		
	// получение данных с ацп для кжадой обмотки
	for (byte i = 0; i < 3; i++) {
     9a8:	1f 5f       	subi	r17, 0xFF	; 255
     9aa:	13 30       	cpi	r17, 0x03	; 3
     9ac:	e9 f6       	brne	.-70     	; 0x968 <__stack+0x69>
	for (byte i = 0; i < 3; i++) {
		// увеличиваем данные для усреднения
		adsChars.sumVoltage[i] += measuredVoltage[i];
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
		// вычисляем текущие реальные значения
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
     9ae:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ads+0x18>
     9b2:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <ads+0x19>
     9b6:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <ads+0x1a>
     9ba:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <ads+0x1b>
     9be:	8f 8f       	std	Y+31, r24	; 0x1f
     9c0:	98 a3       	std	Y+32, r25	; 0x20
     9c2:	a9 a3       	std	Y+33, r26	; 0x21
     9c4:	ba a3       	std	Y+34, r27	; 0x22
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
     9c6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ads+0x1c>
     9ca:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <ads+0x1d>
     9ce:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <ads+0x1e>
     9d2:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <ads+0x1f>
     9d6:	8b a3       	std	Y+35, r24	; 0x23
     9d8:	9c a3       	std	Y+36, r25	; 0x24
     9da:	ad a3       	std	Y+37, r26	; 0x25
     9dc:	be a3       	std	Y+38, r27	; 0x26
     9de:	8f e3       	ldi	r24, 0x3F	; 63
     9e0:	e8 2e       	mov	r14, r24
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	f8 2e       	mov	r15, r24
     9e6:	ab ee       	ldi	r26, 0xEB	; 235
     9e8:	b1 e0       	ldi	r27, 0x01	; 1
     9ea:	ba 8f       	std	Y+26, r27	; 0x1a
     9ec:	a9 8f       	std	Y+25, r26	; 0x19
     9ee:	e0 e0       	ldi	r30, 0x00	; 0
     9f0:	f1 e0       	ldi	r31, 0x01	; 1
     9f2:	fc 8f       	std	Y+28, r31	; 0x1c
     9f4:	eb 8f       	std	Y+27, r30	; 0x1b
     9f6:	3e 8e       	std	Y+30, r3	; 0x1e
     9f8:	2d 8e       	std	Y+29, r2	; 0x1d
     9fa:	10 e0       	ldi	r17, 0x00	; 0
	}

	
	for (byte i = 0; i < 3; i++) {
		// увеличиваем данные для усреднения
		adsChars.sumVoltage[i] += measuredVoltage[i];
     9fc:	ad 8d       	ldd	r26, Y+29	; 0x1d
     9fe:	be 8d       	ldd	r27, Y+30	; 0x1e
     a00:	4d 90       	ld	r4, X+
     a02:	5d 90       	ld	r5, X+
     a04:	6d 90       	ld	r6, X+
     a06:	7d 90       	ld	r7, X+
     a08:	be 8f       	std	Y+30, r27	; 0x1e
     a0a:	ad 8f       	std	Y+29, r26	; 0x1d
     a0c:	a3 01       	movw	r20, r6
     a0e:	92 01       	movw	r18, r4
     a10:	f7 01       	movw	r30, r14
     a12:	64 a1       	ldd	r22, Z+36	; 0x24
     a14:	75 a1       	ldd	r23, Z+37	; 0x25
     a16:	86 a1       	ldd	r24, Z+38	; 0x26
     a18:	97 a1       	ldd	r25, Z+39	; 0x27
     a1a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
     a1e:	d7 01       	movw	r26, r14
     a20:	94 96       	adiw	r26, 0x24	; 36
     a22:	6d 93       	st	X+, r22
     a24:	7d 93       	st	X+, r23
     a26:	8d 93       	st	X+, r24
     a28:	9c 93       	st	X, r25
     a2a:	97 97       	sbiw	r26, 0x27	; 39
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
     a2c:	f6 01       	movw	r30, r12
     a2e:	80 80       	ld	r8, Z
     a30:	91 80       	ldd	r9, Z+1	; 0x01
     a32:	a2 80       	ldd	r10, Z+2	; 0x02
     a34:	b3 80       	ldd	r11, Z+3	; 0x03
     a36:	a5 01       	movw	r20, r10
     a38:	94 01       	movw	r18, r8
     a3a:	d0 96       	adiw	r26, 0x30	; 48
     a3c:	6d 91       	ld	r22, X+
     a3e:	7d 91       	ld	r23, X+
     a40:	8d 91       	ld	r24, X+
     a42:	9c 91       	ld	r25, X
     a44:	d3 97       	sbiw	r26, 0x33	; 51
     a46:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
     a4a:	d7 01       	movw	r26, r14
     a4c:	d0 96       	adiw	r26, 0x30	; 48
     a4e:	6d 93       	st	X+, r22
     a50:	7d 93       	st	X+, r23
     a52:	8d 93       	st	X+, r24
     a54:	9c 93       	st	X, r25
     a56:	d3 97       	sbiw	r26, 0x33	; 51
		// вычисляем текущие реальные значения
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
     a58:	e9 8d       	ldd	r30, Y+25	; 0x19
     a5a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a5c:	25 89       	ldd	r18, Z+21	; 0x15
     a5e:	36 89       	ldd	r19, Z+22	; 0x16
     a60:	47 89       	ldd	r20, Z+23	; 0x17
     a62:	50 8d       	ldd	r21, Z+24	; 0x18
     a64:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a66:	78 a1       	ldd	r23, Y+32	; 0x20
     a68:	89 a1       	ldd	r24, Y+33	; 0x21
     a6a:	9a a1       	ldd	r25, Y+34	; 0x22
     a6c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
     a70:	a3 01       	movw	r20, r6
     a72:	92 01       	movw	r18, r4
     a74:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
     a78:	2b 01       	movw	r4, r22
     a7a:	3c 01       	movw	r6, r24
     a7c:	d1 01       	movw	r26, r2
     a7e:	6d 93       	st	X+, r22
     a80:	7d 93       	st	X+, r23
     a82:	8d 93       	st	X+, r24
     a84:	9d 93       	st	X+, r25
     a86:	1d 01       	movw	r2, r26
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
     a88:	e9 8d       	ldd	r30, Y+25	; 0x19
     a8a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a8c:	21 a1       	ldd	r18, Z+33	; 0x21
     a8e:	32 a1       	ldd	r19, Z+34	; 0x22
     a90:	43 a1       	ldd	r20, Z+35	; 0x23
     a92:	54 a1       	ldd	r21, Z+36	; 0x24
     a94:	6b a1       	ldd	r22, Y+35	; 0x23
     a96:	7c a1       	ldd	r23, Y+36	; 0x24
     a98:	8d a1       	ldd	r24, Y+37	; 0x25
     a9a:	9e a1       	ldd	r25, Y+38	; 0x26
     a9c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
     aa0:	a5 01       	movw	r20, r10
     aa2:	94 01       	movw	r18, r8
     aa4:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
     aa8:	d6 01       	movw	r26, r12
     aaa:	6d 93       	st	X+, r22
     aac:	7d 93       	st	X+, r23
     aae:	8d 93       	st	X+, r24
     ab0:	9c 93       	st	X, r25
     ab2:	13 97       	sbiw	r26, 0x03	; 3
		
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
     ab4:	eb 8d       	ldd	r30, Y+27	; 0x1b
     ab6:	fc 8d       	ldd	r31, Y+28	; 0x1c
     ab8:	a4 84       	ldd	r10, Z+12	; 0x0c
     aba:	b5 84       	ldd	r11, Z+13	; 0x0d
     abc:	f8 ee       	ldi	r31, 0xE8	; 232
     abe:	af 16       	cp	r10, r31
     ac0:	f3 e0       	ldi	r31, 0x03	; 3
     ac2:	bf 06       	cpc	r11, r31
     ac4:	3c f4       	brge	.+14     	; 0xad4 <__stack+0x1d5>
     ac6:	01 2f       	mov	r16, r17
     ac8:	a3 01       	movw	r20, r6
     aca:	92 01       	movw	r18, r4
     acc:	0e 94 3e 04 	call	0x87c	; 0x87c <_Z19isSingleErrorExistsffh>
     ad0:	81 11       	cpse	r24, r1
     ad2:	2d c0       	rjmp	.+90     	; 0xb2e <__stack+0x22f>
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}

	
	for (byte i = 0; i < 3; i++) {
     ad4:	1f 5f       	subi	r17, 0xFF	; 255
     ad6:	24 e0       	ldi	r18, 0x04	; 4
     ad8:	e2 0e       	add	r14, r18
     ada:	f1 1c       	adc	r15, r1
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	c8 0e       	add	r12, r24
     ae0:	d1 1c       	adc	r13, r1
     ae2:	a9 8d       	ldd	r26, Y+25	; 0x19
     ae4:	ba 8d       	ldd	r27, Y+26	; 0x1a
     ae6:	14 96       	adiw	r26, 0x04	; 4
     ae8:	ba 8f       	std	Y+26, r27	; 0x1a
     aea:	a9 8f       	std	Y+25, r26	; 0x19
     aec:	eb 8d       	ldd	r30, Y+27	; 0x1b
     aee:	fc 8d       	ldd	r31, Y+28	; 0x1c
     af0:	32 96       	adiw	r30, 0x02	; 2
     af2:	fc 8f       	std	Y+28, r31	; 0x1c
     af4:	eb 8f       	std	Y+27, r30	; 0x1b
     af6:	13 30       	cpi	r17, 0x03	; 3
     af8:	09 f0       	breq	.+2      	; 0xafc <__stack+0x1fd>
     afa:	80 cf       	rjmp	.-256    	; 0x9fc <__stack+0xfd>
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
			icError.criticalLvlCount[i]++;
		}
	}
}
     afc:	a6 96       	adiw	r28, 0x26	; 38
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	bf 90       	pop	r11
     b1a:	af 90       	pop	r10
     b1c:	9f 90       	pop	r9
     b1e:	8f 90       	pop	r8
     b20:	7f 90       	pop	r7
     b22:	6f 90       	pop	r6
     b24:	5f 90       	pop	r5
     b26:	4f 90       	pop	r4
     b28:	3f 90       	pop	r3
     b2a:	2f 90       	pop	r2
     b2c:	08 95       	ret
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
		
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
			icError.criticalLvlCount[i]++;
     b2e:	ff ef       	ldi	r31, 0xFF	; 255
     b30:	af 1a       	sub	r10, r31
     b32:	bf 0a       	sbc	r11, r31
     b34:	ab 8d       	ldd	r26, Y+27	; 0x1b
     b36:	bc 8d       	ldd	r27, Y+28	; 0x1c
     b38:	1d 96       	adiw	r26, 0x0d	; 13
     b3a:	bc 92       	st	X, r11
     b3c:	ae 92       	st	-X, r10
     b3e:	1c 97       	sbiw	r26, 0x0c	; 12
     b40:	c9 cf       	rjmp	.-110    	; 0xad4 <__stack+0x1d5>

00000b42 <_Z17isFullErrorExistsPfS_>:
 * Проверка наличия отклоеннеия.
 * Ошибка проверяется только при положительных разностях
 * _amperage - массив измеренных токов
 * _voltage - массив измеренных напряжений
*/
bool isFullErrorExists(float* _amperage, float* _voltage) {
     b42:	4f 92       	push	r4
     b44:	5f 92       	push	r5
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	60 97       	sbiw	r28, 0x10	; 16
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	float divAmperage[3] = {0, 0, 0};
     b72:	19 82       	std	Y+1, r1	; 0x01
     b74:	1a 82       	std	Y+2, r1	; 0x02
     b76:	1b 82       	std	Y+3, r1	; 0x03
     b78:	1c 82       	std	Y+4, r1	; 0x04
     b7a:	1d 82       	std	Y+5, r1	; 0x05
     b7c:	1e 82       	std	Y+6, r1	; 0x06
     b7e:	1f 82       	std	Y+7, r1	; 0x07
     b80:	18 86       	std	Y+8, r1	; 0x08
     b82:	19 86       	std	Y+9, r1	; 0x09
     b84:	1a 86       	std	Y+10, r1	; 0x0a
     b86:	1b 86       	std	Y+11, r1	; 0x0b
     b88:	1c 86       	std	Y+12, r1	; 0x0c
     b8a:	7b 01       	movw	r14, r22
     b8c:	21 ef       	ldi	r18, 0xF1	; 241
     b8e:	82 2e       	mov	r8, r18
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	92 2e       	mov	r9, r18
     b94:	37 e5       	ldi	r19, 0x57	; 87
     b96:	a3 2e       	mov	r10, r19
     b98:	31 e0       	ldi	r19, 0x01	; 1
     b9a:	b3 2e       	mov	r11, r19
     b9c:	6c 01       	movw	r12, r24
     b9e:	8e 01       	movw	r16, r28
     ba0:	0f 5f       	subi	r16, 0xFF	; 255
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
     ba4:	3b 01       	movw	r6, r22
     ba6:	8c e0       	ldi	r24, 0x0C	; 12
     ba8:	68 0e       	add	r6, r24
     baa:	71 1c       	adc	r7, r1
	byte sign = 100;
	
	// получаем разницу идеального от измеренного тока и изменяем значения счетчика знака
	for(byte i = 0; i < 3; i++) {
		// на ходу вычисляем значения идеального тока
		adsChars.perfectAmperage[i] = _voltage[i] / settings.impedance[i];
     bac:	d7 01       	movw	r26, r14
     bae:	6d 91       	ld	r22, X+
     bb0:	7d 91       	ld	r23, X+
     bb2:	8d 91       	ld	r24, X+
     bb4:	9d 91       	ld	r25, X+
     bb6:	7d 01       	movw	r14, r26
     bb8:	f4 01       	movw	r30, r8
     bba:	21 91       	ld	r18, Z+
     bbc:	31 91       	ld	r19, Z+
     bbe:	41 91       	ld	r20, Z+
     bc0:	51 91       	ld	r21, Z+
     bc2:	4f 01       	movw	r8, r30
     bc4:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
     bc8:	d5 01       	movw	r26, r10
     bca:	6d 93       	st	X+, r22
     bcc:	7d 93       	st	X+, r23
     bce:	8d 93       	st	X+, r24
     bd0:	9d 93       	st	X+, r25
     bd2:	5d 01       	movw	r10, r26
		divAmperage[i] = adsChars.perfectAmperage[i] - _amperage[i];
     bd4:	f6 01       	movw	r30, r12
     bd6:	21 91       	ld	r18, Z+
     bd8:	31 91       	ld	r19, Z+
     bda:	41 91       	ld	r20, Z+
     bdc:	51 91       	ld	r21, Z+
     bde:	6f 01       	movw	r12, r30
     be0:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
     be4:	d8 01       	movw	r26, r16
     be6:	6d 93       	st	X+, r22
     be8:	7d 93       	st	X+, r23
     bea:	8d 93       	st	X+, r24
     bec:	9d 93       	st	X+, r25
     bee:	8d 01       	movw	r16, r26
	float divAmperage[3] = {0, 0, 0};
	// 100 - магическое число и ничего не значит, прсото для удобства 
	byte sign = 100;
	
	// получаем разницу идеального от измеренного тока и изменяем значения счетчика знака
	for(byte i = 0; i < 3; i++) {
     bf0:	e6 14       	cp	r14, r6
     bf2:	f7 04       	cpc	r15, r7
     bf4:	d9 f6       	brne	.-74     	; 0xbac <_Z17isFullErrorExistsPfS_+0x6a>
	// если знак = -97, значит все значения измеренных токов меньше идеальных и замыкания нет
	if (sign == -97) {
		return false;
	}
	// По формуле вычисляем глоабльную ошибку по токам |AB - BC| + |BC - AC| + |AC - AB| 
	float _error = abs(divAmperage[0] - divAmperage[1]) + abs(divAmperage[1] - divAmperage[2]) + abs(divAmperage[2] - divAmperage[0]);
     bf6:	49 80       	ldd	r4, Y+1	; 0x01
     bf8:	5a 80       	ldd	r5, Y+2	; 0x02
     bfa:	6b 80       	ldd	r6, Y+3	; 0x03
     bfc:	7c 80       	ldd	r7, Y+4	; 0x04
     bfe:	8d 80       	ldd	r8, Y+5	; 0x05
     c00:	9e 80       	ldd	r9, Y+6	; 0x06
     c02:	af 80       	ldd	r10, Y+7	; 0x07
     c04:	b8 84       	ldd	r11, Y+8	; 0x08
     c06:	a5 01       	movw	r20, r10
     c08:	94 01       	movw	r18, r8
     c0a:	c3 01       	movw	r24, r6
     c0c:	b2 01       	movw	r22, r4
     c0e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
     c12:	6b 01       	movw	r12, r22
     c14:	7c 01       	movw	r14, r24
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	a9 01       	movw	r20, r18
     c1c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     c20:	18 16       	cp	r1, r24
     c22:	24 f0       	brlt	.+8      	; 0xc2c <_Z17isFullErrorExistsPfS_+0xea>
     c24:	f7 fa       	bst	r15, 7
     c26:	f0 94       	com	r15
     c28:	f7 f8       	bld	r15, 7
     c2a:	f0 94       	com	r15
     c2c:	89 85       	ldd	r24, Y+9	; 0x09
     c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c30:	ab 85       	ldd	r26, Y+11	; 0x0b
     c32:	bc 85       	ldd	r27, Y+12	; 0x0c
     c34:	8d 87       	std	Y+13, r24	; 0x0d
     c36:	9e 87       	std	Y+14, r25	; 0x0e
     c38:	af 87       	std	Y+15, r26	; 0x0f
     c3a:	b8 8b       	std	Y+16, r27	; 0x10
     c3c:	9c 01       	movw	r18, r24
     c3e:	ad 01       	movw	r20, r26
     c40:	c5 01       	movw	r24, r10
     c42:	b4 01       	movw	r22, r8
     c44:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
     c48:	4b 01       	movw	r8, r22
     c4a:	5c 01       	movw	r10, r24
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	a9 01       	movw	r20, r18
     c52:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     c56:	18 16       	cp	r1, r24
     c58:	24 f0       	brlt	.+8      	; 0xc62 <_Z17isFullErrorExistsPfS_+0x120>
     c5a:	b7 fa       	bst	r11, 7
     c5c:	b0 94       	com	r11
     c5e:	b7 f8       	bld	r11, 7
     c60:	b0 94       	com	r11
     c62:	a5 01       	movw	r20, r10
     c64:	94 01       	movw	r18, r8
     c66:	c7 01       	movw	r24, r14
     c68:	b6 01       	movw	r22, r12
     c6a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
     c6e:	6b 01       	movw	r12, r22
     c70:	7c 01       	movw	r14, r24
     c72:	a3 01       	movw	r20, r6
     c74:	92 01       	movw	r18, r4
     c76:	6d 85       	ldd	r22, Y+13	; 0x0d
     c78:	7e 85       	ldd	r23, Y+14	; 0x0e
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	98 89       	ldd	r25, Y+16	; 0x10
     c7e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
     c82:	4b 01       	movw	r8, r22
     c84:	5c 01       	movw	r10, r24
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	a9 01       	movw	r20, r18
     c8c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     c90:	18 16       	cp	r1, r24
     c92:	24 f0       	brlt	.+8      	; 0xc9c <_Z17isFullErrorExistsPfS_+0x15a>
     c94:	b7 fa       	bst	r11, 7
     c96:	b0 94       	com	r11
     c98:	b7 f8       	bld	r11, 7
     c9a:	b0 94       	com	r11

	// Крит общей ошибки отклонение в 1
	return _error >= icError.criticalFull;
     c9c:	a7 01       	movw	r20, r14
     c9e:	96 01       	movw	r18, r12
     ca0:	c5 01       	movw	r24, r10
     ca2:	b4 01       	movw	r22, r8
     ca4:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
     ca8:	11 e0       	ldi	r17, 0x01	; 1
     caa:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_start+0x1b>
     cae:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <__data_start+0x1c>
     cb2:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <__data_start+0x1d>
     cb6:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <__data_start+0x1e>
     cba:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     cbe:	87 fd       	sbrc	r24, 7
     cc0:	10 e0       	ldi	r17, 0x00	; 0
}
     cc2:	81 2f       	mov	r24, r17
     cc4:	60 96       	adiw	r28, 0x10	; 16
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	7f 90       	pop	r7
     cea:	6f 90       	pop	r6
     cec:	5f 90       	pop	r5
     cee:	4f 90       	pop	r4
     cf0:	08 95       	ret

00000cf2 <_Z27lcdPrinRoundedCurErrorLevelh>:

/*
	Отображение округленных значений ошибки в зависимости от обмотки 
	_num - номер обмотки
*/
void lcdPrinRoundedCurErrorLevel(byte _num) {
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
	if (icError.curLvl[_num] < 1000) {
     cfa:	24 e0       	ldi	r18, 0x04	; 4
     cfc:	82 9f       	mul	r24, r18
     cfe:	c0 01       	movw	r24, r0
     d00:	11 24       	eor	r1, r1
     d02:	fc 01       	movw	r30, r24
     d04:	e0 50       	subi	r30, 0x00	; 0
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	c0 80       	ld	r12, Z
     d0a:	d1 80       	ldd	r13, Z+1	; 0x01
     d0c:	e2 80       	ldd	r14, Z+2	; 0x02
     d0e:	f3 80       	ldd	r15, Z+3	; 0x03
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	4a e7       	ldi	r20, 0x7A	; 122
     d16:	54 e4       	ldi	r21, 0x44	; 68
     d18:	c7 01       	movw	r24, r14
     d1a:	b6 01       	movw	r22, r12
     d1c:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
     d20:	87 ff       	sbrs	r24, 7
     d22:	24 c0       	rjmp	.+72     	; 0xd6c <_Z27lcdPrinRoundedCurErrorLevelh+0x7a>
		lcd.print(round(icError.curLvl[_num]));
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	a9 01       	movw	r20, r18
     d2a:	c7 01       	movw	r24, r14
     d2c:	b6 01       	movw	r22, r12
     d2e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	87 fd       	sbrc	r24, 7
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <_Z27lcdPrinRoundedCurErrorLevelh+0x56>
     d3e:	c7 01       	movw	r24, r14
     d40:	b6 01       	movw	r22, r12
     d42:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <_Z27lcdPrinRoundedCurErrorLevelh+0x5e>
     d48:	c7 01       	movw	r24, r14
     d4a:	b6 01       	movw	r22, r12
     d4c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
     d50:	0e 94 84 1b 	call	0x3708	; 0x3708 <__fixsfsi>
     d54:	2a e0       	ldi	r18, 0x0A	; 10
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	ab 01       	movw	r20, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	87 ed       	ldi	r24, 0xD7	; 215
     d5e:	91 e0       	ldi	r25, 0x01	; 1
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	df 90       	pop	r13
     d66:	cf 90       	pop	r12
	Отображение округленных значений ошибки в зависимости от обмотки 
	_num - номер обмотки
*/
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
     d68:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <_ZN5Print5printEli>
	} else {
		lcd.print(999);
     d6c:	4a e0       	ldi	r20, 0x0A	; 10
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	67 ee       	ldi	r22, 0xE7	; 231
     d72:	73 e0       	ldi	r23, 0x03	; 3
     d74:	87 ed       	ldi	r24, 0xD7	; 215
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN5Print5printEii>
		lcd.print(F("+"));
     d7c:	6f e7       	ldi	r22, 0x7F	; 127
     d7e:	72 e0       	ldi	r23, 0x02	; 2
     d80:	87 ed       	ldi	r24, 0xD7	; 215
     d82:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
	} else {
		lcd.print(999);
		lcd.print(F("+"));
     d8c:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>

00000d90 <_Z19lcdPrintCriticalLvlh>:
/*
	Отображение счетчиков выхода за пределы допуска ошибки
	_num - номер обмотки
*/
void lcdPrintCriticalLvl(byte _num) {
	if (icError.criticalLvlCount[_num] < 1000) {
     d90:	e8 2f       	mov	r30, r24
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	e4 5f       	subi	r30, 0xF4	; 244
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
		lcd.print(icError.criticalLvlCount[_num]);
     da0:	4a e0       	ldi	r20, 0x0A	; 10
     da2:	50 e0       	ldi	r21, 0x00	; 0
/*
	Отображение счетчиков выхода за пределы допуска ошибки
	_num - номер обмотки
*/
void lcdPrintCriticalLvl(byte _num) {
	if (icError.criticalLvlCount[_num] < 1000) {
     da4:	68 3e       	cpi	r22, 0xE8	; 232
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	78 07       	cpc	r23, r24
     daa:	24 f4       	brge	.+8      	; 0xdb4 <_Z19lcdPrintCriticalLvlh+0x24>
		lcd.print(icError.criticalLvlCount[_num]);
     dac:	87 ed       	ldi	r24, 0xD7	; 215
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <_ZN5Print5printEii>
	} else {
		lcd.print(999);
     db4:	67 ee       	ldi	r22, 0xE7	; 231
     db6:	73 e0       	ldi	r23, 0x03	; 3
     db8:	87 ed       	ldi	r24, 0xD7	; 215
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN5Print5printEii>
		lcd.print(F("+"));
     dc0:	6d e7       	ldi	r22, 0x7D	; 125
     dc2:	72 e0       	ldi	r23, 0x02	; 2
     dc4:	87 ed       	ldi	r24, 0xD7	; 215
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>

00000dcc <_Z18showStaticAmperagev>:

/*
	Отображение дополнительной статики для режима отображения по току
*/
void showStaticAmperage() {
	lcd.setCursor(7, 0);
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	67 e0       	ldi	r22, 0x07	; 7
     dd0:	87 ed       	ldi	r24, 0xD7	; 215
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("P"));
     dd8:	67 eb       	ldi	r22, 0xB7	; 183
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	87 ed       	ldi	r24, 0xD7	; 215
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(7, 1);
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	67 e0       	ldi	r22, 0x07	; 7
     de8:	87 ed       	ldi	r24, 0xD7	; 215
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("M"));
     df0:	65 eb       	ldi	r22, 0xB5	; 181
     df2:	71 e0       	ldi	r23, 0x01	; 1
     df4:	87 ed       	ldi	r24, 0xD7	; 215
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>

00000dfc <_Z22showStaticWindingCharsv>:
/*
	Отображение статики по обмоткам
	MP значит measured|perfect
*/
void showStaticWindingChars() {
	lcd.setCursor(3, 0);
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	63 e0       	ldi	r22, 0x03	; 3
     e00:	87 ed       	ldi	r24, 0xD7	; 215
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("I="));
     e08:	6e ea       	ldi	r22, 0xAE	; 174
     e0a:	71 e0       	ldi	r23, 0x01	; 1
     e0c:	87 ed       	ldi	r24, 0xD7	; 215
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	87 ed       	ldi	r24, 0xD7	; 215
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("V="));
     e20:	6b ea       	ldi	r22, 0xAB	; 171
     e22:	71 e0       	ldi	r23, 0x01	; 1
     e24:	87 ed       	ldi	r24, 0xD7	; 215
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(8, 1);
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	68 e0       	ldi	r22, 0x08	; 8
     e30:	87 ed       	ldi	r24, 0xD7	; 215
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("E="));
     e38:	68 ea       	ldi	r22, 0xA8	; 168
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	87 ed       	ldi	r24, 0xD7	; 215
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>

00000e44 <_Z19displayStaticAsModev>:

/*
	Отображение статики в ависимости от режима отображения
*/
void displayStaticAsMode() {
	lcd.clear();
     e44:	87 ed       	ldi	r24, 0xD7	; 215
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN17LiquidCrystal_I2C5clearEv>
	switch(modeWork.current) {
     e4c:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <modeWork>
     e50:	8e 2f       	mov	r24, r30
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	8f 31       	cpi	r24, 0x1F	; 31
     e56:	91 05       	cpc	r25, r1
     e58:	08 f0       	brcs	.+2      	; 0xe5c <_Z19displayStaticAsModev+0x18>
     e5a:	ab c0       	rjmp	.+342    	; 0xfb2 <_Z19displayStaticAsModev+0x16e>
     e5c:	fc 01       	movw	r30, r24
     e5e:	ec 5c       	subi	r30, 0xCC	; 204
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcd.print(F("Connection type"));
     e66:	6d e6       	ldi	r22, 0x6D	; 109
     e68:	72 e0       	ldi	r23, 0x02	; 2
     e6a:	9f c0       	rjmp	.+318    	; 0xfaa <_Z19displayStaticAsModev+0x166>
		break;
		case MW_SETUP_GAIN_AMPERAGE:
			lcd.print(F("A gain maxV/step"));
     e6c:	6c e5       	ldi	r22, 0x5C	; 92
     e6e:	72 e0       	ldi	r23, 0x02	; 2
     e70:	9c c0       	rjmp	.+312    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			lcd.print(F("V gain maxV/step"));
     e72:	6b e4       	ldi	r22, 0x4B	; 75
     e74:	72 e0       	ldi	r23, 0x02	; 2
     e76:	99 c0       	rjmp	.+306    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			lcd.print(F("Vm AB"));
     e78:	65 e4       	ldi	r22, 0x45	; 69
     e7a:	72 e0       	ldi	r23, 0x02	; 2
     e7c:	96 c0       	rjmp	.+300    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			lcd.print(F("Vm BC"));
     e7e:	6f e3       	ldi	r22, 0x3F	; 63
     e80:	72 e0       	ldi	r23, 0x02	; 2
     e82:	93 c0       	rjmp	.+294    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			lcd.print(F("Vm AC"));
     e84:	69 e3       	ldi	r22, 0x39	; 57
     e86:	72 e0       	ldi	r23, 0x02	; 2
     e88:	90 c0       	rjmp	.+288    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			lcd.print(F("Am AB"));
     e8a:	63 e3       	ldi	r22, 0x33	; 51
     e8c:	72 e0       	ldi	r23, 0x02	; 2
     e8e:	8d c0       	rjmp	.+282    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			lcd.print(F("Am BC"));
     e90:	6d e2       	ldi	r22, 0x2D	; 45
     e92:	72 e0       	ldi	r23, 0x02	; 2
     e94:	8a c0       	rjmp	.+276    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcd.print(F("Am AC"));
     e96:	67 e2       	ldi	r22, 0x27	; 39
     e98:	72 e0       	ldi	r23, 0x02	; 2
     e9a:	87 c0       	rjmp	.+270    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcd.print(F("ECount"));
     e9c:	60 e2       	ldi	r22, 0x20	; 32
     e9e:	72 e0       	ldi	r23, 0x02	; 2
     ea0:	87 ed       	ldi	r24, 0xD7	; 215
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	68 e0       	ldi	r22, 0x08	; 8
     eac:	87 ed       	ldi	r24, 0xD7	; 215
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AB="));
     eb4:	6c e1       	ldi	r22, 0x1C	; 28
     eb6:	72 e0       	ldi	r23, 0x02	; 2
     eb8:	87 ed       	ldi	r24, 0xD7	; 215
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	87 ed       	ldi	r24, 0xD7	; 215
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("BC="));
     ecc:	68 e1       	ldi	r22, 0x18	; 24
     ece:	72 e0       	ldi	r23, 0x02	; 2
     ed0:	87 ed       	ldi	r24, 0xD7	; 215
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 1);
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	68 e0       	ldi	r22, 0x08	; 8
     edc:	87 ed       	ldi	r24, 0xD7	; 215
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AC="));
     ee4:	64 e1       	ldi	r22, 0x14	; 20
     ee6:	72 e0       	ldi	r23, 0x02	; 2
     ee8:	60 c0       	rjmp	.+192    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SHOW_ERRORS:
			lcd.print(F("I1="));
     eea:	60 e1       	ldi	r22, 0x10	; 16
     eec:	72 e0       	ldi	r23, 0x02	; 2
     eee:	87 ed       	ldi	r24, 0xD7	; 215
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	68 e0       	ldi	r22, 0x08	; 8
     efa:	87 ed       	ldi	r24, 0xD7	; 215
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I2="));
     f02:	6c e0       	ldi	r22, 0x0C	; 12
     f04:	72 e0       	ldi	r23, 0x02	; 2
     f06:	87 ed       	ldi	r24, 0xD7	; 215
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	87 ed       	ldi	r24, 0xD7	; 215
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I3="));
     f1a:	68 e0       	ldi	r22, 0x08	; 8
     f1c:	72 e0       	ldi	r23, 0x02	; 2
     f1e:	87 ed       	ldi	r24, 0xD7	; 215
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(14, 1);
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	6e e0       	ldi	r22, 0x0E	; 14
     f2a:	87 ed       	ldi	r24, 0xD7	; 215
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("e%"));
     f32:	65 e0       	ldi	r22, 0x05	; 5
     f34:	72 e0       	ldi	r23, 0x02	; 2
     f36:	39 c0       	rjmp	.+114    	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_SHOW_AMPERAGE_AB:
			lcd.print(F("AB D"));
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	72 e0       	ldi	r23, 0x02	; 2
     f3c:	05 c0       	rjmp	.+10     	; 0xf48 <_Z19displayStaticAsModev+0x104>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_BC:
			lcd.print(F("BC D"));
     f3e:	6b ef       	ldi	r22, 0xFB	; 251
     f40:	71 e0       	ldi	r23, 0x01	; 1
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <_Z19displayStaticAsModev+0x104>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_AC:
			lcd.print(F("AC D"));
     f44:	66 ef       	ldi	r22, 0xF6	; 246
     f46:	71 e0       	ldi	r23, 0x01	; 1
     f48:	87 ed       	ldi	r24, 0xD7	; 215
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticAmperage();
     f50:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <_Z18showStaticAmperagev>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			lcd.print(F("AB"));
     f54:	63 ef       	ldi	r22, 0xF3	; 243
     f56:	71 e0       	ldi	r23, 0x01	; 1
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <_Z19displayStaticAsModev+0x120>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			lcd.print(F("BC"));
     f5a:	60 ef       	ldi	r22, 0xF0	; 240
     f5c:	71 e0       	ldi	r23, 0x01	; 1
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <_Z19displayStaticAsModev+0x120>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			lcd.print(F("AC"));
     f60:	6d ee       	ldi	r22, 0xED	; 237
     f62:	71 e0       	ldi	r23, 0x01	; 1
     f64:	87 ed       	ldi	r24, 0xD7	; 215
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticWindingChars();
     f6c:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <_Z22showStaticWindingCharsv>
			break;
		case MW_CONTROLL_MEASUREMENT:
			lcd.print(F("Measurement"));
     f70:	61 ee       	ldi	r22, 0xE1	; 225
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	87 ed       	ldi	r24, 0xD7	; 215
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     f7c:	41 e0       	ldi	r20, 0x01	; 1
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	87 ed       	ldi	r24, 0xD7	; 215
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("B1=work; B2=stop"));
     f88:	60 ed       	ldi	r22, 0xD0	; 208
     f8a:	71 e0       	ldi	r23, 0x01	; 1
     f8c:	0e c0       	rjmp	.+28     	; 0xfaa <_Z19displayStaticAsModev+0x166>
			break;
		case MW_NEED_SETUP:
			lcd.print(F("Oooops!"));
     f8e:	68 ec       	ldi	r22, 0xC8	; 200
     f90:	71 e0       	ldi	r23, 0x01	; 1
     f92:	87 ed       	ldi	r24, 0xD7	; 215
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	87 ed       	ldi	r24, 0xD7	; 215
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("Setup required"));
     fa6:	69 eb       	ldi	r22, 0xB9	; 185
     fa8:	71 e0       	ldi	r23, 0x01	; 1
     faa:	87 ed       	ldi	r24, 0xD7	; 215
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
     fb2:	08 95       	ret

00000fb4 <_Z12lcdClearCellhhh>:
	Очистка определенного блока экрана с установкой на этом месте курсора
	col - номер колонки
	row - номер строки
	rowLength - количество ячеек для очистки в строке
*/
void lcdClearCell(byte col, byte row, byte rowLength) {                
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	d8 2f       	mov	r29, r24
     fbe:	16 2f       	mov	r17, r22
     fc0:	04 2f       	mov	r16, r20
	lcd.setCursor(col, row);                                        
     fc2:	46 2f       	mov	r20, r22
     fc4:	68 2f       	mov	r22, r24
     fc6:	87 ed       	ldi	r24, 0xD7	; 215
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
	for (byte i = 0; i < rowLength; i++) {                             
     fce:	c0 e0       	ldi	r28, 0x00	; 0
     fd0:	c0 17       	cp	r28, r16
     fd2:	41 f0       	breq	.+16     	; 0xfe4 <_Z12lcdClearCellhhh+0x30>
		lcd.print(F(" "));
     fd4:	66 ea       	ldi	r22, 0xA6	; 166
     fd6:	71 e0       	ldi	r23, 0x01	; 1
     fd8:	87 ed       	ldi	r24, 0xD7	; 215
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
	row - номер строки
	rowLength - количество ячеек для очистки в строке
*/
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
     fe0:	cf 5f       	subi	r28, 0xFF	; 255
     fe2:	f6 cf       	rjmp	.-20     	; 0xfd0 <_Z12lcdClearCellhhh+0x1c>
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     fe4:	41 2f       	mov	r20, r17
     fe6:	6d 2f       	mov	r22, r29
     fe8:	87 ed       	ldi	r24, 0xD7	; 215
     fea:	91 e0       	ldi	r25, 0x01	; 1
}
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     ff4:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>

00000ff8 <_Z12showGainInfov>:

/*
	Оторажаем возможные варианты усиления
*/
void showGainInfo() {
	lcdClearCell(0, 1, 16);
     ff8:	40 e1       	ldi	r20, 0x10	; 16
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
	switch((int)setDigit.value) {
    1002:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <setDigit>
    1006:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <setDigit+0x1>
    100a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <setDigit+0x2>
    100e:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <setDigit+0x3>
    1012:	0e 94 84 1b 	call	0x3708	; 0x3708 <__fixsfsi>
    1016:	62 30       	cpi	r22, 0x02	; 2
    1018:	71 05       	cpc	r23, r1
    101a:	b1 f0       	breq	.+44     	; 0x1048 <_Z12showGainInfov+0x50>
    101c:	3c f4       	brge	.+14     	; 0x102c <_Z12showGainInfov+0x34>
    101e:	61 15       	cp	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	61 f0       	breq	.+24     	; 0x103c <_Z12showGainInfov+0x44>
    1024:	61 30       	cpi	r22, 0x01	; 1
    1026:	71 05       	cpc	r23, r1
    1028:	61 f0       	breq	.+24     	; 0x1042 <_Z12showGainInfov+0x4a>
    102a:	08 95       	ret
    102c:	64 30       	cpi	r22, 0x04	; 4
    102e:	71 05       	cpc	r23, r1
    1030:	89 f0       	breq	.+34     	; 0x1054 <_Z12showGainInfov+0x5c>
    1032:	6c f0       	brlt	.+26     	; 0x104e <_Z12showGainInfov+0x56>
    1034:	65 30       	cpi	r22, 0x05	; 5
    1036:	71 05       	cpc	r23, r1
    1038:	81 f0       	breq	.+32     	; 0x105a <_Z12showGainInfov+0x62>
    103a:	08 95       	ret
		case 0:
			lcd.print(F("6.144 0.1875"));
    103c:	61 ef       	ldi	r22, 0xF1	; 241
    103e:	72 e0       	ldi	r23, 0x02	; 2
    1040:	0e c0       	rjmp	.+28     	; 0x105e <_Z12showGainInfov+0x66>
			break;
		case 1:
			lcd.print(F("4.096 0.125"));
    1042:	65 ee       	ldi	r22, 0xE5	; 229
    1044:	72 e0       	ldi	r23, 0x02	; 2
    1046:	0b c0       	rjmp	.+22     	; 0x105e <_Z12showGainInfov+0x66>
			break;
		case 2:
			lcd.print(F("2.048 0.0625"));
    1048:	68 ed       	ldi	r22, 0xD8	; 216
    104a:	72 e0       	ldi	r23, 0x02	; 2
    104c:	08 c0       	rjmp	.+16     	; 0x105e <_Z12showGainInfov+0x66>
			break;
		case 3:
			lcd.print(F("1.024 0.03125"));
    104e:	6a ec       	ldi	r22, 0xCA	; 202
    1050:	72 e0       	ldi	r23, 0x02	; 2
    1052:	05 c0       	rjmp	.+10     	; 0x105e <_Z12showGainInfov+0x66>
			break;
		case 4:
			lcd.print(F("0.512 0.015625"));
    1054:	6b eb       	ldi	r22, 0xBB	; 187
    1056:	72 e0       	ldi	r23, 0x02	; 2
    1058:	02 c0       	rjmp	.+4      	; 0x105e <_Z12showGainInfov+0x66>
			break;
		case 5:
			lcd.print(F("0.256 0.0078125"));
    105a:	6b ea       	ldi	r22, 0xAB	; 171
    105c:	72 e0       	ldi	r23, 0x02	; 2
    105e:	87 ed       	ldi	r24, 0xD7	; 215
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>

00001066 <_Z17showAmperageCharsh>:

/*
	Отображение идеального и измеренного тока
	_num - номер обмотки
*/
void showAmperageChars(byte _num) {
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	c8 2f       	mov	r28, r24
	lcdClearCell(9, 0, 7);
    1078:	47 e0       	ldi	r20, 0x07	; 7
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	89 e0       	ldi	r24, 0x09	; 9
    107e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
	lcd.print(adsChars.perfectAmperage[_num], 5);
    1082:	d0 e0       	ldi	r29, 0x00	; 0
    1084:	8e 01       	movw	r16, r28
    1086:	00 0f       	add	r16, r16
    1088:	11 1f       	adc	r17, r17
    108a:	00 0f       	add	r16, r16
    108c:	11 1f       	adc	r17, r17
    108e:	09 5a       	subi	r16, 0xA9	; 169
    1090:	1e 4f       	sbci	r17, 0xFE	; 254
    1092:	d8 01       	movw	r26, r16
    1094:	4d 91       	ld	r20, X+
    1096:	5d 91       	ld	r21, X+
    1098:	6d 91       	ld	r22, X+
    109a:	7c 91       	ld	r23, X
    109c:	25 e0       	ldi	r18, 0x05	; 5
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	87 ed       	ldi	r24, 0xD7	; 215
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
	
	lcdClearCell(0, 1, 6);
    10a8:	46 e0       	ldi	r20, 0x06	; 6
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
	float _diff = abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]);
    10b2:	23 96       	adiw	r28, 0x03	; 3
    10b4:	fe 01       	movw	r30, r28
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	e1 5c       	subi	r30, 0xC1	; 193
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	d8 01       	movw	r26, r16
    10c4:	2d 91       	ld	r18, X+
    10c6:	3d 91       	ld	r19, X+
    10c8:	4d 91       	ld	r20, X+
    10ca:	5c 91       	ld	r21, X
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
    10d8:	6b 01       	movw	r12, r22
    10da:	7c 01       	movw	r14, r24
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    10e6:	18 16       	cp	r1, r24
    10e8:	24 f0       	brlt	.+8      	; 0x10f2 <_Z17showAmperageCharsh+0x8c>
    10ea:	f7 fa       	bst	r15, 7
    10ec:	f0 94       	com	r15
    10ee:	f7 f8       	bld	r15, 7
    10f0:	f0 94       	com	r15
	lcd.print(_diff, 4);
    10f2:	24 e0       	ldi	r18, 0x04	; 4
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	b7 01       	movw	r22, r14
    10f8:	a6 01       	movw	r20, r12
    10fa:	87 ed       	ldi	r24, 0xD7	; 215
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
	
	lcdClearCell(9, 1, 7);
    1102:	47 e0       	ldi	r20, 0x07	; 7
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	89 e0       	ldi	r24, 0x09	; 9
    1108:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
	lcd.print(adsChars.measuredAmperage[_num], 5);
    110c:	cc 0f       	add	r28, r28
    110e:	dd 1f       	adc	r29, r29
    1110:	cc 0f       	add	r28, r28
    1112:	dd 1f       	adc	r29, r29
    1114:	c1 5c       	subi	r28, 0xC1	; 193
    1116:	de 4f       	sbci	r29, 0xFE	; 254
    1118:	48 81       	ld	r20, Y
    111a:	59 81       	ldd	r21, Y+1	; 0x01
    111c:	6a 81       	ldd	r22, Y+2	; 0x02
    111e:	7b 81       	ldd	r23, Y+3	; 0x03
    1120:	25 e0       	ldi	r18, 0x05	; 5
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	87 ed       	ldi	r24, 0xD7	; 215
    1126:	91 e0       	ldi	r25, 0x01	; 1
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
	lcdClearCell(0, 1, 6);
	float _diff = abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]);
	lcd.print(_diff, 4);
	
	lcdClearCell(9, 1, 7);
	lcd.print(adsChars.measuredAmperage[_num], 5);
    1138:	0c 94 ef 20 	jmp	0x41de	; 0x41de <_ZN5Print5printEdi>

0000113c <_Z22showWindingCharsValuesh>:

/*
	Отображение характеристик по обмоткам
	_num - номер обмотки
*/
void showWindingCharsValues(byte _num) {
    113c:	cf 92       	push	r12
    113e:	df 92       	push	r13
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	c8 2f       	mov	r28, r24
	lcdClearCell(5, 0, 7);
    114a:	47 e0       	ldi	r20, 0x07	; 7
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	85 e0       	ldi	r24, 0x05	; 5
    1150:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	lcd.print(adsChars.measuredAmperage[_num], 5);
    1154:	d0 e0       	ldi	r29, 0x00	; 0
    1156:	fe 01       	movw	r30, r28
    1158:	ee 0f       	add	r30, r30
    115a:	ff 1f       	adc	r31, r31
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	e5 5b       	subi	r30, 0xB5	; 181
    1162:	fe 4f       	sbci	r31, 0xFE	; 254
    1164:	40 81       	ld	r20, Z
    1166:	51 81       	ldd	r21, Z+1	; 0x01
    1168:	62 81       	ldd	r22, Z+2	; 0x02
    116a:	73 81       	ldd	r23, Z+3	; 0x03
    116c:	25 e0       	ldi	r18, 0x05	; 5
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	87 ed       	ldi	r24, 0xD7	; 215
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
	
	lcdClearCell(2, 1, 8);
    1178:	48 e0       	ldi	r20, 0x08	; 8
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
	if (adsChars.voltage[_num] < 100) {
    1182:	cc 0f       	add	r28, r28
    1184:	dd 1f       	adc	r29, r29
    1186:	cc 0f       	add	r28, r28
    1188:	dd 1f       	adc	r29, r29
    118a:	fe 01       	movw	r30, r28
    118c:	e1 5c       	subi	r30, 0xC1	; 193
    118e:	fe 4f       	sbci	r31, 0xFE	; 254
    1190:	c0 80       	ld	r12, Z
    1192:	d1 80       	ldd	r13, Z+1	; 0x01
    1194:	e2 80       	ldd	r14, Z+2	; 0x02
    1196:	f3 80       	ldd	r15, Z+3	; 0x03
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	48 ec       	ldi	r20, 0xC8	; 200
    119e:	52 e4       	ldi	r21, 0x42	; 66
    11a0:	c7 01       	movw	r24, r14
    11a2:	b6 01       	movw	r22, r12
    11a4:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    11a8:	87 fd       	sbrc	r24, 7
    11aa:	35 c0       	rjmp	.+106    	; 0x1216 <_Z22showWindingCharsValuesh+0xda>
		roundedSign = 2;
	} else if (adsChars.voltage[_num] < 1000) {
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	4a e7       	ldi	r20, 0x7A	; 122
    11b2:	54 e4       	ldi	r21, 0x44	; 68
    11b4:	c7 01       	movw	r24, r14
    11b6:	b6 01       	movw	r22, r12
    11b8:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    11bc:	87 fd       	sbrc	r24, 7
    11be:	2d c0       	rjmp	.+90     	; 0x121a <_Z22showWindingCharsValuesh+0xde>
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
	} else {
		lcd.print(999);
    11c0:	4a e0       	ldi	r20, 0x0A	; 10
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	67 ee       	ldi	r22, 0xE7	; 231
    11c6:	73 e0       	ldi	r23, 0x03	; 3
    11c8:	87 ed       	ldi	r24, 0xD7	; 215
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN5Print5printEii>
		lcd.print(F("+"));
    11d0:	63 eb       	ldi	r22, 0xB3	; 179
    11d2:	71 e0       	ldi	r23, 0x01	; 1
    11d4:	87 ed       	ldi	r24, 0xD7	; 215
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
	}
	
	lcdClearCell(10, 1, 5);
    11dc:	45 e0       	ldi	r20, 0x05	; 5
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	8a e0       	ldi	r24, 0x0A	; 10
    11e2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
	lcd.print(icError.curLvl[_num], 1);
    11e6:	c0 50       	subi	r28, 0x00	; 0
    11e8:	df 4f       	sbci	r29, 0xFF	; 255
    11ea:	48 81       	ld	r20, Y
    11ec:	59 81       	ldd	r21, Y+1	; 0x01
    11ee:	6a 81       	ldd	r22, Y+2	; 0x02
    11f0:	7b 81       	ldd	r23, Y+3	; 0x03
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	87 ed       	ldi	r24, 0xD7	; 215
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
	lcd.print(F("%"));
    11fe:	61 eb       	ldi	r22, 0xB1	; 177
    1200:	71 e0       	ldi	r23, 0x01	; 1
    1202:	87 ed       	ldi	r24, 0xD7	; 215
    1204:	91 e0       	ldi	r25, 0x01	; 1
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
	lcd.print(icError.curLvl[_num], 1);
	lcd.print(F("%"));
    1212:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
	byte roundedSign = 2;
	lcd.print(adsChars.measuredAmperage[_num], 5);
	
	lcdClearCell(2, 1, 8);
	if (adsChars.voltage[_num] < 100) {
		roundedSign = 2;
    1216:	22 e0       	ldi	r18, 0x02	; 2
    1218:	01 c0       	rjmp	.+2      	; 0x121c <_Z22showWindingCharsValuesh+0xe0>
	} else if (adsChars.voltage[_num] < 1000) {
		roundedSign = 1;
    121a:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	b7 01       	movw	r22, r14
    1220:	a6 01       	movw	r20, r12
    1222:	87 ed       	ldi	r24, 0xD7	; 215
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
    122a:	d8 cf       	rjmp	.-80     	; 0x11dc <_Z22showWindingCharsValuesh+0xa0>

0000122c <_Z13displayAsModev>:
/*
	Отображение динамиеских данных в зависимости от режима
*/
void displayAsMode() {
	// Если мы изменили режим отображения, то необходимо обновиь статику и динамику
	if (modeWork.current != modeWork.prev) {
    122c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <modeWork>
    1230:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <modeWork+0x1>
    1234:	89 17       	cp	r24, r25
    1236:	39 f0       	breq	.+14     	; 0x1246 <_Z13displayAsModev+0x1a>
		modeWork.prev = modeWork.current;
    1238:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <modeWork+0x1>
		lcdUpdateScreen = true;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <lcdUpdateScreen>
		displayStaticAsMode();
    1242:	0e 94 22 07 	call	0xe44	; 0xe44 <_Z19displayStaticAsModev>
	}
	if (!lcdUpdateScreen) {
    1246:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <lcdUpdateScreen>
    124a:	88 23       	and	r24, r24
    124c:	09 f4       	brne	.+2      	; 0x1250 <_Z13displayAsModev+0x24>
    124e:	67 c1       	rjmp	.+718    	; 0x151e <_Z13displayAsModev+0x2f2>
		return;
	} 
	lcdUpdateScreen = false;
    1250:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <lcdUpdateScreen>
	// обновляем динамику
	switch(modeWork.current) {
    1254:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <modeWork>
    1258:	8e 2f       	mov	r24, r30
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	fc 01       	movw	r30, r24
    125e:	31 97       	sbiw	r30, 0x01	; 1
    1260:	e5 31       	cpi	r30, 0x15	; 21
    1262:	f1 05       	cpc	r31, r1
    1264:	08 f0       	brcs	.+2      	; 0x1268 <_Z13displayAsModev+0x3c>
    1266:	5b c1       	rjmp	.+694    	; 0x151e <_Z13displayAsModev+0x2f2>
    1268:	ed 5a       	subi	r30, 0xAD	; 173
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcdClearCell(0, 1, 8);
    1270:	48 e0       	ldi	r20, 0x08	; 8
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			if (setDigit.value == CONNECTION_TYPE_STAR) {
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <setDigit>
    1284:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <setDigit+0x1>
    1288:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <setDigit+0x2>
    128c:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <setDigit+0x3>
    1290:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    1294:	81 11       	cpse	r24, r1
    1296:	03 c0       	rjmp	.+6      	; 0x129e <_Z13displayAsModev+0x72>
				lcd.print(F("Star"));
    1298:	66 ea       	ldi	r22, 0xA6	; 166
    129a:	72 e0       	ldi	r23, 0x02	; 2
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <_Z13displayAsModev+0x76>
			} else {
				lcd.print(F("Triangle"));
    129e:	6d e9       	ldi	r22, 0x9D	; 157
    12a0:	72 e0       	ldi	r23, 0x02	; 2
    12a2:	87 ed       	ldi	r24, 0xD7	; 215
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			}
			break;
		case MW_SETUP_GAIN_AMPERAGE:
		case MW_SETUP_GAIN_VOLTAGE:
			showGainInfo();
    12aa:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <_Z12showGainInfov>
			break;
		case MW_SETUP_IMPEDANCE:
			lcd.print(F("R1="));
    12ae:	69 e9       	ldi	r22, 0x99	; 153
    12b0:	72 e0       	ldi	r23, 0x02	; 2
    12b2:	87 ed       	ldi	r24, 0xD7	; 215
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(settings.impedance[0], 1);
    12ba:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <settings+0x6>
    12be:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <settings+0x7>
    12c2:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <settings+0x8>
    12c6:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <settings+0x9>
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	87 ed       	ldi	r24, 0xD7	; 215
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
			lcd.setCursor(8, 0);
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	68 e0       	ldi	r22, 0x08	; 8
    12da:	87 ed       	ldi	r24, 0xD7	; 215
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("R2="));
    12e2:	65 e9       	ldi	r22, 0x95	; 149
    12e4:	72 e0       	ldi	r23, 0x02	; 2
    12e6:	87 ed       	ldi	r24, 0xD7	; 215
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcdClearCell(11, 0, 5);
    12ee:	45 e0       	ldi	r20, 0x05	; 5
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	8b e0       	ldi	r24, 0x0B	; 11
    12f4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcd.print(settings.impedance[1], 1);
    12f8:	40 91 f5 01 	lds	r20, 0x01F5	; 0x8001f5 <settings+0xa>
    12fc:	50 91 f6 01 	lds	r21, 0x01F6	; 0x8001f6 <settings+0xb>
    1300:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <settings+0xc>
    1304:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <settings+0xd>
    1308:	21 e0       	ldi	r18, 0x01	; 1
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	87 ed       	ldi	r24, 0xD7	; 215
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
			lcd.setCursor(0, 1);
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	87 ed       	ldi	r24, 0xD7	; 215
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("R3="));
    1320:	61 e9       	ldi	r22, 0x91	; 145
    1322:	72 e0       	ldi	r23, 0x02	; 2
    1324:	87 ed       	ldi	r24, 0xD7	; 215
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcdClearCell(3, 1, 5);
    132c:	45 e0       	ldi	r20, 0x05	; 5
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcd.print(settings.impedance[2], 1);
    1336:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <settings+0xe>
    133a:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <settings+0xf>
    133e:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x10>
    1342:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <settings+0x11>
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	28 c0       	rjmp	.+80     	; 0x139c <_Z13displayAsModev+0x170>
		case MW_SETUP_MULT_VOLTAGE_BC:
		case MW_SETUP_MULT_VOLTAGE_AC:
		case MW_SETUP_MULT_AMPERAGE_AB:
		case MW_SETUP_MULT_AMPERAGE_BC:
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcdClearCell(7, 0, 8);
    134c:	48 e0       	ldi	r20, 0x08	; 8
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	87 e0       	ldi	r24, 0x07	; 7
    1352:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcd.print(F("x"));
    1356:	6f e8       	ldi	r22, 0x8F	; 143
    1358:	72 e0       	ldi	r23, 0x02	; 2
    135a:	87 ed       	ldi	r24, 0xD7	; 215
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(setDigit.curMultiplier, 3);
    1362:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <setDigit+0x4>
    1366:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <setDigit+0x5>
    136a:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <setDigit+0x6>
    136e:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <setDigit+0x7>
    1372:	23 e0       	ldi	r18, 0x03	; 3
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	87 ed       	ldi	r24, 0xD7	; 215
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
			lcdClearCell(0, 1, 16);
    137e:	40 e1       	ldi	r20, 0x10	; 16
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcd.print(setDigit.value, 3);
    1388:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <setDigit>
    138c:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <setDigit+0x1>
    1390:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <setDigit+0x2>
    1394:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <setDigit+0x3>
    1398:	23 e0       	ldi	r18, 0x03	; 3
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	87 ed       	ldi	r24, 0xD7	; 215
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	0c 94 ef 20 	jmp	0x41de	; 0x41de <_ZN5Print5printEdi>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcdClearCell(11, 0, 4);
    13a4:	44 e0       	ldi	r20, 0x04	; 4
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	8b e0       	ldi	r24, 0x0B	; 11
    13aa:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(0);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 c8 06 	call	0xd90	; 0xd90 <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(3, 1, 4);
    13b4:	44 e0       	ldi	r20, 0x04	; 4
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(1);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 c8 06 	call	0xd90	; 0xd90 <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(11, 1, 4);
    13c4:	44 e0       	ldi	r20, 0x04	; 4
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	8b e0       	ldi	r24, 0x0B	; 11
    13ca:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(2);
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <_Z19lcdPrintCriticalLvlh>
			break;
		case MW_SHOW_ERRORS:
			lcdClearCell(3, 0, 5);
    13d4:	45 e0       	ldi	r20, 0x05	; 5
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(0);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(11, 0, 5);
    13e4:	45 e0       	ldi	r20, 0x05	; 5
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	8b e0       	ldi	r24, 0x0B	; 11
    13ea:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(1);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(3, 1, 5);
    13f4:	45 e0       	ldi	r20, 0x05	; 5
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	83 e0       	ldi	r24, 0x03	; 3
    13fa:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(2);
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <_Z27lcdPrinRoundedCurErrorLevelh>
			break;
		case MW_SHOW_AMPERAGE:
			lcd.clear();
    1404:	87 ed       	ldi	r24, 0xD7	; 215
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN17LiquidCrystal_I2C5clearEv>
			lcd.print(F("P "));
    140c:	6c e8       	ldi	r22, 0x8C	; 140
    140e:	72 e0       	ldi	r23, 0x02	; 2
    1410:	87 ed       	ldi	r24, 0xD7	; 215
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[0], 2);
    1418:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <adsChars+0x18>
    141c:	50 91 58 01 	lds	r21, 0x0158	; 0x800158 <adsChars+0x19>
    1420:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <adsChars+0x1a>
    1424:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <adsChars+0x1b>
    1428:	22 e0       	ldi	r18, 0x02	; 2
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	87 ed       	ldi	r24, 0xD7	; 215
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
			lcd.print(F("#"));
    1434:	6a e8       	ldi	r22, 0x8A	; 138
    1436:	72 e0       	ldi	r23, 0x02	; 2
    1438:	87 ed       	ldi	r24, 0xD7	; 215
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[1], 2);
    1440:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <adsChars+0x1c>
    1444:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <adsChars+0x1d>
    1448:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <adsChars+0x1e>
    144c:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <adsChars+0x1f>
    1450:	22 e0       	ldi	r18, 0x02	; 2
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	87 ed       	ldi	r24, 0xD7	; 215
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
			lcd.print(F("#"));
    145c:	68 e8       	ldi	r22, 0x88	; 136
    145e:	72 e0       	ldi	r23, 0x02	; 2
    1460:	87 ed       	ldi	r24, 0xD7	; 215
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[2], 2);
    1468:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <adsChars+0x20>
    146c:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <adsChars+0x21>
    1470:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <adsChars+0x22>
    1474:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <adsChars+0x23>
    1478:	22 e0       	ldi	r18, 0x02	; 2
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	87 ed       	ldi	r24, 0xD7	; 215
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
	
			lcd.setCursor(0, 1);
    1484:	41 e0       	ldi	r20, 0x01	; 1
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	87 ed       	ldi	r24, 0xD7	; 215
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("M "));
    1490:	65 e8       	ldi	r22, 0x85	; 133
    1492:	72 e0       	ldi	r23, 0x02	; 2
    1494:	87 ed       	ldi	r24, 0xD7	; 215
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[0], 2);
    149c:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <adsChars+0xc>
    14a0:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <adsChars+0xd>
    14a4:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <adsChars+0xe>
    14a8:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <adsChars+0xf>
    14ac:	22 e0       	ldi	r18, 0x02	; 2
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	87 ed       	ldi	r24, 0xD7	; 215
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
			lcd.print(F("#"));
    14b8:	63 e8       	ldi	r22, 0x83	; 131
    14ba:	72 e0       	ldi	r23, 0x02	; 2
    14bc:	87 ed       	ldi	r24, 0xD7	; 215
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[1], 2);
    14c4:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <adsChars+0x10>
    14c8:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <adsChars+0x11>
    14cc:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <adsChars+0x12>
    14d0:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <adsChars+0x13>
    14d4:	22 e0       	ldi	r18, 0x02	; 2
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	87 ed       	ldi	r24, 0xD7	; 215
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 ef 20 	call	0x41de	; 0x41de <_ZN5Print5printEdi>
			lcd.print(F("#"));
    14e0:	61 e8       	ldi	r22, 0x81	; 129
    14e2:	72 e0       	ldi	r23, 0x02	; 2
    14e4:	87 ed       	ldi	r24, 0xD7	; 215
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[2], 2);
    14ec:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <adsChars+0x14>
    14f0:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <adsChars+0x15>
    14f4:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <adsChars+0x16>
    14f8:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <adsChars+0x17>
    14fc:	22 e0       	ldi	r18, 0x02	; 2
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	4d cf       	rjmp	.-358    	; 0x139c <_Z13displayAsModev+0x170>
			break;
		case MW_SHOW_AMPERAGE_AB:
			showAmperageChars(0);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	03 c0       	rjmp	.+6      	; 0x150c <_Z13displayAsModev+0x2e0>
			break;
		case MW_SHOW_AMPERAGE_BC:
			showAmperageChars(1);
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	01 c0       	rjmp	.+2      	; 0x150c <_Z13displayAsModev+0x2e0>
			break;
		case MW_SHOW_AMPERAGE_AC:
			showAmperageChars(2);
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	0c 94 33 08 	jmp	0x1066	; 0x1066 <_Z17showAmperageCharsh>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			showWindingCharsValues(0);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	03 c0       	rjmp	.+6      	; 0x151a <_Z13displayAsModev+0x2ee>
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			showWindingCharsValues(1);
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	01 c0       	rjmp	.+2      	; 0x151a <_Z13displayAsModev+0x2ee>
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			showWindingCharsValues(2);
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	0c 94 9e 08 	jmp	0x113c	; 0x113c <_Z22showWindingCharsValuesh>
    151e:	08 95       	ret

00001520 <loop>:
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
	}
}

void loop() {
    1520:	2f 92       	push	r2
    1522:	3f 92       	push	r3
    1524:	4f 92       	push	r4
    1526:	5f 92       	push	r5
    1528:	6f 92       	push	r6
    152a:	7f 92       	push	r7
    152c:	8f 92       	push	r8
    152e:	9f 92       	push	r9
    1530:	af 92       	push	r10
    1532:	bf 92       	push	r11
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	00 d0       	rcall	.+0      	; 0x1546 <loop+0x26>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <loop+0x28>
    1548:	1f 92       	push	r1
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	// Следим за кнопками
	button1Callback.tick();
    154e:	8a e3       	ldi	r24, 0x3A	; 58
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN9OneButton4tickEv>
	button2Callback.tick();
    1556:	89 e1       	ldi	r24, 0x19	; 25
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN9OneButton4tickEv>
	// Отображаем данные на экран
	displayAsMode();
    155e:	0e 94 16 09 	call	0x122c	; 0x122c <_Z13displayAsModev>
	// Если в режиме измерений
	
	if(settings.isReadyToWork == MM_WORK) {
    1562:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <settings>
    1566:	88 23       	and	r24, r24
    1568:	09 f4       	brne	.+2      	; 0x156c <loop+0x4c>
    156a:	8e c1       	rjmp	.+796    	; 0x1888 <loop+0x368>
		// получаем параметры
		getAdsParams();
    156c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_Z12getAdsParamsv>
		// и продолжаем получать пока не накопим 50 измерений
		if (adsChars.currentMeasurement < adsChars.measurementsCount) {
    1570:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <adsChars+0x3d>
    1574:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <adsChars+0x3c>
    1578:	89 17       	cp	r24, r25
    157a:	20 f4       	brcc	.+8      	; 0x1584 <loop+0x64>
			adsChars.currentMeasurement++;
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <adsChars+0x3d>
    1582:	82 c1       	rjmp	.+772    	; 0x1888 <loop+0x368>
		} else {
			// после накопления measurementsCount обновляем экран и смотрим на наличия межветковых замыканий
			lcdUpdateScreen = true;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <lcdUpdateScreen>
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
    158a:	0e 94 4d 21 	call	0x429a	; 0x429a <millis>
    158e:	00 91 d0 01 	lds	r16, 0x01D0	; 0x8001d0 <__data_end>
    1592:	10 91 d1 01 	lds	r17, 0x01D1	; 0x8001d1 <__data_end+0x1>
    1596:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end+0x2>
    159a:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__data_end+0x3>
    159e:	2b 01       	movw	r4, r22
    15a0:	3c 01       	movw	r6, r24
    15a2:	40 1a       	sub	r4, r16
    15a4:	51 0a       	sbc	r5, r17
    15a6:	62 0a       	sbc	r6, r18
    15a8:	73 0a       	sbc	r7, r19
    15aa:	8f e3       	ldi	r24, 0x3F	; 63
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	9d 83       	std	Y+5, r25	; 0x05
    15b0:	8c 83       	std	Y+4, r24	; 0x04
    15b2:	0b ee       	ldi	r16, 0xEB	; 235
    15b4:	11 e0       	ldi	r17, 0x01	; 1
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	28 2e       	mov	r2, r24
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	38 2e       	mov	r3, r24
    15be:	e1 e0       	ldi	r30, 0x01	; 1
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	fb 83       	std	Y+3, r31	; 0x03
    15c4:	ea 83       	std	Y+2, r30	; 0x02
			for (byte i = 0; i < 3; i++) {
    15c6:	19 82       	std	Y+1, r1	; 0x01
				
				// вычисляем реальные значения напряжения, тока и идеального тока от измеренного напряжения и известного сопротивления
				adsChars.voltage[i] = adsChars.sumVoltage[i] / adsChars.measurementsCount * ads.voltageStep * settings.multiplierVoltage[i];
    15c8:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <adsChars+0x3c>
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    15d6:	4b 01       	movw	r8, r22
    15d8:	5c 01       	movw	r10, r24
    15da:	9b 01       	movw	r18, r22
    15dc:	ac 01       	movw	r20, r24
    15de:	ec 81       	ldd	r30, Y+4	; 0x04
    15e0:	fd 81       	ldd	r31, Y+5	; 0x05
    15e2:	64 a1       	ldd	r22, Z+36	; 0x24
    15e4:	75 a1       	ldd	r23, Z+37	; 0x25
    15e6:	86 a1       	ldd	r24, Z+38	; 0x26
    15e8:	97 a1       	ldd	r25, Z+39	; 0x27
    15ea:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
    15ee:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <ads+0x18>
    15f2:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <ads+0x19>
    15f6:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <ads+0x1a>
    15fa:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <ads+0x1b>
    15fe:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1602:	f8 01       	movw	r30, r16
    1604:	25 89       	ldd	r18, Z+21	; 0x15
    1606:	36 89       	ldd	r19, Z+22	; 0x16
    1608:	47 89       	ldd	r20, Z+23	; 0x17
    160a:	50 8d       	ldd	r21, Z+24	; 0x18
    160c:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1610:	6b 01       	movw	r12, r22
    1612:	7c 01       	movw	r14, r24
    1614:	ec 81       	ldd	r30, Y+4	; 0x04
    1616:	fd 81       	ldd	r31, Y+5	; 0x05
    1618:	60 83       	st	Z, r22
    161a:	71 83       	std	Z+1, r23	; 0x01
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	93 83       	std	Z+3, r25	; 0x03
				adsChars.measuredAmperage[i] = adsChars.sumMeasuredAmperage[i] / adsChars.measurementsCount * ads.amperageStep * settings.multiplierAmperage[i];
    1620:	a5 01       	movw	r20, r10
    1622:	94 01       	movw	r18, r8
    1624:	60 a9       	ldd	r22, Z+48	; 0x30
    1626:	71 a9       	ldd	r23, Z+49	; 0x31
    1628:	82 a9       	ldd	r24, Z+50	; 0x32
    162a:	93 a9       	ldd	r25, Z+51	; 0x33
    162c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
    1630:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <ads+0x1c>
    1634:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <ads+0x1d>
    1638:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <ads+0x1e>
    163c:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <ads+0x1f>
    1640:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1644:	f8 01       	movw	r30, r16
    1646:	21 a1       	ldd	r18, Z+33	; 0x21
    1648:	32 a1       	ldd	r19, Z+34	; 0x22
    164a:	43 a1       	ldd	r20, Z+35	; 0x23
    164c:	54 a1       	ldd	r21, Z+36	; 0x24
    164e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1652:	ec 81       	ldd	r30, Y+4	; 0x04
    1654:	fd 81       	ldd	r31, Y+5	; 0x05
    1656:	64 87       	std	Z+12, r22	; 0x0c
    1658:	75 87       	std	Z+13, r23	; 0x0d
    165a:	86 87       	std	Z+14, r24	; 0x0e
    165c:	97 87       	std	Z+15, r25	; 0x0f
				adsChars.perfectAmperage[i] = adsChars.voltage[i] / settings.impedance[i];
    165e:	f8 01       	movw	r30, r16
    1660:	26 81       	ldd	r18, Z+6	; 0x06
    1662:	37 81       	ldd	r19, Z+7	; 0x07
    1664:	40 85       	ldd	r20, Z+8	; 0x08
    1666:	51 85       	ldd	r21, Z+9	; 0x09
    1668:	c7 01       	movw	r24, r14
    166a:	b6 01       	movw	r22, r12
    166c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
    1670:	ec 81       	ldd	r30, Y+4	; 0x04
    1672:	fd 81       	ldd	r31, Y+5	; 0x05
    1674:	60 8f       	std	Z+24, r22	; 0x18
    1676:	71 8f       	std	Z+25, r23	; 0x19
    1678:	82 8f       	std	Z+26, r24	; 0x1a
    167a:	93 8f       	std	Z+27, r25	; 0x1b
				icError.curLvl[i] = getICLevelByWinding(i);
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z19getICLevelByWindingh>
    1682:	f1 01       	movw	r30, r2
    1684:	60 83       	st	Z, r22
    1686:	71 83       	std	Z+1, r23	; 0x01
    1688:	82 83       	std	Z+2, r24	; 0x02
    168a:	93 83       	std	Z+3, r25	; 0x03

				if (canSerial) {
    168c:	f9 ee       	ldi	r31, 0xE9	; 233
    168e:	4f 16       	cp	r4, r31
    1690:	f3 e0       	ldi	r31, 0x03	; 3
    1692:	5f 06       	cpc	r5, r31
    1694:	61 04       	cpc	r6, r1
    1696:	71 04       	cpc	r7, r1
    1698:	08 f4       	brcc	.+2      	; 0x169c <loop+0x17c>
    169a:	64 c0       	rjmp	.+200    	; 0x1764 <loop+0x244>
					Serial.print(F("Winding |")); Serial.print((i + 1)); Serial.println(F("|"));
    169c:	69 ec       	ldi	r22, 0xC9	; 201
    169e:	73 e0       	ldi	r23, 0x03	; 3
    16a0:	89 e2       	ldi	r24, 0x29	; 41
    16a2:	93 e0       	ldi	r25, 0x03	; 3
    16a4:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    16a8:	4a e0       	ldi	r20, 0x0A	; 10
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	6a 81       	ldd	r22, Y+2	; 0x02
    16ae:	7b 81       	ldd	r23, Y+3	; 0x03
    16b0:	89 e2       	ldi	r24, 0x29	; 41
    16b2:	93 e0       	ldi	r25, 0x03	; 3
    16b4:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN5Print5printEii>
    16b8:	67 ec       	ldi	r22, 0xC7	; 199
    16ba:	73 e0       	ldi	r23, 0x03	; 3
    16bc:	89 e2       	ldi	r24, 0x29	; 41
    16be:	93 e0       	ldi	r25, 0x03	; 3
    16c0:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F("measured voltage = "));  Serial.println(adsChars.voltage[i], 6);
    16c4:	63 eb       	ldi	r22, 0xB3	; 179
    16c6:	73 e0       	ldi	r23, 0x03	; 3
    16c8:	89 e2       	ldi	r24, 0x29	; 41
    16ca:	93 e0       	ldi	r25, 0x03	; 3
    16cc:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    16d0:	ec 81       	ldd	r30, Y+4	; 0x04
    16d2:	fd 81       	ldd	r31, Y+5	; 0x05
    16d4:	40 81       	ld	r20, Z
    16d6:	51 81       	ldd	r21, Z+1	; 0x01
    16d8:	62 81       	ldd	r22, Z+2	; 0x02
    16da:	73 81       	ldd	r23, Z+3	; 0x03
    16dc:	26 e0       	ldi	r18, 0x06	; 6
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	89 e2       	ldi	r24, 0x29	; 41
    16e2:	93 e0       	ldi	r25, 0x03	; 3
    16e4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
					Serial.print(F("measured amperage = "));  Serial.println(adsChars.measuredAmperage[i], 6);
    16e8:	6e e9       	ldi	r22, 0x9E	; 158
    16ea:	73 e0       	ldi	r23, 0x03	; 3
    16ec:	89 e2       	ldi	r24, 0x29	; 41
    16ee:	93 e0       	ldi	r25, 0x03	; 3
    16f0:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    16f4:	ec 81       	ldd	r30, Y+4	; 0x04
    16f6:	fd 81       	ldd	r31, Y+5	; 0x05
    16f8:	44 85       	ldd	r20, Z+12	; 0x0c
    16fa:	55 85       	ldd	r21, Z+13	; 0x0d
    16fc:	66 85       	ldd	r22, Z+14	; 0x0e
    16fe:	77 85       	ldd	r23, Z+15	; 0x0f
    1700:	26 e0       	ldi	r18, 0x06	; 6
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	89 e2       	ldi	r24, 0x29	; 41
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
					Serial.print(F("perfect amperage = ")); Serial.println(adsChars.perfectAmperage[i], 6);
    170c:	6a e8       	ldi	r22, 0x8A	; 138
    170e:	73 e0       	ldi	r23, 0x03	; 3
    1710:	89 e2       	ldi	r24, 0x29	; 41
    1712:	93 e0       	ldi	r25, 0x03	; 3
    1714:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    1718:	ec 81       	ldd	r30, Y+4	; 0x04
    171a:	fd 81       	ldd	r31, Y+5	; 0x05
    171c:	40 8d       	ldd	r20, Z+24	; 0x18
    171e:	51 8d       	ldd	r21, Z+25	; 0x19
    1720:	62 8d       	ldd	r22, Z+26	; 0x1a
    1722:	73 8d       	ldd	r23, Z+27	; 0x1b
    1724:	26 e0       	ldi	r18, 0x06	; 6
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	89 e2       	ldi	r24, 0x29	; 41
    172a:	93 e0       	ldi	r25, 0x03	; 3
    172c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
					Serial.print(F("error = ")); Serial.println(icError.curLvl[i]);
    1730:	61 e8       	ldi	r22, 0x81	; 129
    1732:	73 e0       	ldi	r23, 0x03	; 3
    1734:	89 e2       	ldi	r24, 0x29	; 41
    1736:	93 e0       	ldi	r25, 0x03	; 3
    1738:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    173c:	f1 01       	movw	r30, r2
    173e:	40 81       	ld	r20, Z
    1740:	51 81       	ldd	r21, Z+1	; 0x01
    1742:	62 81       	ldd	r22, Z+2	; 0x02
    1744:	73 81       	ldd	r23, Z+3	; 0x03
    1746:	22 e0       	ldi	r18, 0x02	; 2
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	89 e2       	ldi	r24, 0x29	; 41
    174c:	93 e0       	ldi	r25, 0x03	; 3
    174e:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
					if (i != 2) {
    1752:	f9 81       	ldd	r31, Y+1	; 0x01
    1754:	f2 30       	cpi	r31, 0x02	; 2
    1756:	31 f0       	breq	.+12     	; 0x1764 <loop+0x244>
						Serial.println(F("---"));
    1758:	6d e7       	ldi	r22, 0x7D	; 125
    175a:	73 e0       	ldi	r23, 0x03	; 3
    175c:	89 e2       	ldi	r24, 0x29	; 41
    175e:	93 e0       	ldi	r25, 0x03	; 3
    1760:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
			adsChars.currentMeasurement++;
		} else {
			// после накопления measurementsCount обновляем экран и смотрим на наличия межветковых замыканий
			lcdUpdateScreen = true;
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
			for (byte i = 0; i < 3; i++) {
    1764:	29 81       	ldd	r18, Y+1	; 0x01
    1766:	2f 5f       	subi	r18, 0xFF	; 255
    1768:	29 83       	std	Y+1, r18	; 0x01
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	04 96       	adiw	r24, 0x04	; 4
    1770:	9d 83       	std	Y+5, r25	; 0x05
    1772:	8c 83       	std	Y+4, r24	; 0x04
    1774:	0c 5f       	subi	r16, 0xFC	; 252
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	94 e0       	ldi	r25, 0x04	; 4
    177a:	29 0e       	add	r2, r25
    177c:	31 1c       	adc	r3, r1
    177e:	ea 81       	ldd	r30, Y+2	; 0x02
    1780:	fb 81       	ldd	r31, Y+3	; 0x03
    1782:	31 96       	adiw	r30, 0x01	; 1
    1784:	fb 83       	std	Y+3, r31	; 0x03
    1786:	ea 83       	std	Y+2, r30	; 0x02
    1788:	23 30       	cpi	r18, 0x03	; 3
    178a:	09 f0       	breq	.+2      	; 0x178e <loop+0x26e>
    178c:	1d cf       	rjmp	.-454    	; 0x15c8 <loop+0xa8>
					if (i != 2) {
						Serial.println(F("---"));
					}
				}
			}
			if (canSerial) {
    178e:	f9 ee       	ldi	r31, 0xE9	; 233
    1790:	4f 16       	cp	r4, r31
    1792:	f3 e0       	ldi	r31, 0x03	; 3
    1794:	5f 06       	cpc	r5, r31
    1796:	61 04       	cpc	r6, r1
    1798:	71 04       	cpc	r7, r1
    179a:	80 f0       	brcs	.+32     	; 0x17bc <loop+0x29c>
				Serial.println(F("---end---"));
    179c:	63 e7       	ldi	r22, 0x73	; 115
    179e:	73 e0       	ldi	r23, 0x03	; 3
    17a0:	89 e2       	ldi	r24, 0x29	; 41
    17a2:	93 e0       	ldi	r25, 0x03	; 3
    17a4:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
				serialUpdateStamp = millis();
    17a8:	0e 94 4d 21 	call	0x429a	; 0x429a <millis>
    17ac:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <__data_end>
    17b0:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <__data_end+0x1>
    17b4:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end+0x2>
    17b8:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <__data_end+0x3>
			}
			initAvgVars();
    17bc:	0e 94 39 03 	call	0x672	; 0x672 <_Z11initAvgVarsv>
	
			
			if (isFullErrorExists(adsChars.measuredAmperage, adsChars.voltage)) {
    17c0:	6f e3       	ldi	r22, 0x3F	; 63
    17c2:	71 e0       	ldi	r23, 0x01	; 1
    17c4:	8b e4       	ldi	r24, 0x4B	; 75
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	0e 94 a1 05 	call	0xb42	; 0xb42 <_Z17isFullErrorExistsPfS_>
    17cc:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <__data_start+0x13>
    17d0:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <__data_start+0x14>
    17d4:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <__data_start+0x15>
    17d8:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <__data_start+0x16>
    17dc:	88 23       	and	r24, r24
    17de:	09 f4       	brne	.+2      	; 0x17e2 <loop+0x2c2>
    17e0:	41 c0       	rjmp	.+130    	; 0x1864 <loop+0x344>
				if (icError.detectStamp == 0) {
    17e2:	45 2b       	or	r20, r21
    17e4:	46 2b       	or	r20, r22
    17e6:	47 2b       	or	r20, r23
    17e8:	81 f4       	brne	.+32     	; 0x180a <loop+0x2ea>
					Serial.println(F("Probably error exists"));
    17ea:	6d e5       	ldi	r22, 0x5D	; 93
    17ec:	73 e0       	ldi	r23, 0x03	; 3
    17ee:	89 e2       	ldi	r24, 0x29	; 41
    17f0:	93 e0       	ldi	r25, 0x03	; 3
    17f2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
					icError.detectStamp = millis();
    17f6:	0e 94 4d 21 	call	0x429a	; 0x429a <millis>
    17fa:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <__data_start+0x13>
    17fe:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <__data_start+0x14>
    1802:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <__data_start+0x15>
    1806:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__data_start+0x16>
				}
				if (millis() - icError.detectStamp >= 10000) {
    180a:	0e 94 4d 21 	call	0x429a	; 0x429a <millis>
    180e:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <__data_start+0x13>
    1812:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <__data_start+0x14>
    1816:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <__data_start+0x15>
    181a:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <__data_start+0x16>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	80 1b       	sub	r24, r16
    1824:	91 0b       	sbc	r25, r17
    1826:	a2 0b       	sbc	r26, r18
    1828:	b3 0b       	sbc	r27, r19
    182a:	80 31       	cpi	r24, 0x10	; 16
    182c:	97 42       	sbci	r25, 0x27	; 39
    182e:	a1 05       	cpc	r26, r1
    1830:	b1 05       	cpc	r27, r1
    1832:	50 f1       	brcs	.+84     	; 0x1888 <loop+0x368>
					if (!settings.isDebugMode) {
    1834:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <settings+0x2d>
    1838:	81 11       	cpse	r24, r1
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <loop+0x328>
						settings.isReadyToWork = MM_STOP;
    183c:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <settings>
						digitalWrite(RELAY, HIGH);
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	81 e1       	ldi	r24, 0x11	; 17
    1844:	0e 94 65 22 	call	0x44ca	; 0x44ca <digitalWrite>
					}
					
					Serial.println(F("WARNING!!! Measurement Stoped IC EXISTS!"));
    1848:	64 e3       	ldi	r22, 0x34	; 52
    184a:	73 e0       	ldi	r23, 0x03	; 3
    184c:	89 e2       	ldi	r24, 0x29	; 41
    184e:	93 e0       	ldi	r25, 0x03	; 3
    1850:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
					digitalWrite(BEEPER, HIGH);
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	80 e1       	ldi	r24, 0x10	; 16
    1858:	0e 94 65 22 	call	0x44ca	; 0x44ca <digitalWrite>
					icError.hasIC = true;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_start+0x12>
    1862:	12 c0       	rjmp	.+36     	; 0x1888 <loop+0x368>
				}
			} else {
				if (icError.detectStamp != 0) {
    1864:	45 2b       	or	r20, r21
    1866:	46 2b       	or	r20, r22
    1868:	47 2b       	or	r20, r23
    186a:	31 f0       	breq	.+12     	; 0x1878 <loop+0x358>
					Serial.println(F("ha-ha, it's joke. There are not exists critical error"));
    186c:	6e ef       	ldi	r22, 0xFE	; 254
    186e:	72 e0       	ldi	r23, 0x02	; 2
    1870:	89 e2       	ldi	r24, 0x29	; 41
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
				}
				icError.detectStamp = 0;
    1878:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_start+0x13>
    187c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_start+0x14>
    1880:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_start+0x15>
    1884:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_start+0x16>
			}
		}
	} 
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	9f 90       	pop	r9
    18a8:	8f 90       	pop	r8
    18aa:	7f 90       	pop	r7
    18ac:	6f 90       	pop	r6
    18ae:	5f 90       	pop	r5
    18b0:	4f 90       	pop	r4
    18b2:	3f 90       	pop	r3
    18b4:	2f 90       	pop	r2
    18b6:	08 95       	ret

000018b8 <_Z14setupImpedancev>:
}

/*
	Получение текущего значения сопротивления обмотки от измеренных значений напряжения и силы тока
*/
void setupImpedance() {
    18b8:	2f 92       	push	r2
    18ba:	3f 92       	push	r3
    18bc:	4f 92       	push	r4
    18be:	5f 92       	push	r5
    18c0:	6f 92       	push	r6
    18c2:	7f 92       	push	r7
    18c4:	8f 92       	push	r8
    18c6:	9f 92       	push	r9
    18c8:	af 92       	push	r10
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	e0 97       	sbiw	r28, 0x30	; 48
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
	float _voltage[3] = {0, 0, 0};
    18ec:	1d a2       	std	Y+37, r1	; 0x25
    18ee:	1e a2       	std	Y+38, r1	; 0x26
    18f0:	1f a2       	std	Y+39, r1	; 0x27
    18f2:	18 a6       	std	Y+40, r1	; 0x28
    18f4:	19 a6       	std	Y+41, r1	; 0x29
    18f6:	1a a6       	std	Y+42, r1	; 0x2a
    18f8:	1b a6       	std	Y+43, r1	; 0x2b
    18fa:	1c a6       	std	Y+44, r1	; 0x2c
    18fc:	1d a6       	std	Y+45, r1	; 0x2d
    18fe:	1e a6       	std	Y+46, r1	; 0x2e
    1900:	1f a6       	std	Y+47, r1	; 0x2f
    1902:	18 aa       	std	Y+48, r1	; 0x30
	float _amperage[3] = {0, 0, 0};
    1904:	19 8e       	std	Y+25, r1	; 0x19
    1906:	1a 8e       	std	Y+26, r1	; 0x1a
    1908:	1b 8e       	std	Y+27, r1	; 0x1b
    190a:	1c 8e       	std	Y+28, r1	; 0x1c
    190c:	1d 8e       	std	Y+29, r1	; 0x1d
    190e:	1e 8e       	std	Y+30, r1	; 0x1e
    1910:	1f 8e       	std	Y+31, r1	; 0x1f
    1912:	18 a2       	std	Y+32, r1	; 0x20
    1914:	19 a2       	std	Y+33, r1	; 0x21
    1916:	1a a2       	std	Y+34, r1	; 0x22
    1918:	1b a2       	std	Y+35, r1	; 0x23
    191a:	1c a2       	std	Y+36, r1	; 0x24
	float _sumImpedance[3] = {0, 0, 0};
	float _sumVoltage[3] = {0, 0, 0};
    191c:	1d 86       	std	Y+13, r1	; 0x0d
    191e:	1e 86       	std	Y+14, r1	; 0x0e
    1920:	1f 86       	std	Y+15, r1	; 0x0f
    1922:	18 8a       	std	Y+16, r1	; 0x10
    1924:	19 8a       	std	Y+17, r1	; 0x11
    1926:	1a 8a       	std	Y+18, r1	; 0x12
    1928:	1b 8a       	std	Y+19, r1	; 0x13
    192a:	1c 8a       	std	Y+20, r1	; 0x14
    192c:	1d 8a       	std	Y+21, r1	; 0x15
    192e:	1e 8a       	std	Y+22, r1	; 0x16
    1930:	1f 8a       	std	Y+23, r1	; 0x17
    1932:	18 8e       	std	Y+24, r1	; 0x18
	float _sumAamperage[3] = {0, 0, 0};
    1934:	19 82       	std	Y+1, r1	; 0x01
    1936:	1a 82       	std	Y+2, r1	; 0x02
    1938:	1b 82       	std	Y+3, r1	; 0x03
    193a:	1c 82       	std	Y+4, r1	; 0x04
    193c:	1d 82       	std	Y+5, r1	; 0x05
    193e:	1e 82       	std	Y+6, r1	; 0x06
    1940:	1f 82       	std	Y+7, r1	; 0x07
    1942:	18 86       	std	Y+8, r1	; 0x08
    1944:	19 86       	std	Y+9, r1	; 0x09
    1946:	1a 86       	std	Y+10, r1	; 0x0a
    1948:	1b 86       	std	Y+11, r1	; 0x0b
    194a:	1c 86       	std	Y+12, r1	; 0x0c
	byte index = 1;
    194c:	01 e0       	ldi	r16, 0x01	; 1
    194e:	2e 01       	movw	r4, r28
    1950:	81 e3       	ldi	r24, 0x31	; 49
    1952:	48 0e       	add	r4, r24
    1954:	51 1c       	adc	r5, r1
	
	while(index < adsChars.measurementsCount) {
    1956:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <adsChars+0x3c>
    195a:	08 17       	cp	r16, r24
    195c:	08 f0       	brcs	.+2      	; 0x1960 <_Z14setupImpedancev+0xa8>
    195e:	60 c0       	rjmp	.+192    	; 0x1a20 <_Z14setupImpedancev+0x168>
    1960:	7e 01       	movw	r14, r28
    1962:	95 e2       	ldi	r25, 0x25	; 37
    1964:	e9 0e       	add	r14, r25
    1966:	f1 1c       	adc	r15, r1
    1968:	6e 01       	movw	r12, r28
    196a:	e9 e1       	ldi	r30, 0x19	; 25
    196c:	ce 0e       	add	r12, r30
    196e:	d1 1c       	adc	r13, r1
    1970:	56 01       	movw	r10, r12
    1972:	37 01       	movw	r6, r14
    1974:	10 e0       	ldi	r17, 0x00	; 0
		for(byte i = 0; i < 3; i++) {
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
    1976:	61 2f       	mov	r22, r17
    1978:	80 e6       	ldi	r24, 0x60	; 96
    197a:	92 e0       	ldi	r25, 0x02	; 2
    197c:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    1980:	bc 01       	movw	r22, r24
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__floatunsisf>
    198a:	f3 01       	movw	r30, r6
    198c:	61 93       	st	Z+, r22
    198e:	71 93       	st	Z+, r23
    1990:	81 93       	st	Z+, r24
    1992:	91 93       	st	Z+, r25
    1994:	3f 01       	movw	r6, r30
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
    1996:	61 2f       	mov	r22, r17
    1998:	8b e5       	ldi	r24, 0x5B	; 91
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    19a0:	bc 01       	movw	r22, r24
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__floatunsisf>
    19aa:	f5 01       	movw	r30, r10
    19ac:	61 93       	st	Z+, r22
    19ae:	71 93       	st	Z+, r23
    19b0:	81 93       	st	Z+, r24
    19b2:	91 93       	st	Z+, r25
    19b4:	5f 01       	movw	r10, r30
	float _sumVoltage[3] = {0, 0, 0};
	float _sumAamperage[3] = {0, 0, 0};
	byte index = 1;
	
	while(index < adsChars.measurementsCount) {
		for(byte i = 0; i < 3; i++) {
    19b6:	1f 5f       	subi	r17, 0xFF	; 255
    19b8:	13 30       	cpi	r17, 0x03	; 3
    19ba:	e9 f6       	brne	.-70     	; 0x1976 <_Z14setupImpedancev+0xbe>
    19bc:	3e 01       	movw	r6, r28
    19be:	fd e0       	ldi	r31, 0x0D	; 13
    19c0:	6f 0e       	add	r6, r31
    19c2:	71 1c       	adc	r7, r1
    19c4:	ce 01       	movw	r24, r28
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	5c 01       	movw	r10, r24
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
		}
		
		for(byte i = 0; i < 3; i++) {
			_sumVoltage[i] += _voltage[i];
    19ca:	f7 01       	movw	r30, r14
    19cc:	21 91       	ld	r18, Z+
    19ce:	31 91       	ld	r19, Z+
    19d0:	41 91       	ld	r20, Z+
    19d2:	51 91       	ld	r21, Z+
    19d4:	7f 01       	movw	r14, r30
    19d6:	f3 01       	movw	r30, r6
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
    19e4:	f3 01       	movw	r30, r6
    19e6:	61 93       	st	Z+, r22
    19e8:	71 93       	st	Z+, r23
    19ea:	81 93       	st	Z+, r24
    19ec:	91 93       	st	Z+, r25
    19ee:	3f 01       	movw	r6, r30
			_sumAamperage[i] += _amperage[i];
    19f0:	f6 01       	movw	r30, r12
    19f2:	21 91       	ld	r18, Z+
    19f4:	31 91       	ld	r19, Z+
    19f6:	41 91       	ld	r20, Z+
    19f8:	51 91       	ld	r21, Z+
    19fa:	6f 01       	movw	r12, r30
    19fc:	f5 01       	movw	r30, r10
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
    1a0a:	f5 01       	movw	r30, r10
    1a0c:	61 93       	st	Z+, r22
    1a0e:	71 93       	st	Z+, r23
    1a10:	81 93       	st	Z+, r24
    1a12:	91 93       	st	Z+, r25
    1a14:	5f 01       	movw	r10, r30
		for(byte i = 0; i < 3; i++) {
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
		}
		
		for(byte i = 0; i < 3; i++) {
    1a16:	e4 14       	cp	r14, r4
    1a18:	f5 04       	cpc	r15, r5
    1a1a:	b9 f6       	brne	.-82     	; 0x19ca <_Z14setupImpedancev+0x112>
			_sumVoltage[i] += _voltage[i];
			_sumAamperage[i] += _amperage[i];
		}
		index++;
    1a1c:	0f 5f       	subi	r16, 0xFF	; 255
	float _sumImpedance[3] = {0, 0, 0};
	float _sumVoltage[3] = {0, 0, 0};
	float _sumAamperage[3] = {0, 0, 0};
	byte index = 1;
	
	while(index < adsChars.measurementsCount) {
    1a1e:	9b cf       	rjmp	.-202    	; 0x1956 <_Z14setupImpedancev+0x9e>
			_sumAamperage[i] += _amperage[i];
		}
		index++;
	}
	
	Serial.println(F("Impedance setup"));
    1a20:	66 e9       	ldi	r22, 0x96	; 150
    1a22:	71 e0       	ldi	r23, 0x01	; 1
    1a24:	89 e2       	ldi	r24, 0x29	; 41
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a2c:	6e 01       	movw	r12, r28
    1a2e:	fd e0       	ldi	r31, 0x0D	; 13
    1a30:	cf 0e       	add	r12, r31
    1a32:	d1 1c       	adc	r13, r1
    1a34:	0b ee       	ldi	r16, 0xEB	; 235
    1a36:	11 e0       	ldi	r17, 0x01	; 1
    1a38:	ce 01       	movw	r24, r28
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	1c 01       	movw	r2, r24
				
	for(byte i = 0; i < 3; i++) {
    1a3e:	f1 2c       	mov	r15, r1
		Serial.println(i);
    1a40:	4a e0       	ldi	r20, 0x0A	; 10
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	6f 2d       	mov	r22, r15
    1a46:	89 e2       	ldi	r24, 0x29	; 41
    1a48:	93 e0       	ldi	r25, 0x03	; 3
    1a4a:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <_ZN5Print7printlnEhi>
		_voltage[i] = _sumVoltage[i] / adsChars.measurementsCount * ads.voltageStep * settings.multiplierVoltage[i];
    1a4e:	f6 01       	movw	r30, r12
    1a50:	41 90       	ld	r4, Z+
    1a52:	51 90       	ld	r5, Z+
    1a54:	61 90       	ld	r6, Z+
    1a56:	71 90       	ld	r7, Z+
    1a58:	6f 01       	movw	r12, r30
    1a5a:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <adsChars+0x3c>
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1a68:	4b 01       	movw	r8, r22
    1a6a:	5c 01       	movw	r10, r24
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	ac 01       	movw	r20, r24
    1a70:	c3 01       	movw	r24, r6
    1a72:	b2 01       	movw	r22, r4
    1a74:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
    1a78:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <ads+0x18>
    1a7c:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <ads+0x19>
    1a80:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <ads+0x1a>
    1a84:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <ads+0x1b>
    1a88:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	25 89       	ldd	r18, Z+21	; 0x15
    1a90:	36 89       	ldd	r19, Z+22	; 0x16
    1a92:	47 89       	ldd	r20, Z+23	; 0x17
    1a94:	50 8d       	ldd	r21, Z+24	; 0x18
    1a96:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1a9a:	2b 01       	movw	r4, r22
    1a9c:	3c 01       	movw	r6, r24
		_amperage[i] = _sumAamperage[i] / adsChars.measurementsCount * ads.amperageStep * settings.multiplierAmperage[i];
    1a9e:	f1 01       	movw	r30, r2
    1aa0:	61 91       	ld	r22, Z+
    1aa2:	71 91       	ld	r23, Z+
    1aa4:	81 91       	ld	r24, Z+
    1aa6:	91 91       	ld	r25, Z+
    1aa8:	1f 01       	movw	r2, r30
    1aaa:	a5 01       	movw	r20, r10
    1aac:	94 01       	movw	r18, r8
    1aae:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
    1ab2:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <ads+0x1c>
    1ab6:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <ads+0x1d>
    1aba:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <ads+0x1e>
    1abe:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <ads+0x1f>
    1ac2:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	21 a1       	ldd	r18, Z+33	; 0x21
    1aca:	32 a1       	ldd	r19, Z+34	; 0x22
    1acc:	43 a1       	ldd	r20, Z+35	; 0x23
    1ace:	54 a1       	ldd	r21, Z+36	; 0x24
    1ad0:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1ad4:	4b 01       	movw	r8, r22
    1ad6:	5c 01       	movw	r10, r24
		settings.impedance[i] = _voltage[i] / _amperage[i];
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	c3 01       	movw	r24, r6
    1ade:	b2 01       	movw	r22, r4
    1ae0:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	66 83       	std	Z+6, r22	; 0x06
    1ae8:	77 83       	std	Z+7, r23	; 0x07
    1aea:	80 87       	std	Z+8, r24	; 0x08
    1aec:	91 87       	std	Z+9, r25	; 0x09
		Serial.print(F("V=")); Serial.println(_voltage[i], 5);
    1aee:	63 e9       	ldi	r22, 0x93	; 147
    1af0:	71 e0       	ldi	r23, 0x01	; 1
    1af2:	89 e2       	ldi	r24, 0x29	; 41
    1af4:	93 e0       	ldi	r25, 0x03	; 3
    1af6:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    1afa:	25 e0       	ldi	r18, 0x05	; 5
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	b3 01       	movw	r22, r6
    1b00:	a2 01       	movw	r20, r4
    1b02:	89 e2       	ldi	r24, 0x29	; 41
    1b04:	93 e0       	ldi	r25, 0x03	; 3
    1b06:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
		Serial.print(F("A=")); Serial.println(_amperage[i], 5);
    1b0a:	60 e9       	ldi	r22, 0x90	; 144
    1b0c:	71 e0       	ldi	r23, 0x01	; 1
    1b0e:	89 e2       	ldi	r24, 0x29	; 41
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    1b16:	25 e0       	ldi	r18, 0x05	; 5
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	b5 01       	movw	r22, r10
    1b1c:	a4 01       	movw	r20, r8
    1b1e:	89 e2       	ldi	r24, 0x29	; 41
    1b20:	93 e0       	ldi	r25, 0x03	; 3
    1b22:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
		Serial.print(F("R=")); Serial.println(settings.impedance[i], 5);
    1b26:	6d e8       	ldi	r22, 0x8D	; 141
    1b28:	71 e0       	ldi	r23, 0x01	; 1
    1b2a:	89 e2       	ldi	r24, 0x29	; 41
    1b2c:	93 e0       	ldi	r25, 0x03	; 3
    1b2e:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    1b32:	f8 01       	movw	r30, r16
    1b34:	46 81       	ldd	r20, Z+6	; 0x06
    1b36:	57 81       	ldd	r21, Z+7	; 0x07
    1b38:	60 85       	ldd	r22, Z+8	; 0x08
    1b3a:	71 85       	ldd	r23, Z+9	; 0x09
    1b3c:	25 e0       	ldi	r18, 0x05	; 5
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	89 e2       	ldi	r24, 0x29	; 41
    1b42:	93 e0       	ldi	r25, 0x03	; 3
    1b44:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
		if (i == 2) {
    1b48:	f2 e0       	ldi	r31, 0x02	; 2
    1b4a:	ff 12       	cpse	r15, r31
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <_Z14setupImpedancev+0x29c>
			Serial.println(F("---end---"));
    1b4e:	63 e8       	ldi	r22, 0x83	; 131
    1b50:	71 e0       	ldi	r23, 0x01	; 1
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <_Z14setupImpedancev+0x2a0>
		} else {
			Serial.println(F("------"));
    1b54:	6c e7       	ldi	r22, 0x7C	; 124
    1b56:	71 e0       	ldi	r23, 0x01	; 1
    1b58:	89 e2       	ldi	r24, 0x29	; 41
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
		index++;
	}
	
	Serial.println(F("Impedance setup"));
				
	for(byte i = 0; i < 3; i++) {
    1b60:	f3 94       	inc	r15
    1b62:	0c 5f       	subi	r16, 0xFC	; 252
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	f8 12       	cpse	r15, r24
    1b6a:	6a cf       	rjmp	.-300    	; 0x1a40 <_Z14setupImpedancev+0x188>
			Serial.println(F("---end---"));
		} else {
			Serial.println(F("------"));
		}
	}
}
    1b6c:	e0 96       	adiw	r28, 0x30	; 48
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	df 90       	pop	r13
    1b86:	cf 90       	pop	r12
    1b88:	bf 90       	pop	r11
    1b8a:	af 90       	pop	r10
    1b8c:	9f 90       	pop	r9
    1b8e:	8f 90       	pop	r8
    1b90:	7f 90       	pop	r7
    1b92:	6f 90       	pop	r6
    1b94:	5f 90       	pop	r5
    1b96:	4f 90       	pop	r4
    1b98:	3f 90       	pop	r3
    1b9a:	2f 90       	pop	r2
    1b9c:	08 95       	ret

00001b9e <_Z21button1LongPressStartv>:
}

/*
	Обработчик длиннкого клика первой клавиши
*/
void button1LongPressStart() {
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
	// выбор множителя x1x10x100x0.1x0.01x0.001 в режимах установки множителя
	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
    1ba6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <modeWork>
    1baa:	9c ef       	ldi	r25, 0xFC	; 252
    1bac:	98 0f       	add	r25, r24
    1bae:	96 30       	cpi	r25, 0x06	; 6
    1bb0:	58 f5       	brcc	.+86     	; 0x1c08 <_Z21button1LongPressStartv+0x6a>
		setDigit.curMultiplier = setDigit.curMultiplier >= 100.0f? 0.001f: setDigit.curMultiplier * 10.0f;
    1bb2:	c0 90 e7 01 	lds	r12, 0x01E7	; 0x8001e7 <setDigit+0x4>
    1bb6:	d0 90 e8 01 	lds	r13, 0x01E8	; 0x8001e8 <setDigit+0x5>
    1bba:	e0 90 e9 01 	lds	r14, 0x01E9	; 0x8001e9 <setDigit+0x6>
    1bbe:	f0 90 ea 01 	lds	r15, 0x01EA	; 0x8001ea <setDigit+0x7>
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	48 ec       	ldi	r20, 0xC8	; 200
    1bc8:	52 e4       	ldi	r21, 0x42	; 66
    1bca:	c7 01       	movw	r24, r14
    1bcc:	b6 01       	movw	r22, r12
    1bce:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1bd2:	87 ff       	sbrs	r24, 7
    1bd4:	09 c0       	rjmp	.+18     	; 0x1be8 <_Z21button1LongPressStartv+0x4a>
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	c7 01       	movw	r24, r14
    1be0:	b6 01       	movw	r22, r12
    1be2:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <_Z21button1LongPressStartv+0x52>
    1be8:	6f e6       	ldi	r22, 0x6F	; 111
    1bea:	72 e1       	ldi	r23, 0x12	; 18
    1bec:	83 e8       	ldi	r24, 0x83	; 131
    1bee:	9a e3       	ldi	r25, 0x3A	; 58
    1bf0:	60 93 e7 01 	sts	0x01E7, r22	; 0x8001e7 <setDigit+0x4>
    1bf4:	70 93 e8 01 	sts	0x01E8, r23	; 0x8001e8 <setDigit+0x5>
    1bf8:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <setDigit+0x6>
    1bfc:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <setDigit+0x7>
		lcdUpdateScreen = true;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <lcdUpdateScreen>
		return;
    1c06:	20 c0       	rjmp	.+64     	; 0x1c48 <_Z21button1LongPressStartv+0xaa>
	}
	
	// получение текущих значений сопротивления в режимах установки импеданса
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
    1c08:	8a 30       	cpi	r24, 0x0A	; 10
    1c0a:	99 f4       	brne	.+38     	; 0x1c32 <_Z21button1LongPressStartv+0x94>
		lcd.clear();
    1c0c:	87 ed       	ldi	r24, 0xD7	; 215
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN17LiquidCrystal_I2C5clearEv>
		lcd.print(F("Impedance setup"));
    1c14:	65 e5       	ldi	r22, 0x55	; 85
    1c16:	71 e0       	ldi	r23, 0x01	; 1
    1c18:	87 ed       	ldi	r24, 0xD7	; 215
    1c1a:	91 e0       	ldi	r25, 0x01	; 1
    1c1c:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
		setupImpedance();
    1c20:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <_Z14setupImpedancev>
		lcd.clear();
    1c24:	87 ed       	ldi	r24, 0xD7	; 215
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN17LiquidCrystal_I2C5clearEv>
		modeWork.prev = 0;
    1c2c:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <modeWork+0x1>
    1c30:	0b c0       	rjmp	.+22     	; 0x1c48 <_Z21button1LongPressStartv+0xaa>
		return;
	}
	
	// В режимах просмотра данных, длинный клик переводит в режим вопроса о продолжении измерений
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1c32:	93 ef       	ldi	r25, 0xF3	; 243
    1c34:	98 0f       	add	r25, r24
    1c36:	99 30       	cpi	r25, 0x09	; 9
    1c38:	10 f4       	brcc	.+4      	; 0x1c3e <_Z21button1LongPressStartv+0xa0>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
    1c3a:	8e e1       	ldi	r24, 0x1E	; 30
    1c3c:	03 c0       	rjmp	.+6      	; 0x1c44 <_Z21button1LongPressStartv+0xa6>
		return;
	}
	
	// В ржеиме выбора о старте измерений - отклоенние вопроса
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1c3e:	8e 31       	cpi	r24, 0x1E	; 30
    1c40:	19 f4       	brne	.+6      	; 0x1c48 <_Z21button1LongPressStartv+0xaa>
		modeWork.current = MW_SHOWING_START;
    1c42:	8d e0       	ldi	r24, 0x0D	; 13
    1c44:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <modeWork>
	}
}
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	df 90       	pop	r13
    1c4e:	cf 90       	pop	r12
    1c50:	08 95       	ret

00001c52 <_Z12setEditValuev>:

/*
	Получение значений настройки в настроечную переменную для изменения во время настроек
*/
void setEditValue() {
	lcdUpdateScreen = true;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <lcdUpdateScreen>
	switch(modeWork.current) {
    1c58:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <modeWork>
    1c5c:	8e 2f       	mov	r24, r30
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	fc 01       	movw	r30, r24
    1c62:	31 97       	sbiw	r30, 0x01	; 1
    1c64:	e9 30       	cpi	r30, 0x09	; 9
    1c66:	f1 05       	cpc	r31, r1
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <_Z12setEditValuev+0x1a>
    1c6a:	57 c0       	rjmp	.+174    	; 0x1d1a <_Z12setEditValuev+0xc8>
    1c6c:	e8 59       	subi	r30, 0x98	; 152
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			setDigit.value = settings.connectionType;
    1c74:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <settings+0x1>
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <_Z12setEditValuev+0x2c>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			setDigit.value = settings.currentAmperageGain;
    1c7a:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <settings+0x13>
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__floatunsisf>
    1c88:	60 93 e3 01 	sts	0x01E3, r22	; 0x8001e3 <setDigit>
    1c8c:	70 93 e4 01 	sts	0x01E4, r23	; 0x8001e4 <setDigit+0x1>
    1c90:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <setDigit+0x2>
    1c94:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <setDigit+0x3>
			break;
    1c98:	40 c0       	rjmp	.+128    	; 0x1d1a <_Z12setEditValuev+0xc8>
		case MW_SETUP_GAIN_VOLTAGE:
			setDigit.value = settings.currentVoltageGain;
    1c9a:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <settings+0x14>
    1c9e:	ef cf       	rjmp	.-34     	; 0x1c7e <_Z12setEditValuev+0x2c>
			break;			
		case MW_SETUP_MULT_VOLTAGE_AB:
			setDigit.value = settings.multiplierVoltage[0];
    1ca0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <settings+0x15>
    1ca4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <settings+0x16>
    1ca8:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <settings+0x17>
    1cac:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <settings+0x18>
    1cb0:	2c c0       	rjmp	.+88     	; 0x1d0a <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			setDigit.value = settings.multiplierVoltage[1];
    1cb2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <settings+0x19>
    1cb6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <settings+0x1a>
    1cba:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <settings+0x1b>
    1cbe:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <settings+0x1c>
    1cc2:	23 c0       	rjmp	.+70     	; 0x1d0a <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			setDigit.value = settings.multiplierVoltage[2];
    1cc4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <settings+0x1d>
    1cc8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <settings+0x1e>
    1ccc:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <settings+0x1f>
    1cd0:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <settings+0x20>
    1cd4:	1a c0       	rjmp	.+52     	; 0x1d0a <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			setDigit.value = settings.multiplierAmperage[0];
    1cd6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <settings+0x21>
    1cda:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <settings+0x22>
    1cde:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <settings+0x23>
    1ce2:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <settings+0x24>
    1ce6:	11 c0       	rjmp	.+34     	; 0x1d0a <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			setDigit.value = settings.multiplierAmperage[1];
    1ce8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <settings+0x25>
    1cec:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <settings+0x26>
    1cf0:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <settings+0x27>
    1cf4:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <settings+0x28>
    1cf8:	08 c0       	rjmp	.+16     	; 0x1d0a <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			setDigit.value = settings.multiplierAmperage[2];
    1cfa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <settings+0x29>
    1cfe:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <settings+0x2a>
    1d02:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <settings+0x2b>
    1d06:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <settings+0x2c>
    1d0a:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <setDigit>
    1d0e:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <setDigit+0x1>
    1d12:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <setDigit+0x2>
    1d16:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <setDigit+0x3>
			break;
	}
	setDigit.curMultiplier = 1.0f;
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a0 e8       	ldi	r26, 0x80	; 128
    1d20:	bf e3       	ldi	r27, 0x3F	; 63
    1d22:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <setDigit+0x4>
    1d26:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <setDigit+0x5>
    1d2a:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <setDigit+0x6>
    1d2e:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <setDigit+0x7>
    1d32:	08 95       	ret

00001d34 <_Z12button2Clickv>:
}

/*
	Обработчика короткого клика второй клавиши
*/
void button2Click() {
    1d34:	cf 92       	push	r12
    1d36:	df 92       	push	r13
    1d38:	ef 92       	push	r14
    1d3a:	ff 92       	push	r15
    1d3c:	cf 93       	push	r28
	// Если мы в настройках сопротивления то обнуляем значения сопротивлений
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
    1d3e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <modeWork>
    1d42:	8a 30       	cpi	r24, 0x0A	; 10
    1d44:	e1 f4       	brne	.+56     	; 0x1d7e <_Z12button2Clickv+0x4a>
		settings.impedance[0] = 0;
    1d46:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <settings+0x6>
    1d4a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <settings+0x7>
    1d4e:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <settings+0x8>
    1d52:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <settings+0x9>
		settings.impedance[1] = 0;
    1d56:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <settings+0xa>
    1d5a:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <settings+0xb>
    1d5e:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <settings+0xc>
    1d62:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <settings+0xd>
		settings.impedance[2] = 0;
    1d66:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <settings+0xe>
    1d6a:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <settings+0xf>
    1d6e:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <settings+0x10>
    1d72:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <settings+0x11>
		lcdUpdateScreen = true;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <lcdUpdateScreen>
		return;
    1d7c:	70 c0       	rjmp	.+224    	; 0x1e5e <_Z12button2Clickv+0x12a>
	}
	
	// В режиме предупреждения необходимости настроек - переводим в режим настроек
	if (modeWork.current == MW_NEED_SETUP) {
    1d7e:	81 11       	cpse	r24, r1
    1d80:	0a c0       	rjmp	.+20     	; 0x1d96 <_Z12button2Clickv+0x62>
		lcdUpdateScreen = true;
    1d82:	c1 e0       	ldi	r28, 0x01	; 1
    1d84:	c0 93 d4 01 	sts	0x01D4, r28	; 0x8001d4 <lcdUpdateScreen>
		modeWork.current = MW_SETUP_START;
    1d88:	c0 93 d5 01 	sts	0x01D5, r28	; 0x8001d5 <modeWork>
		setEditValue();
    1d8c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_Z12setEditValuev>
		settings.isSetupMode = true;
    1d90:	c0 93 fd 01 	sts	0x01FD, r28	; 0x8001fd <settings+0x12>
		return;
    1d94:	64 c0       	rjmp	.+200    	; 0x1e5e <_Z12button2Clickv+0x12a>
	}
		
	// Если режим настроек
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
    1d96:	9f ef       	ldi	r25, 0xFF	; 255
    1d98:	98 0f       	add	r25, r24
    1d9a:	9a 30       	cpi	r25, 0x0A	; 10
    1d9c:	08 f0       	brcs	.+2      	; 0x1da0 <_Z12button2Clickv+0x6c>
    1d9e:	4e c0       	rjmp	.+156    	; 0x1e3c <_Z12button2Clickv+0x108>
		lcdUpdateScreen = true;
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	c1 f4       	brne	.+48     	; 0x1dda <_Z12button2Clickv+0xa6>
			// режим выбора подключения - свапаем режим
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	a9 01       	movw	r20, r18
    1db0:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <setDigit>
    1db4:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <setDigit+0x1>
    1db8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <setDigit+0x2>
    1dbc:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <setDigit+0x3>
    1dc0:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	21 f0       	breq	.+8      	; 0x1dd0 <_Z12button2Clickv+0x9c>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	dc 01       	movw	r26, r24
    1dce:	2d c0       	rjmp	.+90     	; 0x1e2a <_Z12button2Clickv+0xf6>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e8       	ldi	r26, 0x80	; 128
    1dd6:	bf e3       	ldi	r27, 0x3F	; 63
    1dd8:	28 c0       	rjmp	.+80     	; 0x1e2a <_Z12button2Clickv+0xf6>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в меньшую сторону
			setDigit.value = setDigit.value > 0?  setDigit.value - 1: 0;
		}else {
			// Любой другой режим уменьшаем значение на величину curMultiplier
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    1dda:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <setDigit+0x4>
    1dde:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <setDigit+0x5>
    1de2:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <setDigit+0x6>
    1de6:	50 91 ea 01 	lds	r21, 0x01EA	; 0x8001ea <setDigit+0x7>
    1dea:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <setDigit>
    1dee:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <setDigit+0x1>
    1df2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <setDigit+0x2>
    1df6:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <setDigit+0x3>
    1dfa:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
    1dfe:	6b 01       	movw	r12, r22
    1e00:	7c 01       	movw	r14, r24
			if (setDigit.value < 0) {
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	a9 01       	movw	r20, r18
    1e08:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    1e0c:	87 fd       	sbrc	r24, 7
    1e0e:	09 c0       	rjmp	.+18     	; 0x1e22 <_Z12button2Clickv+0xee>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в меньшую сторону
			setDigit.value = setDigit.value > 0?  setDigit.value - 1: 0;
		}else {
			// Любой другой режим уменьшаем значение на величину curMultiplier
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    1e10:	c0 92 e3 01 	sts	0x01E3, r12	; 0x8001e3 <setDigit>
    1e14:	d0 92 e4 01 	sts	0x01E4, r13	; 0x8001e4 <setDigit+0x1>
    1e18:	e0 92 e5 01 	sts	0x01E5, r14	; 0x8001e5 <setDigit+0x2>
    1e1c:	f0 92 e6 01 	sts	0x01E6, r15	; 0x8001e6 <setDigit+0x3>
    1e20:	1e c0       	rjmp	.+60     	; 0x1e5e <_Z12button2Clickv+0x12a>
			if (setDigit.value < 0) {
				setDigit.value = 999.999f;
    1e22:	80 ef       	ldi	r24, 0xF0	; 240
    1e24:	9f ef       	ldi	r25, 0xFF	; 255
    1e26:	a9 e7       	ldi	r26, 0x79	; 121
    1e28:	b4 e4       	ldi	r27, 0x44	; 68
    1e2a:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <setDigit>
    1e2e:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <setDigit+0x1>
    1e32:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <setDigit+0x2>
    1e36:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <setDigit+0x3>
    1e3a:	11 c0       	rjmp	.+34     	; 0x1e5e <_Z12button2Clickv+0x12a>
		}
		return;
	}
	
	// В режиме отображения данных листаем назад меню
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1e3c:	23 ef       	ldi	r18, 0xF3	; 243
    1e3e:	28 0f       	add	r18, r24
    1e40:	29 30       	cpi	r18, 0x09	; 9
    1e42:	30 f4       	brcc	.+12     	; 0x1e50 <_Z12button2Clickv+0x11c>
		modeWork.current = modeWork.current == MW_SHOWING_START? MW_SHOWING_STOP: modeWork.current - 1;
    1e44:	8d 30       	cpi	r24, 0x0D	; 13
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <_Z12button2Clickv+0x116>
    1e48:	95 e1       	ldi	r25, 0x15	; 21
    1e4a:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <modeWork>
		return;
    1e4e:	07 c0       	rjmp	.+14     	; 0x1e5e <_Z12button2Clickv+0x12a>
	}
	
	// Если вопрос о начале измерений, то клик его отклоняет
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1e50:	8e 31       	cpi	r24, 0x1E	; 30
    1e52:	29 f4       	brne	.+10     	; 0x1e5e <_Z12button2Clickv+0x12a>
		modeWork.current = MW_SHOWING_START;
    1e54:	8d e0       	ldi	r24, 0x0D	; 13
    1e56:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <modeWork>
		settings.isReadyToWork = MM_STOP;
    1e5a:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <settings>
		return;
	}
}
    1e5e:	cf 91       	pop	r28
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	cf 90       	pop	r12
    1e68:	08 95       	ret

00001e6a <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>:
}

/*
	Установка степени усиления АЦП
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	ec 01       	movw	r28, r24
    1e72:	16 2f       	mov	r17, r22
	Serial.print(F("ADS: "));
    1e74:	69 e3       	ldi	r22, 0x39	; 57
    1e76:	71 e0       	ldi	r23, 0x01	; 1
    1e78:	89 e2       	ldi	r24, 0x29	; 41
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
	switch(_index) {
    1e80:	13 30       	cpi	r17, 0x03	; 3
    1e82:	21 f1       	breq	.+72     	; 0x1ecc <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x62>
    1e84:	68 f4       	brcc	.+26     	; 0x1ea0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x36>
    1e86:	11 30       	cpi	r17, 0x01	; 1
    1e88:	c1 f0       	breq	.+48     	; 0x1eba <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x50>
    1e8a:	12 30       	cpi	r17, 0x02	; 2
    1e8c:	89 f5       	brne	.+98     	; 0x1ef0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x86>
		case 1:
			Serial.println(F("GAIN_ONE"));
			_ads->setGain(GAIN_ONE);
			break;
		case 2:
			Serial.println(F("GAIN_TWO"));
    1e8e:	67 e2       	ldi	r22, 0x27	; 39
    1e90:	71 e0       	ldi	r23, 0x01	; 1
    1e92:	89 e2       	ldi	r24, 0x29	; 41
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_TWO);
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	74 e0       	ldi	r23, 0x04	; 4
    1e9e:	30 c0       	rjmp	.+96     	; 0x1f00 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
/*
	Установка степени усиления АЦП
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	Serial.print(F("ADS: "));
	switch(_index) {
    1ea0:	14 30       	cpi	r17, 0x04	; 4
    1ea2:	e9 f0       	breq	.+58     	; 0x1ede <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x74>
    1ea4:	15 30       	cpi	r17, 0x05	; 5
    1ea6:	21 f5       	brne	.+72     	; 0x1ef0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x86>
		case 4:
			Serial.println(F("GAIN_EIGHT"));
			_ads->setGain(GAIN_EIGHT);
			break;
		case 5:
			Serial.println(F("GAIN_SIXTEEN"));
    1ea8:	65 e0       	ldi	r22, 0x05	; 5
    1eaa:	71 e0       	ldi	r23, 0x01	; 1
    1eac:	89 e2       	ldi	r24, 0x29	; 41
    1eae:	93 e0       	ldi	r25, 0x03	; 3
    1eb0:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_SIXTEEN);
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	7a e0       	ldi	r23, 0x0A	; 10
    1eb8:	23 c0       	rjmp	.+70     	; 0x1f00 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	Serial.print(F("ADS: "));
	switch(_index) {
		case 1:
			Serial.println(F("GAIN_ONE"));
    1eba:	60 e3       	ldi	r22, 0x30	; 48
    1ebc:	71 e0       	ldi	r23, 0x01	; 1
    1ebe:	89 e2       	ldi	r24, 0x29	; 41
    1ec0:	93 e0       	ldi	r25, 0x03	; 3
    1ec2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_ONE);
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	72 e0       	ldi	r23, 0x02	; 2
    1eca:	1a c0       	rjmp	.+52     	; 0x1f00 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
		case 2:
			Serial.println(F("GAIN_TWO"));
			_ads->setGain(GAIN_TWO);
			break;
		case 3:
			Serial.println(F("GAIN_FOUR"));
    1ecc:	6d e1       	ldi	r22, 0x1D	; 29
    1ece:	71 e0       	ldi	r23, 0x01	; 1
    1ed0:	89 e2       	ldi	r24, 0x29	; 41
    1ed2:	93 e0       	ldi	r25, 0x03	; 3
    1ed4:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_FOUR);
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	76 e0       	ldi	r23, 0x06	; 6
    1edc:	11 c0       	rjmp	.+34     	; 0x1f00 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
			break;
		case 4:
			Serial.println(F("GAIN_EIGHT"));
    1ede:	62 e1       	ldi	r22, 0x12	; 18
    1ee0:	71 e0       	ldi	r23, 0x01	; 1
    1ee2:	89 e2       	ldi	r24, 0x29	; 41
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
    1ee6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_EIGHT);
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	78 e0       	ldi	r23, 0x08	; 8
    1eee:	08 c0       	rjmp	.+16     	; 0x1f00 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
		case 5:
			Serial.println(F("GAIN_SIXTEEN"));
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			Serial.println(F("GAIN_TWOTHIRDS"));
    1ef0:	66 ef       	ldi	r22, 0xF6	; 246
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	89 e2       	ldi	r24, 0x29	; 41
    1ef6:	93 e0       	ldi	r25, 0x03	; 3
    1ef8:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_TWOTHIRDS);
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	ce 01       	movw	r24, r28
			break;
	}
}
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
			Serial.println(F("GAIN_SIXTEEN"));
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			Serial.println(F("GAIN_TWOTHIRDS"));
			_ads->setGain(GAIN_TWOTHIRDS);
    1f08:	0c 94 38 14 	jmp	0x2870	; 0x2870 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>

00001f0c <_Z18initAdsVoltageGainv>:
}

/*
	Инициализация усиления АЦП по напряжению
*/
void initAdsVoltageGain() {
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
	setAdsGainByIndex(&adsVoltage, settings.currentVoltageGain);
    1f10:	cb ee       	ldi	r28, 0xEB	; 235
    1f12:	d1 e0       	ldi	r29, 0x01	; 1
    1f14:	6c 89       	ldd	r22, Y+20	; 0x14
    1f16:	80 e6       	ldi	r24, 0x60	; 96
    1f18:	92 e0       	ldi	r25, 0x02	; 2
    1f1a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.voltageStep = ads.gainStep[settings.currentVoltageGain] / 1000.0;
    1f1e:	ec 89       	ldd	r30, Y+20	; 0x14
    1f20:	84 e0       	ldi	r24, 0x04	; 4
    1f22:	e8 9f       	mul	r30, r24
    1f24:	f0 01       	movw	r30, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	e1 5e       	subi	r30, 0xE1	; 225
    1f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a e7       	ldi	r20, 0x7A	; 122
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	60 81       	ld	r22, Z
    1f36:	71 81       	ldd	r23, Z+1	; 0x01
    1f38:	82 81       	ldd	r24, Z+2	; 0x02
    1f3a:	93 81       	ldd	r25, Z+3	; 0x03
    1f3c:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
    1f40:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <ads+0x18>
    1f44:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <ads+0x19>
    1f48:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ads+0x1a>
    1f4c:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <ads+0x1b>
}
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	08 95       	ret

00001f56 <_Z19initAdsAmperageGainv>:

/*
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
    1f5a:	cb ee       	ldi	r28, 0xEB	; 235
    1f5c:	d1 e0       	ldi	r29, 0x01	; 1
    1f5e:	6b 89       	ldd	r22, Y+19	; 0x13
    1f60:	8b e5       	ldi	r24, 0x5B	; 91
    1f62:	92 e0       	ldi	r25, 0x02	; 2
    1f64:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    1f68:	eb 89       	ldd	r30, Y+19	; 0x13
    1f6a:	84 e0       	ldi	r24, 0x04	; 4
    1f6c:	e8 9f       	mul	r30, r24
    1f6e:	f0 01       	movw	r30, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	e1 5e       	subi	r30, 0xE1	; 225
    1f74:	fe 4f       	sbci	r31, 0xFE	; 254
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a e7       	ldi	r20, 0x7A	; 122
    1f7c:	54 e4       	ldi	r21, 0x44	; 68
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
    1f8a:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <ads+0x1c>
    1f8e:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <ads+0x1d>
    1f92:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ads+0x1e>
    1f96:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <ads+0x1f>
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	08 95       	ret

00001fa0 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1fa0:	26 e0       	ldi	r18, 0x06	; 6
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	55 e2       	ldi	r21, 0x25	; 37
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	89 e2       	ldi	r24, 0x29	; 41
    1fac:	93 e0       	ldi	r25, 0x03	; 3
    1fae:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_ZN14HardwareSerial5beginEmh>
void setupImpedance();
bool isSingleErrorExists(float, float, byte);

void setup() {
	Serial.begin(9600);
	Serial.println(F("Initialization..."));
    1fb2:	6c e2       	ldi	r22, 0x2C	; 44
    1fb4:	75 e0       	ldi	r23, 0x05	; 5
    1fb6:	89 e2       	ldi	r24, 0x29	; 41
    1fb8:	93 e0       	ldi	r25, 0x03	; 3
    1fba:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализация АЦП
	adsVoltage.setGain(GAIN_TWOTHIRDS);
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	80 e6       	ldi	r24, 0x60	; 96
    1fc4:	92 e0       	ldi	r25, 0x02	; 2
    1fc6:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsVoltage.begin();
    1fca:	80 e6       	ldi	r24, 0x60	; 96
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	0e 94 34 14 	call	0x2868	; 0x2868 <_ZN16Adafruit_ADS10155beginEv>
	adsAmperage.setGain(GAIN_TWOTHIRDS);
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	8b e5       	ldi	r24, 0x5B	; 91
    1fd8:	92 e0       	ldi	r25, 0x02	; 2
    1fda:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsAmperage.begin();
    1fde:	8b e5       	ldi	r24, 0x5B	; 91
    1fe0:	92 e0       	ldi	r25, 0x02	; 2
    1fe2:	0e 94 34 14 	call	0x2868	; 0x2868 <_ZN16Adafruit_ADS10155beginEv>
	// Инициализация LCD модуля
	lcd.init();
    1fe6:	87 ed       	ldi	r24, 0xD7	; 215
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	0e 94 d5 15 	call	0x2baa	; 0x2baa <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    1fee:	87 ed       	ldi	r24, 0xD7	; 215
    1ff0:	91 e0       	ldi	r25, 0x01	; 1
    1ff2:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    1ff6:	87 ed       	ldi	r24, 0xD7	; 215
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
    1ffa:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN17LiquidCrystal_I2C5clearEv>
	Serial.println(F("LCD inited!"));
    1ffe:	60 e2       	ldi	r22, 0x20	; 32
    2000:	75 e0       	ldi	r23, 0x05	; 5
    2002:	89 e2       	ldi	r24, 0x29	; 41
    2004:	93 e0       	ldi	r25, 0x03	; 3
    2006:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализая кнопок
	button1Callback.attachClick(button1Click);								// Установка callback функции на короткий клик
    200a:	6b e4       	ldi	r22, 0x4B	; 75
    200c:	73 e0       	ldi	r23, 0x03	; 3
    200e:	8a e3       	ldi	r24, 0x3A	; 58
    2010:	92 e0       	ldi	r25, 0x02	; 2
    2012:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN9OneButton11attachClickEPFvvE>
	button1Callback.attachLongPressStart(button1LongPressStart);			// Установка callback функции на длинный клик
    2016:	6f ec       	ldi	r22, 0xCF	; 207
    2018:	7d e0       	ldi	r23, 0x0D	; 13
    201a:	8a e3       	ldi	r24, 0x3A	; 58
    201c:	92 e0       	ldi	r25, 0x02	; 2
    201e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN9OneButton20attachLongPressStartEPFvvE>
	button1Callback.setDebounceTicks(30);									// Время до идентификации клика в мс для нивилирования дребезга контактов
    2022:	6e e1       	ldi	r22, 0x1E	; 30
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	8a e3       	ldi	r24, 0x3A	; 58
    2028:	92 e0       	ldi	r25, 0x02	; 2
    202a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <_ZN9OneButton16setDebounceTicksEi>
	button1Callback.setClickTicks(200);										// Количество мс нажатия для того чтобы клик был идентифицирован
    202e:	68 ec       	ldi	r22, 0xC8	; 200
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	8a e3       	ldi	r24, 0x3A	; 58
    2034:	92 e0       	ldi	r25, 0x02	; 2
    2036:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN9OneButton13setClickTicksEi>
	button1Callback.setPressTicks(1000);									// Количество мс нажатия для идентификаци длинного клика
    203a:	68 ee       	ldi	r22, 0xE8	; 232
    203c:	73 e0       	ldi	r23, 0x03	; 3
    203e:	8a e3       	ldi	r24, 0x3A	; 58
    2040:	92 e0       	ldi	r25, 0x02	; 2
    2042:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 1 inited!"));
    2046:	6f e0       	ldi	r22, 0x0F	; 15
    2048:	75 e0       	ldi	r23, 0x05	; 5
    204a:	89 e2       	ldi	r24, 0x29	; 41
    204c:	93 e0       	ldi	r25, 0x03	; 3
    204e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	button2Callback.attachClick(button2Click);
    2052:	6a e9       	ldi	r22, 0x9A	; 154
    2054:	7e e0       	ldi	r23, 0x0E	; 14
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	92 e0       	ldi	r25, 0x02	; 2
    205a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZN9OneButton11attachClickEPFvvE>
	button2Callback.attachLongPressStart(button2LongPressStart);
    205e:	64 e8       	ldi	r22, 0x84	; 132
    2060:	73 e1       	ldi	r23, 0x13	; 19
    2062:	89 e1       	ldi	r24, 0x19	; 25
    2064:	92 e0       	ldi	r25, 0x02	; 2
    2066:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN9OneButton20attachLongPressStartEPFvvE>
	button2Callback.setDebounceTicks(30);
    206a:	6e e1       	ldi	r22, 0x1E	; 30
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	89 e1       	ldi	r24, 0x19	; 25
    2070:	92 e0       	ldi	r25, 0x02	; 2
    2072:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <_ZN9OneButton16setDebounceTicksEi>
	button2Callback.setClickTicks(200);
    2076:	68 ec       	ldi	r22, 0xC8	; 200
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	89 e1       	ldi	r24, 0x19	; 25
    207c:	92 e0       	ldi	r25, 0x02	; 2
    207e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN9OneButton13setClickTicksEi>
	button2Callback.setPressTicks(1000);
    2082:	68 ee       	ldi	r22, 0xE8	; 232
    2084:	73 e0       	ldi	r23, 0x03	; 3
    2086:	89 e1       	ldi	r24, 0x19	; 25
    2088:	92 e0       	ldi	r25, 0x02	; 2
    208a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 2 inited!"));
    208e:	6e ef       	ldi	r22, 0xFE	; 254
    2090:	74 e0       	ldi	r23, 0x04	; 4
    2092:	89 e2       	ldi	r24, 0x29	; 41
    2094:	93 e0       	ldi	r25, 0x03	; 3
    2096:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализация старт-пакета данных
	if (eeprom_read_byte(&eeprom_first_start) != 100) {
    209a:	87 e2       	ldi	r24, 0x27	; 39
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <eeprom_read_byte>
    20a2:	84 36       	cpi	r24, 0x64	; 100
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <setup+0x108>
    20a6:	59 c0       	rjmp	.+178    	; 0x215a <setup+0x1ba>
		eeprom_update_byte(&eeprom_connection_type, CONNECTION_TYPE_STAR);
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	86 e2       	ldi	r24, 0x26	; 38
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_amperage, 0);
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	85 e2       	ldi	r24, 0x25	; 37
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_voltage, 0);
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	84 e2       	ldi	r24, 0x24	; 36
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <eeprom_update_byte>
		eeprom_update_float(&eeprom_impedance_ab, 0);
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	ba 01       	movw	r22, r20
    20cc:	80 e2       	ldi	r24, 0x20	; 32
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_bc, 0);
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	ba 01       	movw	r22, r20
    20da:	8c e1       	ldi	r24, 0x1C	; 28
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_ac, 0);
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	ba 01       	movw	r22, r20
    20e8:	88 e1       	ldi	r24, 0x18	; 24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ab, 0);
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	50 e0       	ldi	r21, 0x00	; 0
    20f4:	ba 01       	movw	r22, r20
    20f6:	84 e1       	ldi	r24, 0x14	; 20
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_bc, 0);
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	ba 01       	movw	r22, r20
    2104:	80 e1       	ldi	r24, 0x10	; 16
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ac, 0);
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	ba 01       	movw	r22, r20
    2112:	8c e0       	ldi	r24, 0x0C	; 12
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ab, 0);
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	ba 01       	movw	r22, r20
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_bc, 0);
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	ba 01       	movw	r22, r20
    212e:	84 e0       	ldi	r24, 0x04	; 4
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ac, 0);
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	ba 01       	movw	r22, r20
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
		eeprom_update_byte(&eeprom_first_start, 100);
    2144:	64 e6       	ldi	r22, 0x64	; 100
    2146:	87 e2       	ldi	r24, 0x27	; 39
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <eeprom_update_byte>
		Serial.println(F("EEPROM first start writed!"));
    214e:	63 ee       	ldi	r22, 0xE3	; 227
    2150:	74 e0       	ldi	r23, 0x04	; 4
    2152:	89 e2       	ldi	r24, 0x29	; 41
    2154:	93 e0       	ldi	r25, 0x03	; 3
    2156:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	// Теперь старт данные получаем из памяти при старте
	settings.currentAmperageGain = eeprom_read_byte(&eeprom_gain_amperage);
    215a:	85 e2       	ldi	r24, 0x25	; 37
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <eeprom_read_byte>
    2162:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <settings+0x13>
	settings.currentVoltageGain = eeprom_read_byte(&eeprom_gain_voltage);
    2166:	84 e2       	ldi	r24, 0x24	; 36
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <eeprom_read_byte>
    216e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <settings+0x14>
	settings.connectionType = eeprom_read_byte(&eeprom_connection_type);
    2172:	86 e2       	ldi	r24, 0x26	; 38
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <eeprom_read_byte>
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	81 11       	cpse	r24, r1
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <setup+0x1e2>
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <settings+0x1>
	settings.impedance[0] = eeprom_read_float(&eeprom_impedance_ab);
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    218e:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <settings+0x6>
    2192:	70 93 f2 01 	sts	0x01F2, r23	; 0x8001f2 <settings+0x7>
    2196:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <settings+0x8>
    219a:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <settings+0x9>
	settings.impedance[1] = eeprom_read_float(&eeprom_impedance_bc);
    219e:	8c e1       	ldi	r24, 0x1C	; 28
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    21a6:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <settings+0xa>
    21aa:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <settings+0xb>
    21ae:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <settings+0xc>
    21b2:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <settings+0xd>
	settings.impedance[2] = eeprom_read_float(&eeprom_impedance_ac);
    21b6:	88 e1       	ldi	r24, 0x18	; 24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    21be:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <settings+0xe>
    21c2:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <settings+0xf>
    21c6:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <settings+0x10>
    21ca:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <settings+0x11>
	settings.multiplierVoltage[0] = eeprom_read_float(&eeprom_voltage_mult_ab);
    21ce:	84 e1       	ldi	r24, 0x14	; 20
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    21d6:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <settings+0x15>
    21da:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <settings+0x16>
    21de:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <settings+0x17>
    21e2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <settings+0x18>
	settings.multiplierVoltage[1] = eeprom_read_float(&eeprom_voltage_mult_bc);
    21e6:	80 e1       	ldi	r24, 0x10	; 16
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    21ee:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <settings+0x19>
    21f2:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <settings+0x1a>
    21f6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <settings+0x1b>
    21fa:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <settings+0x1c>
	settings.multiplierVoltage[2] = eeprom_read_float(&eeprom_voltage_mult_ac);
    21fe:	8c e0       	ldi	r24, 0x0C	; 12
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    2206:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <settings+0x1d>
    220a:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <settings+0x1e>
    220e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <settings+0x1f>
    2212:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <settings+0x20>
	settings.multiplierAmperage[0] = eeprom_read_float(&eeprom_amperage_mult_ab);
    2216:	88 e0       	ldi	r24, 0x08	; 8
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    221e:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <settings+0x21>
    2222:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <settings+0x22>
    2226:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <settings+0x23>
    222a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <settings+0x24>
	settings.multiplierAmperage[1] = eeprom_read_float(&eeprom_amperage_mult_bc);
    222e:	84 e0       	ldi	r24, 0x04	; 4
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    2236:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <settings+0x25>
    223a:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <settings+0x26>
    223e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <settings+0x27>
    2242:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <settings+0x28>
	settings.multiplierAmperage[2] = eeprom_read_float(&eeprom_amperage_mult_ac);
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <eeprom_read_dword>
    224e:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <settings+0x29>
    2252:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <settings+0x2a>
    2256:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <settings+0x2b>
    225a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <settings+0x2c>
	Serial.println(F("EEPROM values:"));
    225e:	64 ed       	ldi	r22, 0xD4	; 212
    2260:	74 e0       	ldi	r23, 0x04	; 4
    2262:	89 e2       	ldi	r24, 0x29	; 41
    2264:	93 e0       	ldi	r25, 0x03	; 3
    2266:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("gain_amperage: ")); Serial.println(settings.currentAmperageGain);
    226a:	64 ec       	ldi	r22, 0xC4	; 196
    226c:	74 e0       	ldi	r23, 0x04	; 4
    226e:	89 e2       	ldi	r24, 0x29	; 41
    2270:	93 e0       	ldi	r25, 0x03	; 3
    2272:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    2276:	4a e0       	ldi	r20, 0x0A	; 10
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <settings+0x13>
    227e:	89 e2       	ldi	r24, 0x29	; 41
    2280:	93 e0       	ldi	r25, 0x03	; 3
    2282:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <_ZN5Print7printlnEhi>
	Serial.print(F("gain_voltage: ")); Serial.println(settings.currentVoltageGain);
    2286:	65 eb       	ldi	r22, 0xB5	; 181
    2288:	74 e0       	ldi	r23, 0x04	; 4
    228a:	89 e2       	ldi	r24, 0x29	; 41
    228c:	93 e0       	ldi	r25, 0x03	; 3
    228e:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    2292:	4a e0       	ldi	r20, 0x0A	; 10
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <settings+0x14>
    229a:	89 e2       	ldi	r24, 0x29	; 41
    229c:	93 e0       	ldi	r25, 0x03	; 3
    229e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <_ZN5Print7printlnEhi>
	Serial.print(F("connection_type: ")); Serial.println(settings.connectionType);
    22a2:	63 ea       	ldi	r22, 0xA3	; 163
    22a4:	74 e0       	ldi	r23, 0x04	; 4
    22a6:	89 e2       	ldi	r24, 0x29	; 41
    22a8:	93 e0       	ldi	r25, 0x03	; 3
    22aa:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    22ae:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <settings+0x1>
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	4a e0       	ldi	r20, 0x0A	; 10
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	89 e2       	ldi	r24, 0x29	; 41
    22ba:	93 e0       	ldi	r25, 0x03	; 3
    22bc:	0e 94 02 20 	call	0x4004	; 0x4004 <_ZN5Print7printlnEii>
	Serial.print(F("impedance_ab: ")); Serial.println(settings.impedance[0], 10);
    22c0:	64 e9       	ldi	r22, 0x94	; 148
    22c2:	74 e0       	ldi	r23, 0x04	; 4
    22c4:	89 e2       	ldi	r24, 0x29	; 41
    22c6:	93 e0       	ldi	r25, 0x03	; 3
    22c8:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    22cc:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <settings+0x6>
    22d0:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <settings+0x7>
    22d4:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <settings+0x8>
    22d8:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <settings+0x9>
    22dc:	2a e0       	ldi	r18, 0x0A	; 10
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	89 e2       	ldi	r24, 0x29	; 41
    22e2:	93 e0       	ldi	r25, 0x03	; 3
    22e4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	Serial.print(F("impedance_bc: ")); Serial.println(settings.impedance[1], 10);
    22e8:	65 e8       	ldi	r22, 0x85	; 133
    22ea:	74 e0       	ldi	r23, 0x04	; 4
    22ec:	89 e2       	ldi	r24, 0x29	; 41
    22ee:	93 e0       	ldi	r25, 0x03	; 3
    22f0:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    22f4:	40 91 f5 01 	lds	r20, 0x01F5	; 0x8001f5 <settings+0xa>
    22f8:	50 91 f6 01 	lds	r21, 0x01F6	; 0x8001f6 <settings+0xb>
    22fc:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <settings+0xc>
    2300:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <settings+0xd>
    2304:	2a e0       	ldi	r18, 0x0A	; 10
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	89 e2       	ldi	r24, 0x29	; 41
    230a:	93 e0       	ldi	r25, 0x03	; 3
    230c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	Serial.print(F("impedance_ac: ")); Serial.println(settings.impedance[2], 10);
    2310:	66 e7       	ldi	r22, 0x76	; 118
    2312:	74 e0       	ldi	r23, 0x04	; 4
    2314:	89 e2       	ldi	r24, 0x29	; 41
    2316:	93 e0       	ldi	r25, 0x03	; 3
    2318:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    231c:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <settings+0xe>
    2320:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <settings+0xf>
    2324:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x10>
    2328:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <settings+0x11>
    232c:	2a e0       	ldi	r18, 0x0A	; 10
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	89 e2       	ldi	r24, 0x29	; 41
    2332:	93 e0       	ldi	r25, 0x03	; 3
    2334:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_ab: ")); Serial.println(settings.multiplierVoltage[0], 3);
    2338:	64 e6       	ldi	r22, 0x64	; 100
    233a:	74 e0       	ldi	r23, 0x04	; 4
    233c:	89 e2       	ldi	r24, 0x29	; 41
    233e:	93 e0       	ldi	r25, 0x03	; 3
    2340:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    2344:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <settings+0x15>
    2348:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <settings+0x16>
    234c:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <settings+0x17>
    2350:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <settings+0x18>
    2354:	23 e0       	ldi	r18, 0x03	; 3
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	89 e2       	ldi	r24, 0x29	; 41
    235a:	93 e0       	ldi	r25, 0x03	; 3
    235c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_bc: ")); Serial.println(settings.multiplierVoltage[1], 3);
    2360:	62 e5       	ldi	r22, 0x52	; 82
    2362:	74 e0       	ldi	r23, 0x04	; 4
    2364:	89 e2       	ldi	r24, 0x29	; 41
    2366:	93 e0       	ldi	r25, 0x03	; 3
    2368:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    236c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <settings+0x19>
    2370:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <settings+0x1a>
    2374:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <settings+0x1b>
    2378:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <settings+0x1c>
    237c:	23 e0       	ldi	r18, 0x03	; 3
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	89 e2       	ldi	r24, 0x29	; 41
    2382:	93 e0       	ldi	r25, 0x03	; 3
    2384:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_ac: ")); Serial.println(settings.multiplierVoltage[2], 3);
    2388:	60 e4       	ldi	r22, 0x40	; 64
    238a:	74 e0       	ldi	r23, 0x04	; 4
    238c:	89 e2       	ldi	r24, 0x29	; 41
    238e:	93 e0       	ldi	r25, 0x03	; 3
    2390:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    2394:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <settings+0x1d>
    2398:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <settings+0x1e>
    239c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <settings+0x1f>
    23a0:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <settings+0x20>
    23a4:	23 e0       	ldi	r18, 0x03	; 3
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	89 e2       	ldi	r24, 0x29	; 41
    23aa:	93 e0       	ldi	r25, 0x03	; 3
    23ac:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_ab: ")); Serial.println(settings.multiplierAmperage[0], 3);
    23b0:	6d e2       	ldi	r22, 0x2D	; 45
    23b2:	74 e0       	ldi	r23, 0x04	; 4
    23b4:	89 e2       	ldi	r24, 0x29	; 41
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    23bc:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <settings+0x21>
    23c0:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <settings+0x22>
    23c4:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <settings+0x23>
    23c8:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <settings+0x24>
    23cc:	23 e0       	ldi	r18, 0x03	; 3
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	89 e2       	ldi	r24, 0x29	; 41
    23d2:	93 e0       	ldi	r25, 0x03	; 3
    23d4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_bc: ")); Serial.println(settings.multiplierAmperage[1], 3);
    23d8:	6a e1       	ldi	r22, 0x1A	; 26
    23da:	74 e0       	ldi	r23, 0x04	; 4
    23dc:	89 e2       	ldi	r24, 0x29	; 41
    23de:	93 e0       	ldi	r25, 0x03	; 3
    23e0:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    23e4:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <settings+0x25>
    23e8:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <settings+0x26>
    23ec:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <settings+0x27>
    23f0:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <settings+0x28>
    23f4:	23 e0       	ldi	r18, 0x03	; 3
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	89 e2       	ldi	r24, 0x29	; 41
    23fa:	93 e0       	ldi	r25, 0x03	; 3
    23fc:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_ac: ")); Serial.println(settings.multiplierAmperage[2], 3);
    2400:	67 e0       	ldi	r22, 0x07	; 7
    2402:	74 e0       	ldi	r23, 0x04	; 4
    2404:	89 e2       	ldi	r24, 0x29	; 41
    2406:	93 e0       	ldi	r25, 0x03	; 3
    2408:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    240c:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <settings+0x29>
    2410:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <settings+0x2a>
    2414:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <settings+0x2b>
    2418:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <settings+0x2c>
    241c:	23 e0       	ldi	r18, 0x03	; 3
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	89 e2       	ldi	r24, 0x29	; 41
    2422:	93 e0       	ldi	r25, 0x03	; 3
    2424:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN5Print7printlnEdi>
	
	initAdsVoltageGain();
    2428:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_Z18initAdsVoltageGainv>
	initAdsAmperageGain();
    242c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_Z19initAdsAmperageGainv>
	
	settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    2430:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <settings+0x1>
    2434:	88 23       	and	r24, r24
    2436:	29 f0       	breq	.+10     	; 0x2442 <setup+0x4a2>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 ea       	ldi	r26, 0xA0	; 160
    243e:	b0 e4       	ldi	r27, 0x40	; 64
    2440:	04 c0       	rjmp	.+8      	; 0x244a <setup+0x4aa>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e2       	ldi	r26, 0x20	; 32
    2448:	b0 e4       	ldi	r27, 0x40	; 64
    244a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <settings+0x2>
    244e:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <settings+0x3>
    2452:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <settings+0x4>
    2456:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <settings+0x5>

	checkIsReadyToWork();
    245a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_Z18checkIsReadyToWorkv>
	
	// Инициализируем пищалку
	pinMode(RELAY, OUTPUT);
    245e:	61 e0       	ldi	r22, 0x01	; 1
    2460:	81 e1       	ldi	r24, 0x11	; 17
    2462:	0e 94 29 22 	call	0x4452	; 0x4452 <pinMode>
	pinMode(BEEPER, OUTPUT);
    2466:	61 e0       	ldi	r22, 0x01	; 1
    2468:	80 e1       	ldi	r24, 0x10	; 16
    246a:	0e 94 29 22 	call	0x4452	; 0x4452 <pinMode>
	pinMode(DEBUG, INPUT);
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	84 e0       	ldi	r24, 0x04	; 4
    2472:	0e 94 29 22 	call	0x4452	; 0x4452 <pinMode>
	digitalWrite(RELAY, LOW);
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	81 e1       	ldi	r24, 0x11	; 17
    247a:	0e 94 65 22 	call	0x44ca	; 0x44ca <digitalWrite>
	digitalWrite(BEEPER, LOW);
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	80 e1       	ldi	r24, 0x10	; 16
    2482:	0e 94 65 22 	call	0x44ca	; 0x44ca <digitalWrite>
	
	if (digitalRead(DEBUG) == HIGH) {
    2486:	84 e0       	ldi	r24, 0x04	; 4
    2488:	0e 94 94 22 	call	0x4528	; 0x4528 <digitalRead>
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	99 f4       	brne	.+38     	; 0x24b6 <setup+0x516>
		settings.isDebugMode = true;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <settings+0x2d>
		lcd.clear();
    2496:	87 ed       	ldi	r24, 0xD7	; 215
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN17LiquidCrystal_I2C5clearEv>
		lcd.print(F("Debug mode"));
    249e:	6c ef       	ldi	r22, 0xFC	; 252
    24a0:	73 e0       	ldi	r23, 0x03	; 3
    24a2:	87 ed       	ldi	r24, 0xD7	; 215
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
		delay(1000);
    24aa:	68 ee       	ldi	r22, 0xE8	; 232
    24ac:	73 e0       	ldi	r23, 0x03	; 3
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 7e 21 	call	0x42fc	; 0x42fc <delay>
	}
	
	modeWork.prev = modeWork.current;
    24b6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <modeWork>
    24ba:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <modeWork+0x1>
	initAvgVars();
    24be:	0e 94 39 03 	call	0x672	; 0x672 <_Z11initAvgVarsv>
	Serial.println(F("Completed!"));
    24c2:	61 ef       	ldi	r22, 0xF1	; 241
    24c4:	73 e0       	ldi	r23, 0x03	; 3
    24c6:	89 e2       	ldi	r24, 0x29	; 41
    24c8:	93 e0       	ldi	r25, 0x03	; 3
    24ca:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Stand by..."));
    24ce:	65 ee       	ldi	r22, 0xE5	; 229
    24d0:	73 e0       	ldi	r23, 0x03	; 3
    24d2:	89 e2       	ldi	r24, 0x29	; 41
    24d4:	93 e0       	ldi	r25, 0x03	; 3
    24d6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
	displayStaticAsMode();
    24da:	0e 94 22 07 	call	0xe44	; 0xe44 <_Z19displayStaticAsModev>
	displayAsMode();
    24de:	0c 94 16 09 	jmp	0x122c	; 0x122c <_Z13displayAsModev>

000024e2 <_Z12saveSettingsv>:
}

/*
	Сохранение настроек при сменах режима
*/
void saveSettings() {
    24e2:	cf 92       	push	r12
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	cf 93       	push	r28
	switch(modeWork.current) {
    24ec:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <modeWork>
    24f0:	8e 2f       	mov	r24, r30
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	fc 01       	movw	r30, r24
    24f6:	31 97       	sbiw	r30, 0x01	; 1
    24f8:	ea 30       	cpi	r30, 0x0A	; 10
    24fa:	f1 05       	cpc	r31, r1
    24fc:	08 f0       	brcs	.+2      	; 0x2500 <_Z12saveSettingsv+0x1e>
    24fe:	fe c0       	rjmp	.+508    	; 0x26fc <_Z12saveSettingsv+0x21a>
    2500:	ef 58       	subi	r30, 0x8F	; 143
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			settings.connectionType = setDigit.value;
    2508:	c0 90 e3 01 	lds	r12, 0x01E3	; 0x8001e3 <setDigit>
    250c:	d0 90 e4 01 	lds	r13, 0x01E4	; 0x8001e4 <setDigit+0x1>
    2510:	e0 90 e5 01 	lds	r14, 0x01E5	; 0x8001e5 <setDigit+0x2>
    2514:	f0 90 e6 01 	lds	r15, 0x01E6	; 0x8001e6 <setDigit+0x3>
    2518:	c1 e0       	ldi	r28, 0x01	; 1
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	a9 01       	movw	r20, r18
    2520:	c7 01       	movw	r24, r14
    2522:	b6 01       	movw	r22, r12
    2524:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    2528:	81 11       	cpse	r24, r1
    252a:	01 c0       	rjmp	.+2      	; 0x252e <_Z12saveSettingsv+0x4c>
    252c:	c0 e0       	ldi	r28, 0x00	; 0
    252e:	c0 93 ec 01 	sts	0x01EC, r28	; 0x8001ec <settings+0x1>
			settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	a9 01       	movw	r20, r18
    2538:	c7 01       	movw	r24, r14
    253a:	b6 01       	movw	r22, r12
    253c:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    2540:	81 11       	cpse	r24, r1
    2542:	05 c0       	rjmp	.+10     	; 0x254e <_Z12saveSettingsv+0x6c>
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	a0 e2       	ldi	r26, 0x20	; 32
    254a:	b0 e4       	ldi	r27, 0x40	; 64
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <_Z12saveSettingsv+0x74>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 ea       	ldi	r26, 0xA0	; 160
    2554:	b0 e4       	ldi	r27, 0x40	; 64
    2556:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <settings+0x2>
    255a:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <settings+0x3>
    255e:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <settings+0x4>
    2562:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <settings+0x5>
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
    2566:	6c 2f       	mov	r22, r28
    2568:	86 e2       	ldi	r24, 0x26	; 38
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	12 c0       	rjmp	.+36     	; 0x2592 <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
    256e:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <setDigit>
    2572:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <setDigit+0x1>
    2576:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <setDigit+0x2>
    257a:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <setDigit+0x3>
    257e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__fixunssfsi>
    2582:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <settings+0x13>
			initAdsAmperageGain();
    2586:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_Z19initAdsAmperageGainv>
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    258a:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <settings+0x13>
    258e:	85 e2       	ldi	r24, 0x25	; 37
    2590:	90 e0       	ldi	r25, 0x00	; 0
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
			break;
	}
	
}
    2592:	cf 91       	pop	r28
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
			initAdsAmperageGain();
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    259c:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <eeprom_update_byte>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			settings.currentVoltageGain = setDigit.value;
    25a0:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <setDigit>
    25a4:	70 91 e4 01 	lds	r23, 0x01E4	; 0x8001e4 <setDigit+0x1>
    25a8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <setDigit+0x2>
    25ac:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <setDigit+0x3>
    25b0:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__fixunssfsi>
    25b4:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <settings+0x14>
			initAdsVoltageGain();
    25b8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_Z18initAdsVoltageGainv>
			eeprom_update_byte(&eeprom_gain_voltage, settings.currentVoltageGain);
    25bc:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <settings+0x14>
    25c0:	84 e2       	ldi	r24, 0x24	; 36
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	e6 cf       	rjmp	.-52     	; 0x2592 <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_IMPEDANCE:
			eeprom_update_float(&eeprom_impedance_ab, settings.impedance[0]);
    25c6:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <settings+0x6>
    25ca:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <settings+0x7>
    25ce:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <settings+0x8>
    25d2:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <settings+0x9>
    25d6:	80 e2       	ldi	r24, 0x20	; 32
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
			eeprom_update_float(&eeprom_impedance_bc, settings.impedance[1]);
    25de:	40 91 f5 01 	lds	r20, 0x01F5	; 0x8001f5 <settings+0xa>
    25e2:	50 91 f6 01 	lds	r21, 0x01F6	; 0x8001f6 <settings+0xb>
    25e6:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <settings+0xc>
    25ea:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <settings+0xd>
    25ee:	8c e1       	ldi	r24, 0x1C	; 28
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 0b 23 	call	0x4616	; 0x4616 <eeprom_update_dword>
			eeprom_update_float(&eeprom_impedance_ac, settings.impedance[2]);
    25f6:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <settings+0xe>
    25fa:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <settings+0xf>
    25fe:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x10>
    2602:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <settings+0x11>
    2606:	88 e1       	ldi	r24, 0x18	; 24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	71 c0       	rjmp	.+226    	; 0x26ee <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			settings.multiplierVoltage[0] = setDigit.value;
    260c:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <setDigit>
    2610:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <setDigit+0x1>
    2614:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <setDigit+0x2>
    2618:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <setDigit+0x3>
    261c:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <settings+0x15>
    2620:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <settings+0x16>
    2624:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <settings+0x17>
    2628:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <settings+0x18>
			eeprom_update_float(&eeprom_voltage_mult_ab, settings.multiplierVoltage[0]);
    262c:	84 e1       	ldi	r24, 0x14	; 20
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	5e c0       	rjmp	.+188    	; 0x26ee <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			settings.multiplierVoltage[1] = setDigit.value;
    2632:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <setDigit>
    2636:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <setDigit+0x1>
    263a:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <setDigit+0x2>
    263e:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <setDigit+0x3>
    2642:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <settings+0x19>
    2646:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <settings+0x1a>
    264a:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <settings+0x1b>
    264e:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <settings+0x1c>
			eeprom_update_float(&eeprom_voltage_mult_bc, settings.multiplierVoltage[1]);
    2652:	80 e1       	ldi	r24, 0x10	; 16
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	4b c0       	rjmp	.+150    	; 0x26ee <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			settings.multiplierVoltage[2] = setDigit.value;
    2658:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <setDigit>
    265c:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <setDigit+0x1>
    2660:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <setDigit+0x2>
    2664:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <setDigit+0x3>
    2668:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <settings+0x1d>
    266c:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <settings+0x1e>
    2670:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <settings+0x1f>
    2674:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <settings+0x20>
			eeprom_update_float(&eeprom_voltage_mult_ac, settings.multiplierVoltage[2]);
    2678:	8c e0       	ldi	r24, 0x0C	; 12
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	38 c0       	rjmp	.+112    	; 0x26ee <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			settings.multiplierAmperage[0] = setDigit.value;
    267e:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <setDigit>
    2682:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <setDigit+0x1>
    2686:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <setDigit+0x2>
    268a:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <setDigit+0x3>
    268e:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <settings+0x21>
    2692:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <settings+0x22>
    2696:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <settings+0x23>
    269a:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <settings+0x24>
			eeprom_update_float(&eeprom_amperage_mult_ab, settings.multiplierAmperage[0]);
    269e:	88 e0       	ldi	r24, 0x08	; 8
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	25 c0       	rjmp	.+74     	; 0x26ee <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			settings.multiplierAmperage[1] = setDigit.value;
    26a4:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <setDigit>
    26a8:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <setDigit+0x1>
    26ac:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <setDigit+0x2>
    26b0:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <setDigit+0x3>
    26b4:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <settings+0x25>
    26b8:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <settings+0x26>
    26bc:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <settings+0x27>
    26c0:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <settings+0x28>
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
    26c4:	84 e0       	ldi	r24, 0x04	; 4
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	12 c0       	rjmp	.+36     	; 0x26ee <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
    26ca:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <setDigit>
    26ce:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <setDigit+0x1>
    26d2:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <setDigit+0x2>
    26d6:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <setDigit+0x3>
    26da:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <settings+0x29>
    26de:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <settings+0x2a>
    26e2:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <settings+0x2b>
    26e6:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <settings+0x2c>
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	
}
    26ee:	cf 91       	pop	r28
    26f0:	ff 90       	pop	r15
    26f2:	ef 90       	pop	r14
    26f4:	df 90       	pop	r13
    26f6:	cf 90       	pop	r12
			settings.multiplierAmperage[1] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    26f8:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <eeprom_update_dword>
			break;
	}
	
}
    26fc:	cf 91       	pop	r28
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	df 90       	pop	r13
    2704:	cf 90       	pop	r12
    2706:	08 95       	ret

00002708 <_Z21button2LongPressStartv>:
}

/*
	Обработчик длинного клика второй клавиши
*/
void button2LongPressStart() {
    2708:	cf 93       	push	r28
	// При наличии замыкания отключает пищалку
	if (icError.hasIC) {
    270a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_start+0x12>
    270e:	88 23       	and	r24, r24
    2710:	79 f0       	breq	.+30     	; 0x2730 <_Z21button2LongPressStartv+0x28>
		digitalWrite(BEEPER, LOW);
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	80 e1       	ldi	r24, 0x10	; 16
    2716:	0e 94 65 22 	call	0x44ca	; 0x44ca <digitalWrite>
		icError.hasIC = false;
    271a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_start+0x12>
		icError.detectStamp = false;
    271e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_start+0x13>
    2722:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_start+0x14>
    2726:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_start+0x15>
    272a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_start+0x16>
		return;
    272e:	3e c0       	rjmp	.+124    	; 0x27ac <_Z21button2LongPressStartv+0xa4>
	}
	
	// В режиме предупреждения о необходимости натсроек ничего не делает
	if (modeWork.current == MW_NEED_SETUP) {
    2730:	c0 91 d5 01 	lds	r28, 0x01D5	; 0x8001d5 <modeWork>
    2734:	cc 23       	and	r28, r28
    2736:	d1 f1       	breq	.+116    	; 0x27ac <_Z21button2LongPressStartv+0xa4>
		return;
	}
	
	// В режиме отображения количества выхода за пределы измерений обнуляет их и средние значения
	if (modeWork.current == MW_SHOW_ERRORS_COUNTERS) {
    2738:	cd 30       	cpi	r28, 0x0D	; 13
    273a:	a1 f4       	brne	.+40     	; 0x2764 <_Z21button2LongPressStartv+0x5c>
		for(byte i = 0; i < 3; i++) {
			icError.criticalLvlCount[i] = 0;
    273c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_start+0xd>
    2740:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_start+0xc>
    2744:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_start+0xf>
    2748:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_start+0xe>
    274c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_start+0x11>
    2750:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_start+0x10>
		}
		initAvgVars();
    2754:	0e 94 39 03 	call	0x672	; 0x672 <_Z11initAvgVarsv>
		modeWork.current = MW_SHOWING_START;
    2758:	c0 93 d5 01 	sts	0x01D5, r28	; 0x8001d5 <modeWork>
		lcdUpdateScreen = true;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <lcdUpdateScreen>
		return;
    2762:	24 c0       	rjmp	.+72     	; 0x27ac <_Z21button2LongPressStartv+0xa4>
	}
	
	// Перевод в режим настроек и выход из него
	if (settings.isSetupMode) {
    2764:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <settings+0x12>
    2768:	88 23       	and	r24, r24
    276a:	89 f0       	breq	.+34     	; 0x278e <_Z21button2LongPressStartv+0x86>
		if (modeWork.current == MW_SETUP_STOP) {
    276c:	ca 30       	cpi	r28, 0x0A	; 10
    276e:	29 f4       	brne	.+10     	; 0x277a <_Z21button2LongPressStartv+0x72>
			saveSettings();
    2770:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_Z12saveSettingsv>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    2774:	cf 91       	pop	r28
	
	// Перевод в режим настроек и выход из него
	if (settings.isSetupMode) {
		if (modeWork.current == MW_SETUP_STOP) {
			saveSettings();
			checkIsReadyToWork();
    2776:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <_Z18checkIsReadyToWorkv>
		} else {
			saveSettings();
    277a:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_Z12saveSettingsv>
			modeWork.current++;
    277e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <modeWork>
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <modeWork>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    2788:	cf 91       	pop	r28
			saveSettings();
			checkIsReadyToWork();
		} else {
			saveSettings();
			modeWork.current++;
			setEditValue();
    278a:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <_Z12setEditValuev>
		}
	} else {
		Serial.println(F("**Measurement Stoped!"));
    278e:	6f e3       	ldi	r22, 0x3F	; 63
    2790:	71 e0       	ldi	r23, 0x01	; 1
    2792:	89 e2       	ldi	r24, 0x29	; 41
    2794:	93 e0       	ldi	r25, 0x03	; 3
    2796:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN5Print7printlnEPK19__FlashStringHelper>
		settings.isReadyToWork = MM_STOP;
    279a:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <settings>
		modeWork.current = MW_SETUP_START;
    279e:	c1 e0       	ldi	r28, 0x01	; 1
    27a0:	c0 93 d5 01 	sts	0x01D5, r28	; 0x8001d5 <modeWork>
		setEditValue();
    27a4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_Z12setEditValuev>
		settings.isSetupMode = true;
    27a8:	c0 93 fd 01 	sts	0x01FD, r28	; 0x8001fd <settings+0x12>
	}
}
    27ac:	cf 91       	pop	r28
    27ae:	08 95       	ret

000027b0 <_GLOBAL__sub_I_eeprom_first_start>:
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
	| GAIN_SIXTEEN   | x16  |    0.256    | 0.0078125	 |
	------------------------------------------------------
*/

// Объекты работы с АЦП модулями
Adafruit_ADS1115 adsVoltage(0x48);			
    27b4:	68 e4       	ldi	r22, 0x48	; 72
    27b6:	80 e6       	ldi	r24, 0x60	; 96
    27b8:	92 e0       	ldi	r25, 0x02	; 2
    27ba:	0e 94 2c 14 	call	0x2858	; 0x2858 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 adsAmperage(0x49);
    27be:	69 e4       	ldi	r22, 0x49	; 73
    27c0:	8b e5       	ldi	r24, 0x5B	; 91
    27c2:	92 e0       	ldi	r25, 0x02	; 2
    27c4:	0e 94 2c 14 	call	0x2858	; 0x2858 <_ZN16Adafruit_ADS1115C1Eh>
		В режиме измерения смена режима показа назад
	Динное нажатие:
		В режиме измерения в меню критических величин сбрасывает счетчик
		Переход в режим настроек/отображения измерений кроме режима критических величин
*/
OneButton button1Callback(BUTTON_1, false);
    27c8:	21 e0       	ldi	r18, 0x01	; 1
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	6e e0       	ldi	r22, 0x0E	; 14
    27d0:	70 e0       	ldi	r23, 0x00	; 0
    27d2:	8a e3       	ldi	r24, 0x3A	; 58
    27d4:	92 e0       	ldi	r25, 0x02	; 2
    27d6:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN9OneButtonC1Eiib>
OneButton button2Callback(BUTTON_2, false);
    27da:	21 e0       	ldi	r18, 0x01	; 1
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	6f e0       	ldi	r22, 0x0F	; 15
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	89 e1       	ldi	r24, 0x19	; 25
    27e6:	92 e0       	ldi	r25, 0x02	; 2
    27e8:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN9OneButtonC1Eiib>
	currentAmperageGain - индекс усиления АЦП по току
	currentVoltageGain - индекс усиления АЦП по напряжению
	multiplierVoltage - множитель по напряжению для вычисления реального значения
	multiplierAmperage - множитель по току для вычисления реального значения
*/
struct Settings {
    27ec:	cb ee       	ldi	r28, 0xEB	; 235
    27ee:	d1 e0       	ldi	r29, 0x01	; 1
    27f0:	18 82       	st	Y, r1
    27f2:	19 82       	std	Y+1, r1	; 0x01
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e2       	ldi	r26, 0x20	; 32
    27fa:	b0 e4       	ldi	r27, 0x40	; 64
    27fc:	8a 83       	std	Y+2, r24	; 0x02
    27fe:	9b 83       	std	Y+3, r25	; 0x03
    2800:	ac 83       	std	Y+4, r26	; 0x04
    2802:	bd 83       	std	Y+5, r27	; 0x05
    2804:	1e 82       	std	Y+6, r1	; 0x06
    2806:	1f 82       	std	Y+7, r1	; 0x07
    2808:	18 86       	std	Y+8, r1	; 0x08
    280a:	19 86       	std	Y+9, r1	; 0x09
    280c:	1a 86       	std	Y+10, r1	; 0x0a
    280e:	1b 86       	std	Y+11, r1	; 0x0b
    2810:	1c 86       	std	Y+12, r1	; 0x0c
    2812:	1d 86       	std	Y+13, r1	; 0x0d
    2814:	1e 86       	std	Y+14, r1	; 0x0e
    2816:	1f 86       	std	Y+15, r1	; 0x0f
    2818:	18 8a       	std	Y+16, r1	; 0x10
    281a:	19 8a       	std	Y+17, r1	; 0x11
    281c:	1b 8a       	std	Y+19, r1	; 0x13
    281e:	1c 8a       	std	Y+20, r1	; 0x14
    2820:	8c e0       	ldi	r24, 0x0C	; 12
    2822:	ed e7       	ldi	r30, 0x7D	; 125
    2824:	f1 e0       	ldi	r31, 0x01	; 1
    2826:	a0 e0       	ldi	r26, 0x00	; 0
    2828:	b2 e0       	ldi	r27, 0x02	; 2
    282a:	01 90       	ld	r0, Z+
    282c:	0d 92       	st	X+, r0
    282e:	8a 95       	dec	r24
    2830:	e1 f7       	brne	.-8      	; 0x282a <_GLOBAL__sub_I_eeprom_first_start+0x7a>
    2832:	8c e0       	ldi	r24, 0x0C	; 12
    2834:	ed e7       	ldi	r30, 0x7D	; 125
    2836:	f1 e0       	ldi	r31, 0x01	; 1
    2838:	ac e0       	ldi	r26, 0x0C	; 12
    283a:	b2 e0       	ldi	r27, 0x02	; 2
    283c:	01 90       	ld	r0, Z+
    283e:	0d 92       	st	X+, r0
    2840:	8a 95       	dec	r24
    2842:	e1 f7       	brne	.-8      	; 0x283c <_GLOBAL__sub_I_eeprom_first_start+0x8c>
    2844:	1d a6       	std	Y+45, r1	; 0x2d
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    2846:	22 e0       	ldi	r18, 0x02	; 2
    2848:	40 e1       	ldi	r20, 0x10	; 16
    284a:	67 e2       	ldi	r22, 0x27	; 39
    284c:	87 ed       	ldi	r24, 0xD7	; 215
    284e:	91 e0       	ldi	r25, 0x01	; 1
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    2854:	0c 94 be 14 	jmp	0x297c	; 0x297c <_ZN17LiquidCrystal_I2CC1Ehhh>

00002858 <_ZN16Adafruit_ADS1115C1Eh>:
  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH, threshold << m_bitShift);

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    2858:	fc 01       	movw	r30, r24
    285a:	14 82       	std	Z+4, r1	; 0x04
    285c:	13 82       	std	Z+3, r1	; 0x03
    285e:	60 83       	st	Z, r22
    2860:	88 e0       	ldi	r24, 0x08	; 8
    2862:	81 83       	std	Z+1, r24	; 0x01
    2864:	12 82       	std	Z+2, r1	; 0x02
    2866:	08 95       	ret

00002868 <_ZN16Adafruit_ADS10155beginEv>:
    2868:	83 ed       	ldi	r24, 0xD3	; 211
    286a:	92 e0       	ldi	r25, 0x02	; 2
    286c:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <_ZN7TwoWire5beginEv>

00002870 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    2870:	fc 01       	movw	r30, r24
    2872:	74 83       	std	Z+4, r23	; 0x04
    2874:	63 83       	std	Z+3, r22	; 0x03
    2876:	08 95       	ret

00002878 <_ZL13writeRegisterhhj>:
    2878:	1f 93       	push	r17
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	16 2f       	mov	r17, r22
    2880:	ea 01       	movw	r28, r20
    2882:	68 2f       	mov	r22, r24
    2884:	83 ed       	ldi	r24, 0xD3	; 211
    2886:	92 e0       	ldi	r25, 0x02	; 2
    2888:	0e 94 15 1a 	call	0x342a	; 0x342a <_ZN7TwoWire17beginTransmissionEh>
    288c:	61 2f       	mov	r22, r17
    288e:	83 ed       	ldi	r24, 0xD3	; 211
    2890:	92 e0       	ldi	r25, 0x02	; 2
    2892:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN7TwoWire5writeEh>
    2896:	6d 2f       	mov	r22, r29
    2898:	83 ed       	ldi	r24, 0xD3	; 211
    289a:	92 e0       	ldi	r25, 0x02	; 2
    289c:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN7TwoWire5writeEh>
    28a0:	6c 2f       	mov	r22, r28
    28a2:	83 ed       	ldi	r24, 0xD3	; 211
    28a4:	92 e0       	ldi	r25, 0x02	; 2
    28a6:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN7TwoWire5writeEh>
    28aa:	83 ed       	ldi	r24, 0xD3	; 211
    28ac:	92 e0       	ldi	r25, 0x02	; 2
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	1f 91       	pop	r17
    28b4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <_ZN7TwoWire15endTransmissionEv>

000028b8 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
    28b8:	1f 93       	push	r17
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	18 2f       	mov	r17, r24
  Wire.beginTransmission(i2cAddress);
    28c0:	68 2f       	mov	r22, r24
    28c2:	83 ed       	ldi	r24, 0xD3	; 211
    28c4:	92 e0       	ldi	r25, 0x02	; 2
    28c6:	0e 94 15 1a 	call	0x342a	; 0x342a <_ZN7TwoWire17beginTransmissionEh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	83 ed       	ldi	r24, 0xD3	; 211
    28ce:	92 e0       	ldi	r25, 0x02	; 2
    28d0:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN7TwoWire5writeEh>
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
    28d4:	83 ed       	ldi	r24, 0xD3	; 211
    28d6:	92 e0       	ldi	r25, 0x02	; 2
    28d8:	0e 94 99 1a 	call	0x3532	; 0x3532 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
    28dc:	42 e0       	ldi	r20, 0x02	; 2
    28de:	61 2f       	mov	r22, r17
    28e0:	83 ed       	ldi	r24, 0xD3	; 211
    28e2:	92 e0       	ldi	r25, 0x02	; 2
    28e4:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN7TwoWire11requestFromEhh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
  #if ARDUINO >= 100
  return Wire.read();
    28e8:	83 ed       	ldi	r24, 0xD3	; 211
    28ea:	92 e0       	ldi	r25, 0x02	; 2
    28ec:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire4readEv>
    28f0:	18 2f       	mov	r17, r24
    28f2:	83 ed       	ldi	r24, 0xD3	; 211
    28f4:	92 e0       	ldi	r25, 0x02	; 2
    28f6:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire4readEv>
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
  Wire.requestFrom(i2cAddress, (uint8_t)2);
  return ((i2cread() << 8) | i2cread());  
    28fa:	d1 2f       	mov	r29, r17
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	c2 2f       	mov	r28, r18
}
    2900:	9e 01       	movw	r18, r28
    2902:	28 2b       	or	r18, r24
    2904:	c9 01       	movw	r24, r18
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	08 95       	ret

0000290e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
  if (channel > 3)
    2912:	64 30       	cpi	r22, 0x04	; 4
    2914:	50 f5       	brcc	.+84     	; 0x296a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x5c>
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
    2916:	fc 01       	movw	r30, r24
    2918:	43 81       	ldd	r20, Z+3	; 0x03
    291a:	54 81       	ldd	r21, Z+4	; 0x04

  // Set single-ended input channel
  switch (channel)
    291c:	62 30       	cpi	r22, 0x02	; 2
    291e:	51 f0       	breq	.+20     	; 0x2934 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
    2920:	63 30       	cpi	r22, 0x03	; 3
    2922:	59 f0       	breq	.+22     	; 0x293a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2c>
    2924:	61 30       	cpi	r22, 0x01	; 1
    2926:	19 f0       	breq	.+6      	; 0x292e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    2928:	43 68       	ori	r20, 0x83	; 131
    292a:	51 64       	ori	r21, 0x41	; 65
      break;
    292c:	08 c0       	rjmp	.+16     	; 0x293e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    292e:	43 68       	ori	r20, 0x83	; 131
    2930:	51 65       	ori	r21, 0x51	; 81
      break;
    2932:	05 c0       	rjmp	.+10     	; 0x293e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    2934:	43 68       	ori	r20, 0x83	; 131
    2936:	51 66       	ori	r21, 0x61	; 97
      break;
    2938:	02 c0       	rjmp	.+4      	; 0x293e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    293a:	43 68       	ori	r20, 0x83	; 131
    293c:	51 67       	ori	r21, 0x71	; 113
    293e:	ec 01       	movw	r28, r24

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    2940:	50 68       	ori	r21, 0x80	; 128
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	88 81       	ld	r24, Y
    2946:	0e 94 3c 14 	call	0x2878	; 0x2878 <_ZL13writeRegisterhhj>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
    294a:	69 81       	ldd	r22, Y+1	; 0x01
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 7e 21 	call	0x42fc	; 0x42fc <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
    2956:	88 81       	ld	r24, Y
    2958:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <_ZL12readRegisterhh.isra.0>
    295c:	0a 80       	ldd	r0, Y+2	; 0x02
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x56>
    2960:	96 95       	lsr	r25
    2962:	87 95       	ror	r24
    2964:	0a 94       	dec	r0
    2966:	e2 f7       	brpl	.-8      	; 0x2960 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x52>
    2968:	02 c0       	rjmp	.+4      	; 0x296e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x60>
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	08 95       	ret

00002974 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	08 95       	ret

0000297a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    297a:	08 95       	ret

0000297c <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    297c:	fc 01       	movw	r30, r24
    297e:	13 82       	std	Z+3, r1	; 0x03
    2980:	12 82       	std	Z+2, r1	; 0x02
    2982:	85 e9       	ldi	r24, 0x95	; 149
    2984:	91 e0       	ldi	r25, 0x01	; 1
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	80 83       	st	Z, r24
    298a:	64 83       	std	Z+4, r22	; 0x04
    298c:	41 87       	std	Z+9, r20	; 0x09
    298e:	22 87       	std	Z+10, r18	; 0x0a
    2990:	13 86       	std	Z+11, r1	; 0x0b
    2992:	08 95       	ret

00002994 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2994:	1f 93       	push	r17
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	ec 01       	movw	r28, r24
    299c:	16 2f       	mov	r17, r22
    299e:	6c 81       	ldd	r22, Y+4	; 0x04
    29a0:	83 ed       	ldi	r24, 0xD3	; 211
    29a2:	92 e0       	ldi	r25, 0x02	; 2
    29a4:	0e 94 15 1a 	call	0x342a	; 0x342a <_ZN7TwoWire17beginTransmissionEh>
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	61 2b       	or	r22, r17
    29ac:	83 ed       	ldi	r24, 0xD3	; 211
    29ae:	92 e0       	ldi	r25, 0x02	; 2
    29b0:	0e 94 c4 19 	call	0x3388	; 0x3388 <_ZN7TwoWire5writeEh>
    29b4:	83 ed       	ldi	r24, 0xD3	; 211
    29b6:	92 e0       	ldi	r25, 0x02	; 2
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <_ZN7TwoWire15endTransmissionEv>

000029c2 <_ZN17LiquidCrystal_I2C9backlightEv>:
    29c2:	28 e0       	ldi	r18, 0x08	; 8
    29c4:	fc 01       	movw	r30, r24
    29c6:	23 87       	std	Z+11, r18	; 0x0b
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000029ce <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	8c 01       	movw	r16, r24
    29d6:	c6 2f       	mov	r28, r22
    29d8:	64 60       	ori	r22, 0x04	; 4
    29da:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	0e 94 ba 21 	call	0x4374	; 0x4374 <delayMicroseconds>
    29e6:	6c 2f       	mov	r22, r28
    29e8:	6b 7f       	andi	r22, 0xFB	; 251
    29ea:	c8 01       	movw	r24, r16
    29ec:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    29f0:	82 e3       	ldi	r24, 0x32	; 50
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <delayMicroseconds>

000029fe <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    29fe:	1f 93       	push	r17
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	ec 01       	movw	r28, r24
    2a06:	16 2f       	mov	r17, r22
    2a08:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2a0c:	61 2f       	mov	r22, r17
    2a0e:	ce 01       	movw	r24, r28
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002a1a <_ZN17LiquidCrystal_I2C4sendEhh>:
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	8c 01       	movw	r16, r24
    2a24:	c6 2f       	mov	r28, r22
    2a26:	d4 2f       	mov	r29, r20
    2a28:	60 7f       	andi	r22, 0xF0	; 240
    2a2a:	64 2b       	or	r22, r20
    2a2c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2a30:	80 e1       	ldi	r24, 0x10	; 16
    2a32:	c8 9f       	mul	r28, r24
    2a34:	b0 01       	movw	r22, r0
    2a36:	11 24       	eor	r1, r1
    2a38:	6d 2b       	or	r22, r29
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002a48 <_ZN17LiquidCrystal_I2C7commandEh>:
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <_ZN17LiquidCrystal_I2C4sendEhh>

00002a4e <_ZN17LiquidCrystal_I2C5clearEv>:
    2a4e:	61 e0       	ldi	r22, 0x01	; 1
    2a50:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN17LiquidCrystal_I2C7commandEh>
    2a54:	80 ed       	ldi	r24, 0xD0	; 208
    2a56:	97 e0       	ldi	r25, 0x07	; 7
    2a58:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <delayMicroseconds>

00002a5c <_ZN17LiquidCrystal_I2C4homeEv>:
    2a5c:	62 e0       	ldi	r22, 0x02	; 2
    2a5e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN17LiquidCrystal_I2C7commandEh>
    2a62:	80 ed       	ldi	r24, 0xD0	; 208
    2a64:	97 e0       	ldi	r25, 0x07	; 7
    2a66:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <delayMicroseconds>

00002a6a <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	28 97       	sbiw	r28, 0x08	; 8
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	9c 01       	movw	r18, r24
    2a80:	88 e0       	ldi	r24, 0x08	; 8
    2a82:	e9 e8       	ldi	r30, 0x89	; 137
    2a84:	f1 e0       	ldi	r31, 0x01	; 1
    2a86:	de 01       	movw	r26, r28
    2a88:	11 96       	adiw	r26, 0x01	; 1
    2a8a:	01 90       	ld	r0, Z+
    2a8c:	0d 92       	st	X+, r0
    2a8e:	8a 95       	dec	r24
    2a90:	e1 f7       	brne	.-8      	; 0x2a8a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2a92:	f9 01       	movw	r30, r18
    2a94:	80 85       	ldd	r24, Z+8	; 0x08
    2a96:	84 17       	cp	r24, r20
    2a98:	10 f4       	brcc	.+4      	; 0x2a9e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2a9a:	4f ef       	ldi	r20, 0xFF	; 255
    2a9c:	48 0f       	add	r20, r24
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	31 96       	adiw	r30, 0x01	; 1
    2aa2:	e4 0f       	add	r30, r20
    2aa4:	f1 1d       	adc	r31, r1
    2aa6:	e4 0f       	add	r30, r20
    2aa8:	f1 1d       	adc	r31, r1
    2aaa:	90 81       	ld	r25, Z
    2aac:	69 0f       	add	r22, r25
    2aae:	60 68       	ori	r22, 0x80	; 128
    2ab0:	c9 01       	movw	r24, r18
    2ab2:	28 96       	adiw	r28, 0x08	; 8
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <_ZN17LiquidCrystal_I2C7commandEh>

00002ac6 <_ZN17LiquidCrystal_I2C7displayEv>:
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	66 81       	ldd	r22, Z+6	; 0x06
    2aca:	26 2f       	mov	r18, r22
    2acc:	24 60       	ori	r18, 0x04	; 4
    2ace:	26 83       	std	Z+6, r18	; 0x06
    2ad0:	6c 60       	ori	r22, 0x0C	; 12
    2ad2:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <_ZN17LiquidCrystal_I2C7commandEh>

00002ad6 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	08 95       	ret

00002ae2 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2ae8:	42 30       	cpi	r20, 0x02	; 2
    2aea:	18 f0       	brcs	.+6      	; 0x2af2 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	88 60       	ori	r24, 0x08	; 8
    2af0:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2af2:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2af4:	22 23       	and	r18, r18
    2af6:	29 f0       	breq	.+10     	; 0x2b02 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2af8:	41 30       	cpi	r20, 0x01	; 1
    2afa:	19 f4       	brne	.+6      	; 0x2b02 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    2afc:	8d 81       	ldd	r24, Y+5	; 0x05
    2afe:	84 60       	ori	r24, 0x04	; 4
    2b00:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2b02:	62 e3       	ldi	r22, 0x32	; 50
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 7e 21 	call	0x42fc	; 0x42fc <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b10:	ce 01       	movw	r24, r28
    2b12:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    2b16:	68 ee       	ldi	r22, 0xE8	; 232
    2b18:	73 e0       	ldi	r23, 0x03	; 3
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 7e 21 	call	0x42fc	; 0x42fc <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2b22:	60 e3       	ldi	r22, 0x30	; 48
    2b24:	ce 01       	movw	r24, r28
    2b26:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2b2a:	84 e9       	ldi	r24, 0x94	; 148
    2b2c:	91 e1       	ldi	r25, 0x11	; 17
    2b2e:	0e 94 ba 21 	call	0x4374	; 0x4374 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2b32:	60 e3       	ldi	r22, 0x30	; 48
    2b34:	ce 01       	movw	r24, r28
    2b36:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2b3a:	84 e9       	ldi	r24, 0x94	; 148
    2b3c:	91 e1       	ldi	r25, 0x11	; 17
    2b3e:	0e 94 ba 21 	call	0x4374	; 0x4374 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2b42:	60 e3       	ldi	r22, 0x30	; 48
    2b44:	ce 01       	movw	r24, r28
    2b46:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2b4a:	86 e9       	ldi	r24, 0x96	; 150
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 ba 21 	call	0x4374	; 0x4374 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2b52:	60 e2       	ldi	r22, 0x20	; 32
    2b54:	ce 01       	movw	r24, r28
    2b56:	0e 94 ff 14 	call	0x29fe	; 0x29fe <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2b5a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b5c:	60 62       	ori	r22, 0x20	; 32
    2b5e:	ce 01       	movw	r24, r28
    2b60:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	8e 83       	std	Y+6, r24	; 0x06
	display();
    2b68:	ce 01       	movw	r24, r28
    2b6a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2b6e:	ce 01       	movw	r24, r28
    2b70:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2b78:	66 e0       	ldi	r22, 0x06	; 6
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    2b80:	ce 01       	movw	r24, r28
  
}
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2b86:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <_ZN17LiquidCrystal_I2C4homeEv>

00002b8a <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	ec 01       	movw	r28, r24
	Wire.begin();
    2b90:	83 ed       	ldi	r24, 0xD3	; 211
    2b92:	92 e0       	ldi	r25, 0x02	; 2
    2b94:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2b98:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b9e:	69 85       	ldd	r22, Y+9	; 0x09
    2ba0:	ce 01       	movw	r24, r28
}
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2ba6:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <_ZN17LiquidCrystal_I2C5beginEhhh>

00002baa <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2baa:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <_ZN17LiquidCrystal_I2C9init_privEv>

00002bae <_ZN9OneButtonC1Eiib>:

void OneButton::reset(void){
  _state = 0; // restart.
  _startTime = 0;
  _stopTime = 0;
  _isLongPressed = false;
    2bae:	fc 01       	movw	r30, r24
    2bb0:	86 2f       	mov	r24, r22
    2bb2:	a2 e3       	ldi	r26, 0x32	; 50
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	b3 83       	std	Z+3, r27	; 0x03
    2bb8:	a2 83       	std	Z+2, r26	; 0x02
    2bba:	a8 e5       	ldi	r26, 0x58	; 88
    2bbc:	b2 e0       	ldi	r27, 0x02	; 2
    2bbe:	b5 83       	std	Z+5, r27	; 0x05
    2bc0:	a4 83       	std	Z+4, r26	; 0x04
    2bc2:	a8 ee       	ldi	r26, 0xE8	; 232
    2bc4:	b3 e0       	ldi	r27, 0x03	; 3
    2bc6:	b7 83       	std	Z+7, r27	; 0x07
    2bc8:	a6 83       	std	Z+6, r26	; 0x06
    2bca:	12 86       	std	Z+10, r1	; 0x0a
    2bcc:	14 86       	std	Z+12, r1	; 0x0c
    2bce:	13 86       	std	Z+11, r1	; 0x0b
    2bd0:	16 86       	std	Z+14, r1	; 0x0e
    2bd2:	15 86       	std	Z+13, r1	; 0x0d
    2bd4:	10 8a       	std	Z+16, r1	; 0x10
    2bd6:	17 86       	std	Z+15, r1	; 0x0f
    2bd8:	12 8a       	std	Z+18, r1	; 0x12
    2bda:	11 8a       	std	Z+17, r1	; 0x11
    2bdc:	14 8a       	std	Z+20, r1	; 0x14
    2bde:	13 8a       	std	Z+19, r1	; 0x13
    2be0:	16 8a       	std	Z+22, r1	; 0x16
    2be2:	15 8a       	std	Z+21, r1	; 0x15
    2be4:	10 8e       	std	Z+24, r1	; 0x18
    2be6:	17 8a       	std	Z+23, r1	; 0x17
    2be8:	60 83       	st	Z, r22
    2bea:	71 83       	std	Z+1, r23	; 0x01
    2bec:	45 2b       	or	r20, r21
    2bee:	19 f0       	breq	.+6      	; 0x2bf6 <_ZN9OneButtonC1Eiib+0x48>
    2bf0:	11 86       	std	Z+9, r1	; 0x09
    2bf2:	10 86       	std	Z+8, r1	; 0x08
    2bf4:	04 c0       	rjmp	.+8      	; 0x2bfe <_ZN9OneButtonC1Eiib+0x50>
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	51 87       	std	Z+9, r21	; 0x09
    2bfc:	40 87       	std	Z+8, r20	; 0x08
    2bfe:	22 23       	and	r18, r18
    2c00:	11 f0       	breq	.+4      	; 0x2c06 <_ZN9OneButtonC1Eiib+0x58>
    2c02:	62 e0       	ldi	r22, 0x02	; 2
    2c04:	01 c0       	rjmp	.+2      	; 0x2c08 <_ZN9OneButtonC1Eiib+0x5a>
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	0c 94 29 22 	jmp	0x4452	; 0x4452 <pinMode>

00002c0c <_ZN9OneButton16setDebounceTicksEi>:
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	73 83       	std	Z+3, r23	; 0x03
    2c10:	62 83       	std	Z+2, r22	; 0x02
    2c12:	08 95       	ret

00002c14 <_ZN9OneButton13setClickTicksEi>:
    2c14:	fc 01       	movw	r30, r24
    2c16:	75 83       	std	Z+5, r23	; 0x05
    2c18:	64 83       	std	Z+4, r22	; 0x04
    2c1a:	08 95       	ret

00002c1c <_ZN9OneButton13setPressTicksEi>:
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	77 83       	std	Z+7, r23	; 0x07
    2c20:	66 83       	std	Z+6, r22	; 0x06
    2c22:	08 95       	ret

00002c24 <_ZN9OneButton11attachClickEPFvvE>:
    2c24:	fc 01       	movw	r30, r24
    2c26:	74 87       	std	Z+12, r23	; 0x0c
    2c28:	63 87       	std	Z+11, r22	; 0x0b
    2c2a:	08 95       	ret

00002c2c <_ZN9OneButton20attachLongPressStartEPFvvE>:
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	72 8b       	std	Z+18, r23	; 0x12
    2c30:	61 8b       	std	Z+17, r22	; 0x11
    2c32:	08 95       	ret

00002c34 <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
    2c34:	cf 92       	push	r12
    2c36:	df 92       	push	r13
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	1f 93       	push	r17
    2c3e:	cf 93       	push	r28
    2c40:	df 93       	push	r29
    2c42:	ec 01       	movw	r28, r24
    2c44:	16 2f       	mov	r17, r22
  unsigned long now = millis(); // current (relative) time in msecs.
    2c46:	0e 94 4d 21 	call	0x429a	; 0x429a <millis>
    2c4a:	6b 01       	movw	r12, r22
    2c4c:	7c 01       	movw	r14, r24

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
    2c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c50:	98 8d       	ldd	r25, Y+24	; 0x18
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	31 f4       	brne	.+12     	; 0x2c62 <_ZN9OneButton4tickEb+0x2e>
    if (activeLevel) {
    2c56:	11 23       	and	r17, r17
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <_ZN9OneButton4tickEb+0x28>
    2c5a:	bc c0       	rjmp	.+376    	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
      _state = 1; // step to state 1
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	78 c0       	rjmp	.+240    	; 0x2d52 <_ZN9OneButton4tickEb+0x11e>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    2c62:	81 30       	cpi	r24, 0x01	; 1
    2c64:	91 05       	cpc	r25, r1
    2c66:	d9 f5       	brne	.+118    	; 0x2cde <_ZN9OneButton4tickEb+0xaa>
    2c68:	89 8d       	ldd	r24, Y+25	; 0x19
    2c6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c6c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2c6e:	bc 8d       	ldd	r27, Y+28	; 0x1c

    if ((!activeLevel) &&
    2c70:	b7 01       	movw	r22, r14
    2c72:	a6 01       	movw	r20, r12
    2c74:	48 1b       	sub	r20, r24
    2c76:	59 0b       	sbc	r21, r25
    2c78:	6a 0b       	sbc	r22, r26
    2c7a:	7b 0b       	sbc	r23, r27
    2c7c:	11 11       	cpse	r17, r1
    2c7e:	0f c0       	rjmp	.+30     	; 0x2c9e <_ZN9OneButton4tickEb+0x6a>
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	a0 e0       	ldi	r26, 0x00	; 0
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	48 17       	cp	r20, r24
    2c8a:	59 07       	cpc	r21, r25
    2c8c:	6a 07       	cpc	r22, r26
    2c8e:	7b 07       	cpc	r23, r27
    2c90:	18 f4       	brcc	.+6      	; 0x2c98 <_ZN9OneButton4tickEb+0x64>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
    2c92:	18 8e       	std	Y+24, r1	; 0x18
    2c94:	1f 8a       	std	Y+23, r1	; 0x17
    2c96:	9e c0       	rjmp	.+316    	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	1d c0       	rjmp	.+58     	; 0x2cd8 <_ZN9OneButton4tickEb+0xa4>
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
    2c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca2:	a0 e0       	ldi	r26, 0x00	; 0
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	84 17       	cp	r24, r20
    2ca8:	95 07       	cpc	r25, r21
    2caa:	a6 07       	cpc	r26, r22
    2cac:	b7 07       	cpc	r27, r23
    2cae:	08 f0       	brcs	.+2      	; 0x2cb2 <_ZN9OneButton4tickEb+0x7e>
    2cb0:	91 c0       	rjmp	.+290    	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true; // Keep track of long press state
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	8a 87       	std	Y+10, r24	; 0x0a
      if (_pressFunc)
    2cb6:	ef 85       	ldd	r30, Y+15	; 0x0f
    2cb8:	f8 89       	ldd	r31, Y+16	; 0x10
    2cba:	30 97       	sbiw	r30, 0x00	; 0
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <_ZN9OneButton4tickEb+0x8c>
        _pressFunc();
    2cbe:	09 95       	icall
      if (_longPressStartFunc)
    2cc0:	e9 89       	ldd	r30, Y+17	; 0x11
    2cc2:	fa 89       	ldd	r31, Y+18	; 0x12
    2cc4:	30 97       	sbiw	r30, 0x00	; 0
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <_ZN9OneButton4tickEb+0x96>
        _longPressStartFunc();
    2cc8:	09 95       	icall
      if (_duringLongPressFunc)
    2cca:	ed 89       	ldd	r30, Y+21	; 0x15
    2ccc:	fe 89       	ldd	r31, Y+22	; 0x16
    2cce:	30 97       	sbiw	r30, 0x00	; 0
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <_ZN9OneButton4tickEb+0xa0>
        _duringLongPressFunc();
    2cd2:	09 95       	icall
      _state = 6; // step to state 6
    2cd4:	86 e0       	ldi	r24, 0x06	; 6
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	98 8f       	std	Y+24, r25	; 0x18
    2cda:	8f 8b       	std	Y+23, r24	; 0x17
    2cdc:	68 c0       	rjmp	.+208    	; 0x2dae <_ZN9OneButton4tickEb+0x17a>
      _stopTime = now; // remember stopping time
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) {
    2cde:	82 30       	cpi	r24, 0x02	; 2
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	f1 f5       	brne	.+124    	; 0x2d60 <_ZN9OneButton4tickEb+0x12c>
    // waiting for menu pin being pressed the second time or timeout.
    if (_doubleClickFunc == NULL ||
    2ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce8:	89 2b       	or	r24, r25
    2cea:	99 f0       	breq	.+38     	; 0x2d12 <_ZN9OneButton4tickEb+0xde>
    2cec:	89 8d       	ldd	r24, Y+25	; 0x19
    2cee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cf0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2cf2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2cf4:	b7 01       	movw	r22, r14
    2cf6:	a6 01       	movw	r20, r12
    2cf8:	48 1b       	sub	r20, r24
    2cfa:	59 0b       	sbc	r21, r25
    2cfc:	6a 0b       	sbc	r22, r26
    2cfe:	7b 0b       	sbc	r23, r27
    2d00:	8c 81       	ldd	r24, Y+4	; 0x04
    2d02:	9d 81       	ldd	r25, Y+5	; 0x05
    2d04:	a0 e0       	ldi	r26, 0x00	; 0
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	84 17       	cp	r24, r20
    2d0a:	95 07       	cpc	r25, r21
    2d0c:	a6 07       	cpc	r26, r22
    2d0e:	b7 07       	cpc	r27, r23
    2d10:	38 f4       	brcc	.+14     	; 0x2d20 <_ZN9OneButton4tickEb+0xec>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
    2d12:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d14:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d16:	30 97       	sbiw	r30, 0x00	; 0
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <_ZN9OneButton4tickEb+0xe8>
    2d1a:	bb cf       	rjmp	.-138    	; 0x2c92 <_ZN9OneButton4tickEb+0x5e>
        _clickFunc();
    2d1c:	09 95       	icall
    2d1e:	b9 cf       	rjmp	.-142    	; 0x2c92 <_ZN9OneButton4tickEb+0x5e>
      _state = 0; // restart.

    } else if ((activeLevel) &&
    2d20:	11 23       	and	r17, r17
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <_ZN9OneButton4tickEb+0xf2>
    2d24:	57 c0       	rjmp	.+174    	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
    2d26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d2a:	af 8d       	ldd	r26, Y+31	; 0x1f
    2d2c:	b8 a1       	ldd	r27, Y+32	; 0x20
    2d2e:	b7 01       	movw	r22, r14
    2d30:	a6 01       	movw	r20, r12
    2d32:	48 1b       	sub	r20, r24
    2d34:	59 0b       	sbc	r21, r25
    2d36:	6a 0b       	sbc	r22, r26
    2d38:	7b 0b       	sbc	r23, r27
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3e:	a0 e0       	ldi	r26, 0x00	; 0
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	84 17       	cp	r24, r20
    2d44:	95 07       	cpc	r25, r21
    2d46:	a6 07       	cpc	r26, r22
    2d48:	b7 07       	cpc	r27, r23
    2d4a:	08 f0       	brcs	.+2      	; 0x2d4e <_ZN9OneButton4tickEb+0x11a>
    2d4c:	43 c0       	rjmp	.+134    	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	98 8f       	std	Y+24, r25	; 0x18
    2d54:	8f 8b       	std	Y+23, r24	; 0x17
      _startTime = now; // remember starting time
    2d56:	c9 8e       	std	Y+25, r12	; 0x19
    2d58:	da 8e       	std	Y+26, r13	; 0x1a
    2d5a:	eb 8e       	std	Y+27, r14	; 0x1b
    2d5c:	fc 8e       	std	Y+28, r15	; 0x1c
    2d5e:	3a c0       	rjmp	.+116    	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    2d60:	83 30       	cpi	r24, 0x03	; 3
    2d62:	91 05       	cpc	r25, r1
    2d64:	c1 f4       	brne	.+48     	; 0x2d96 <_ZN9OneButton4tickEb+0x162>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
    2d66:	11 11       	cpse	r17, r1
    2d68:	35 c0       	rjmp	.+106    	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
    2d6a:	89 8d       	ldd	r24, Y+25	; 0x19
    2d6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d6e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2d70:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2d72:	b7 01       	movw	r22, r14
    2d74:	a6 01       	movw	r20, r12
    2d76:	48 1b       	sub	r20, r24
    2d78:	59 0b       	sbc	r21, r25
    2d7a:	6a 0b       	sbc	r22, r26
    2d7c:	7b 0b       	sbc	r23, r27
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	9b 81       	ldd	r25, Y+3	; 0x03
    2d82:	a0 e0       	ldi	r26, 0x00	; 0
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	84 17       	cp	r24, r20
    2d88:	95 07       	cpc	r25, r21
    2d8a:	a6 07       	cpc	r26, r22
    2d8c:	b7 07       	cpc	r27, r23
    2d8e:	10 f5       	brcc	.+68     	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      // this was a 2 click sequence.
      if (_doubleClickFunc)
    2d90:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d92:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d94:	07 c0       	rjmp	.+14     	; 0x2da4 <_ZN9OneButton4tickEb+0x170>
        _doubleClickFunc();
      _state = 0; // restart.
      _stopTime = now; // remember stopping time
    } // if

  } else if (_state == 6) {
    2d96:	06 97       	sbiw	r24, 0x06	; 6
    2d98:	e9 f4       	brne	.+58     	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
    2d9a:	11 11       	cpse	r17, r1
    2d9c:	0d c0       	rjmp	.+26     	; 0x2db8 <_ZN9OneButton4tickEb+0x184>
      _isLongPressed = false; // Keep track of long press state
    2d9e:	1a 86       	std	Y+10, r1	; 0x0a
      if (_longPressStopFunc)
    2da0:	eb 89       	ldd	r30, Y+19	; 0x13
    2da2:	fc 89       	ldd	r31, Y+20	; 0x14
    2da4:	30 97       	sbiw	r30, 0x00	; 0
    2da6:	09 f0       	breq	.+2      	; 0x2daa <_ZN9OneButton4tickEb+0x176>
        _longPressStopFunc();
    2da8:	09 95       	icall
      _state = 0; // restart.
    2daa:	18 8e       	std	Y+24, r1	; 0x18
    2dac:	1f 8a       	std	Y+23, r1	; 0x17
      _stopTime = now; // remember stopping time
    2dae:	cd 8e       	std	Y+29, r12	; 0x1d
    2db0:	de 8e       	std	Y+30, r13	; 0x1e
    2db2:	ef 8e       	std	Y+31, r14	; 0x1f
    2db4:	f8 a2       	std	Y+32, r15	; 0x20
    2db6:	0e c0       	rjmp	.+28     	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	8a 87       	std	Y+10, r24	; 0x0a
      if (_duringLongPressFunc)
    2dbc:	ed 89       	ldd	r30, Y+21	; 0x15
    2dbe:	fe 89       	ldd	r31, Y+22	; 0x16
    2dc0:	30 97       	sbiw	r30, 0x00	; 0
    2dc2:	41 f0       	breq	.+16     	; 0x2dd4 <_ZN9OneButton4tickEb+0x1a0>
        _duringLongPressFunc();
    } // if

  } // if
} // OneButton.tick()
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	ff 90       	pop	r15
    2dcc:	ef 90       	pop	r14
    2dce:	df 90       	pop	r13
    2dd0:	cf 90       	pop	r12
      _stopTime = now; // remember stopping time
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
    2dd2:	09 94       	ijmp
    } // if

  } // if
} // OneButton.tick()
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	ff 90       	pop	r15
    2ddc:	ef 90       	pop	r14
    2dde:	df 90       	pop	r13
    2de0:	cf 90       	pop	r12
    2de2:	08 95       	ret

00002de4 <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	ec 01       	movw	r28, r24
  if (_pin >= 0) {
    2dea:	88 81       	ld	r24, Y
    2dec:	99 81       	ldd	r25, Y+1	; 0x01
    2dee:	97 fd       	sbrc	r25, 7
    2df0:	0e c0       	rjmp	.+28     	; 0x2e0e <_ZN9OneButton4tickEv+0x2a>
    tick(digitalRead(_pin) == _buttonPressed);
    2df2:	0e 94 94 22 	call	0x4528	; 0x4528 <digitalRead>
    2df6:	61 e0       	ldi	r22, 0x01	; 1
    2df8:	28 85       	ldd	r18, Y+8	; 0x08
    2dfa:	39 85       	ldd	r19, Y+9	; 0x09
    2dfc:	28 17       	cp	r18, r24
    2dfe:	39 07       	cpc	r19, r25
    2e00:	09 f0       	breq	.+2      	; 0x2e04 <_ZN9OneButton4tickEv+0x20>
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	ce 01       	movw	r24, r28
  }
}
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
    2e0a:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <_ZN9OneButton4tickEb>
  }
}
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	08 95       	ret

00002e14 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2e14:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_state>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <twi_sendStop>
    2e1e:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <twi_inRepStart>
    2e22:	61 e0       	ldi	r22, 0x01	; 1
    2e24:	82 e1       	ldi	r24, 0x12	; 18
    2e26:	0e 94 65 22 	call	0x44ca	; 0x44ca <digitalWrite>
    2e2a:	61 e0       	ldi	r22, 0x01	; 1
    2e2c:	83 e1       	ldi	r24, 0x13	; 19
    2e2e:	0e 94 65 22 	call	0x44ca	; 0x44ca <digitalWrite>
    2e32:	e9 eb       	ldi	r30, 0xB9	; 185
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8e 7f       	andi	r24, 0xFE	; 254
    2e3a:	80 83       	st	Z, r24
    2e3c:	80 81       	ld	r24, Z
    2e3e:	8d 7f       	andi	r24, 0xFD	; 253
    2e40:	80 83       	st	Z, r24
    2e42:	88 e4       	ldi	r24, 0x48	; 72
    2e44:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2e48:	85 e4       	ldi	r24, 0x45	; 69
    2e4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e4e:	08 95       	ret

00002e50 <twi_readFrom>:
    2e50:	41 32       	cpi	r20, 0x21	; 33
    2e52:	08 f0       	brcs	.+2      	; 0x2e56 <twi_readFrom+0x6>
    2e54:	43 c0       	rjmp	.+134    	; 0x2edc <twi_readFrom+0x8c>
    2e56:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <twi_state>
    2e5a:	91 11       	cpse	r25, r1
    2e5c:	fc cf       	rjmp	.-8      	; 0x2e56 <twi_readFrom+0x6>
    2e5e:	91 e0       	ldi	r25, 0x01	; 1
    2e60:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <twi_state>
    2e64:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <twi_sendStop>
    2e68:	2f ef       	ldi	r18, 0xFF	; 255
    2e6a:	20 93 65 02 	sts	0x0265, r18	; 0x800265 <twi_error>
    2e6e:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <twi_masterBufferIndex>
    2e72:	24 0f       	add	r18, r20
    2e74:	20 93 a9 02 	sts	0x02A9, r18	; 0x8002a9 <twi_masterBufferLength>
    2e78:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <twi_slarw>
    2e7c:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <twi_slarw>
    2e80:	88 0f       	add	r24, r24
    2e82:	89 2b       	or	r24, r25
    2e84:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <twi_slarw>
    2e88:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <twi_inRepStart>
    2e8c:	81 30       	cpi	r24, 0x01	; 1
    2e8e:	61 f4       	brne	.+24     	; 0x2ea8 <twi_readFrom+0x58>
    2e90:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <twi_inRepStart>
    2e94:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <twi_slarw>
    2e98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ea0:	83 fd       	sbrc	r24, 3
    2ea2:	f8 cf       	rjmp	.-16     	; 0x2e94 <twi_readFrom+0x44>
    2ea4:	85 ec       	ldi	r24, 0xC5	; 197
    2ea6:	01 c0       	rjmp	.+2      	; 0x2eaa <twi_readFrom+0x5a>
    2ea8:	85 ee       	ldi	r24, 0xE5	; 229
    2eaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2eae:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <twi_state>
    2eb2:	81 30       	cpi	r24, 0x01	; 1
    2eb4:	e1 f3       	breq	.-8      	; 0x2eae <twi_readFrom+0x5e>
    2eb6:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <twi_masterBufferIndex>
    2eba:	84 17       	cp	r24, r20
    2ebc:	10 f4       	brcc	.+4      	; 0x2ec2 <twi_readFrom+0x72>
    2ebe:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <twi_masterBufferIndex>
    2ec2:	ab ea       	ldi	r26, 0xAB	; 171
    2ec4:	b2 e0       	ldi	r27, 0x02	; 2
    2ec6:	96 2f       	mov	r25, r22
    2ec8:	fb 01       	movw	r30, r22
    2eca:	8e 2f       	mov	r24, r30
    2ecc:	89 1b       	sub	r24, r25
    2ece:	84 17       	cp	r24, r20
    2ed0:	18 f4       	brcc	.+6      	; 0x2ed8 <twi_readFrom+0x88>
    2ed2:	8d 91       	ld	r24, X+
    2ed4:	81 93       	st	Z+, r24
    2ed6:	f9 cf       	rjmp	.-14     	; 0x2eca <twi_readFrom+0x7a>
    2ed8:	84 2f       	mov	r24, r20
    2eda:	08 95       	ret
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	08 95       	ret

00002ee0 <twi_writeTo>:
    2ee0:	0f 93       	push	r16
    2ee2:	41 32       	cpi	r20, 0x21	; 33
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <twi_writeTo+0x8>
    2ee6:	4a c0       	rjmp	.+148    	; 0x2f7c <twi_writeTo+0x9c>
    2ee8:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <twi_state>
    2eec:	91 11       	cpse	r25, r1
    2eee:	fc cf       	rjmp	.-8      	; 0x2ee8 <twi_writeTo+0x8>
    2ef0:	32 e0       	ldi	r19, 0x02	; 2
    2ef2:	30 93 d2 02 	sts	0x02D2, r19	; 0x8002d2 <twi_state>
    2ef6:	00 93 d0 02 	sts	0x02D0, r16	; 0x8002d0 <twi_sendStop>
    2efa:	3f ef       	ldi	r19, 0xFF	; 255
    2efc:	30 93 65 02 	sts	0x0265, r19	; 0x800265 <twi_error>
    2f00:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <twi_masterBufferIndex>
    2f04:	40 93 a9 02 	sts	0x02A9, r20	; 0x8002a9 <twi_masterBufferLength>
    2f08:	56 2f       	mov	r21, r22
    2f0a:	ab ea       	ldi	r26, 0xAB	; 171
    2f0c:	b2 e0       	ldi	r27, 0x02	; 2
    2f0e:	fb 01       	movw	r30, r22
    2f10:	3e 2f       	mov	r19, r30
    2f12:	35 1b       	sub	r19, r21
    2f14:	34 17       	cp	r19, r20
    2f16:	18 f4       	brcc	.+6      	; 0x2f1e <twi_writeTo+0x3e>
    2f18:	31 91       	ld	r19, Z+
    2f1a:	3d 93       	st	X+, r19
    2f1c:	f9 cf       	rjmp	.-14     	; 0x2f10 <twi_writeTo+0x30>
    2f1e:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <twi_slarw>
    2f22:	30 91 d1 02 	lds	r19, 0x02D1	; 0x8002d1 <twi_slarw>
    2f26:	88 0f       	add	r24, r24
    2f28:	83 2b       	or	r24, r19
    2f2a:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <twi_slarw>
    2f2e:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <twi_inRepStart>
    2f32:	81 30       	cpi	r24, 0x01	; 1
    2f34:	61 f4       	brne	.+24     	; 0x2f4e <twi_writeTo+0x6e>
    2f36:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <twi_inRepStart>
    2f3a:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <twi_slarw>
    2f3e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2f42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f46:	83 fd       	sbrc	r24, 3
    2f48:	f8 cf       	rjmp	.-16     	; 0x2f3a <twi_writeTo+0x5a>
    2f4a:	85 ec       	ldi	r24, 0xC5	; 197
    2f4c:	01 c0       	rjmp	.+2      	; 0x2f50 <twi_writeTo+0x70>
    2f4e:	85 ee       	ldi	r24, 0xE5	; 229
    2f50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f54:	22 23       	and	r18, r18
    2f56:	21 f0       	breq	.+8      	; 0x2f60 <twi_writeTo+0x80>
    2f58:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <twi_state>
    2f5c:	82 30       	cpi	r24, 0x02	; 2
    2f5e:	d1 f3       	breq	.-12     	; 0x2f54 <twi_writeTo+0x74>
    2f60:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <twi_error>
    2f64:	8f 3f       	cpi	r24, 0xFF	; 255
    2f66:	79 f0       	breq	.+30     	; 0x2f86 <twi_writeTo+0xa6>
    2f68:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <twi_error>
    2f6c:	80 32       	cpi	r24, 0x20	; 32
    2f6e:	41 f0       	breq	.+16     	; 0x2f80 <twi_writeTo+0xa0>
    2f70:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <twi_error>
    2f74:	80 33       	cpi	r24, 0x30	; 48
    2f76:	31 f0       	breq	.+12     	; 0x2f84 <twi_writeTo+0xa4>
    2f78:	94 e0       	ldi	r25, 0x04	; 4
    2f7a:	05 c0       	rjmp	.+10     	; 0x2f86 <twi_writeTo+0xa6>
    2f7c:	91 e0       	ldi	r25, 0x01	; 1
    2f7e:	03 c0       	rjmp	.+6      	; 0x2f86 <twi_writeTo+0xa6>
    2f80:	92 e0       	ldi	r25, 0x02	; 2
    2f82:	01 c0       	rjmp	.+2      	; 0x2f86 <twi_writeTo+0xa6>
    2f84:	93 e0       	ldi	r25, 0x03	; 3
    2f86:	89 2f       	mov	r24, r25
    2f88:	0f 91       	pop	r16
    2f8a:	08 95       	ret

00002f8c <twi_transmit>:
    2f8c:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <twi_txBufferLength>
    2f90:	26 2f       	mov	r18, r22
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	24 0f       	add	r18, r20
    2f96:	31 1d       	adc	r19, r1
    2f98:	21 32       	cpi	r18, 0x21	; 33
    2f9a:	31 05       	cpc	r19, r1
    2f9c:	dc f4       	brge	.+54     	; 0x2fd4 <twi_transmit+0x48>
    2f9e:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <twi_state>
    2fa2:	24 30       	cpi	r18, 0x04	; 4
    2fa4:	c9 f4       	brne	.+50     	; 0x2fd8 <twi_transmit+0x4c>
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	86 17       	cp	r24, r22
    2fae:	58 f4       	brcc	.+22     	; 0x2fc6 <twi_transmit+0x3a>
    2fb0:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <twi_txBufferLength>
    2fb4:	21 91       	ld	r18, Z+
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	a7 57       	subi	r26, 0x77	; 119
    2fba:	bd 4f       	sbci	r27, 0xFD	; 253
    2fbc:	a3 0f       	add	r26, r19
    2fbe:	b1 1d       	adc	r27, r1
    2fc0:	2c 93       	st	X, r18
    2fc2:	01 96       	adiw	r24, 0x01	; 1
    2fc4:	f3 cf       	rjmp	.-26     	; 0x2fac <twi_transmit+0x20>
    2fc6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <twi_txBufferLength>
    2fca:	68 0f       	add	r22, r24
    2fcc:	60 93 87 02 	sts	0x0287, r22	; 0x800287 <twi_txBufferLength>
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	08 95       	ret
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	08 95       	ret
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	08 95       	ret

00002fdc <twi_attachSlaveRxEvent>:
    2fdc:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <twi_onSlaveReceive+0x1>
    2fe0:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <twi_onSlaveReceive>
    2fe4:	08 95       	ret

00002fe6 <twi_attachSlaveTxEvent>:
    2fe6:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <twi_onSlaveTransmit+0x1>
    2fea:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twi_onSlaveTransmit>
    2fee:	08 95       	ret

00002ff0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2ff0:	85 ed       	ldi	r24, 0xD5	; 213
    2ff2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2ff6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ffa:	84 fd       	sbrc	r24, 4
    2ffc:	fc cf       	rjmp	.-8      	; 0x2ff6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ffe:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_state>
    3002:	08 95       	ret

00003004 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3004:	85 ec       	ldi	r24, 0xC5	; 197
    3006:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    300a:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_state>
    300e:	08 95       	ret

00003010 <__vector_24>:
}

ISR(TWI_vect)
{
    3010:	1f 92       	push	r1
    3012:	0f 92       	push	r0
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	0f 92       	push	r0
    3018:	11 24       	eor	r1, r1
    301a:	2f 93       	push	r18
    301c:	3f 93       	push	r19
    301e:	4f 93       	push	r20
    3020:	5f 93       	push	r21
    3022:	6f 93       	push	r22
    3024:	7f 93       	push	r23
    3026:	8f 93       	push	r24
    3028:	9f 93       	push	r25
    302a:	af 93       	push	r26
    302c:	bf 93       	push	r27
    302e:	ef 93       	push	r30
    3030:	ff 93       	push	r31
  switch(TW_STATUS){
    3032:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3036:	88 7f       	andi	r24, 0xF8	; 248
    3038:	80 36       	cpi	r24, 0x60	; 96
    303a:	09 f4       	brne	.+2      	; 0x303e <__vector_24+0x2e>
    303c:	9e c0       	rjmp	.+316    	; 0x317a <__vector_24+0x16a>
    303e:	78 f5       	brcc	.+94     	; 0x309e <__vector_24+0x8e>
    3040:	88 32       	cpi	r24, 0x28	; 40
    3042:	09 f4       	brne	.+2      	; 0x3046 <__vector_24+0x36>
    3044:	5d c0       	rjmp	.+186    	; 0x3100 <__vector_24+0xf0>
    3046:	90 f4       	brcc	.+36     	; 0x306c <__vector_24+0x5c>
    3048:	80 31       	cpi	r24, 0x10	; 16
    304a:	09 f4       	brne	.+2      	; 0x304e <__vector_24+0x3e>
    304c:	56 c0       	rjmp	.+172    	; 0x30fa <__vector_24+0xea>
    304e:	38 f4       	brcc	.+14     	; 0x305e <__vector_24+0x4e>
    3050:	88 23       	and	r24, r24
    3052:	09 f4       	brne	.+2      	; 0x3056 <__vector_24+0x46>
    3054:	f5 c0       	rjmp	.+490    	; 0x3240 <__vector_24+0x230>
    3056:	88 30       	cpi	r24, 0x08	; 8
    3058:	09 f4       	brne	.+2      	; 0x305c <__vector_24+0x4c>
    305a:	4f c0       	rjmp	.+158    	; 0x30fa <__vector_24+0xea>
    305c:	f5 c0       	rjmp	.+490    	; 0x3248 <__vector_24+0x238>
    305e:	88 31       	cpi	r24, 0x18	; 24
    3060:	09 f4       	brne	.+2      	; 0x3064 <__vector_24+0x54>
    3062:	4e c0       	rjmp	.+156    	; 0x3100 <__vector_24+0xf0>
    3064:	80 32       	cpi	r24, 0x20	; 32
    3066:	09 f4       	brne	.+2      	; 0x306a <__vector_24+0x5a>
    3068:	5f c0       	rjmp	.+190    	; 0x3128 <__vector_24+0x118>
    306a:	ee c0       	rjmp	.+476    	; 0x3248 <__vector_24+0x238>
    306c:	80 34       	cpi	r24, 0x40	; 64
    306e:	09 f4       	brne	.+2      	; 0x3072 <__vector_24+0x62>
    3070:	6a c0       	rjmp	.+212    	; 0x3146 <__vector_24+0x136>
    3072:	58 f4       	brcc	.+22     	; 0x308a <__vector_24+0x7a>
    3074:	80 33       	cpi	r24, 0x30	; 48
    3076:	09 f4       	brne	.+2      	; 0x307a <__vector_24+0x6a>
    3078:	57 c0       	rjmp	.+174    	; 0x3128 <__vector_24+0x118>
    307a:	88 33       	cpi	r24, 0x38	; 56
    307c:	09 f0       	breq	.+2      	; 0x3080 <__vector_24+0x70>
    307e:	e4 c0       	rjmp	.+456    	; 0x3248 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3080:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <twi_error>
      twi_releaseBus();
    3084:	0e 94 02 18 	call	0x3004	; 0x3004 <twi_releaseBus>
      break;
    3088:	df c0       	rjmp	.+446    	; 0x3248 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    308a:	80 35       	cpi	r24, 0x50	; 80
    308c:	09 f4       	brne	.+2      	; 0x3090 <__vector_24+0x80>
    308e:	4f c0       	rjmp	.+158    	; 0x312e <__vector_24+0x11e>
    3090:	88 35       	cpi	r24, 0x58	; 88
    3092:	09 f4       	brne	.+2      	; 0x3096 <__vector_24+0x86>
    3094:	5d c0       	rjmp	.+186    	; 0x3150 <__vector_24+0x140>
    3096:	88 34       	cpi	r24, 0x48	; 72
    3098:	09 f0       	breq	.+2      	; 0x309c <__vector_24+0x8c>
    309a:	d6 c0       	rjmp	.+428    	; 0x3248 <__vector_24+0x238>
    309c:	d3 c0       	rjmp	.+422    	; 0x3244 <__vector_24+0x234>
    309e:	88 39       	cpi	r24, 0x98	; 152
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <__vector_24+0x94>
    30a2:	c4 c0       	rjmp	.+392    	; 0x322c <__vector_24+0x21c>
    30a4:	a8 f4       	brcc	.+42     	; 0x30d0 <__vector_24+0xc0>
    30a6:	88 37       	cpi	r24, 0x78	; 120
    30a8:	09 f4       	brne	.+2      	; 0x30ac <__vector_24+0x9c>
    30aa:	67 c0       	rjmp	.+206    	; 0x317a <__vector_24+0x16a>
    30ac:	38 f4       	brcc	.+14     	; 0x30bc <__vector_24+0xac>
    30ae:	88 36       	cpi	r24, 0x68	; 104
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <__vector_24+0xa4>
    30b2:	63 c0       	rjmp	.+198    	; 0x317a <__vector_24+0x16a>
    30b4:	80 37       	cpi	r24, 0x70	; 112
    30b6:	09 f4       	brne	.+2      	; 0x30ba <__vector_24+0xaa>
    30b8:	60 c0       	rjmp	.+192    	; 0x317a <__vector_24+0x16a>
    30ba:	c6 c0       	rjmp	.+396    	; 0x3248 <__vector_24+0x238>
    30bc:	88 38       	cpi	r24, 0x88	; 136
    30be:	09 f4       	brne	.+2      	; 0x30c2 <__vector_24+0xb2>
    30c0:	b5 c0       	rjmp	.+362    	; 0x322c <__vector_24+0x21c>
    30c2:	80 39       	cpi	r24, 0x90	; 144
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <__vector_24+0xb8>
    30c6:	5f c0       	rjmp	.+190    	; 0x3186 <__vector_24+0x176>
    30c8:	80 38       	cpi	r24, 0x80	; 128
    30ca:	09 f0       	breq	.+2      	; 0x30ce <__vector_24+0xbe>
    30cc:	bd c0       	rjmp	.+378    	; 0x3248 <__vector_24+0x238>
    30ce:	5b c0       	rjmp	.+182    	; 0x3186 <__vector_24+0x176>
    30d0:	80 3b       	cpi	r24, 0xB0	; 176
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <__vector_24+0xc6>
    30d4:	83 c0       	rjmp	.+262    	; 0x31dc <__vector_24+0x1cc>
    30d6:	38 f4       	brcc	.+14     	; 0x30e6 <__vector_24+0xd6>
    30d8:	80 3a       	cpi	r24, 0xA0	; 160
    30da:	09 f4       	brne	.+2      	; 0x30de <__vector_24+0xce>
    30dc:	66 c0       	rjmp	.+204    	; 0x31aa <__vector_24+0x19a>
    30de:	88 3a       	cpi	r24, 0xA8	; 168
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <__vector_24+0xd4>
    30e2:	7c c0       	rjmp	.+248    	; 0x31dc <__vector_24+0x1cc>
    30e4:	b1 c0       	rjmp	.+354    	; 0x3248 <__vector_24+0x238>
    30e6:	80 3c       	cpi	r24, 0xC0	; 192
    30e8:	09 f4       	brne	.+2      	; 0x30ec <__vector_24+0xdc>
    30ea:	a4 c0       	rjmp	.+328    	; 0x3234 <__vector_24+0x224>
    30ec:	88 3c       	cpi	r24, 0xC8	; 200
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <__vector_24+0xe2>
    30f0:	a1 c0       	rjmp	.+322    	; 0x3234 <__vector_24+0x224>
    30f2:	88 3b       	cpi	r24, 0xB8	; 184
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <__vector_24+0xe8>
    30f6:	87 c0       	rjmp	.+270    	; 0x3206 <__vector_24+0x1f6>
    30f8:	a7 c0       	rjmp	.+334    	; 0x3248 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    30fa:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <twi_slarw>
    30fe:	10 c0       	rjmp	.+32     	; 0x3120 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3100:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <twi_masterBufferIndex>
    3104:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <twi_masterBufferLength>
    3108:	98 17       	cp	r25, r24
    310a:	70 f5       	brcc	.+92     	; 0x3168 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    310c:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <twi_masterBufferIndex>
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	8e 0f       	add	r24, r30
    3114:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <twi_masterBufferIndex>
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	e5 55       	subi	r30, 0x55	; 85
    311c:	fd 4f       	sbci	r31, 0xFD	; 253
    311e:	80 81       	ld	r24, Z
    3120:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3124:	85 ec       	ldi	r24, 0xC5	; 197
    3126:	83 c0       	rjmp	.+262    	; 0x322e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3128:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <twi_error>
    312c:	8b c0       	rjmp	.+278    	; 0x3244 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    312e:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <twi_masterBufferIndex>
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	8e 0f       	add	r24, r30
    3136:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <twi_masterBufferIndex>
    313a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	e5 55       	subi	r30, 0x55	; 85
    3142:	fd 4f       	sbci	r31, 0xFD	; 253
    3144:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3146:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <twi_masterBufferIndex>
    314a:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <twi_masterBufferLength>
    314e:	6b c0       	rjmp	.+214    	; 0x3226 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3150:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <twi_masterBufferIndex>
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	8e 0f       	add	r24, r30
    3158:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <twi_masterBufferIndex>
    315c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	e5 55       	subi	r30, 0x55	; 85
    3164:	fd 4f       	sbci	r31, 0xFD	; 253
    3166:	80 83       	st	Z, r24
	if (twi_sendStop)
    3168:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <twi_sendStop>
    316c:	81 11       	cpse	r24, r1
    316e:	6a c0       	rjmp	.+212    	; 0x3244 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3176:	84 ea       	ldi	r24, 0xA4	; 164
    3178:	5e c0       	rjmp	.+188    	; 0x3236 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3180:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <twi_rxBufferIndex>
    3184:	cf cf       	rjmp	.-98     	; 0x3124 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3186:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <twi_rxBufferIndex>
    318a:	80 32       	cpi	r24, 0x20	; 32
    318c:	08 f0       	brcs	.+2      	; 0x3190 <__vector_24+0x180>
    318e:	4e c0       	rjmp	.+156    	; 0x322c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3190:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <twi_rxBufferIndex>
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	8e 0f       	add	r24, r30
    3198:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <twi_rxBufferIndex>
    319c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	e9 59       	subi	r30, 0x99	; 153
    31a4:	fd 4f       	sbci	r31, 0xFD	; 253
    31a6:	80 83       	st	Z, r24
    31a8:	bd cf       	rjmp	.-134    	; 0x3124 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    31aa:	0e 94 02 18 	call	0x3004	; 0x3004 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    31ae:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <twi_rxBufferIndex>
    31b2:	80 32       	cpi	r24, 0x20	; 32
    31b4:	30 f4       	brcc	.+12     	; 0x31c2 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    31b6:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <twi_rxBufferIndex>
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	e9 59       	subi	r30, 0x99	; 153
    31be:	fd 4f       	sbci	r31, 0xFD	; 253
    31c0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    31c2:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <twi_rxBufferIndex>
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <twi_onSlaveReceive>
    31cc:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <twi_onSlaveReceive+0x1>
    31d0:	87 e6       	ldi	r24, 0x67	; 103
    31d2:	92 e0       	ldi	r25, 0x02	; 2
    31d4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    31d6:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <twi_rxBufferIndex>
      break;
    31da:	36 c0       	rjmp	.+108    	; 0x3248 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    31dc:	84 e0       	ldi	r24, 0x04	; 4
    31de:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    31e2:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    31e6:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    31ea:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <twi_onSlaveTransmit>
    31ee:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <twi_onSlaveTransmit+0x1>
    31f2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    31f4:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <twi_txBufferLength>
    31f8:	81 11       	cpse	r24, r1
    31fa:	05 c0       	rjmp	.+10     	; 0x3206 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3202:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3206:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <twi_txBufferIndex>
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	8e 0f       	add	r24, r30
    320e:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <twi_txBufferIndex>
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	e7 57       	subi	r30, 0x77	; 119
    3216:	fd 4f       	sbci	r31, 0xFD	; 253
    3218:	80 81       	ld	r24, Z
    321a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    321e:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <twi_txBufferIndex>
    3222:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <twi_txBufferLength>
    3226:	98 17       	cp	r25, r24
    3228:	08 f4       	brcc	.+2      	; 0x322c <__vector_24+0x21c>
    322a:	7c cf       	rjmp	.-264    	; 0x3124 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    322c:	85 e8       	ldi	r24, 0x85	; 133
    322e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3232:	0a c0       	rjmp	.+20     	; 0x3248 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3234:	85 ec       	ldi	r24, 0xC5	; 197
    3236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    323a:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <twi_state>
      break;
    323e:	04 c0       	rjmp	.+8      	; 0x3248 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3240:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <twi_error>
      twi_stop();
    3244:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <twi_stop>
      break;
  }
}
    3248:	ff 91       	pop	r31
    324a:	ef 91       	pop	r30
    324c:	bf 91       	pop	r27
    324e:	af 91       	pop	r26
    3250:	9f 91       	pop	r25
    3252:	8f 91       	pop	r24
    3254:	7f 91       	pop	r23
    3256:	6f 91       	pop	r22
    3258:	5f 91       	pop	r21
    325a:	4f 91       	pop	r20
    325c:	3f 91       	pop	r19
    325e:	2f 91       	pop	r18
    3260:	0f 90       	pop	r0
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	0f 90       	pop	r0
    3266:	1f 90       	pop	r1
    3268:	18 95       	reti

0000326a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    326a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    3274:	82 1b       	sub	r24, r18
    3276:	91 09       	sbc	r25, r1
    3278:	08 95       	ret

0000327a <_ZN7TwoWire4readEv>:
    327a:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    327e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    3282:	98 17       	cp	r25, r24
    3284:	50 f4       	brcc	.+20     	; 0x329a <_ZN7TwoWire4readEv+0x20>
    3286:	e9 2f       	mov	r30, r25
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	e7 5f       	subi	r30, 0xF7	; 247
    328c:	fc 4f       	sbci	r31, 0xFC	; 252
    328e:	20 81       	ld	r18, Z
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	9f 5f       	subi	r25, 0xFF	; 255
    3294:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    3298:	02 c0       	rjmp	.+4      	; 0x329e <_ZN7TwoWire4readEv+0x24>
    329a:	2f ef       	ldi	r18, 0xFF	; 255
    329c:	3f ef       	ldi	r19, 0xFF	; 255
    329e:	c9 01       	movw	r24, r18
    32a0:	08 95       	ret

000032a2 <_ZN7TwoWire4peekEv>:
    32a2:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    32a6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    32aa:	e8 17       	cp	r30, r24
    32ac:	30 f4       	brcc	.+12     	; 0x32ba <_ZN7TwoWire4peekEv+0x18>
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	e7 5f       	subi	r30, 0xF7	; 247
    32b2:	fc 4f       	sbci	r31, 0xFC	; 252
    32b4:	80 81       	ld	r24, Z
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	08 95       	ret
    32ba:	8f ef       	ldi	r24, 0xFF	; 255
    32bc:	9f ef       	ldi	r25, 0xFF	; 255
    32be:	08 95       	ret

000032c0 <_ZN7TwoWire5flushEv>:
    32c0:	08 95       	ret

000032c2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	ec 01       	movw	r28, r24
    32c8:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <_ZN7TwoWire14user_onReceiveE>
    32cc:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <_ZN7TwoWire14user_onReceiveE+0x1>
    32d0:	30 97       	sbiw	r30, 0x00	; 0
    32d2:	f1 f0       	breq	.+60     	; 0x3310 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    32d4:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    32d8:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    32dc:	98 17       	cp	r25, r24
    32de:	c0 f0       	brcs	.+48     	; 0x3310 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	29 2f       	mov	r18, r25
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	26 17       	cp	r18, r22
    32e8:	37 07       	cpc	r19, r23
    32ea:	54 f4       	brge	.+20     	; 0x3300 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    32ec:	de 01       	movw	r26, r28
    32ee:	a2 0f       	add	r26, r18
    32f0:	b3 1f       	adc	r27, r19
    32f2:	4c 91       	ld	r20, X
    32f4:	d9 01       	movw	r26, r18
    32f6:	a7 5f       	subi	r26, 0xF7	; 247
    32f8:	bc 4f       	sbci	r27, 0xFC	; 252
    32fa:	4c 93       	st	X, r20
    32fc:	9f 5f       	subi	r25, 0xFF	; 255
    32fe:	f1 cf       	rjmp	.-30     	; 0x32e2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3300:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    3304:	60 93 07 03 	sts	0x0307, r22	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    3308:	cb 01       	movw	r24, r22
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	09 94       	ijmp
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	08 95       	ret

00003316 <_ZN7TwoWire16onRequestServiceEv>:
    3316:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <_ZN7TwoWire14user_onRequestE>
    331a:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <_ZN7TwoWire14user_onRequestE+0x1>
    331e:	30 97       	sbiw	r30, 0x00	; 0
    3320:	29 f0       	breq	.+10     	; 0x332c <_ZN7TwoWire16onRequestServiceEv+0x16>
    3322:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    3326:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    332a:	09 94       	ijmp
    332c:	08 95       	ret

0000332e <_ZN7TwoWire5writeEPKhj>:
    332e:	cf 92       	push	r12
    3330:	df 92       	push	r13
    3332:	ef 92       	push	r14
    3334:	ff 92       	push	r15
    3336:	0f 93       	push	r16
    3338:	1f 93       	push	r17
    333a:	cf 93       	push	r28
    333c:	df 93       	push	r29
    333e:	7c 01       	movw	r14, r24
    3340:	cb 01       	movw	r24, r22
    3342:	8a 01       	movw	r16, r20
    3344:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <_ZN7TwoWire12transmittingE>
    3348:	22 23       	and	r18, r18
    334a:	89 f0       	breq	.+34     	; 0x336e <_ZN7TwoWire5writeEPKhj+0x40>
    334c:	eb 01       	movw	r28, r22
    334e:	6b 01       	movw	r12, r22
    3350:	c4 0e       	add	r12, r20
    3352:	d5 1e       	adc	r13, r21
    3354:	cc 15       	cp	r28, r12
    3356:	dd 05       	cpc	r29, r13
    3358:	69 f0       	breq	.+26     	; 0x3374 <_ZN7TwoWire5writeEPKhj+0x46>
    335a:	69 91       	ld	r22, Y+
    335c:	d7 01       	movw	r26, r14
    335e:	ed 91       	ld	r30, X+
    3360:	fc 91       	ld	r31, X
    3362:	01 90       	ld	r0, Z+
    3364:	f0 81       	ld	r31, Z
    3366:	e0 2d       	mov	r30, r0
    3368:	c7 01       	movw	r24, r14
    336a:	09 95       	icall
    336c:	f3 cf       	rjmp	.-26     	; 0x3354 <_ZN7TwoWire5writeEPKhj+0x26>
    336e:	64 2f       	mov	r22, r20
    3370:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <twi_transmit>
    3374:	c8 01       	movw	r24, r16
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	df 90       	pop	r13
    3384:	cf 90       	pop	r12
    3386:	08 95       	ret

00003388 <_ZN7TwoWire5writeEh>:
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	1f 92       	push	r1
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	69 83       	std	Y+1, r22	; 0x01
    3394:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <_ZN7TwoWire12transmittingE>
    3398:	22 23       	and	r18, r18
    339a:	d1 f0       	breq	.+52     	; 0x33d0 <_ZN7TwoWire5writeEh+0x48>
    339c:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    33a0:	20 32       	cpi	r18, 0x20	; 32
    33a2:	40 f0       	brcs	.+16     	; 0x33b4 <_ZN7TwoWire5writeEh+0x2c>
    33a4:	21 e0       	ldi	r18, 0x01	; 1
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	fc 01       	movw	r30, r24
    33aa:	33 83       	std	Z+3, r19	; 0x03
    33ac:	22 83       	std	Z+2, r18	; 0x02
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	15 c0       	rjmp	.+42     	; 0x33de <_ZN7TwoWire5writeEh+0x56>
    33b4:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    33b8:	e8 2f       	mov	r30, r24
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	ea 51       	subi	r30, 0x1A	; 26
    33be:	fd 4f       	sbci	r31, 0xFD	; 253
    33c0:	99 81       	ldd	r25, Y+1	; 0x01
    33c2:	90 83       	st	Z, r25
    33c4:	8f 5f       	subi	r24, 0xFF	; 255
    33c6:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    33ca:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    33ce:	05 c0       	rjmp	.+10     	; 0x33da <_ZN7TwoWire5writeEh+0x52>
    33d0:	61 e0       	ldi	r22, 0x01	; 1
    33d2:	ce 01       	movw	r24, r28
    33d4:	01 96       	adiw	r24, 0x01	; 1
    33d6:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <twi_transmit>
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0f 90       	pop	r0
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	08 95       	ret

000033e6 <_ZN7TwoWireC1Ev>:
    33e6:	fc 01       	movw	r30, r24
    33e8:	13 82       	std	Z+3, r1	; 0x03
    33ea:	12 82       	std	Z+2, r1	; 0x02
    33ec:	88 ee       	ldi	r24, 0xE8	; 232
    33ee:	93 e0       	ldi	r25, 0x03	; 3
    33f0:	a0 e0       	ldi	r26, 0x00	; 0
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	84 83       	std	Z+4, r24	; 0x04
    33f6:	95 83       	std	Z+5, r25	; 0x05
    33f8:	a6 83       	std	Z+6, r26	; 0x06
    33fa:	b7 83       	std	Z+7, r27	; 0x07
    33fc:	81 ea       	ldi	r24, 0xA1	; 161
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	91 83       	std	Z+1, r25	; 0x01
    3402:	80 83       	st	Z, r24
    3404:	08 95       	ret

00003406 <_ZN7TwoWire5beginEv>:
    3406:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    340a:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    340e:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    3412:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    3416:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <twi_init>
    341a:	8b e8       	ldi	r24, 0x8B	; 139
    341c:	99 e1       	ldi	r25, 0x19	; 25
    341e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <twi_attachSlaveTxEvent>
    3422:	81 e6       	ldi	r24, 0x61	; 97
    3424:	99 e1       	ldi	r25, 0x19	; 25
    3426:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <twi_attachSlaveRxEvent>

0000342a <_ZN7TwoWire17beginTransmissionEh>:
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <_ZN7TwoWire12transmittingE>
    3430:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <_ZN7TwoWire9txAddressE>
    3434:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    3438:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    343c:	08 95       	ret

0000343e <_ZN7TwoWire15endTransmissionEh>:
    343e:	0f 93       	push	r16
    3440:	06 2f       	mov	r16, r22
    3442:	21 e0       	ldi	r18, 0x01	; 1
    3444:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    3448:	66 ee       	ldi	r22, 0xE6	; 230
    344a:	72 e0       	ldi	r23, 0x02	; 2
    344c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <_ZN7TwoWire9txAddressE>
    3450:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <twi_writeTo>
    3454:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <_ZN7TwoWire13txBufferIndexE>
    3458:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <_ZN7TwoWire14txBufferLengthE>
    345c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <_ZN7TwoWire12transmittingE>
    3460:	0f 91       	pop	r16
    3462:	08 95       	ret

00003464 <_ZN7TwoWire11requestFromEhhmhh>:
    3464:	4f 92       	push	r4
    3466:	5f 92       	push	r5
    3468:	6f 92       	push	r6
    346a:	7f 92       	push	r7
    346c:	af 92       	push	r10
    346e:	bf 92       	push	r11
    3470:	cf 92       	push	r12
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
    347e:	5c 01       	movw	r10, r24
    3480:	f6 2e       	mov	r15, r22
    3482:	d4 2f       	mov	r29, r20
    3484:	28 01       	movw	r4, r16
    3486:	39 01       	movw	r6, r18
    3488:	ee 20       	and	r14, r14
    348a:	21 f1       	breq	.+72     	; 0x34d4 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    348c:	0e 94 15 1a 	call	0x342a	; 0x342a <_ZN7TwoWire17beginTransmissionEh>
    3490:	ce 2d       	mov	r28, r14
    3492:	c4 30       	cpi	r28, 0x04	; 4
    3494:	08 f0       	brcs	.+2      	; 0x3498 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3496:	c3 e0       	ldi	r28, 0x03	; 3
    3498:	c1 50       	subi	r28, 0x01	; 1
    349a:	c0 f0       	brcs	.+48     	; 0x34cc <_ZN7TwoWire11requestFromEhhmhh+0x68>
    349c:	28 e0       	ldi	r18, 0x08	; 8
    349e:	c2 9f       	mul	r28, r18
    34a0:	c0 01       	movw	r24, r0
    34a2:	11 24       	eor	r1, r1
    34a4:	a3 01       	movw	r20, r6
    34a6:	92 01       	movw	r18, r4
    34a8:	04 c0       	rjmp	.+8      	; 0x34b2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    34aa:	56 95       	lsr	r21
    34ac:	47 95       	ror	r20
    34ae:	37 95       	ror	r19
    34b0:	27 95       	ror	r18
    34b2:	8a 95       	dec	r24
    34b4:	d2 f7       	brpl	.-12     	; 0x34aa <_ZN7TwoWire11requestFromEhhmhh+0x46>
    34b6:	ca 01       	movw	r24, r20
    34b8:	b9 01       	movw	r22, r18
    34ba:	d5 01       	movw	r26, r10
    34bc:	ed 91       	ld	r30, X+
    34be:	fc 91       	ld	r31, X
    34c0:	01 90       	ld	r0, Z+
    34c2:	f0 81       	ld	r31, Z
    34c4:	e0 2d       	mov	r30, r0
    34c6:	c5 01       	movw	r24, r10
    34c8:	09 95       	icall
    34ca:	e6 cf       	rjmp	.-52     	; 0x3498 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	c5 01       	movw	r24, r10
    34d0:	0e 94 1f 1a 	call	0x343e	; 0x343e <_ZN7TwoWire15endTransmissionEh>
    34d4:	4d 2f       	mov	r20, r29
    34d6:	d1 32       	cpi	r29, 0x21	; 33
    34d8:	08 f0       	brcs	.+2      	; 0x34dc <_ZN7TwoWire11requestFromEhhmhh+0x78>
    34da:	40 e2       	ldi	r20, 0x20	; 32
    34dc:	2c 2d       	mov	r18, r12
    34de:	69 e0       	ldi	r22, 0x09	; 9
    34e0:	73 e0       	ldi	r23, 0x03	; 3
    34e2:	8f 2d       	mov	r24, r15
    34e4:	0e 94 28 17 	call	0x2e50	; 0x2e50 <twi_readFrom>
    34e8:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <_ZN7TwoWire13rxBufferIndexE>
    34ec:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <_ZN7TwoWire14rxBufferLengthE>
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	ff 90       	pop	r15
    34fa:	ef 90       	pop	r14
    34fc:	cf 90       	pop	r12
    34fe:	bf 90       	pop	r11
    3500:	af 90       	pop	r10
    3502:	7f 90       	pop	r7
    3504:	6f 90       	pop	r6
    3506:	5f 90       	pop	r5
    3508:	4f 90       	pop	r4
    350a:	08 95       	ret

0000350c <_ZN7TwoWire11requestFromEhhh>:
    350c:	cf 92       	push	r12
    350e:	ef 92       	push	r14
    3510:	0f 93       	push	r16
    3512:	1f 93       	push	r17
    3514:	c2 2e       	mov	r12, r18
    3516:	e1 2c       	mov	r14, r1
    3518:	00 e0       	ldi	r16, 0x00	; 0
    351a:	10 e0       	ldi	r17, 0x00	; 0
    351c:	98 01       	movw	r18, r16
    351e:	0e 94 32 1a 	call	0x3464	; 0x3464 <_ZN7TwoWire11requestFromEhhmhh>
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	ef 90       	pop	r14
    3528:	cf 90       	pop	r12
    352a:	08 95       	ret

0000352c <_ZN7TwoWire11requestFromEhh>:
    352c:	21 e0       	ldi	r18, 0x01	; 1
    352e:	0c 94 86 1a 	jmp	0x350c	; 0x350c <_ZN7TwoWire11requestFromEhhh>

00003532 <_ZN7TwoWire15endTransmissionEv>:
    3532:	61 e0       	ldi	r22, 0x01	; 1
    3534:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <_ZN7TwoWire15endTransmissionEh>

00003538 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3538:	83 ed       	ldi	r24, 0xD3	; 211
    353a:	92 e0       	ldi	r25, 0x02	; 2
    353c:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <_ZN7TwoWireC1Ev>

00003540 <__subsf3>:
    3540:	50 58       	subi	r21, 0x80	; 128

00003542 <__addsf3>:
    3542:	bb 27       	eor	r27, r27
    3544:	aa 27       	eor	r26, r26
    3546:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__addsf3x>
    354a:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__fp_round>
    354e:	0e 94 24 1c 	call	0x3848	; 0x3848 <__fp_pscA>
    3552:	38 f0       	brcs	.+14     	; 0x3562 <__addsf3+0x20>
    3554:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__fp_pscB>
    3558:	20 f0       	brcs	.+8      	; 0x3562 <__addsf3+0x20>
    355a:	39 f4       	brne	.+14     	; 0x356a <__addsf3+0x28>
    355c:	9f 3f       	cpi	r25, 0xFF	; 255
    355e:	19 f4       	brne	.+6      	; 0x3566 <__addsf3+0x24>
    3560:	26 f4       	brtc	.+8      	; 0x356a <__addsf3+0x28>
    3562:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__fp_nan>
    3566:	0e f4       	brtc	.+2      	; 0x356a <__addsf3+0x28>
    3568:	e0 95       	com	r30
    356a:	e7 fb       	bst	r30, 7
    356c:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_inf>

00003570 <__addsf3x>:
    3570:	e9 2f       	mov	r30, r25
    3572:	0e 94 43 1c 	call	0x3886	; 0x3886 <__fp_split3>
    3576:	58 f3       	brcs	.-42     	; 0x354e <__addsf3+0xc>
    3578:	ba 17       	cp	r27, r26
    357a:	62 07       	cpc	r22, r18
    357c:	73 07       	cpc	r23, r19
    357e:	84 07       	cpc	r24, r20
    3580:	95 07       	cpc	r25, r21
    3582:	20 f0       	brcs	.+8      	; 0x358c <__addsf3x+0x1c>
    3584:	79 f4       	brne	.+30     	; 0x35a4 <__addsf3x+0x34>
    3586:	a6 f5       	brtc	.+104    	; 0x35f0 <__addsf3x+0x80>
    3588:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_zero>
    358c:	0e f4       	brtc	.+2      	; 0x3590 <__addsf3x+0x20>
    358e:	e0 95       	com	r30
    3590:	0b 2e       	mov	r0, r27
    3592:	ba 2f       	mov	r27, r26
    3594:	a0 2d       	mov	r26, r0
    3596:	0b 01       	movw	r0, r22
    3598:	b9 01       	movw	r22, r18
    359a:	90 01       	movw	r18, r0
    359c:	0c 01       	movw	r0, r24
    359e:	ca 01       	movw	r24, r20
    35a0:	a0 01       	movw	r20, r0
    35a2:	11 24       	eor	r1, r1
    35a4:	ff 27       	eor	r31, r31
    35a6:	59 1b       	sub	r21, r25
    35a8:	99 f0       	breq	.+38     	; 0x35d0 <__addsf3x+0x60>
    35aa:	59 3f       	cpi	r21, 0xF9	; 249
    35ac:	50 f4       	brcc	.+20     	; 0x35c2 <__addsf3x+0x52>
    35ae:	50 3e       	cpi	r21, 0xE0	; 224
    35b0:	68 f1       	brcs	.+90     	; 0x360c <__addsf3x+0x9c>
    35b2:	1a 16       	cp	r1, r26
    35b4:	f0 40       	sbci	r31, 0x00	; 0
    35b6:	a2 2f       	mov	r26, r18
    35b8:	23 2f       	mov	r18, r19
    35ba:	34 2f       	mov	r19, r20
    35bc:	44 27       	eor	r20, r20
    35be:	58 5f       	subi	r21, 0xF8	; 248
    35c0:	f3 cf       	rjmp	.-26     	; 0x35a8 <__addsf3x+0x38>
    35c2:	46 95       	lsr	r20
    35c4:	37 95       	ror	r19
    35c6:	27 95       	ror	r18
    35c8:	a7 95       	ror	r26
    35ca:	f0 40       	sbci	r31, 0x00	; 0
    35cc:	53 95       	inc	r21
    35ce:	c9 f7       	brne	.-14     	; 0x35c2 <__addsf3x+0x52>
    35d0:	7e f4       	brtc	.+30     	; 0x35f0 <__addsf3x+0x80>
    35d2:	1f 16       	cp	r1, r31
    35d4:	ba 0b       	sbc	r27, r26
    35d6:	62 0b       	sbc	r22, r18
    35d8:	73 0b       	sbc	r23, r19
    35da:	84 0b       	sbc	r24, r20
    35dc:	ba f0       	brmi	.+46     	; 0x360c <__addsf3x+0x9c>
    35de:	91 50       	subi	r25, 0x01	; 1
    35e0:	a1 f0       	breq	.+40     	; 0x360a <__addsf3x+0x9a>
    35e2:	ff 0f       	add	r31, r31
    35e4:	bb 1f       	adc	r27, r27
    35e6:	66 1f       	adc	r22, r22
    35e8:	77 1f       	adc	r23, r23
    35ea:	88 1f       	adc	r24, r24
    35ec:	c2 f7       	brpl	.-16     	; 0x35de <__addsf3x+0x6e>
    35ee:	0e c0       	rjmp	.+28     	; 0x360c <__addsf3x+0x9c>
    35f0:	ba 0f       	add	r27, r26
    35f2:	62 1f       	adc	r22, r18
    35f4:	73 1f       	adc	r23, r19
    35f6:	84 1f       	adc	r24, r20
    35f8:	48 f4       	brcc	.+18     	; 0x360c <__addsf3x+0x9c>
    35fa:	87 95       	ror	r24
    35fc:	77 95       	ror	r23
    35fe:	67 95       	ror	r22
    3600:	b7 95       	ror	r27
    3602:	f7 95       	ror	r31
    3604:	9e 3f       	cpi	r25, 0xFE	; 254
    3606:	08 f0       	brcs	.+2      	; 0x360a <__addsf3x+0x9a>
    3608:	b0 cf       	rjmp	.-160    	; 0x356a <__addsf3+0x28>
    360a:	93 95       	inc	r25
    360c:	88 0f       	add	r24, r24
    360e:	08 f0       	brcs	.+2      	; 0x3612 <__addsf3x+0xa2>
    3610:	99 27       	eor	r25, r25
    3612:	ee 0f       	add	r30, r30
    3614:	97 95       	ror	r25
    3616:	87 95       	ror	r24
    3618:	08 95       	ret

0000361a <__cmpsf2>:
    361a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <__fp_cmp>
    361e:	08 f4       	brcc	.+2      	; 0x3622 <__cmpsf2+0x8>
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	08 95       	ret

00003624 <__divsf3>:
    3624:	0e 94 26 1b 	call	0x364c	; 0x364c <__divsf3x>
    3628:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__fp_round>
    362c:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__fp_pscB>
    3630:	58 f0       	brcs	.+22     	; 0x3648 <__divsf3+0x24>
    3632:	0e 94 24 1c 	call	0x3848	; 0x3848 <__fp_pscA>
    3636:	40 f0       	brcs	.+16     	; 0x3648 <__divsf3+0x24>
    3638:	29 f4       	brne	.+10     	; 0x3644 <__divsf3+0x20>
    363a:	5f 3f       	cpi	r21, 0xFF	; 255
    363c:	29 f0       	breq	.+10     	; 0x3648 <__divsf3+0x24>
    363e:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_inf>
    3642:	51 11       	cpse	r21, r1
    3644:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__fp_szero>
    3648:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__fp_nan>

0000364c <__divsf3x>:
    364c:	0e 94 43 1c 	call	0x3886	; 0x3886 <__fp_split3>
    3650:	68 f3       	brcs	.-38     	; 0x362c <__divsf3+0x8>

00003652 <__divsf3_pse>:
    3652:	99 23       	and	r25, r25
    3654:	b1 f3       	breq	.-20     	; 0x3642 <__divsf3+0x1e>
    3656:	55 23       	and	r21, r21
    3658:	91 f3       	breq	.-28     	; 0x363e <__divsf3+0x1a>
    365a:	95 1b       	sub	r25, r21
    365c:	55 0b       	sbc	r21, r21
    365e:	bb 27       	eor	r27, r27
    3660:	aa 27       	eor	r26, r26
    3662:	62 17       	cp	r22, r18
    3664:	73 07       	cpc	r23, r19
    3666:	84 07       	cpc	r24, r20
    3668:	38 f0       	brcs	.+14     	; 0x3678 <__divsf3_pse+0x26>
    366a:	9f 5f       	subi	r25, 0xFF	; 255
    366c:	5f 4f       	sbci	r21, 0xFF	; 255
    366e:	22 0f       	add	r18, r18
    3670:	33 1f       	adc	r19, r19
    3672:	44 1f       	adc	r20, r20
    3674:	aa 1f       	adc	r26, r26
    3676:	a9 f3       	breq	.-22     	; 0x3662 <__divsf3_pse+0x10>
    3678:	35 d0       	rcall	.+106    	; 0x36e4 <__divsf3_pse+0x92>
    367a:	0e 2e       	mov	r0, r30
    367c:	3a f0       	brmi	.+14     	; 0x368c <__divsf3_pse+0x3a>
    367e:	e0 e8       	ldi	r30, 0x80	; 128
    3680:	32 d0       	rcall	.+100    	; 0x36e6 <__divsf3_pse+0x94>
    3682:	91 50       	subi	r25, 0x01	; 1
    3684:	50 40       	sbci	r21, 0x00	; 0
    3686:	e6 95       	lsr	r30
    3688:	00 1c       	adc	r0, r0
    368a:	ca f7       	brpl	.-14     	; 0x367e <__divsf3_pse+0x2c>
    368c:	2b d0       	rcall	.+86     	; 0x36e4 <__divsf3_pse+0x92>
    368e:	fe 2f       	mov	r31, r30
    3690:	29 d0       	rcall	.+82     	; 0x36e4 <__divsf3_pse+0x92>
    3692:	66 0f       	add	r22, r22
    3694:	77 1f       	adc	r23, r23
    3696:	88 1f       	adc	r24, r24
    3698:	bb 1f       	adc	r27, r27
    369a:	26 17       	cp	r18, r22
    369c:	37 07       	cpc	r19, r23
    369e:	48 07       	cpc	r20, r24
    36a0:	ab 07       	cpc	r26, r27
    36a2:	b0 e8       	ldi	r27, 0x80	; 128
    36a4:	09 f0       	breq	.+2      	; 0x36a8 <__divsf3_pse+0x56>
    36a6:	bb 0b       	sbc	r27, r27
    36a8:	80 2d       	mov	r24, r0
    36aa:	bf 01       	movw	r22, r30
    36ac:	ff 27       	eor	r31, r31
    36ae:	93 58       	subi	r25, 0x83	; 131
    36b0:	5f 4f       	sbci	r21, 0xFF	; 255
    36b2:	3a f0       	brmi	.+14     	; 0x36c2 <__divsf3_pse+0x70>
    36b4:	9e 3f       	cpi	r25, 0xFE	; 254
    36b6:	51 05       	cpc	r21, r1
    36b8:	78 f0       	brcs	.+30     	; 0x36d8 <__divsf3_pse+0x86>
    36ba:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_inf>
    36be:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__fp_szero>
    36c2:	5f 3f       	cpi	r21, 0xFF	; 255
    36c4:	e4 f3       	brlt	.-8      	; 0x36be <__divsf3_pse+0x6c>
    36c6:	98 3e       	cpi	r25, 0xE8	; 232
    36c8:	d4 f3       	brlt	.-12     	; 0x36be <__divsf3_pse+0x6c>
    36ca:	86 95       	lsr	r24
    36cc:	77 95       	ror	r23
    36ce:	67 95       	ror	r22
    36d0:	b7 95       	ror	r27
    36d2:	f7 95       	ror	r31
    36d4:	9f 5f       	subi	r25, 0xFF	; 255
    36d6:	c9 f7       	brne	.-14     	; 0x36ca <__divsf3_pse+0x78>
    36d8:	88 0f       	add	r24, r24
    36da:	91 1d       	adc	r25, r1
    36dc:	96 95       	lsr	r25
    36de:	87 95       	ror	r24
    36e0:	97 f9       	bld	r25, 7
    36e2:	08 95       	ret
    36e4:	e1 e0       	ldi	r30, 0x01	; 1
    36e6:	66 0f       	add	r22, r22
    36e8:	77 1f       	adc	r23, r23
    36ea:	88 1f       	adc	r24, r24
    36ec:	bb 1f       	adc	r27, r27
    36ee:	62 17       	cp	r22, r18
    36f0:	73 07       	cpc	r23, r19
    36f2:	84 07       	cpc	r24, r20
    36f4:	ba 07       	cpc	r27, r26
    36f6:	20 f0       	brcs	.+8      	; 0x3700 <__divsf3_pse+0xae>
    36f8:	62 1b       	sub	r22, r18
    36fa:	73 0b       	sbc	r23, r19
    36fc:	84 0b       	sbc	r24, r20
    36fe:	ba 0b       	sbc	r27, r26
    3700:	ee 1f       	adc	r30, r30
    3702:	88 f7       	brcc	.-30     	; 0x36e6 <__divsf3_pse+0x94>
    3704:	e0 95       	com	r30
    3706:	08 95       	ret

00003708 <__fixsfsi>:
    3708:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__fixunssfsi>
    370c:	68 94       	set
    370e:	b1 11       	cpse	r27, r1
    3710:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__fp_szero>
    3714:	08 95       	ret

00003716 <__fixunssfsi>:
    3716:	0e 94 4b 1c 	call	0x3896	; 0x3896 <__fp_splitA>
    371a:	88 f0       	brcs	.+34     	; 0x373e <__fixunssfsi+0x28>
    371c:	9f 57       	subi	r25, 0x7F	; 127
    371e:	98 f0       	brcs	.+38     	; 0x3746 <__fixunssfsi+0x30>
    3720:	b9 2f       	mov	r27, r25
    3722:	99 27       	eor	r25, r25
    3724:	b7 51       	subi	r27, 0x17	; 23
    3726:	b0 f0       	brcs	.+44     	; 0x3754 <__fixunssfsi+0x3e>
    3728:	e1 f0       	breq	.+56     	; 0x3762 <__fixunssfsi+0x4c>
    372a:	66 0f       	add	r22, r22
    372c:	77 1f       	adc	r23, r23
    372e:	88 1f       	adc	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	1a f0       	brmi	.+6      	; 0x373a <__fixunssfsi+0x24>
    3734:	ba 95       	dec	r27
    3736:	c9 f7       	brne	.-14     	; 0x372a <__fixunssfsi+0x14>
    3738:	14 c0       	rjmp	.+40     	; 0x3762 <__fixunssfsi+0x4c>
    373a:	b1 30       	cpi	r27, 0x01	; 1
    373c:	91 f0       	breq	.+36     	; 0x3762 <__fixunssfsi+0x4c>
    373e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__fp_zero>
    3742:	b1 e0       	ldi	r27, 0x01	; 1
    3744:	08 95       	ret
    3746:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_zero>
    374a:	67 2f       	mov	r22, r23
    374c:	78 2f       	mov	r23, r24
    374e:	88 27       	eor	r24, r24
    3750:	b8 5f       	subi	r27, 0xF8	; 248
    3752:	39 f0       	breq	.+14     	; 0x3762 <__fixunssfsi+0x4c>
    3754:	b9 3f       	cpi	r27, 0xF9	; 249
    3756:	cc f3       	brlt	.-14     	; 0x374a <__fixunssfsi+0x34>
    3758:	86 95       	lsr	r24
    375a:	77 95       	ror	r23
    375c:	67 95       	ror	r22
    375e:	b3 95       	inc	r27
    3760:	d9 f7       	brne	.-10     	; 0x3758 <__fixunssfsi+0x42>
    3762:	3e f4       	brtc	.+14     	; 0x3772 <__fixunssfsi+0x5c>
    3764:	90 95       	com	r25
    3766:	80 95       	com	r24
    3768:	70 95       	com	r23
    376a:	61 95       	neg	r22
    376c:	7f 4f       	sbci	r23, 0xFF	; 255
    376e:	8f 4f       	sbci	r24, 0xFF	; 255
    3770:	9f 4f       	sbci	r25, 0xFF	; 255
    3772:	08 95       	ret

00003774 <__floatunsisf>:
    3774:	e8 94       	clt
    3776:	09 c0       	rjmp	.+18     	; 0x378a <__floatsisf+0x12>

00003778 <__floatsisf>:
    3778:	97 fb       	bst	r25, 7
    377a:	3e f4       	brtc	.+14     	; 0x378a <__floatsisf+0x12>
    377c:	90 95       	com	r25
    377e:	80 95       	com	r24
    3780:	70 95       	com	r23
    3782:	61 95       	neg	r22
    3784:	7f 4f       	sbci	r23, 0xFF	; 255
    3786:	8f 4f       	sbci	r24, 0xFF	; 255
    3788:	9f 4f       	sbci	r25, 0xFF	; 255
    378a:	99 23       	and	r25, r25
    378c:	a9 f0       	breq	.+42     	; 0x37b8 <__floatsisf+0x40>
    378e:	f9 2f       	mov	r31, r25
    3790:	96 e9       	ldi	r25, 0x96	; 150
    3792:	bb 27       	eor	r27, r27
    3794:	93 95       	inc	r25
    3796:	f6 95       	lsr	r31
    3798:	87 95       	ror	r24
    379a:	77 95       	ror	r23
    379c:	67 95       	ror	r22
    379e:	b7 95       	ror	r27
    37a0:	f1 11       	cpse	r31, r1
    37a2:	f8 cf       	rjmp	.-16     	; 0x3794 <__floatsisf+0x1c>
    37a4:	fa f4       	brpl	.+62     	; 0x37e4 <__floatsisf+0x6c>
    37a6:	bb 0f       	add	r27, r27
    37a8:	11 f4       	brne	.+4      	; 0x37ae <__floatsisf+0x36>
    37aa:	60 ff       	sbrs	r22, 0
    37ac:	1b c0       	rjmp	.+54     	; 0x37e4 <__floatsisf+0x6c>
    37ae:	6f 5f       	subi	r22, 0xFF	; 255
    37b0:	7f 4f       	sbci	r23, 0xFF	; 255
    37b2:	8f 4f       	sbci	r24, 0xFF	; 255
    37b4:	9f 4f       	sbci	r25, 0xFF	; 255
    37b6:	16 c0       	rjmp	.+44     	; 0x37e4 <__floatsisf+0x6c>
    37b8:	88 23       	and	r24, r24
    37ba:	11 f0       	breq	.+4      	; 0x37c0 <__floatsisf+0x48>
    37bc:	96 e9       	ldi	r25, 0x96	; 150
    37be:	11 c0       	rjmp	.+34     	; 0x37e2 <__floatsisf+0x6a>
    37c0:	77 23       	and	r23, r23
    37c2:	21 f0       	breq	.+8      	; 0x37cc <__floatsisf+0x54>
    37c4:	9e e8       	ldi	r25, 0x8E	; 142
    37c6:	87 2f       	mov	r24, r23
    37c8:	76 2f       	mov	r23, r22
    37ca:	05 c0       	rjmp	.+10     	; 0x37d6 <__floatsisf+0x5e>
    37cc:	66 23       	and	r22, r22
    37ce:	71 f0       	breq	.+28     	; 0x37ec <__floatsisf+0x74>
    37d0:	96 e8       	ldi	r25, 0x86	; 134
    37d2:	86 2f       	mov	r24, r22
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	2a f0       	brmi	.+10     	; 0x37e4 <__floatsisf+0x6c>
    37da:	9a 95       	dec	r25
    37dc:	66 0f       	add	r22, r22
    37de:	77 1f       	adc	r23, r23
    37e0:	88 1f       	adc	r24, r24
    37e2:	da f7       	brpl	.-10     	; 0x37da <__floatsisf+0x62>
    37e4:	88 0f       	add	r24, r24
    37e6:	96 95       	lsr	r25
    37e8:	87 95       	ror	r24
    37ea:	97 f9       	bld	r25, 7
    37ec:	08 95       	ret

000037ee <__fp_cmp>:
    37ee:	99 0f       	add	r25, r25
    37f0:	00 08       	sbc	r0, r0
    37f2:	55 0f       	add	r21, r21
    37f4:	aa 0b       	sbc	r26, r26
    37f6:	e0 e8       	ldi	r30, 0x80	; 128
    37f8:	fe ef       	ldi	r31, 0xFE	; 254
    37fa:	16 16       	cp	r1, r22
    37fc:	17 06       	cpc	r1, r23
    37fe:	e8 07       	cpc	r30, r24
    3800:	f9 07       	cpc	r31, r25
    3802:	c0 f0       	brcs	.+48     	; 0x3834 <__fp_cmp+0x46>
    3804:	12 16       	cp	r1, r18
    3806:	13 06       	cpc	r1, r19
    3808:	e4 07       	cpc	r30, r20
    380a:	f5 07       	cpc	r31, r21
    380c:	98 f0       	brcs	.+38     	; 0x3834 <__fp_cmp+0x46>
    380e:	62 1b       	sub	r22, r18
    3810:	73 0b       	sbc	r23, r19
    3812:	84 0b       	sbc	r24, r20
    3814:	95 0b       	sbc	r25, r21
    3816:	39 f4       	brne	.+14     	; 0x3826 <__fp_cmp+0x38>
    3818:	0a 26       	eor	r0, r26
    381a:	61 f0       	breq	.+24     	; 0x3834 <__fp_cmp+0x46>
    381c:	23 2b       	or	r18, r19
    381e:	24 2b       	or	r18, r20
    3820:	25 2b       	or	r18, r21
    3822:	21 f4       	brne	.+8      	; 0x382c <__fp_cmp+0x3e>
    3824:	08 95       	ret
    3826:	0a 26       	eor	r0, r26
    3828:	09 f4       	brne	.+2      	; 0x382c <__fp_cmp+0x3e>
    382a:	a1 40       	sbci	r26, 0x01	; 1
    382c:	a6 95       	lsr	r26
    382e:	8f ef       	ldi	r24, 0xFF	; 255
    3830:	81 1d       	adc	r24, r1
    3832:	81 1d       	adc	r24, r1
    3834:	08 95       	ret

00003836 <__fp_inf>:
    3836:	97 f9       	bld	r25, 7
    3838:	9f 67       	ori	r25, 0x7F	; 127
    383a:	80 e8       	ldi	r24, 0x80	; 128
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	60 e0       	ldi	r22, 0x00	; 0
    3840:	08 95       	ret

00003842 <__fp_nan>:
    3842:	9f ef       	ldi	r25, 0xFF	; 255
    3844:	80 ec       	ldi	r24, 0xC0	; 192
    3846:	08 95       	ret

00003848 <__fp_pscA>:
    3848:	00 24       	eor	r0, r0
    384a:	0a 94       	dec	r0
    384c:	16 16       	cp	r1, r22
    384e:	17 06       	cpc	r1, r23
    3850:	18 06       	cpc	r1, r24
    3852:	09 06       	cpc	r0, r25
    3854:	08 95       	ret

00003856 <__fp_pscB>:
    3856:	00 24       	eor	r0, r0
    3858:	0a 94       	dec	r0
    385a:	12 16       	cp	r1, r18
    385c:	13 06       	cpc	r1, r19
    385e:	14 06       	cpc	r1, r20
    3860:	05 06       	cpc	r0, r21
    3862:	08 95       	ret

00003864 <__fp_round>:
    3864:	09 2e       	mov	r0, r25
    3866:	03 94       	inc	r0
    3868:	00 0c       	add	r0, r0
    386a:	11 f4       	brne	.+4      	; 0x3870 <__fp_round+0xc>
    386c:	88 23       	and	r24, r24
    386e:	52 f0       	brmi	.+20     	; 0x3884 <__fp_round+0x20>
    3870:	bb 0f       	add	r27, r27
    3872:	40 f4       	brcc	.+16     	; 0x3884 <__fp_round+0x20>
    3874:	bf 2b       	or	r27, r31
    3876:	11 f4       	brne	.+4      	; 0x387c <__fp_round+0x18>
    3878:	60 ff       	sbrs	r22, 0
    387a:	04 c0       	rjmp	.+8      	; 0x3884 <__fp_round+0x20>
    387c:	6f 5f       	subi	r22, 0xFF	; 255
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	8f 4f       	sbci	r24, 0xFF	; 255
    3882:	9f 4f       	sbci	r25, 0xFF	; 255
    3884:	08 95       	ret

00003886 <__fp_split3>:
    3886:	57 fd       	sbrc	r21, 7
    3888:	90 58       	subi	r25, 0x80	; 128
    388a:	44 0f       	add	r20, r20
    388c:	55 1f       	adc	r21, r21
    388e:	59 f0       	breq	.+22     	; 0x38a6 <__fp_splitA+0x10>
    3890:	5f 3f       	cpi	r21, 0xFF	; 255
    3892:	71 f0       	breq	.+28     	; 0x38b0 <__fp_splitA+0x1a>
    3894:	47 95       	ror	r20

00003896 <__fp_splitA>:
    3896:	88 0f       	add	r24, r24
    3898:	97 fb       	bst	r25, 7
    389a:	99 1f       	adc	r25, r25
    389c:	61 f0       	breq	.+24     	; 0x38b6 <__fp_splitA+0x20>
    389e:	9f 3f       	cpi	r25, 0xFF	; 255
    38a0:	79 f0       	breq	.+30     	; 0x38c0 <__fp_splitA+0x2a>
    38a2:	87 95       	ror	r24
    38a4:	08 95       	ret
    38a6:	12 16       	cp	r1, r18
    38a8:	13 06       	cpc	r1, r19
    38aa:	14 06       	cpc	r1, r20
    38ac:	55 1f       	adc	r21, r21
    38ae:	f2 cf       	rjmp	.-28     	; 0x3894 <__fp_split3+0xe>
    38b0:	46 95       	lsr	r20
    38b2:	f1 df       	rcall	.-30     	; 0x3896 <__fp_splitA>
    38b4:	08 c0       	rjmp	.+16     	; 0x38c6 <__fp_splitA+0x30>
    38b6:	16 16       	cp	r1, r22
    38b8:	17 06       	cpc	r1, r23
    38ba:	18 06       	cpc	r1, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	f1 cf       	rjmp	.-30     	; 0x38a2 <__fp_splitA+0xc>
    38c0:	86 95       	lsr	r24
    38c2:	71 05       	cpc	r23, r1
    38c4:	61 05       	cpc	r22, r1
    38c6:	08 94       	sec
    38c8:	08 95       	ret

000038ca <__fp_zero>:
    38ca:	e8 94       	clt

000038cc <__fp_szero>:
    38cc:	bb 27       	eor	r27, r27
    38ce:	66 27       	eor	r22, r22
    38d0:	77 27       	eor	r23, r23
    38d2:	cb 01       	movw	r24, r22
    38d4:	97 f9       	bld	r25, 7
    38d6:	08 95       	ret

000038d8 <__gesf2>:
    38d8:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <__fp_cmp>
    38dc:	08 f4       	brcc	.+2      	; 0x38e0 <__gesf2+0x8>
    38de:	8f ef       	ldi	r24, 0xFF	; 255
    38e0:	08 95       	ret

000038e2 <__mulsf3>:
    38e2:	0e 94 84 1c 	call	0x3908	; 0x3908 <__mulsf3x>
    38e6:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__fp_round>
    38ea:	0e 94 24 1c 	call	0x3848	; 0x3848 <__fp_pscA>
    38ee:	38 f0       	brcs	.+14     	; 0x38fe <__mulsf3+0x1c>
    38f0:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__fp_pscB>
    38f4:	20 f0       	brcs	.+8      	; 0x38fe <__mulsf3+0x1c>
    38f6:	95 23       	and	r25, r21
    38f8:	11 f0       	breq	.+4      	; 0x38fe <__mulsf3+0x1c>
    38fa:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_inf>
    38fe:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__fp_nan>
    3902:	11 24       	eor	r1, r1
    3904:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__fp_szero>

00003908 <__mulsf3x>:
    3908:	0e 94 43 1c 	call	0x3886	; 0x3886 <__fp_split3>
    390c:	70 f3       	brcs	.-36     	; 0x38ea <__mulsf3+0x8>

0000390e <__mulsf3_pse>:
    390e:	95 9f       	mul	r25, r21
    3910:	c1 f3       	breq	.-16     	; 0x3902 <__mulsf3+0x20>
    3912:	95 0f       	add	r25, r21
    3914:	50 e0       	ldi	r21, 0x00	; 0
    3916:	55 1f       	adc	r21, r21
    3918:	62 9f       	mul	r22, r18
    391a:	f0 01       	movw	r30, r0
    391c:	72 9f       	mul	r23, r18
    391e:	bb 27       	eor	r27, r27
    3920:	f0 0d       	add	r31, r0
    3922:	b1 1d       	adc	r27, r1
    3924:	63 9f       	mul	r22, r19
    3926:	aa 27       	eor	r26, r26
    3928:	f0 0d       	add	r31, r0
    392a:	b1 1d       	adc	r27, r1
    392c:	aa 1f       	adc	r26, r26
    392e:	64 9f       	mul	r22, r20
    3930:	66 27       	eor	r22, r22
    3932:	b0 0d       	add	r27, r0
    3934:	a1 1d       	adc	r26, r1
    3936:	66 1f       	adc	r22, r22
    3938:	82 9f       	mul	r24, r18
    393a:	22 27       	eor	r18, r18
    393c:	b0 0d       	add	r27, r0
    393e:	a1 1d       	adc	r26, r1
    3940:	62 1f       	adc	r22, r18
    3942:	73 9f       	mul	r23, r19
    3944:	b0 0d       	add	r27, r0
    3946:	a1 1d       	adc	r26, r1
    3948:	62 1f       	adc	r22, r18
    394a:	83 9f       	mul	r24, r19
    394c:	a0 0d       	add	r26, r0
    394e:	61 1d       	adc	r22, r1
    3950:	22 1f       	adc	r18, r18
    3952:	74 9f       	mul	r23, r20
    3954:	33 27       	eor	r19, r19
    3956:	a0 0d       	add	r26, r0
    3958:	61 1d       	adc	r22, r1
    395a:	23 1f       	adc	r18, r19
    395c:	84 9f       	mul	r24, r20
    395e:	60 0d       	add	r22, r0
    3960:	21 1d       	adc	r18, r1
    3962:	82 2f       	mov	r24, r18
    3964:	76 2f       	mov	r23, r22
    3966:	6a 2f       	mov	r22, r26
    3968:	11 24       	eor	r1, r1
    396a:	9f 57       	subi	r25, 0x7F	; 127
    396c:	50 40       	sbci	r21, 0x00	; 0
    396e:	9a f0       	brmi	.+38     	; 0x3996 <__mulsf3_pse+0x88>
    3970:	f1 f0       	breq	.+60     	; 0x39ae <__mulsf3_pse+0xa0>
    3972:	88 23       	and	r24, r24
    3974:	4a f0       	brmi	.+18     	; 0x3988 <__mulsf3_pse+0x7a>
    3976:	ee 0f       	add	r30, r30
    3978:	ff 1f       	adc	r31, r31
    397a:	bb 1f       	adc	r27, r27
    397c:	66 1f       	adc	r22, r22
    397e:	77 1f       	adc	r23, r23
    3980:	88 1f       	adc	r24, r24
    3982:	91 50       	subi	r25, 0x01	; 1
    3984:	50 40       	sbci	r21, 0x00	; 0
    3986:	a9 f7       	brne	.-22     	; 0x3972 <__mulsf3_pse+0x64>
    3988:	9e 3f       	cpi	r25, 0xFE	; 254
    398a:	51 05       	cpc	r21, r1
    398c:	80 f0       	brcs	.+32     	; 0x39ae <__mulsf3_pse+0xa0>
    398e:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_inf>
    3992:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__fp_szero>
    3996:	5f 3f       	cpi	r21, 0xFF	; 255
    3998:	e4 f3       	brlt	.-8      	; 0x3992 <__mulsf3_pse+0x84>
    399a:	98 3e       	cpi	r25, 0xE8	; 232
    399c:	d4 f3       	brlt	.-12     	; 0x3992 <__mulsf3_pse+0x84>
    399e:	86 95       	lsr	r24
    39a0:	77 95       	ror	r23
    39a2:	67 95       	ror	r22
    39a4:	b7 95       	ror	r27
    39a6:	f7 95       	ror	r31
    39a8:	e7 95       	ror	r30
    39aa:	9f 5f       	subi	r25, 0xFF	; 255
    39ac:	c1 f7       	brne	.-16     	; 0x399e <__mulsf3_pse+0x90>
    39ae:	fe 2b       	or	r31, r30
    39b0:	88 0f       	add	r24, r24
    39b2:	91 1d       	adc	r25, r1
    39b4:	96 95       	lsr	r25
    39b6:	87 95       	ror	r24
    39b8:	97 f9       	bld	r25, 7
    39ba:	08 95       	ret

000039bc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    39bc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    39be:	91 8d       	ldd	r25, Z+25	; 0x19
    39c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    39c2:	89 2f       	mov	r24, r25
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	80 5c       	subi	r24, 0xC0	; 192
    39c8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ca:	82 1b       	sub	r24, r18
    39cc:	91 09       	sbc	r25, r1
}
    39ce:	8f 73       	andi	r24, 0x3F	; 63
    39d0:	99 27       	eor	r25, r25
    39d2:	08 95       	ret

000039d4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    39d4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    39d6:	91 8d       	ldd	r25, Z+25	; 0x19
    39d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    39da:	98 17       	cp	r25, r24
    39dc:	31 f0       	breq	.+12     	; 0x39ea <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    39de:	82 8d       	ldd	r24, Z+26	; 0x1a
    39e0:	e8 0f       	add	r30, r24
    39e2:	f1 1d       	adc	r31, r1
    39e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    39ea:	8f ef       	ldi	r24, 0xFF	; 255
    39ec:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    39ee:	08 95       	ret

000039f0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    39f0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    39f2:	91 8d       	ldd	r25, Z+25	; 0x19
    39f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    39f6:	98 17       	cp	r25, r24
    39f8:	61 f0       	breq	.+24     	; 0x3a12 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    39fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    39fc:	df 01       	movw	r26, r30
    39fe:	a8 0f       	add	r26, r24
    3a00:	b1 1d       	adc	r27, r1
    3a02:	5d 96       	adiw	r26, 0x1d	; 29
    3a04:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3a06:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a08:	9f 5f       	subi	r25, 0xFF	; 255
    3a0a:	9f 73       	andi	r25, 0x3F	; 63
    3a0c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3a12:	8f ef       	ldi	r24, 0xFF	; 255
    3a14:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3a16:	08 95       	ret

00003a18 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3a18:	fc 01       	movw	r30, r24
    3a1a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3a1c:	44 8d       	ldd	r20, Z+28	; 0x1c
    3a1e:	25 2f       	mov	r18, r21
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	84 2f       	mov	r24, r20
    3a24:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3a26:	82 1b       	sub	r24, r18
    3a28:	93 0b       	sbc	r25, r19
    3a2a:	54 17       	cp	r21, r20
    3a2c:	10 f0       	brcs	.+4      	; 0x3a32 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3a2e:	cf 96       	adiw	r24, 0x3f	; 63
    3a30:	08 95       	ret
  return tail - head - 1;
    3a32:	01 97       	sbiw	r24, 0x01	; 1
}
    3a34:	08 95       	ret

00003a36 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3a36:	87 e7       	ldi	r24, 0x77	; 119
    3a38:	9e e1       	ldi	r25, 0x1E	; 30
    3a3a:	89 2b       	or	r24, r25
    3a3c:	49 f0       	breq	.+18     	; 0x3a50 <_Z14serialEventRunv+0x1a>
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	89 2b       	or	r24, r25
    3a44:	29 f0       	breq	.+10     	; 0x3a50 <_Z14serialEventRunv+0x1a>
    3a46:	0e 94 77 1e 	call	0x3cee	; 0x3cee <_Z17Serial0_availablev>
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3a50:	08 95       	ret

00003a52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3a52:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3a54:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a56:	df 01       	movw	r26, r30
    3a58:	a8 0f       	add	r26, r24
    3a5a:	b1 1d       	adc	r27, r1
    3a5c:	a3 5a       	subi	r26, 0xA3	; 163
    3a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a60:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3a62:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	01 96       	adiw	r24, 0x01	; 1
    3a68:	8f 73       	andi	r24, 0x3F	; 63
    3a6a:	99 27       	eor	r25, r25
    3a6c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3a6e:	a6 89       	ldd	r26, Z+22	; 0x16
    3a70:	b7 89       	ldd	r27, Z+23	; 0x17
    3a72:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3a74:	a0 89       	ldd	r26, Z+16	; 0x10
    3a76:	b1 89       	ldd	r27, Z+17	; 0x11
    3a78:	8c 91       	ld	r24, X
    3a7a:	83 70       	andi	r24, 0x03	; 3
    3a7c:	80 64       	ori	r24, 0x40	; 64
    3a7e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3a80:	93 8d       	ldd	r25, Z+27	; 0x1b
    3a82:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a84:	98 13       	cpse	r25, r24
    3a86:	06 c0       	rjmp	.+12     	; 0x3a94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3a88:	02 88       	ldd	r0, Z+18	; 0x12
    3a8a:	f3 89       	ldd	r31, Z+19	; 0x13
    3a8c:	e0 2d       	mov	r30, r0
    3a8e:	80 81       	ld	r24, Z
    3a90:	8f 7d       	andi	r24, 0xDF	; 223
    3a92:	80 83       	st	Z, r24
    3a94:	08 95       	ret

00003a96 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3a96:	ef 92       	push	r14
    3a98:	ff 92       	push	r15
    3a9a:	0f 93       	push	r16
    3a9c:	1f 93       	push	r17
    3a9e:	cf 93       	push	r28
    3aa0:	df 93       	push	r29
    3aa2:	ec 01       	movw	r28, r24
  _written = true;
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3aa8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3aaa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3aac:	98 13       	cpse	r25, r24
    3aae:	05 c0       	rjmp	.+10     	; 0x3aba <_ZN14HardwareSerial5writeEh+0x24>
    3ab0:	e8 89       	ldd	r30, Y+16	; 0x10
    3ab2:	f9 89       	ldd	r31, Y+17	; 0x11
    3ab4:	80 81       	ld	r24, Z
    3ab6:	85 fd       	sbrc	r24, 5
    3ab8:	26 c0       	rjmp	.+76     	; 0x3b06 <_ZN14HardwareSerial5writeEh+0x70>
    3aba:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3abc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3abe:	10 e0       	ldi	r17, 0x00	; 0
    3ac0:	0f 5f       	subi	r16, 0xFF	; 255
    3ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac4:	0f 73       	andi	r16, 0x3F	; 63
    3ac6:	11 27       	eor	r17, r17
    3ac8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3aca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3acc:	e8 12       	cpse	r14, r24
    3ace:	0c c0       	rjmp	.+24     	; 0x3ae8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	07 fc       	sbrc	r0, 7
    3ad4:	fa cf       	rjmp	.-12     	; 0x3aca <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3ad6:	e8 89       	ldd	r30, Y+16	; 0x10
    3ad8:	f9 89       	ldd	r31, Y+17	; 0x11
    3ada:	80 81       	ld	r24, Z
    3adc:	85 ff       	sbrs	r24, 5
    3ade:	f5 cf       	rjmp	.-22     	; 0x3aca <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3ae0:	ce 01       	movw	r24, r28
    3ae2:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3ae6:	f1 cf       	rjmp	.-30     	; 0x3aca <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aea:	fe 01       	movw	r30, r28
    3aec:	e8 0f       	add	r30, r24
    3aee:	f1 1d       	adc	r31, r1
    3af0:	e3 5a       	subi	r30, 0xA3	; 163
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3af6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3af8:	f8 94       	cli
    _tx_buffer_head = i;
    3afa:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3afc:	ea 89       	ldd	r30, Y+18	; 0x12
    3afe:	fb 89       	ldd	r31, Y+19	; 0x13
    3b00:	80 81       	ld	r24, Z
    3b02:	80 62       	ori	r24, 0x20	; 32
    3b04:	0a c0       	rjmp	.+20     	; 0x3b1a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3b06:	9f b7       	in	r25, 0x3f	; 63
    3b08:	f8 94       	cli
      *_udr = c;
    3b0a:	ee 89       	ldd	r30, Y+22	; 0x16
    3b0c:	ff 89       	ldd	r31, Y+23	; 0x17
    3b0e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3b10:	e8 89       	ldd	r30, Y+16	; 0x10
    3b12:	f9 89       	ldd	r31, Y+17	; 0x11
    3b14:	80 81       	ld	r24, Z
    3b16:	83 70       	andi	r24, 0x03	; 3
    3b18:	80 64       	ori	r24, 0x40	; 64
    3b1a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b1c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	1f 91       	pop	r17
    3b28:	0f 91       	pop	r16
    3b2a:	ff 90       	pop	r15
    3b2c:	ef 90       	pop	r14
    3b2e:	08 95       	ret

00003b30 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3b30:	cf 93       	push	r28
    3b32:	df 93       	push	r29
    3b34:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3b36:	88 8d       	ldd	r24, Y+24	; 0x18
    3b38:	88 23       	and	r24, r24
    3b3a:	c9 f0       	breq	.+50     	; 0x3b6e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3b3c:	ea 89       	ldd	r30, Y+18	; 0x12
    3b3e:	fb 89       	ldd	r31, Y+19	; 0x13
    3b40:	80 81       	ld	r24, Z
    3b42:	85 fd       	sbrc	r24, 5
    3b44:	05 c0       	rjmp	.+10     	; 0x3b50 <_ZN14HardwareSerial5flushEv+0x20>
    3b46:	a8 89       	ldd	r26, Y+16	; 0x10
    3b48:	b9 89       	ldd	r27, Y+17	; 0x11
    3b4a:	8c 91       	ld	r24, X
    3b4c:	86 fd       	sbrc	r24, 6
    3b4e:	0f c0       	rjmp	.+30     	; 0x3b6e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3b50:	0f b6       	in	r0, 0x3f	; 63
    3b52:	07 fc       	sbrc	r0, 7
    3b54:	f5 cf       	rjmp	.-22     	; 0x3b40 <_ZN14HardwareSerial5flushEv+0x10>
    3b56:	80 81       	ld	r24, Z
    3b58:	85 ff       	sbrs	r24, 5
    3b5a:	f2 cf       	rjmp	.-28     	; 0x3b40 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3b5c:	a8 89       	ldd	r26, Y+16	; 0x10
    3b5e:	b9 89       	ldd	r27, Y+17	; 0x11
    3b60:	8c 91       	ld	r24, X
    3b62:	85 ff       	sbrs	r24, 5
    3b64:	ed cf       	rjmp	.-38     	; 0x3b40 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3b66:	ce 01       	movw	r24, r28
    3b68:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3b6c:	e7 cf       	rjmp	.-50     	; 0x3b3c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3b6e:	df 91       	pop	r29
    3b70:	cf 91       	pop	r28
    3b72:	08 95       	ret

00003b74 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3b74:	cf 92       	push	r12
    3b76:	df 92       	push	r13
    3b78:	ef 92       	push	r14
    3b7a:	ff 92       	push	r15
    3b7c:	1f 93       	push	r17
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	ec 01       	movw	r28, r24
    3b84:	6a 01       	movw	r12, r20
    3b86:	7b 01       	movw	r14, r22
    3b88:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3b8a:	e8 89       	ldd	r30, Y+16	; 0x10
    3b8c:	f9 89       	ldd	r31, Y+17	; 0x11
    3b8e:	82 e0       	ldi	r24, 0x02	; 2
    3b90:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3b92:	41 15       	cp	r20, r1
    3b94:	51 4e       	sbci	r21, 0xE1	; 225
    3b96:	61 05       	cpc	r22, r1
    3b98:	71 05       	cpc	r23, r1
    3b9a:	b1 f0       	breq	.+44     	; 0x3bc8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3b9c:	60 e0       	ldi	r22, 0x00	; 0
    3b9e:	79 e0       	ldi	r23, 0x09	; 9
    3ba0:	8d e3       	ldi	r24, 0x3D	; 61
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	a7 01       	movw	r20, r14
    3ba6:	96 01       	movw	r18, r12
    3ba8:	0e 94 c3 22 	call	0x4586	; 0x4586 <__udivmodsi4>
    3bac:	da 01       	movw	r26, r20
    3bae:	c9 01       	movw	r24, r18
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	a1 09       	sbc	r26, r1
    3bb4:	b1 09       	sbc	r27, r1
    3bb6:	b6 95       	lsr	r27
    3bb8:	a7 95       	ror	r26
    3bba:	97 95       	ror	r25
    3bbc:	87 95       	ror	r24
    3bbe:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3bc0:	21 15       	cp	r18, r1
    3bc2:	80 e1       	ldi	r24, 0x10	; 16
    3bc4:	38 07       	cpc	r19, r24
    3bc6:	a8 f0       	brcs	.+42     	; 0x3bf2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3bc8:	e8 89       	ldd	r30, Y+16	; 0x10
    3bca:	f9 89       	ldd	r31, Y+17	; 0x11
    3bcc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3bce:	60 e8       	ldi	r22, 0x80	; 128
    3bd0:	74 e8       	ldi	r23, 0x84	; 132
    3bd2:	8e e1       	ldi	r24, 0x1E	; 30
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	a7 01       	movw	r20, r14
    3bd8:	96 01       	movw	r18, r12
    3bda:	0e 94 c3 22 	call	0x4586	; 0x4586 <__udivmodsi4>
    3bde:	da 01       	movw	r26, r20
    3be0:	c9 01       	movw	r24, r18
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	a1 09       	sbc	r26, r1
    3be6:	b1 09       	sbc	r27, r1
    3be8:	b6 95       	lsr	r27
    3bea:	a7 95       	ror	r26
    3bec:	97 95       	ror	r25
    3bee:	87 95       	ror	r24
    3bf0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3bf2:	ec 85       	ldd	r30, Y+12	; 0x0c
    3bf4:	fd 85       	ldd	r31, Y+13	; 0x0d
    3bf6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3bf8:	ee 85       	ldd	r30, Y+14	; 0x0e
    3bfa:	ff 85       	ldd	r31, Y+15	; 0x0f
    3bfc:	20 83       	st	Z, r18

  _written = false;
    3bfe:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3c00:	ec 89       	ldd	r30, Y+20	; 0x14
    3c02:	fd 89       	ldd	r31, Y+21	; 0x15
    3c04:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3c06:	ea 89       	ldd	r30, Y+18	; 0x12
    3c08:	fb 89       	ldd	r31, Y+19	; 0x13
    3c0a:	80 81       	ld	r24, Z
    3c0c:	80 61       	ori	r24, 0x10	; 16
    3c0e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3c10:	ea 89       	ldd	r30, Y+18	; 0x12
    3c12:	fb 89       	ldd	r31, Y+19	; 0x13
    3c14:	80 81       	ld	r24, Z
    3c16:	88 60       	ori	r24, 0x08	; 8
    3c18:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3c1a:	ea 89       	ldd	r30, Y+18	; 0x12
    3c1c:	fb 89       	ldd	r31, Y+19	; 0x13
    3c1e:	80 81       	ld	r24, Z
    3c20:	80 68       	ori	r24, 0x80	; 128
    3c22:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3c24:	ea 89       	ldd	r30, Y+18	; 0x12
    3c26:	fb 89       	ldd	r31, Y+19	; 0x13
    3c28:	80 81       	ld	r24, Z
    3c2a:	8f 7d       	andi	r24, 0xDF	; 223
    3c2c:	80 83       	st	Z, r24
}
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	1f 91       	pop	r17
    3c34:	ff 90       	pop	r15
    3c36:	ef 90       	pop	r14
    3c38:	df 90       	pop	r13
    3c3a:	cf 90       	pop	r12
    3c3c:	08 95       	ret

00003c3e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3c3e:	1f 92       	push	r1
    3c40:	0f 92       	push	r0
    3c42:	0f b6       	in	r0, 0x3f	; 63
    3c44:	0f 92       	push	r0
    3c46:	11 24       	eor	r1, r1
    3c48:	2f 93       	push	r18
    3c4a:	8f 93       	push	r24
    3c4c:	9f 93       	push	r25
    3c4e:	ef 93       	push	r30
    3c50:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3c52:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <Serial+0x10>
    3c56:	f0 91 3a 03 	lds	r31, 0x033A	; 0x80033a <Serial+0x11>
    3c5a:	80 81       	ld	r24, Z
    3c5c:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <Serial+0x16>
    3c60:	f0 91 40 03 	lds	r31, 0x0340	; 0x800340 <Serial+0x17>
    3c64:	82 fd       	sbrc	r24, 2
    3c66:	12 c0       	rjmp	.+36     	; 0x3c8c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3c68:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3c6a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <Serial+0x19>
    3c6e:	8f 5f       	subi	r24, 0xFF	; 255
    3c70:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3c72:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <Serial+0x1a>
    3c76:	82 17       	cp	r24, r18
    3c78:	51 f0       	breq	.+20     	; 0x3c8e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3c7a:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <Serial+0x19>
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	e7 5d       	subi	r30, 0xD7	; 215
    3c82:	fc 4f       	sbci	r31, 0xFC	; 252
    3c84:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3c86:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <Serial+0x19>
    3c8a:	01 c0       	rjmp	.+2      	; 0x3c8e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3c8c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3c8e:	ff 91       	pop	r31
    3c90:	ef 91       	pop	r30
    3c92:	9f 91       	pop	r25
    3c94:	8f 91       	pop	r24
    3c96:	2f 91       	pop	r18
    3c98:	0f 90       	pop	r0
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	0f 90       	pop	r0
    3c9e:	1f 90       	pop	r1
    3ca0:	18 95       	reti

00003ca2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3ca2:	1f 92       	push	r1
    3ca4:	0f 92       	push	r0
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	0f 92       	push	r0
    3caa:	11 24       	eor	r1, r1
    3cac:	2f 93       	push	r18
    3cae:	3f 93       	push	r19
    3cb0:	4f 93       	push	r20
    3cb2:	5f 93       	push	r21
    3cb4:	6f 93       	push	r22
    3cb6:	7f 93       	push	r23
    3cb8:	8f 93       	push	r24
    3cba:	9f 93       	push	r25
    3cbc:	af 93       	push	r26
    3cbe:	bf 93       	push	r27
    3cc0:	ef 93       	push	r30
    3cc2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3cc4:	89 e2       	ldi	r24, 0x29	; 41
    3cc6:	93 e0       	ldi	r25, 0x03	; 3
    3cc8:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3ccc:	ff 91       	pop	r31
    3cce:	ef 91       	pop	r30
    3cd0:	bf 91       	pop	r27
    3cd2:	af 91       	pop	r26
    3cd4:	9f 91       	pop	r25
    3cd6:	8f 91       	pop	r24
    3cd8:	7f 91       	pop	r23
    3cda:	6f 91       	pop	r22
    3cdc:	5f 91       	pop	r21
    3cde:	4f 91       	pop	r20
    3ce0:	3f 91       	pop	r19
    3ce2:	2f 91       	pop	r18
    3ce4:	0f 90       	pop	r0
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	0f 90       	pop	r0
    3cea:	1f 90       	pop	r1
    3cec:	18 95       	reti

00003cee <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3cee:	89 e2       	ldi	r24, 0x29	; 41
    3cf0:	93 e0       	ldi	r25, 0x03	; 3
    3cf2:	0e 94 de 1c 	call	0x39bc	; 0x39bc <_ZN14HardwareSerial9availableEv>
    3cf6:	21 e0       	ldi	r18, 0x01	; 1
    3cf8:	89 2b       	or	r24, r25
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <_Z17Serial0_availablev+0x10>
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
}
    3cfe:	82 2f       	mov	r24, r18
    3d00:	08 95       	ret

00003d02 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3d02:	e9 e2       	ldi	r30, 0x29	; 41
    3d04:	f3 e0       	ldi	r31, 0x03	; 3
    3d06:	13 82       	std	Z+3, r1	; 0x03
    3d08:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3d0a:	88 ee       	ldi	r24, 0xE8	; 232
    3d0c:	93 e0       	ldi	r25, 0x03	; 3
    3d0e:	a0 e0       	ldi	r26, 0x00	; 0
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	84 83       	std	Z+4, r24	; 0x04
    3d14:	95 83       	std	Z+5, r25	; 0x05
    3d16:	a6 83       	std	Z+6, r26	; 0x06
    3d18:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3d1a:	83 eb       	ldi	r24, 0xB3	; 179
    3d1c:	91 e0       	ldi	r25, 0x01	; 1
    3d1e:	91 83       	std	Z+1, r25	; 0x01
    3d20:	80 83       	st	Z, r24
    3d22:	85 ec       	ldi	r24, 0xC5	; 197
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	95 87       	std	Z+13, r25	; 0x0d
    3d28:	84 87       	std	Z+12, r24	; 0x0c
    3d2a:	84 ec       	ldi	r24, 0xC4	; 196
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	97 87       	std	Z+15, r25	; 0x0f
    3d30:	86 87       	std	Z+14, r24	; 0x0e
    3d32:	80 ec       	ldi	r24, 0xC0	; 192
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	91 8b       	std	Z+17, r25	; 0x11
    3d38:	80 8b       	std	Z+16, r24	; 0x10
    3d3a:	81 ec       	ldi	r24, 0xC1	; 193
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	93 8b       	std	Z+19, r25	; 0x13
    3d40:	82 8b       	std	Z+18, r24	; 0x12
    3d42:	82 ec       	ldi	r24, 0xC2	; 194
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	95 8b       	std	Z+21, r25	; 0x15
    3d48:	84 8b       	std	Z+20, r24	; 0x14
    3d4a:	86 ec       	ldi	r24, 0xC6	; 198
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	97 8b       	std	Z+23, r25	; 0x17
    3d50:	86 8b       	std	Z+22, r24	; 0x16
    3d52:	11 8e       	std	Z+25, r1	; 0x19
    3d54:	12 8e       	std	Z+26, r1	; 0x1a
    3d56:	13 8e       	std	Z+27, r1	; 0x1b
    3d58:	14 8e       	std	Z+28, r1	; 0x1c
    3d5a:	08 95       	ret

00003d5c <initVariant>:
    3d5c:	08 95       	ret

00003d5e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3d5e:	0e 94 c5 21 	call	0x438a	; 0x438a <init>

	initVariant();
    3d62:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3d66:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3d6a:	cb e1       	ldi	r28, 0x1B	; 27
    3d6c:	dd e1       	ldi	r29, 0x1D	; 29
#endif
	
	setup();
    
	for (;;) {
		loop();
    3d6e:	0e 94 90 0a 	call	0x1520	; 0x1520 <loop>
		if (serialEventRun) serialEventRun();
    3d72:	20 97       	sbiw	r28, 0x00	; 0
    3d74:	e1 f3       	breq	.-8      	; 0x3d6e <main+0x10>
    3d76:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z14serialEventRunv>
    3d7a:	f9 cf       	rjmp	.-14     	; 0x3d6e <main+0x10>

00003d7c <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3d7c:	cf 92       	push	r12
    3d7e:	df 92       	push	r13
    3d80:	ef 92       	push	r14
    3d82:	ff 92       	push	r15
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	6c 01       	movw	r12, r24
    3d8e:	7a 01       	movw	r14, r20
    3d90:	8b 01       	movw	r16, r22
    3d92:	c0 e0       	ldi	r28, 0x00	; 0
    3d94:	d0 e0       	ldi	r29, 0x00	; 0
    3d96:	ce 15       	cp	r28, r14
    3d98:	df 05       	cpc	r29, r15
    3d9a:	81 f0       	breq	.+32     	; 0x3dbc <_ZN5Print5writeEPKhj+0x40>
    3d9c:	d8 01       	movw	r26, r16
    3d9e:	6d 91       	ld	r22, X+
    3da0:	8d 01       	movw	r16, r26
    3da2:	d6 01       	movw	r26, r12
    3da4:	ed 91       	ld	r30, X+
    3da6:	fc 91       	ld	r31, X
    3da8:	01 90       	ld	r0, Z+
    3daa:	f0 81       	ld	r31, Z
    3dac:	e0 2d       	mov	r30, r0
    3dae:	c6 01       	movw	r24, r12
    3db0:	09 95       	icall
    3db2:	89 2b       	or	r24, r25
    3db4:	11 f0       	breq	.+4      	; 0x3dba <_ZN5Print5writeEPKhj+0x3e>
    3db6:	21 96       	adiw	r28, 0x01	; 1
    3db8:	ee cf       	rjmp	.-36     	; 0x3d96 <_ZN5Print5writeEPKhj+0x1a>
    3dba:	7e 01       	movw	r14, r28
    3dbc:	c7 01       	movw	r24, r14
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	df 90       	pop	r13
    3dcc:	cf 90       	pop	r12
    3dce:	08 95       	ret

00003dd0 <_ZN5Print5writeEPKc>:
    3dd0:	61 15       	cp	r22, r1
    3dd2:	71 05       	cpc	r23, r1
    3dd4:	79 f0       	breq	.+30     	; 0x3df4 <_ZN5Print5writeEPKc+0x24>
    3dd6:	fb 01       	movw	r30, r22
    3dd8:	01 90       	ld	r0, Z+
    3dda:	00 20       	and	r0, r0
    3ddc:	e9 f7       	brne	.-6      	; 0x3dd8 <_ZN5Print5writeEPKc+0x8>
    3dde:	31 97       	sbiw	r30, 0x01	; 1
    3de0:	af 01       	movw	r20, r30
    3de2:	46 1b       	sub	r20, r22
    3de4:	57 0b       	sbc	r21, r23
    3de6:	dc 01       	movw	r26, r24
    3de8:	ed 91       	ld	r30, X+
    3dea:	fc 91       	ld	r31, X
    3dec:	02 80       	ldd	r0, Z+2	; 0x02
    3dee:	f3 81       	ldd	r31, Z+3	; 0x03
    3df0:	e0 2d       	mov	r30, r0
    3df2:	09 94       	ijmp
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	08 95       	ret

00003dfa <_ZN5Print5printEPK19__FlashStringHelper>:
    3dfa:	ef 92       	push	r14
    3dfc:	ff 92       	push	r15
    3dfe:	0f 93       	push	r16
    3e00:	1f 93       	push	r17
    3e02:	cf 93       	push	r28
    3e04:	df 93       	push	r29
    3e06:	8c 01       	movw	r16, r24
    3e08:	7b 01       	movw	r14, r22
    3e0a:	c0 e0       	ldi	r28, 0x00	; 0
    3e0c:	d0 e0       	ldi	r29, 0x00	; 0
    3e0e:	f7 01       	movw	r30, r14
    3e10:	ec 0f       	add	r30, r28
    3e12:	fd 1f       	adc	r31, r29
    3e14:	64 91       	lpm	r22, Z
    3e16:	66 23       	and	r22, r22
    3e18:	61 f0       	breq	.+24     	; 0x3e32 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3e1a:	d8 01       	movw	r26, r16
    3e1c:	ed 91       	ld	r30, X+
    3e1e:	fc 91       	ld	r31, X
    3e20:	01 90       	ld	r0, Z+
    3e22:	f0 81       	ld	r31, Z
    3e24:	e0 2d       	mov	r30, r0
    3e26:	c8 01       	movw	r24, r16
    3e28:	09 95       	icall
    3e2a:	89 2b       	or	r24, r25
    3e2c:	11 f0       	breq	.+4      	; 0x3e32 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3e2e:	21 96       	adiw	r28, 0x01	; 1
    3e30:	ee cf       	rjmp	.-36     	; 0x3e0e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3e32:	ce 01       	movw	r24, r28
    3e34:	df 91       	pop	r29
    3e36:	cf 91       	pop	r28
    3e38:	1f 91       	pop	r17
    3e3a:	0f 91       	pop	r16
    3e3c:	ff 90       	pop	r15
    3e3e:	ef 90       	pop	r14
    3e40:	08 95       	ret

00003e42 <_ZN5Print5printEc>:
    3e42:	dc 01       	movw	r26, r24
    3e44:	ed 91       	ld	r30, X+
    3e46:	fc 91       	ld	r31, X
    3e48:	01 90       	ld	r0, Z+
    3e4a:	f0 81       	ld	r31, Z
    3e4c:	e0 2d       	mov	r30, r0
    3e4e:	09 94       	ijmp

00003e50 <_ZN5Print7printlnEv>:
    3e50:	61 ec       	ldi	r22, 0xC1	; 193
    3e52:	71 e0       	ldi	r23, 0x01	; 1
    3e54:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <_ZN5Print5writeEPKc>

00003e58 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	ec 01       	movw	r28, r24
    3e62:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN5Print5printEPK19__FlashStringHelper>
    3e66:	8c 01       	movw	r16, r24
    3e68:	ce 01       	movw	r24, r28
    3e6a:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN5Print7printlnEv>
    3e6e:	80 0f       	add	r24, r16
    3e70:	91 1f       	adc	r25, r17
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	1f 91       	pop	r17
    3e78:	0f 91       	pop	r16
    3e7a:	08 95       	ret

00003e7c <_ZN5Print11printNumberEmh>:
    3e7c:	8f 92       	push	r8
    3e7e:	9f 92       	push	r9
    3e80:	af 92       	push	r10
    3e82:	bf 92       	push	r11
    3e84:	ef 92       	push	r14
    3e86:	ff 92       	push	r15
    3e88:	0f 93       	push	r16
    3e8a:	1f 93       	push	r17
    3e8c:	cf 93       	push	r28
    3e8e:	df 93       	push	r29
    3e90:	cd b7       	in	r28, 0x3d	; 61
    3e92:	de b7       	in	r29, 0x3e	; 62
    3e94:	a1 97       	sbiw	r28, 0x21	; 33
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	f8 94       	cli
    3e9a:	de bf       	out	0x3e, r29	; 62
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	cd bf       	out	0x3d, r28	; 61
    3ea0:	7c 01       	movw	r14, r24
    3ea2:	fa 01       	movw	r30, r20
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	19 a2       	std	Y+33, r1	; 0x21
    3ea8:	22 30       	cpi	r18, 0x02	; 2
    3eaa:	08 f4       	brcc	.+2      	; 0x3eae <_ZN5Print11printNumberEmh+0x32>
    3eac:	2a e0       	ldi	r18, 0x0A	; 10
    3eae:	8e 01       	movw	r16, r28
    3eb0:	0f 5d       	subi	r16, 0xDF	; 223
    3eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb4:	82 2e       	mov	r8, r18
    3eb6:	91 2c       	mov	r9, r1
    3eb8:	a1 2c       	mov	r10, r1
    3eba:	b1 2c       	mov	r11, r1
    3ebc:	bf 01       	movw	r22, r30
    3ebe:	a5 01       	movw	r20, r10
    3ec0:	94 01       	movw	r18, r8
    3ec2:	0e 94 c3 22 	call	0x4586	; 0x4586 <__udivmodsi4>
    3ec6:	f9 01       	movw	r30, r18
    3ec8:	ca 01       	movw	r24, r20
    3eca:	01 50       	subi	r16, 0x01	; 1
    3ecc:	11 09       	sbc	r17, r1
    3ece:	6a 30       	cpi	r22, 0x0A	; 10
    3ed0:	10 f4       	brcc	.+4      	; 0x3ed6 <_ZN5Print11printNumberEmh+0x5a>
    3ed2:	60 5d       	subi	r22, 0xD0	; 208
    3ed4:	01 c0       	rjmp	.+2      	; 0x3ed8 <_ZN5Print11printNumberEmh+0x5c>
    3ed6:	69 5c       	subi	r22, 0xC9	; 201
    3ed8:	d8 01       	movw	r26, r16
    3eda:	6c 93       	st	X, r22
    3edc:	23 2b       	or	r18, r19
    3ede:	24 2b       	or	r18, r20
    3ee0:	25 2b       	or	r18, r21
    3ee2:	61 f7       	brne	.-40     	; 0x3ebc <_ZN5Print11printNumberEmh+0x40>
    3ee4:	b8 01       	movw	r22, r16
    3ee6:	c7 01       	movw	r24, r14
    3ee8:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <_ZN5Print5writeEPKc>
    3eec:	a1 96       	adiw	r28, 0x21	; 33
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
    3ef8:	df 91       	pop	r29
    3efa:	cf 91       	pop	r28
    3efc:	1f 91       	pop	r17
    3efe:	0f 91       	pop	r16
    3f00:	ff 90       	pop	r15
    3f02:	ef 90       	pop	r14
    3f04:	bf 90       	pop	r11
    3f06:	af 90       	pop	r10
    3f08:	9f 90       	pop	r9
    3f0a:	8f 90       	pop	r8
    3f0c:	08 95       	ret

00003f0e <_ZN5Print5printEmi>:
    3f0e:	21 15       	cp	r18, r1
    3f10:	31 05       	cpc	r19, r1
    3f12:	41 f4       	brne	.+16     	; 0x3f24 <_ZN5Print5printEmi+0x16>
    3f14:	dc 01       	movw	r26, r24
    3f16:	ed 91       	ld	r30, X+
    3f18:	fc 91       	ld	r31, X
    3f1a:	01 90       	ld	r0, Z+
    3f1c:	f0 81       	ld	r31, Z
    3f1e:	e0 2d       	mov	r30, r0
    3f20:	64 2f       	mov	r22, r20
    3f22:	09 94       	ijmp
    3f24:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <_ZN5Print11printNumberEmh>

00003f28 <_ZN5Print5printEhi>:
    3f28:	9a 01       	movw	r18, r20
    3f2a:	46 2f       	mov	r20, r22
    3f2c:	50 e0       	ldi	r21, 0x00	; 0
    3f2e:	60 e0       	ldi	r22, 0x00	; 0
    3f30:	70 e0       	ldi	r23, 0x00	; 0
    3f32:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <_ZN5Print5printEmi>

00003f36 <_ZN5Print7printlnEhi>:
    3f36:	0f 93       	push	r16
    3f38:	1f 93       	push	r17
    3f3a:	cf 93       	push	r28
    3f3c:	df 93       	push	r29
    3f3e:	ec 01       	movw	r28, r24
    3f40:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN5Print5printEhi>
    3f44:	8c 01       	movw	r16, r24
    3f46:	ce 01       	movw	r24, r28
    3f48:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN5Print7printlnEv>
    3f4c:	80 0f       	add	r24, r16
    3f4e:	91 1f       	adc	r25, r17
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	08 95       	ret

00003f5a <_ZN5Print5printEji>:
    3f5a:	9a 01       	movw	r18, r20
    3f5c:	ab 01       	movw	r20, r22
    3f5e:	60 e0       	ldi	r22, 0x00	; 0
    3f60:	70 e0       	ldi	r23, 0x00	; 0
    3f62:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <_ZN5Print5printEmi>

00003f66 <_ZN5Print5printEli>:
    3f66:	cf 92       	push	r12
    3f68:	df 92       	push	r13
    3f6a:	ef 92       	push	r14
    3f6c:	ff 92       	push	r15
    3f6e:	0f 93       	push	r16
    3f70:	1f 93       	push	r17
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	21 15       	cp	r18, r1
    3f78:	31 05       	cpc	r19, r1
    3f7a:	81 f4       	brne	.+32     	; 0x3f9c <_ZN5Print5printEli+0x36>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	ed 91       	ld	r30, X+
    3f80:	fc 91       	ld	r31, X
    3f82:	01 90       	ld	r0, Z+
    3f84:	f0 81       	ld	r31, Z
    3f86:	e0 2d       	mov	r30, r0
    3f88:	64 2f       	mov	r22, r20
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	1f 91       	pop	r17
    3f90:	0f 91       	pop	r16
    3f92:	ff 90       	pop	r15
    3f94:	ef 90       	pop	r14
    3f96:	df 90       	pop	r13
    3f98:	cf 90       	pop	r12
    3f9a:	09 94       	ijmp
    3f9c:	2a 30       	cpi	r18, 0x0A	; 10
    3f9e:	31 05       	cpc	r19, r1
    3fa0:	01 f5       	brne	.+64     	; 0x3fe2 <_ZN5Print5printEli+0x7c>
    3fa2:	77 ff       	sbrs	r23, 7
    3fa4:	1d c0       	rjmp	.+58     	; 0x3fe0 <_ZN5Print5printEli+0x7a>
    3fa6:	6a 01       	movw	r12, r20
    3fa8:	7b 01       	movw	r14, r22
    3faa:	ec 01       	movw	r28, r24
    3fac:	6d e2       	ldi	r22, 0x2D	; 45
    3fae:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <_ZN5Print5printEc>
    3fb2:	8c 01       	movw	r16, r24
    3fb4:	44 27       	eor	r20, r20
    3fb6:	55 27       	eor	r21, r21
    3fb8:	ba 01       	movw	r22, r20
    3fba:	4c 19       	sub	r20, r12
    3fbc:	5d 09       	sbc	r21, r13
    3fbe:	6e 09       	sbc	r22, r14
    3fc0:	7f 09       	sbc	r23, r15
    3fc2:	2a e0       	ldi	r18, 0x0A	; 10
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <_ZN5Print11printNumberEmh>
    3fca:	80 0f       	add	r24, r16
    3fcc:	91 1f       	adc	r25, r17
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	1f 91       	pop	r17
    3fd4:	0f 91       	pop	r16
    3fd6:	ff 90       	pop	r15
    3fd8:	ef 90       	pop	r14
    3fda:	df 90       	pop	r13
    3fdc:	cf 90       	pop	r12
    3fde:	08 95       	ret
    3fe0:	2a e0       	ldi	r18, 0x0A	; 10
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	1f 91       	pop	r17
    3fe8:	0f 91       	pop	r16
    3fea:	ff 90       	pop	r15
    3fec:	ef 90       	pop	r14
    3fee:	df 90       	pop	r13
    3ff0:	cf 90       	pop	r12
    3ff2:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <_ZN5Print11printNumberEmh>

00003ff6 <_ZN5Print5printEii>:
    3ff6:	9a 01       	movw	r18, r20
    3ff8:	ab 01       	movw	r20, r22
    3ffa:	77 0f       	add	r23, r23
    3ffc:	66 0b       	sbc	r22, r22
    3ffe:	77 0b       	sbc	r23, r23
    4000:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <_ZN5Print5printEli>

00004004 <_ZN5Print7printlnEii>:
    4004:	0f 93       	push	r16
    4006:	1f 93       	push	r17
    4008:	cf 93       	push	r28
    400a:	df 93       	push	r29
    400c:	ec 01       	movw	r28, r24
    400e:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_ZN5Print5printEii>
    4012:	8c 01       	movw	r16, r24
    4014:	ce 01       	movw	r24, r28
    4016:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN5Print7printlnEv>
    401a:	80 0f       	add	r24, r16
    401c:	91 1f       	adc	r25, r17
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	1f 91       	pop	r17
    4024:	0f 91       	pop	r16
    4026:	08 95       	ret

00004028 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    4028:	7f 92       	push	r7
    402a:	8f 92       	push	r8
    402c:	9f 92       	push	r9
    402e:	af 92       	push	r10
    4030:	bf 92       	push	r11
    4032:	cf 92       	push	r12
    4034:	df 92       	push	r13
    4036:	ef 92       	push	r14
    4038:	ff 92       	push	r15
    403a:	0f 93       	push	r16
    403c:	1f 93       	push	r17
    403e:	cf 93       	push	r28
    4040:	df 93       	push	r29
    4042:	8c 01       	movw	r16, r24
    4044:	6a 01       	movw	r12, r20
    4046:	7b 01       	movw	r14, r22
    4048:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    404a:	9a 01       	movw	r18, r20
    404c:	ab 01       	movw	r20, r22
    404e:	c7 01       	movw	r24, r14
    4050:	b6 01       	movw	r22, r12
    4052:	0e 94 be 22 	call	0x457c	; 0x457c <__unordsf2>
    4056:	88 23       	and	r24, r24
    4058:	19 f0       	breq	.+6      	; 0x4060 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    405a:	64 ec       	ldi	r22, 0xC4	; 196
    405c:	71 e0       	ldi	r23, 0x01	; 1
    405e:	27 c0       	rjmp	.+78     	; 0x40ae <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    4060:	46 01       	movw	r8, r12
    4062:	57 01       	movw	r10, r14
    4064:	e8 94       	clt
    4066:	b7 f8       	bld	r11, 7
    4068:	2f ef       	ldi	r18, 0xFF	; 255
    406a:	3f ef       	ldi	r19, 0xFF	; 255
    406c:	4f e7       	ldi	r20, 0x7F	; 127
    406e:	5f e7       	ldi	r21, 0x7F	; 127
    4070:	c5 01       	movw	r24, r10
    4072:	b4 01       	movw	r22, r8
    4074:	0e 94 be 22 	call	0x457c	; 0x457c <__unordsf2>
    4078:	81 11       	cpse	r24, r1
    407a:	0d c0       	rjmp	.+26     	; 0x4096 <_ZN5Print10printFloatEdh+0x6e>
    407c:	2f ef       	ldi	r18, 0xFF	; 255
    407e:	3f ef       	ldi	r19, 0xFF	; 255
    4080:	4f e7       	ldi	r20, 0x7F	; 127
    4082:	5f e7       	ldi	r21, 0x7F	; 127
    4084:	c5 01       	movw	r24, r10
    4086:	b4 01       	movw	r22, r8
    4088:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    408c:	18 16       	cp	r1, r24
    408e:	1c f4       	brge	.+6      	; 0x4096 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4090:	68 ec       	ldi	r22, 0xC8	; 200
    4092:	71 e0       	ldi	r23, 0x01	; 1
    4094:	0c c0       	rjmp	.+24     	; 0x40ae <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    4096:	2f ef       	ldi	r18, 0xFF	; 255
    4098:	3f ef       	ldi	r19, 0xFF	; 255
    409a:	4f e7       	ldi	r20, 0x7F	; 127
    409c:	5f e4       	ldi	r21, 0x4F	; 79
    409e:	c7 01       	movw	r24, r14
    40a0:	b6 01       	movw	r22, r12
    40a2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    40a6:	18 16       	cp	r1, r24
    40a8:	94 f4       	brge	.+36     	; 0x40ce <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    40aa:	6c ec       	ldi	r22, 0xCC	; 204
    40ac:	71 e0       	ldi	r23, 0x01	; 1
    40ae:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	ff 90       	pop	r15
    40ba:	ef 90       	pop	r14
    40bc:	df 90       	pop	r13
    40be:	cf 90       	pop	r12
    40c0:	bf 90       	pop	r11
    40c2:	af 90       	pop	r10
    40c4:	9f 90       	pop	r9
    40c6:	8f 90       	pop	r8
    40c8:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    40ca:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    40ce:	2f ef       	ldi	r18, 0xFF	; 255
    40d0:	3f ef       	ldi	r19, 0xFF	; 255
    40d2:	4f e7       	ldi	r20, 0x7F	; 127
    40d4:	5f ec       	ldi	r21, 0xCF	; 207
    40d6:	c7 01       	movw	r24, r14
    40d8:	b6 01       	movw	r22, r12
    40da:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    40de:	87 fd       	sbrc	r24, 7
    40e0:	e4 cf       	rjmp	.-56     	; 0x40aa <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	a9 01       	movw	r20, r18
    40e8:	c7 01       	movw	r24, r14
    40ea:	b6 01       	movw	r22, r12
    40ec:	0e 94 0d 1b 	call	0x361a	; 0x361a <__cmpsf2>
    40f0:	87 ff       	sbrs	r24, 7
    40f2:	0a c0       	rjmp	.+20     	; 0x4108 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    40f4:	6d e2       	ldi	r22, 0x2D	; 45
    40f6:	c8 01       	movw	r24, r16
    40f8:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <_ZN5Print5printEc>
    40fc:	ec 01       	movw	r28, r24
     number = -number;
    40fe:	f7 fa       	bst	r15, 7
    4100:	f0 94       	com	r15
    4102:	f7 f8       	bld	r15, 7
    4104:	f0 94       	com	r15
    4106:	02 c0       	rjmp	.+4      	; 0x410c <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4108:	c0 e0       	ldi	r28, 0x00	; 0
    410a:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    410c:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    410e:	60 e0       	ldi	r22, 0x00	; 0
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    4116:	7b 14       	cp	r7, r11
    4118:	41 f0       	breq	.+16     	; 0x412a <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e2       	ldi	r20, 0x20	; 32
    4120:	51 e4       	ldi	r21, 0x41	; 65
    4122:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4126:	b3 94       	inc	r11
    4128:	f6 cf       	rjmp	.-20     	; 0x4116 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    412a:	a7 01       	movw	r20, r14
    412c:	96 01       	movw	r18, r12
    412e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__addsf3>
    4132:	6b 01       	movw	r12, r22
    4134:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4136:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__fixunssfsi>
    413a:	4b 01       	movw	r8, r22
    413c:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    413e:	2a e0       	ldi	r18, 0x0A	; 10
    4140:	ab 01       	movw	r20, r22
    4142:	bc 01       	movw	r22, r24
    4144:	c8 01       	movw	r24, r16
    4146:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    414a:	c8 0f       	add	r28, r24
    414c:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    414e:	77 20       	and	r7, r7
    4150:	b9 f1       	breq	.+110    	; 0x41c0 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4152:	c5 01       	movw	r24, r10
    4154:	b4 01       	movw	r22, r8
    4156:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__floatunsisf>
    415a:	9b 01       	movw	r18, r22
    415c:	ac 01       	movw	r20, r24
    415e:	c7 01       	movw	r24, r14
    4160:	b6 01       	movw	r22, r12
    4162:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
    4166:	6b 01       	movw	r12, r22
    4168:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    416a:	6e e2       	ldi	r22, 0x2E	; 46
    416c:	c8 01       	movw	r24, r16
    416e:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <_ZN5Print5printEc>
    4172:	c8 0f       	add	r28, r24
    4174:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e2       	ldi	r20, 0x20	; 32
    417c:	51 e4       	ldi	r21, 0x41	; 65
    417e:	c7 01       	movw	r24, r14
    4180:	b6 01       	movw	r22, r12
    4182:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__mulsf3>
    4186:	4b 01       	movw	r8, r22
    4188:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    418a:	0e 94 8b 1b 	call	0x3716	; 0x3716 <__fixunssfsi>
    418e:	6b 01       	movw	r12, r22
    4190:	7c 01       	movw	r14, r24
    n += print(toPrint);
    4192:	4a e0       	ldi	r20, 0x0A	; 10
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	c8 01       	movw	r24, r16
    4198:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN5Print5printEji>
    419c:	c8 0f       	add	r28, r24
    419e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    41a0:	b6 01       	movw	r22, r12
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__floatunsisf>
    41aa:	9b 01       	movw	r18, r22
    41ac:	ac 01       	movw	r20, r24
    41ae:	c5 01       	movw	r24, r10
    41b0:	b4 01       	movw	r22, r8
    41b2:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__subsf3>
    41b6:	6b 01       	movw	r12, r22
    41b8:	7c 01       	movw	r14, r24
    41ba:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    41bc:	71 10       	cpse	r7, r1
    41be:	db cf       	rjmp	.-74     	; 0x4176 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    41c0:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    41c2:	df 91       	pop	r29
    41c4:	cf 91       	pop	r28
    41c6:	1f 91       	pop	r17
    41c8:	0f 91       	pop	r16
    41ca:	ff 90       	pop	r15
    41cc:	ef 90       	pop	r14
    41ce:	df 90       	pop	r13
    41d0:	cf 90       	pop	r12
    41d2:	bf 90       	pop	r11
    41d4:	af 90       	pop	r10
    41d6:	9f 90       	pop	r9
    41d8:	8f 90       	pop	r8
    41da:	7f 90       	pop	r7
    41dc:	08 95       	ret

000041de <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    41de:	0c 94 14 20 	jmp	0x4028	; 0x4028 <_ZN5Print10printFloatEdh>

000041e2 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    41e2:	0f 93       	push	r16
    41e4:	1f 93       	push	r17
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    41ec:	0e 94 14 20 	call	0x4028	; 0x4028 <_ZN5Print10printFloatEdh>
    41f0:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    41f2:	ce 01       	movw	r24, r28
    41f4:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN5Print7printlnEv>
  return n;
}
    41f8:	80 0f       	add	r24, r16
    41fa:	91 1f       	adc	r25, r17
    41fc:	df 91       	pop	r29
    41fe:	cf 91       	pop	r28
    4200:	1f 91       	pop	r17
    4202:	0f 91       	pop	r16
    4204:	08 95       	ret

00004206 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4206:	1f 92       	push	r1
    4208:	0f 92       	push	r0
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	0f 92       	push	r0
    420e:	11 24       	eor	r1, r1
    4210:	2f 93       	push	r18
    4212:	3f 93       	push	r19
    4214:	8f 93       	push	r24
    4216:	9f 93       	push	r25
    4218:	af 93       	push	r26
    421a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    421c:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <timer0_millis>
    4220:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <timer0_millis+0x1>
    4224:	a0 91 c9 03 	lds	r26, 0x03C9	; 0x8003c9 <timer0_millis+0x2>
    4228:	b0 91 ca 03 	lds	r27, 0x03CA	; 0x8003ca <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    422c:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4230:	23 e0       	ldi	r18, 0x03	; 3
    4232:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4234:	2d 37       	cpi	r18, 0x7D	; 125
    4236:	20 f4       	brcc	.+8      	; 0x4240 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4238:	01 96       	adiw	r24, 0x01	; 1
    423a:	a1 1d       	adc	r26, r1
    423c:	b1 1d       	adc	r27, r1
    423e:	05 c0       	rjmp	.+10     	; 0x424a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4240:	26 e8       	ldi	r18, 0x86	; 134
    4242:	23 0f       	add	r18, r19
		m += 1;
    4244:	02 96       	adiw	r24, 0x02	; 2
    4246:	a1 1d       	adc	r26, r1
    4248:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    424a:	20 93 c6 03 	sts	0x03C6, r18	; 0x8003c6 <timer0_fract>
	timer0_millis = m;
    424e:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <timer0_millis>
    4252:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <timer0_millis+0x1>
    4256:	a0 93 c9 03 	sts	0x03C9, r26	; 0x8003c9 <timer0_millis+0x2>
    425a:	b0 93 ca 03 	sts	0x03CA, r27	; 0x8003ca <timer0_millis+0x3>
	timer0_overflow_count++;
    425e:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <timer0_overflow_count>
    4262:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <timer0_overflow_count+0x1>
    4266:	a0 91 cd 03 	lds	r26, 0x03CD	; 0x8003cd <timer0_overflow_count+0x2>
    426a:	b0 91 ce 03 	lds	r27, 0x03CE	; 0x8003ce <timer0_overflow_count+0x3>
    426e:	01 96       	adiw	r24, 0x01	; 1
    4270:	a1 1d       	adc	r26, r1
    4272:	b1 1d       	adc	r27, r1
    4274:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <timer0_overflow_count>
    4278:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <timer0_overflow_count+0x1>
    427c:	a0 93 cd 03 	sts	0x03CD, r26	; 0x8003cd <timer0_overflow_count+0x2>
    4280:	b0 93 ce 03 	sts	0x03CE, r27	; 0x8003ce <timer0_overflow_count+0x3>
}
    4284:	bf 91       	pop	r27
    4286:	af 91       	pop	r26
    4288:	9f 91       	pop	r25
    428a:	8f 91       	pop	r24
    428c:	3f 91       	pop	r19
    428e:	2f 91       	pop	r18
    4290:	0f 90       	pop	r0
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	0f 90       	pop	r0
    4296:	1f 90       	pop	r1
    4298:	18 95       	reti

0000429a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    429a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    429c:	f8 94       	cli
	m = timer0_millis;
    429e:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <timer0_millis>
    42a2:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <timer0_millis+0x1>
    42a6:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <timer0_millis+0x2>
    42aa:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <timer0_millis+0x3>
	SREG = oldSREG;
    42ae:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    42b0:	08 95       	ret

000042b2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    42b2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    42b4:	f8 94       	cli
	m = timer0_overflow_count;
    42b6:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <timer0_overflow_count>
    42ba:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <timer0_overflow_count+0x1>
    42be:	a0 91 cd 03 	lds	r26, 0x03CD	; 0x8003cd <timer0_overflow_count+0x2>
    42c2:	b0 91 ce 03 	lds	r27, 0x03CE	; 0x8003ce <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    42c6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    42c8:	a8 9b       	sbis	0x15, 0	; 21
    42ca:	05 c0       	rjmp	.+10     	; 0x42d6 <micros+0x24>
    42cc:	2f 3f       	cpi	r18, 0xFF	; 255
    42ce:	19 f0       	breq	.+6      	; 0x42d6 <micros+0x24>
		m++;
    42d0:	01 96       	adiw	r24, 0x01	; 1
    42d2:	a1 1d       	adc	r26, r1
    42d4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    42d6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    42d8:	ba 2f       	mov	r27, r26
    42da:	a9 2f       	mov	r26, r25
    42dc:	98 2f       	mov	r25, r24
    42de:	88 27       	eor	r24, r24
    42e0:	82 0f       	add	r24, r18
    42e2:	91 1d       	adc	r25, r1
    42e4:	a1 1d       	adc	r26, r1
    42e6:	b1 1d       	adc	r27, r1
    42e8:	bc 01       	movw	r22, r24
    42ea:	cd 01       	movw	r24, r26
    42ec:	42 e0       	ldi	r20, 0x02	; 2
    42ee:	66 0f       	add	r22, r22
    42f0:	77 1f       	adc	r23, r23
    42f2:	88 1f       	adc	r24, r24
    42f4:	99 1f       	adc	r25, r25
    42f6:	4a 95       	dec	r20
    42f8:	d1 f7       	brne	.-12     	; 0x42ee <micros+0x3c>
}
    42fa:	08 95       	ret

000042fc <delay>:

void delay(unsigned long ms)
{
    42fc:	8f 92       	push	r8
    42fe:	9f 92       	push	r9
    4300:	af 92       	push	r10
    4302:	bf 92       	push	r11
    4304:	cf 92       	push	r12
    4306:	df 92       	push	r13
    4308:	ef 92       	push	r14
    430a:	ff 92       	push	r15
    430c:	6b 01       	movw	r12, r22
    430e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4310:	0e 94 59 21 	call	0x42b2	; 0x42b2 <micros>
    4314:	4b 01       	movw	r8, r22
    4316:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4318:	c1 14       	cp	r12, r1
    431a:	d1 04       	cpc	r13, r1
    431c:	e1 04       	cpc	r14, r1
    431e:	f1 04       	cpc	r15, r1
    4320:	01 f1       	breq	.+64     	; 0x4362 <delay+0x66>
		yield();
    4322:	0e 94 bd 22 	call	0x457a	; 0x457a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4326:	0e 94 59 21 	call	0x42b2	; 0x42b2 <micros>
    432a:	dc 01       	movw	r26, r24
    432c:	cb 01       	movw	r24, r22
    432e:	88 19       	sub	r24, r8
    4330:	99 09       	sbc	r25, r9
    4332:	aa 09       	sbc	r26, r10
    4334:	bb 09       	sbc	r27, r11
    4336:	88 3e       	cpi	r24, 0xE8	; 232
    4338:	93 40       	sbci	r25, 0x03	; 3
    433a:	a1 05       	cpc	r26, r1
    433c:	b1 05       	cpc	r27, r1
    433e:	60 f3       	brcs	.-40     	; 0x4318 <delay+0x1c>
			ms--;
    4340:	21 e0       	ldi	r18, 0x01	; 1
    4342:	c2 1a       	sub	r12, r18
    4344:	d1 08       	sbc	r13, r1
    4346:	e1 08       	sbc	r14, r1
    4348:	f1 08       	sbc	r15, r1
			start += 1000;
    434a:	88 ee       	ldi	r24, 0xE8	; 232
    434c:	88 0e       	add	r8, r24
    434e:	83 e0       	ldi	r24, 0x03	; 3
    4350:	98 1e       	adc	r9, r24
    4352:	a1 1c       	adc	r10, r1
    4354:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4356:	c1 14       	cp	r12, r1
    4358:	d1 04       	cpc	r13, r1
    435a:	e1 04       	cpc	r14, r1
    435c:	f1 04       	cpc	r15, r1
    435e:	19 f7       	brne	.-58     	; 0x4326 <delay+0x2a>
    4360:	db cf       	rjmp	.-74     	; 0x4318 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    4362:	ff 90       	pop	r15
    4364:	ef 90       	pop	r14
    4366:	df 90       	pop	r13
    4368:	cf 90       	pop	r12
    436a:	bf 90       	pop	r11
    436c:	af 90       	pop	r10
    436e:	9f 90       	pop	r9
    4370:	8f 90       	pop	r8
    4372:	08 95       	ret

00004374 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4374:	82 30       	cpi	r24, 0x02	; 2
    4376:	91 05       	cpc	r25, r1
    4378:	38 f0       	brcs	.+14     	; 0x4388 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    437a:	88 0f       	add	r24, r24
    437c:	99 1f       	adc	r25, r25
    437e:	88 0f       	add	r24, r24
    4380:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4382:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	f1 f7       	brne	.-4      	; 0x4384 <delayMicroseconds+0x10>
    4388:	08 95       	ret

0000438a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    438a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    438c:	84 b5       	in	r24, 0x24	; 36
    438e:	82 60       	ori	r24, 0x02	; 2
    4390:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4392:	84 b5       	in	r24, 0x24	; 36
    4394:	81 60       	ori	r24, 0x01	; 1
    4396:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4398:	85 b5       	in	r24, 0x25	; 37
    439a:	82 60       	ori	r24, 0x02	; 2
    439c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    439e:	85 b5       	in	r24, 0x25	; 37
    43a0:	81 60       	ori	r24, 0x01	; 1
    43a2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    43a4:	ee e6       	ldi	r30, 0x6E	; 110
    43a6:	f0 e0       	ldi	r31, 0x00	; 0
    43a8:	80 81       	ld	r24, Z
    43aa:	81 60       	ori	r24, 0x01	; 1
    43ac:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    43ae:	e1 e8       	ldi	r30, 0x81	; 129
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    43b4:	80 81       	ld	r24, Z
    43b6:	82 60       	ori	r24, 0x02	; 2
    43b8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    43ba:	80 81       	ld	r24, Z
    43bc:	81 60       	ori	r24, 0x01	; 1
    43be:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    43c0:	e0 e8       	ldi	r30, 0x80	; 128
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	80 81       	ld	r24, Z
    43c6:	81 60       	ori	r24, 0x01	; 1
    43c8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    43ca:	e1 eb       	ldi	r30, 0xB1	; 177
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	80 81       	ld	r24, Z
    43d0:	84 60       	ori	r24, 0x04	; 4
    43d2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    43d4:	e0 eb       	ldi	r30, 0xB0	; 176
    43d6:	f0 e0       	ldi	r31, 0x00	; 0
    43d8:	80 81       	ld	r24, Z
    43da:	81 60       	ori	r24, 0x01	; 1
    43dc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    43de:	ea e7       	ldi	r30, 0x7A	; 122
    43e0:	f0 e0       	ldi	r31, 0x00	; 0
    43e2:	80 81       	ld	r24, Z
    43e4:	84 60       	ori	r24, 0x04	; 4
    43e6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    43e8:	80 81       	ld	r24, Z
    43ea:	82 60       	ori	r24, 0x02	; 2
    43ec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    43ee:	80 81       	ld	r24, Z
    43f0:	81 60       	ori	r24, 0x01	; 1
    43f2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    43f4:	80 81       	ld	r24, Z
    43f6:	80 68       	ori	r24, 0x80	; 128
    43f8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    43fa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    43fe:	08 95       	ret

00004400 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4400:	83 30       	cpi	r24, 0x03	; 3
    4402:	81 f0       	breq	.+32     	; 0x4424 <turnOffPWM+0x24>
    4404:	28 f4       	brcc	.+10     	; 0x4410 <turnOffPWM+0x10>
    4406:	81 30       	cpi	r24, 0x01	; 1
    4408:	99 f0       	breq	.+38     	; 0x4430 <turnOffPWM+0x30>
    440a:	82 30       	cpi	r24, 0x02	; 2
    440c:	a1 f0       	breq	.+40     	; 0x4436 <turnOffPWM+0x36>
    440e:	08 95       	ret
    4410:	87 30       	cpi	r24, 0x07	; 7
    4412:	a9 f0       	breq	.+42     	; 0x443e <turnOffPWM+0x3e>
    4414:	88 30       	cpi	r24, 0x08	; 8
    4416:	b9 f0       	breq	.+46     	; 0x4446 <turnOffPWM+0x46>
    4418:	84 30       	cpi	r24, 0x04	; 4
    441a:	d1 f4       	brne	.+52     	; 0x4450 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    441c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4420:	8f 7d       	andi	r24, 0xDF	; 223
    4422:	03 c0       	rjmp	.+6      	; 0x442a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4424:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4428:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    442a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    442e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4430:	84 b5       	in	r24, 0x24	; 36
    4432:	8f 77       	andi	r24, 0x7F	; 127
    4434:	02 c0       	rjmp	.+4      	; 0x443a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4436:	84 b5       	in	r24, 0x24	; 36
    4438:	8f 7d       	andi	r24, 0xDF	; 223
    443a:	84 bd       	out	0x24, r24	; 36
    443c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    443e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4442:	8f 77       	andi	r24, 0x7F	; 127
    4444:	03 c0       	rjmp	.+6      	; 0x444c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4446:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    444a:	8f 7d       	andi	r24, 0xDF	; 223
    444c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4450:	08 95       	ret

00004452 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	fc 01       	movw	r30, r24
    445a:	ee 5a       	subi	r30, 0xAE	; 174
    445c:	fa 4f       	sbci	r31, 0xFA	; 250
    445e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4460:	fc 01       	movw	r30, r24
    4462:	ea 59       	subi	r30, 0x9A	; 154
    4464:	fa 4f       	sbci	r31, 0xFA	; 250
    4466:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4468:	88 23       	and	r24, r24
    446a:	61 f1       	breq	.+88     	; 0x44c4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	88 0f       	add	r24, r24
    4470:	99 1f       	adc	r25, r25
    4472:	fc 01       	movw	r30, r24
    4474:	e2 57       	subi	r30, 0x72	; 114
    4476:	fa 4f       	sbci	r31, 0xFA	; 250
    4478:	c5 91       	lpm	r28, Z+
    447a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    447c:	fc 01       	movw	r30, r24
    447e:	ec 57       	subi	r30, 0x7C	; 124
    4480:	fa 4f       	sbci	r31, 0xFA	; 250
    4482:	a5 91       	lpm	r26, Z+
    4484:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4486:	61 11       	cpse	r22, r1
    4488:	09 c0       	rjmp	.+18     	; 0x449c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    448a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    448c:	f8 94       	cli
		*reg &= ~bit;
    448e:	88 81       	ld	r24, Y
    4490:	20 95       	com	r18
    4492:	82 23       	and	r24, r18
    4494:	88 83       	st	Y, r24
		*out &= ~bit;
    4496:	ec 91       	ld	r30, X
    4498:	2e 23       	and	r18, r30
    449a:	0b c0       	rjmp	.+22     	; 0x44b2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    449c:	62 30       	cpi	r22, 0x02	; 2
    449e:	61 f4       	brne	.+24     	; 0x44b8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    44a0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    44a2:	f8 94       	cli
		*reg &= ~bit;
    44a4:	88 81       	ld	r24, Y
    44a6:	32 2f       	mov	r19, r18
    44a8:	30 95       	com	r19
    44aa:	83 23       	and	r24, r19
    44ac:	88 83       	st	Y, r24
		*out |= bit;
    44ae:	ec 91       	ld	r30, X
    44b0:	2e 2b       	or	r18, r30
    44b2:	2c 93       	st	X, r18
		SREG = oldSREG;
    44b4:	9f bf       	out	0x3f, r25	; 63
    44b6:	06 c0       	rjmp	.+12     	; 0x44c4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    44b8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    44ba:	f8 94       	cli
		*reg |= bit;
    44bc:	e8 81       	ld	r30, Y
    44be:	2e 2b       	or	r18, r30
    44c0:	28 83       	st	Y, r18
		SREG = oldSREG;
    44c2:	8f bf       	out	0x3f, r24	; 63
	}
}
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	08 95       	ret

000044ca <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    44ca:	1f 93       	push	r17
    44cc:	cf 93       	push	r28
    44ce:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    44d0:	28 2f       	mov	r18, r24
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	f9 01       	movw	r30, r18
    44d6:	e2 5c       	subi	r30, 0xC2	; 194
    44d8:	fa 4f       	sbci	r31, 0xFA	; 250
    44da:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    44dc:	f9 01       	movw	r30, r18
    44de:	ee 5a       	subi	r30, 0xAE	; 174
    44e0:	fa 4f       	sbci	r31, 0xFA	; 250
    44e2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    44e4:	f9 01       	movw	r30, r18
    44e6:	ea 59       	subi	r30, 0x9A	; 154
    44e8:	fa 4f       	sbci	r31, 0xFA	; 250
    44ea:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    44ec:	cc 23       	and	r28, r28
    44ee:	c1 f0       	breq	.+48     	; 0x4520 <digitalWrite+0x56>
    44f0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    44f2:	81 11       	cpse	r24, r1
    44f4:	0e 94 00 22 	call	0x4400	; 0x4400 <turnOffPWM>

	out = portOutputRegister(port);
    44f8:	ec 2f       	mov	r30, r28
    44fa:	f0 e0       	ldi	r31, 0x00	; 0
    44fc:	ee 0f       	add	r30, r30
    44fe:	ff 1f       	adc	r31, r31
    4500:	ec 57       	subi	r30, 0x7C	; 124
    4502:	fa 4f       	sbci	r31, 0xFA	; 250
    4504:	a5 91       	lpm	r26, Z+
    4506:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4508:	9f b7       	in	r25, 0x3f	; 63
	cli();
    450a:	f8 94       	cli

	if (val == LOW) {
    450c:	11 11       	cpse	r17, r1
    450e:	04 c0       	rjmp	.+8      	; 0x4518 <digitalWrite+0x4e>
		*out &= ~bit;
    4510:	8c 91       	ld	r24, X
    4512:	d0 95       	com	r29
    4514:	d8 23       	and	r29, r24
    4516:	02 c0       	rjmp	.+4      	; 0x451c <digitalWrite+0x52>
	} else {
		*out |= bit;
    4518:	ec 91       	ld	r30, X
    451a:	de 2b       	or	r29, r30
    451c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    451e:	9f bf       	out	0x3f, r25	; 63
}
    4520:	df 91       	pop	r29
    4522:	cf 91       	pop	r28
    4524:	1f 91       	pop	r17
    4526:	08 95       	ret

00004528 <digitalRead>:

int digitalRead(uint8_t pin)
{
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    452c:	28 2f       	mov	r18, r24
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	f9 01       	movw	r30, r18
    4532:	e2 5c       	subi	r30, 0xC2	; 194
    4534:	fa 4f       	sbci	r31, 0xFA	; 250
    4536:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4538:	f9 01       	movw	r30, r18
    453a:	ee 5a       	subi	r30, 0xAE	; 174
    453c:	fa 4f       	sbci	r31, 0xFA	; 250
    453e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4540:	f9 01       	movw	r30, r18
    4542:	ea 59       	subi	r30, 0x9A	; 154
    4544:	fa 4f       	sbci	r31, 0xFA	; 250
    4546:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    4548:	cc 23       	and	r28, r28
    454a:	91 f0       	breq	.+36     	; 0x4570 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    454c:	81 11       	cpse	r24, r1
    454e:	0e 94 00 22 	call	0x4400	; 0x4400 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    4552:	ec 2f       	mov	r30, r28
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	ee 0f       	add	r30, r30
    4558:	ff 1f       	adc	r31, r31
    455a:	e6 58       	subi	r30, 0x86	; 134
    455c:	fa 4f       	sbci	r31, 0xFA	; 250
    455e:	a5 91       	lpm	r26, Z+
    4560:	b4 91       	lpm	r27, Z
    4562:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4564:	ed 23       	and	r30, r29
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	21 f4       	brne	.+8      	; 0x4574 <digitalRead+0x4c>
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	02 c0       	rjmp	.+4      	; 0x4574 <digitalRead+0x4c>
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	08 95       	ret

0000457a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    457a:	08 95       	ret

0000457c <__unordsf2>:
    457c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <__fp_cmp>
    4580:	88 0b       	sbc	r24, r24
    4582:	99 0b       	sbc	r25, r25
    4584:	08 95       	ret

00004586 <__udivmodsi4>:
    4586:	a1 e2       	ldi	r26, 0x21	; 33
    4588:	1a 2e       	mov	r1, r26
    458a:	aa 1b       	sub	r26, r26
    458c:	bb 1b       	sub	r27, r27
    458e:	fd 01       	movw	r30, r26
    4590:	0d c0       	rjmp	.+26     	; 0x45ac <__udivmodsi4_ep>

00004592 <__udivmodsi4_loop>:
    4592:	aa 1f       	adc	r26, r26
    4594:	bb 1f       	adc	r27, r27
    4596:	ee 1f       	adc	r30, r30
    4598:	ff 1f       	adc	r31, r31
    459a:	a2 17       	cp	r26, r18
    459c:	b3 07       	cpc	r27, r19
    459e:	e4 07       	cpc	r30, r20
    45a0:	f5 07       	cpc	r31, r21
    45a2:	20 f0       	brcs	.+8      	; 0x45ac <__udivmodsi4_ep>
    45a4:	a2 1b       	sub	r26, r18
    45a6:	b3 0b       	sbc	r27, r19
    45a8:	e4 0b       	sbc	r30, r20
    45aa:	f5 0b       	sbc	r31, r21

000045ac <__udivmodsi4_ep>:
    45ac:	66 1f       	adc	r22, r22
    45ae:	77 1f       	adc	r23, r23
    45b0:	88 1f       	adc	r24, r24
    45b2:	99 1f       	adc	r25, r25
    45b4:	1a 94       	dec	r1
    45b6:	69 f7       	brne	.-38     	; 0x4592 <__udivmodsi4_loop>
    45b8:	60 95       	com	r22
    45ba:	70 95       	com	r23
    45bc:	80 95       	com	r24
    45be:	90 95       	com	r25
    45c0:	9b 01       	movw	r18, r22
    45c2:	ac 01       	movw	r20, r24
    45c4:	bd 01       	movw	r22, r26
    45c6:	cf 01       	movw	r24, r30
    45c8:	08 95       	ret

000045ca <__tablejump2__>:
    45ca:	ee 0f       	add	r30, r30
    45cc:	ff 1f       	adc	r31, r31
    45ce:	05 90       	lpm	r0, Z+
    45d0:	f4 91       	lpm	r31, Z
    45d2:	e0 2d       	mov	r30, r0
    45d4:	09 94       	ijmp

000045d6 <eeprom_read_byte>:
    45d6:	f9 99       	sbic	0x1f, 1	; 31
    45d8:	fe cf       	rjmp	.-4      	; 0x45d6 <eeprom_read_byte>
    45da:	92 bd       	out	0x22, r25	; 34
    45dc:	81 bd       	out	0x21, r24	; 33
    45de:	f8 9a       	sbi	0x1f, 0	; 31
    45e0:	99 27       	eor	r25, r25
    45e2:	80 b5       	in	r24, 0x20	; 32
    45e4:	08 95       	ret

000045e6 <eeprom_read_dword>:
    45e6:	a6 e1       	ldi	r26, 0x16	; 22
    45e8:	b0 e0       	ldi	r27, 0x00	; 0
    45ea:	44 e0       	ldi	r20, 0x04	; 4
    45ec:	50 e0       	ldi	r21, 0x00	; 0
    45ee:	0c 94 19 23 	jmp	0x4632	; 0x4632 <eeprom_read_blraw>

000045f2 <eeprom_update_byte>:
    45f2:	26 2f       	mov	r18, r22

000045f4 <eeprom_update_r18>:
    45f4:	f9 99       	sbic	0x1f, 1	; 31
    45f6:	fe cf       	rjmp	.-4      	; 0x45f4 <eeprom_update_r18>
    45f8:	92 bd       	out	0x22, r25	; 34
    45fa:	81 bd       	out	0x21, r24	; 33
    45fc:	f8 9a       	sbi	0x1f, 0	; 31
    45fe:	01 97       	sbiw	r24, 0x01	; 1
    4600:	00 b4       	in	r0, 0x20	; 32
    4602:	02 16       	cp	r0, r18
    4604:	39 f0       	breq	.+14     	; 0x4614 <eeprom_update_r18+0x20>
    4606:	1f ba       	out	0x1f, r1	; 31
    4608:	20 bd       	out	0x20, r18	; 32
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	f8 94       	cli
    460e:	fa 9a       	sbi	0x1f, 2	; 31
    4610:	f9 9a       	sbi	0x1f, 1	; 31
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	08 95       	ret

00004616 <eeprom_update_dword>:
    4616:	03 96       	adiw	r24, 0x03	; 3
    4618:	27 2f       	mov	r18, r23
    461a:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <eeprom_update_r18>
    461e:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <eeprom_update_byte>
    4622:	25 2f       	mov	r18, r21
    4624:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <eeprom_update_r18>
    4628:	24 2f       	mov	r18, r20
    462a:	0c 94 fa 22 	jmp	0x45f4	; 0x45f4 <eeprom_update_r18>

0000462e <eeprom_read_block>:
    462e:	dc 01       	movw	r26, r24
    4630:	cb 01       	movw	r24, r22

00004632 <eeprom_read_blraw>:
    4632:	fc 01       	movw	r30, r24
    4634:	f9 99       	sbic	0x1f, 1	; 31
    4636:	fe cf       	rjmp	.-4      	; 0x4634 <eeprom_read_blraw+0x2>
    4638:	06 c0       	rjmp	.+12     	; 0x4646 <eeprom_read_blraw+0x14>
    463a:	f2 bd       	out	0x22, r31	; 34
    463c:	e1 bd       	out	0x21, r30	; 33
    463e:	f8 9a       	sbi	0x1f, 0	; 31
    4640:	31 96       	adiw	r30, 0x01	; 1
    4642:	00 b4       	in	r0, 0x20	; 32
    4644:	0d 92       	st	X+, r0
    4646:	41 50       	subi	r20, 0x01	; 1
    4648:	50 40       	sbci	r21, 0x00	; 0
    464a:	b8 f7       	brcc	.-18     	; 0x463a <eeprom_read_blraw+0x8>
    464c:	08 95       	ret

0000464e <_exit>:
    464e:	f8 94       	cli

00004650 <__stop_program>:
    4650:	ff cf       	rjmp	.-2      	; 0x4650 <__stop_program>
