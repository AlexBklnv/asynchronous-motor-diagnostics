
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00004226  000042da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004226  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000218  008001b2  008001b2  0000438c  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  0000438c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043e4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000810  00000000  00000000  00004428  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010314  00000000  00000000  00004c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d8c  00000000  00000000  00014f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000045ad  00000000  00000000  00017cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001578  00000000  00000000  0001c288  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000403e  00000000  00000000  0001d800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006013  00000000  00000000  0002183e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  00027851  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__ctors_end>
       4:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
       8:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
       c:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      10:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      14:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      18:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      1c:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      20:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      24:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      28:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      2c:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      30:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      34:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      38:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      3c:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      40:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__vector_16>
      44:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      48:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__vector_18>
      4c:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__vector_19>
      50:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      54:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      58:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      5c:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      60:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__vector_24>
      64:	0c 94 a3 02 	jmp	0x546	; 0x546 <__bad_interrupt>
      68:	4d 07       	cpc	r20, r29
      6a:	b0 06       	cpc	r11, r16
      6c:	b6 06       	cpc	r11, r22
      6e:	b3 06       	cpc	r11, r19
      70:	c2 06       	cpc	r12, r18
      72:	c5 06       	cpc	r12, r21
      74:	c8 06       	cpc	r12, r24
      76:	cb 06       	cpc	r12, r27
      78:	ce 06       	cpc	r12, r30
      7a:	d1 06       	cpc	r13, r17
      7c:	b9 06       	cpc	r11, r25
      7e:	bc 06       	cpc	r11, r28
      80:	bf 06       	cpc	r11, r31
      82:	d4 06       	cpc	r13, r20
      84:	fb 06       	cpc	r15, r27
      86:	22 07       	cpc	r18, r18
      88:	25 07       	cpc	r18, r21
      8a:	28 07       	cpc	r18, r24
      8c:	30 07       	cpc	r19, r16
      8e:	33 07       	cpc	r19, r19
      90:	36 07       	cpc	r19, r22
      92:	3e 07       	cpc	r19, r30
      94:	f2 08       	sbc	r15, r2
      96:	0f 09       	sbc	r16, r15
      98:	0f 09       	sbc	r16, r15
      9a:	11 09       	sbc	r17, r1
      9c:	11 09       	sbc	r17, r1
      9e:	11 09       	sbc	r17, r1
      a0:	11 09       	sbc	r17, r1
      a2:	11 09       	sbc	r17, r1
      a4:	11 09       	sbc	r17, r1
      a6:	11 09       	sbc	r17, r1
      a8:	11 09       	sbc	r17, r1
      aa:	11 09       	sbc	r17, r1
      ac:	3d 09       	sbc	r19, r13
      ae:	55 09       	sbc	r21, r5
      b0:	6d 09       	sbc	r22, r13
      b2:	6f 09       	sbc	r22, r15
      b4:	72 09       	sbc	r23, r2
      b6:	74 09       	sbc	r23, r4
      b8:	76 09       	sbc	r23, r6
      ba:	78 09       	sbc	r23, r8
      bc:	25 0c       	add	r2, r5
      be:	38 0c       	add	r3, r8
      c0:	28 0c       	add	r2, r8
      c2:	56 0c       	add	r5, r6
      c4:	5f 0c       	add	r5, r15
      c6:	68 0c       	add	r6, r8
      c8:	71 0c       	add	r7, r1
      ca:	7a 0c       	add	r7, r10
      cc:	83 0c       	add	r8, r3
      ce:	3b 0c       	add	r3, r11
      d0:	44 0c       	add	r4, r4
      d2:	4d 0c       	add	r4, r13
      d4:	58 10       	cpse	r5, r8
      d6:	a4 10       	cpse	r10, r4
      d8:	8b 10       	cpse	r8, r11
      da:	f0 10       	cpse	r15, r0
      dc:	03 11       	cpse	r16, r3
      de:	16 11       	cpse	r17, r6
      e0:	29 11       	cpse	r18, r9
      e2:	3c 11       	cpse	r19, r12
      e4:	4f 11       	cpse	r20, r15
      e6:	b7 10       	cpse	r11, r7
      e8:	ca 10       	cpse	r12, r10
      ea:	dd 10       	cpse	r13, r13

000000ec <__trampolines_end>:
      ec:	47 41       	sbci	r20, 0x17	; 23
      ee:	49 4e       	sbci	r20, 0xE9	; 233
      f0:	5f 54       	subi	r21, 0x4F	; 79
      f2:	57 4f       	sbci	r21, 0xF7	; 247
      f4:	54 48       	sbci	r21, 0x84	; 132
      f6:	49 52       	subi	r20, 0x29	; 41
      f8:	44 53       	subi	r20, 0x34	; 52
	...

000000fb <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_4>:
      fb:	47 41 49 4e 5f 53 49 58 54 45 45 4e 00              GAIN_SIXTEEN.

00000108 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_3>:
     108:	47 41 49 4e 5f 45 49 47 48 54 00                    GAIN_EIGHT.

00000113 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_2>:
     113:	47 41 49 4e 5f 46 4f 55 52 00                       GAIN_FOUR.

0000011d <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_1>:
     11d:	47 41 49 4e 5f 54 57 4f 00                          GAIN_TWO.

00000126 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_0>:
     126:	47 41 49 4e 5f 4f 4e 45 00                          GAIN_ONE.

0000012f <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c>:
     12f:	41 44 53 3a 20 00                                   ADS: .

00000135 <_ZZ21button2LongPressStartvE3__c>:
     135:	2a 2a 4d 65 61 73 75 72 65 6d 65 6e 74 20 53 74     **Measurement St
     145:	6f 70 65 64 21 00                                   oped!.

0000014b <_ZZ12button1ClickvE3__c>:
     14b:	2a 2a 4d 65 61 73 75 72 65 6d 65 6e 74 20 53 74     **Measurement St
     15b:	61 72 74 65 64 21 00                                arted!.

00000162 <_ZZ12lcdClearCellhhhE3__c>:
     162:	20 00                                                .

00000164 <_ZZ22showStaticWindingCharsvE3__c_1>:
     164:	45 3d 00                                            E=.

00000167 <_ZZ22showStaticWindingCharsvE3__c_0>:
     167:	56 3d 00                                            V=.

0000016a <_ZZ22showStaticWindingCharsvE3__c>:
     16a:	49 3d 00                                            I=.

0000016d <_ZZ22showWindingCharsValueshE3__c_0>:
     16d:	25 00                                               %.

0000016f <_ZZ22showWindingCharsValueshE3__c>:
     16f:	2b 00                                               +.

00000171 <_ZZ18showStaticAmperagevE3__c_0>:
     171:	4d 00                                               M.

00000173 <_ZZ18showStaticAmperagevE3__c>:
     173:	50 00                                               P.

00000175 <_ZZ19displayStaticAsModevE3__c_28>:
     175:	53 65 74 75 70 20 72 65 71 75 69 72 65 64 00        Setup required.

00000184 <_ZZ19displayStaticAsModevE3__c_27>:
     184:	4f 6f 6f 6f 70 73 21 00                             Oooops!.

0000018c <_ZZ19displayStaticAsModevE3__c_26>:
     18c:	42 31 3d 77 6f 72 6b 3b 20 42 32 3d 73 74 6f 70     B1=work; B2=stop
	...

0000019d <_ZZ19displayStaticAsModevE3__c_25>:
     19d:	4d 65 61 73 75 72 65 6d 65 6e 74 00                 Measurement.

000001a9 <_ZZ19displayStaticAsModevE3__c_24>:
     1a9:	41 43 00                                            AC.

000001ac <_ZZ19displayStaticAsModevE3__c_23>:
     1ac:	42 43 00                                            BC.

000001af <_ZZ19displayStaticAsModevE3__c_22>:
     1af:	41 42 00                                            AB.

000001b2 <_ZZ19displayStaticAsModevE3__c_21>:
     1b2:	41 43 00                                            AC.

000001b5 <_ZZ19displayStaticAsModevE3__c_20>:
     1b5:	42 43 00                                            BC.

000001b8 <_ZZ19displayStaticAsModevE3__c_19>:
     1b8:	41 42 00                                            AB.

000001bb <_ZZ19displayStaticAsModevE3__c_18>:
     1bb:	65 25 00                                            e%.

000001be <_ZZ19displayStaticAsModevE3__c_17>:
     1be:	49 33 3d 00                                         I3=.

000001c2 <_ZZ19displayStaticAsModevE3__c_16>:
     1c2:	49 32 3d 00                                         I2=.

000001c6 <_ZZ19displayStaticAsModevE3__c_15>:
     1c6:	49 31 3d 00                                         I1=.

000001ca <_ZZ19displayStaticAsModevE3__c_14>:
     1ca:	41 43 3d 00                                         AC=.

000001ce <_ZZ19displayStaticAsModevE3__c_13>:
     1ce:	42 43 3d 00                                         BC=.

000001d2 <_ZZ19displayStaticAsModevE3__c_12>:
     1d2:	41 42 3d 00                                         AB=.

000001d6 <_ZZ19displayStaticAsModevE3__c_11>:
     1d6:	45 43 6f 75 6e 74 00                                ECount.

000001dd <_ZZ19displayStaticAsModevE3__c_10>:
     1dd:	41 6d 20 41 43 00                                   Am AC.

000001e3 <_ZZ19displayStaticAsModevE3__c_9>:
     1e3:	41 6d 20 42 43 00                                   Am BC.

000001e9 <_ZZ19displayStaticAsModevE3__c_8>:
     1e9:	41 6d 20 41 42 00                                   Am AB.

000001ef <_ZZ19displayStaticAsModevE3__c_7>:
     1ef:	56 6d 20 41 43 00                                   Vm AC.

000001f5 <_ZZ19displayStaticAsModevE3__c_6>:
     1f5:	56 6d 20 42 43 00                                   Vm BC.

000001fb <_ZZ19displayStaticAsModevE3__c_5>:
     1fb:	56 6d 20 41 42 00                                   Vm AB.

00000201 <_ZZ19displayStaticAsModevE3__c_4>:
     201:	52 33 20 41 43 00                                   R3 AC.

00000207 <_ZZ19displayStaticAsModevE3__c_3>:
     207:	52 32 20 42 43 00                                   R2 BC.

0000020d <_ZZ19displayStaticAsModevE3__c_2>:
     20d:	52 31 20 41 42 00                                   R1 AB.

00000213 <_ZZ19displayStaticAsModevE3__c_1>:
     213:	56 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     V gain maxV/step
	...

00000224 <_ZZ19displayStaticAsModevE3__c_0>:
     224:	41 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     A gain maxV/step
	...

00000235 <_ZZ19displayStaticAsModevE3__c>:
     235:	43 6f 6e 6e 65 63 74 69 6f 6e 20 74 79 70 65 00     Connection type.

00000245 <_ZZ19lcdPrintCriticalLvlhE3__c>:
     245:	2b 00                                               +.

00000247 <_ZZ27lcdPrinRoundedCurErrorLevelhE3__c>:
     247:	2b 00                                               +.

00000249 <_ZZ13displayAsModevE3__c_1>:
     249:	78 00                                               x.

0000024b <_ZZ13displayAsModevE3__c_0>:
     24b:	54 72 69 61 6e 67 6c 65 00                          Triangle.

00000254 <_ZZ13displayAsModevE3__c>:
     254:	53 74 61 72 00                                      Star.

00000259 <_ZZ12showGainInfovE3__c_4>:
     259:	30 2e 32 35 36 20 30 2e 30 30 37 38 31 32 35 00     0.256 0.0078125.

00000269 <_ZZ12showGainInfovE3__c_3>:
     269:	30 2e 35 31 32 20 30 2e 30 31 35 36 32 35 00        0.512 0.015625.

00000278 <_ZZ12showGainInfovE3__c_2>:
     278:	31 2e 30 32 34 20 30 2e 30 33 31 32 35 00           1.024 0.03125.

00000286 <_ZZ12showGainInfovE3__c_1>:
     286:	32 2e 30 34 38 20 30 2e 30 36 32 35 00              2.048 0.0625.

00000293 <_ZZ12showGainInfovE3__c_0>:
     293:	34 2e 30 39 36 20 30 2e 31 32 35 00                 4.096 0.125.

0000029f <_ZZ12showGainInfovE3__c>:
     29f:	36 2e 31 34 34 20 30 2e 31 38 37 35 00              6.144 0.1875.

000002ac <_ZZ4loopE3__c_7>:
     2ac:	57 41 52 4e 49 4e 47 21 21 21 20 4d 65 61 73 75     WARNING!!! Measu
     2bc:	72 65 6d 65 6e 74 20 53 74 6f 70 65 64 20 49 43     rement Stoped IC
     2cc:	20 45 58 49 53 54 53 21 00                           EXISTS!.

000002d5 <_ZZ4loopE3__c_6>:
     2d5:	2d 2d 2d 65 6e 64 2d 2d 2d 00                       ---end---.

000002df <_ZZ4loopE3__c_5>:
     2df:	2d 2d 2d 00                                         ---.

000002e3 <_ZZ4loopE3__c_4>:
     2e3:	65 72 72 6f 72 20 3d 20 00                          error = .

000002ec <_ZZ4loopE3__c_3>:
     2ec:	70 65 72 66 65 63 74 20 61 6d 70 65 72 61 67 65     perfect amperage
     2fc:	20 3d 20 00                                          = .

00000300 <_ZZ4loopE3__c_2>:
     300:	6d 65 61 73 75 72 65 64 20 61 6d 70 65 72 61 67     measured amperag
     310:	65 20 3d 20 00                                      e = .

00000315 <_ZZ4loopE3__c_1>:
     315:	6d 65 61 73 75 72 65 64 20 76 6f 6c 74 61 67 65     measured voltage
     325:	20 3d 20 00                                          = .

00000329 <_ZZ4loopE3__c_0>:
     329:	7c 00                                               |.

0000032b <_ZZ4loopE3__c>:
     32b:	57 69 6e 64 69 6e 67 20 7c 00                       Winding |.

00000335 <_ZZ18checkIsReadyToWorkvE3__c>:
     335:	4e 65 65 64 20 73 65 74 75 70 20 70 61 72 61 6d     Need setup param
     345:	73 00                                               s.

00000347 <_ZZ5setupE3__c_18>:
     347:	53 74 61 6e 64 20 62 79 2e 2e 2e 00                 Stand by....

00000353 <_ZZ5setupE3__c_17>:
     353:	43 6f 6d 70 6c 65 74 65 64 21 00                    Completed!.

0000035e <_ZZ5setupE3__c_16>:
     35e:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 61 63     amperage_mult_ac
     36e:	3a 20 00                                            : .

00000371 <_ZZ5setupE3__c_15>:
     371:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 62 63     amperage_mult_bc
     381:	3a 20 00                                            : .

00000384 <_ZZ5setupE3__c_14>:
     384:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 61 62     amperage_mult_ab
     394:	3a 20 00                                            : .

00000397 <_ZZ5setupE3__c_13>:
     397:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 61 63 3a     voltage_mult_ac:
     3a7:	20 00                                                .

000003a9 <_ZZ5setupE3__c_12>:
     3a9:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 62 63 3a     voltage_mult_bc:
     3b9:	20 00                                                .

000003bb <_ZZ5setupE3__c_11>:
     3bb:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 61 62 3a     voltage_mult_ab:
     3cb:	20 00                                                .

000003cd <_ZZ5setupE3__c_10>:
     3cd:	69 6d 70 65 64 61 6e 63 65 5f 61 63 3a 20 00        impedance_ac: .

000003dc <_ZZ5setupE3__c_9>:
     3dc:	69 6d 70 65 64 61 6e 63 65 5f 62 63 3a 20 00        impedance_bc: .

000003eb <_ZZ5setupE3__c_8>:
     3eb:	69 6d 70 65 64 61 6e 63 65 5f 61 62 3a 20 00        impedance_ab: .

000003fa <_ZZ5setupE3__c_7>:
     3fa:	63 6f 6e 6e 65 63 74 69 6f 6e 5f 74 79 70 65 3a     connection_type:
     40a:	20 00                                                .

0000040c <_ZZ5setupE3__c_6>:
     40c:	67 61 69 6e 5f 76 6f 6c 74 61 67 65 3a 20 00        gain_voltage: .

0000041b <_ZZ5setupE3__c_5>:
     41b:	67 61 69 6e 5f 61 6d 70 65 72 61 67 65 3a 20 00     gain_amperage: .

0000042b <_ZZ5setupE3__c_4>:
     42b:	45 45 50 52 4f 4d 20 76 61 6c 75 65 73 3a 00        EEPROM values:.

0000043a <_ZZ5setupE3__c_3>:
     43a:	45 45 50 52 4f 4d 20 66 69 72 73 74 20 73 74 61     EEPROM first sta
     44a:	72 74 20 77 72 69 74 65 64 21 00                    rt writed!.

00000455 <_ZZ5setupE3__c_2>:
     455:	42 75 74 74 6f 6e 20 32 20 69 6e 69 74 65 64 21     Button 2 inited!
	...

00000466 <_ZZ5setupE3__c_1>:
     466:	42 75 74 74 6f 6e 20 31 20 69 6e 69 74 65 64 21     Button 1 inited!
	...

00000477 <_ZZ5setupE3__c_0>:
     477:	4c 43 44 20 69 6e 69 74 65 64 21 00                 LCD inited!.

00000483 <_ZZ5setupE3__c>:
     483:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 2e 2e     Initialization..
     493:	2e 00                                               ..

00000495 <digital_pin_to_timer_PGM>:
     495:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     4a5:	00 00 00 00                                         ....

000004a9 <digital_pin_to_bit_mask_PGM>:
     4a9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     4b9:	04 08 10 20                                         ... 

000004bd <digital_pin_to_port_PGM>:
     4bd:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4cd:	03 03 03 03                                         ....

000004d1 <port_to_input_PGM>:
     4d1:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000004db <port_to_output_PGM>:
     4db:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004e5 <port_to_mode_PGM>:
     4e5:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000004f0 <__ctors_start>:
     4f0:	c7 11       	cpse	r28, r7
     4f2:	86 18       	sub	r8, r6
     4f4:	6b 1c       	adc	r6, r11

000004f6 <__ctors_end>:
     4f6:	11 24       	eor	r1, r1
     4f8:	1f be       	out	0x3f, r1	; 63
     4fa:	cf ef       	ldi	r28, 0xFF	; 255
     4fc:	d8 e0       	ldi	r29, 0x08	; 8
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	cd bf       	out	0x3d, r28	; 61

00000502 <__do_copy_data>:
     502:	11 e0       	ldi	r17, 0x01	; 1
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b1 e0       	ldi	r27, 0x01	; 1
     508:	e6 e2       	ldi	r30, 0x26	; 38
     50a:	f2 e4       	ldi	r31, 0x42	; 66
     50c:	02 c0       	rjmp	.+4      	; 0x512 <__do_copy_data+0x10>
     50e:	05 90       	lpm	r0, Z+
     510:	0d 92       	st	X+, r0
     512:	a2 3b       	cpi	r26, 0xB2	; 178
     514:	b1 07       	cpc	r27, r17
     516:	d9 f7       	brne	.-10     	; 0x50e <__do_copy_data+0xc>

00000518 <__do_clear_bss>:
     518:	23 e0       	ldi	r18, 0x03	; 3
     51a:	a2 eb       	ldi	r26, 0xB2	; 178
     51c:	b1 e0       	ldi	r27, 0x01	; 1
     51e:	01 c0       	rjmp	.+2      	; 0x522 <.do_clear_bss_start>

00000520 <.do_clear_bss_loop>:
     520:	1d 92       	st	X+, r1

00000522 <.do_clear_bss_start>:
     522:	aa 3c       	cpi	r26, 0xCA	; 202
     524:	b2 07       	cpc	r27, r18
     526:	e1 f7       	brne	.-8      	; 0x520 <.do_clear_bss_loop>

00000528 <__do_global_ctors>:
     528:	12 e0       	ldi	r17, 0x02	; 2
     52a:	cb e7       	ldi	r28, 0x7B	; 123
     52c:	d2 e0       	ldi	r29, 0x02	; 2
     52e:	04 c0       	rjmp	.+8      	; 0x538 <__do_global_ctors+0x10>
     530:	21 97       	sbiw	r28, 0x01	; 1
     532:	fe 01       	movw	r30, r28
     534:	0e 94 cf 20 	call	0x419e	; 0x419e <__tablejump2__>
     538:	c8 37       	cpi	r28, 0x78	; 120
     53a:	d1 07       	cpc	r29, r17
     53c:	c9 f7       	brne	.-14     	; 0x530 <__do_global_ctors+0x8>
     53e:	0e 94 99 1c 	call	0x3932	; 0x3932 <main>
     542:	0c 94 11 21 	jmp	0x4222	; 0x4222 <_exit>

00000546 <__bad_interrupt>:
     546:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000054a <_Z18checkIsReadyToWorkv>:
}

/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd ee       	ldi	r28, 0xED	; 237
     550:	d1 e0       	ldi	r29, 0x01	; 1
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
     552:	69 91       	ld	r22, Y+
     554:	79 91       	ld	r23, Y+
     556:	89 91       	ld	r24, Y+
     558:	99 91       	ld	r25, Y+
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	a9 01       	movw	r20, r18
     560:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
     564:	88 23       	and	r24, r24
     566:	e1 f0       	breq	.+56     	; 0x5a0 <_Z18checkIsReadyToWorkv+0x56>
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	a9 01       	movw	r20, r18
     56e:	6f 89       	ldd	r22, Y+23	; 0x17
     570:	78 8d       	ldd	r23, Y+24	; 0x18
     572:	89 8d       	ldd	r24, Y+25	; 0x19
     574:	9a 8d       	ldd	r25, Y+26	; 0x1a
     576:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
     57a:	88 23       	and	r24, r24
     57c:	89 f0       	breq	.+34     	; 0x5a0 <_Z18checkIsReadyToWorkv+0x56>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	a9 01       	movw	r20, r18
     584:	6b 85       	ldd	r22, Y+11	; 0x0b
     586:	7c 85       	ldd	r23, Y+12	; 0x0c
     588:	8d 85       	ldd	r24, Y+13	; 0x0d
     58a:	9e 85       	ldd	r25, Y+14	; 0x0e
     58c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
     590:	88 23       	and	r24, r24
     592:	31 f0       	breq	.+12     	; 0x5a0 <_Z18checkIsReadyToWorkv+0x56>
/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	c9 3f       	cpi	r28, 0xF9	; 249
     598:	d8 07       	cpc	r29, r24
     59a:	d9 f6       	brne	.-74     	; 0x552 <_Z18checkIsReadyToWorkv+0x8>

/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
	bool isReadyToWork = true;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <_Z18checkIsReadyToWorkv+0x58>
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
			isReadyToWork = false;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
		
	settings.isSetupMode = false;
     5a2:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <settings+0x12>
	if (isReadyToWork) {
     5a6:	88 23       	and	r24, r24
     5a8:	31 f0       	breq	.+12     	; 0x5b6 <_Z18checkIsReadyToWorkv+0x6c>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
     5aa:	85 e1       	ldi	r24, 0x15	; 21
     5ac:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
	}
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret
		
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
     5b6:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <modeWork>
		Serial.println(F("Need setup params"));
     5ba:	65 e3       	ldi	r22, 0x35	; 53
     5bc:	73 e0       	ldi	r23, 0x03	; 3
     5be:	84 e2       	ldi	r24, 0x24	; 36
     5c0:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
     5c6:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>

000005ca <_Z11initAvgVarsv>:
}

/*
	Обнуление переменных - средние значения характеристик и сбрасываем счетчик измерений
*/
void initAvgVars() {
     5ca:	e4 e4       	ldi	r30, 0x44	; 68
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
	for (byte i = 0; i < 3; i++) {
		adsChars.sumVoltage[i] = 0;
     5ce:	11 92       	st	Z+, r1
     5d0:	11 92       	st	Z+, r1
     5d2:	11 92       	st	Z+, r1
     5d4:	11 92       	st	Z+, r1
		adsChars.sumMeasuredAmperage[i] = 0;
     5d6:	10 86       	std	Z+8, r1	; 0x08
     5d8:	11 86       	std	Z+9, r1	; 0x09
     5da:	12 86       	std	Z+10, r1	; 0x0a
     5dc:	13 86       	std	Z+11, r1	; 0x0b

/*
	Обнуление переменных - средние значения характеристик и сбрасываем счетчик измерений
*/
void initAvgVars() {
	for (byte i = 0; i < 3; i++) {
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	e0 35       	cpi	r30, 0x50	; 80
     5e2:	f8 07       	cpc	r31, r24
     5e4:	a1 f7       	brne	.-24     	; 0x5ce <_Z11initAvgVarsv+0x4>
		adsChars.sumVoltage[i] = 0;
		adsChars.sumMeasuredAmperage[i] = 0;
	}
	adsChars.currentMeasurement = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <adsChars+0x3d>
     5ec:	08 95       	ret

000005ee <_Z12button1Clickv>:
}

/*
	Обработчика короткого клика первой клавиши
*/
void button1Click() {
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
	// Если мы в настройках сопротивления то ничего не делать
	if (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC) {
     5f6:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
     5fa:	96 ef       	ldi	r25, 0xF6	; 246
     5fc:	98 0f       	add	r25, r24
     5fe:	93 30       	cpi	r25, 0x03	; 3
     600:	08 f4       	brcc	.+2      	; 0x604 <_Z12button1Clickv+0x16>
     602:	78 c0       	rjmp	.+240    	; 0x6f4 <_Z12button1Clickv+0x106>
		return;
	}
	// Если мы в любых других настройках
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	98 0f       	add	r25, r24
     608:	9c 30       	cpi	r25, 0x0C	; 12
     60a:	08 f0       	brcs	.+2      	; 0x60e <_Z12button1Clickv+0x20>
     60c:	53 c0       	rjmp	.+166    	; 0x6b4 <_Z12button1Clickv+0xc6>
		lcdUpdateScreen = true;
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	01 f5       	brne	.+64     	; 0x658 <_Z12button1Clickv+0x6a>
			// Режим выбора подключения обмотки - изменяем его
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR;
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	a9 01       	movw	r20, r18
     61e:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
     622:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
     626:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
     62a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
     62e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
     632:	88 23       	and	r24, r24
     634:	21 f0       	breq	.+8      	; 0x63e <_Z12button1Clickv+0x50>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	dc 01       	movw	r26, r24
     63c:	04 c0       	rjmp	.+8      	; 0x646 <_Z12button1Clickv+0x58>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	a0 e8       	ldi	r26, 0x80	; 128
     644:	bf e3       	ldi	r27, 0x3F	; 63
     646:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <setDigit>
     64a:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <setDigit+0x1>
     64e:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <setDigit+0x2>
     652:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <setDigit+0x3>
     656:	4e c0       	rjmp	.+156    	; 0x6f4 <_Z12button1Clickv+0x106>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в большую сторону
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			// Любой другой режим увеличиваем значение на величину curMultiplier
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     658:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <setDigit+0x4>
     65c:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <setDigit+0x5>
     660:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <setDigit+0x6>
     664:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <setDigit+0x7>
     668:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
     66c:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
     670:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
     674:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
     678:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3>
     67c:	6b 01       	movw	r12, r22
     67e:	7c 01       	movw	r14, r24
			if (setDigit.value >= 1000) {
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	4a e7       	ldi	r20, 0x7A	; 122
     686:	54 e4       	ldi	r21, 0x44	; 68
     688:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
     68c:	87 ff       	sbrs	r24, 7
     68e:	09 c0       	rjmp	.+18     	; 0x6a2 <_Z12button1Clickv+0xb4>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в большую сторону
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			// Любой другой режим увеличиваем значение на величину curMultiplier
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     690:	c0 92 c5 01 	sts	0x01C5, r12	; 0x8001c5 <setDigit>
     694:	d0 92 c6 01 	sts	0x01C6, r13	; 0x8001c6 <setDigit+0x1>
     698:	e0 92 c7 01 	sts	0x01C7, r14	; 0x8001c7 <setDigit+0x2>
     69c:	f0 92 c8 01 	sts	0x01C8, r15	; 0x8001c8 <setDigit+0x3>
     6a0:	29 c0       	rjmp	.+82     	; 0x6f4 <_Z12button1Clickv+0x106>
			if (setDigit.value >= 1000) {
				setDigit.value = 0;
     6a2:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <setDigit>
     6a6:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <setDigit+0x1>
     6aa:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <setDigit+0x2>
     6ae:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <setDigit+0x3>
     6b2:	20 c0       	rjmp	.+64     	; 0x6f4 <_Z12button1Clickv+0x106>
		}
		return;	
	}
	
	// В режиме отображения данных листаем вперед меню
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
     6b4:	93 ef       	ldi	r25, 0xF3	; 243
     6b6:	98 0f       	add	r25, r24
     6b8:	98 30       	cpi	r25, 0x08	; 8
     6ba:	40 f4       	brcc	.+16     	; 0x6cc <_Z12button1Clickv+0xde>
		modeWork.current = modeWork.current == MW_SHOWING_STOP? MW_SHOWING_START: modeWork.current + 1;
     6bc:	84 31       	cpi	r24, 0x14	; 20
     6be:	11 f0       	breq	.+4      	; 0x6c4 <_Z12button1Clickv+0xd6>
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <_Z12button1Clickv+0xd8>
     6c4:	8d e0       	ldi	r24, 0x0D	; 13
     6c6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
		return;
     6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <_Z12button1Clickv+0x106>
	}
	
	// Если вопрос о начале измерений, то клик его подтверждает
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
     6cc:	85 31       	cpi	r24, 0x15	; 21
     6ce:	91 f4       	brne	.+36     	; 0x6f4 <_Z12button1Clickv+0x106>
		modeWork.current = MW_SHOWING_START;
     6d0:	8d e0       	ldi	r24, 0x0D	; 13
     6d2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
		settings.isReadyToWork = MM_WORK;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <settings>
		
		Serial.println(F("**Measurement Started!"));
     6dc:	6b e4       	ldi	r22, 0x4B	; 75
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	84 e2       	ldi	r24, 0x24	; 36
     6e2:	93 e0       	ldi	r25, 0x03	; 3
     6e4:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
		initAvgVars();
		return;
	}
}
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
		modeWork.current = MW_SHOWING_START;
		settings.isReadyToWork = MM_WORK;
		
		Serial.println(F("**Measurement Started!"));
		initAvgVars();
     6f0:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_Z11initAvgVarsv>
		return;
	}
}
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	08 95       	ret

000006fe <_Z19getICLevelByWindingfh>:
/*
	Получения степени отклонения силы тока идеального от измеренного по обмотке
	_amperage - измеренное значение тока
	_num - номер обмотки
*/
float getICLevelByWinding(float _amperage, byte _num) {
     6fe:	8f 92       	push	r8
     700:	9f 92       	push	r9
     702:	af 92       	push	r10
     704:	bf 92       	push	r11
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	6b 01       	movw	r12, r22
     710:	7c 01       	movw	r14, r24
	if (adsChars.perfectAmperage[_num] >= _amperage) {
     712:	84 e0       	ldi	r24, 0x04	; 4
     714:	48 9f       	mul	r20, r24
     716:	f0 01       	movw	r30, r0
     718:	11 24       	eor	r1, r1
     71a:	e8 5c       	subi	r30, 0xC8	; 200
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	80 80       	ld	r8, Z
     720:	91 80       	ldd	r9, Z+1	; 0x01
     722:	a2 80       	ldd	r10, Z+2	; 0x02
     724:	b3 80       	ldd	r11, Z+3	; 0x03
     726:	a7 01       	movw	r20, r14
     728:	96 01       	movw	r18, r12
     72a:	c5 01       	movw	r24, r10
     72c:	b4 01       	movw	r22, r8
     72e:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
     732:	87 ff       	sbrs	r24, 7
     734:	30 c0       	rjmp	.+96     	; 0x796 <_Z19getICLevelByWindingfh+0x98>
		return 0;
	}
	return abs(_amperage - adsChars.perfectAmperage[_num]) * 100.0 / (adsChars.perfectAmperage[_num] * 0.20);
     736:	a5 01       	movw	r20, r10
     738:	94 01       	movw	r18, r8
     73a:	c7 01       	movw	r24, r14
     73c:	b6 01       	movw	r22, r12
     73e:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
     742:	6b 01       	movw	r12, r22
     744:	7c 01       	movw	r14, r24
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	a9 01       	movw	r20, r18
     74c:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
     750:	18 16       	cp	r1, r24
     752:	3c f4       	brge	.+14     	; 0x762 <_Z19getICLevelByWindingfh+0x64>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	48 ec       	ldi	r20, 0xC8	; 200
     75a:	52 e4       	ldi	r21, 0x42	; 66
     75c:	c7 01       	movw	r24, r14
     75e:	b6 01       	movw	r22, r12
     760:	07 c0       	rjmp	.+14     	; 0x770 <_Z19getICLevelByWindingfh+0x72>
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	90 58       	subi	r25, 0x80	; 128
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	48 ec       	ldi	r20, 0xC8	; 200
     76e:	52 e4       	ldi	r21, 0x42	; 66
     770:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
     778:	2d ec       	ldi	r18, 0xCD	; 205
     77a:	3c ec       	ldi	r19, 0xCC	; 204
     77c:	4c e4       	ldi	r20, 0x4C	; 76
     77e:	5e e3       	ldi	r21, 0x3E	; 62
     780:	c5 01       	movw	r24, r10
     782:	b4 01       	movw	r22, r8
     784:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
     788:	9b 01       	movw	r18, r22
     78a:	ac 01       	movw	r20, r24
     78c:	c7 01       	movw	r24, r14
     78e:	b6 01       	movw	r22, r12
     790:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
     794:	03 c0       	rjmp	.+6      	; 0x79c <_Z19getICLevelByWindingfh+0x9e>
	_amperage - измеренное значение тока
	_num - номер обмотки
*/
float getICLevelByWinding(float _amperage, byte _num) {
	if (adsChars.perfectAmperage[_num] >= _amperage) {
		return 0;
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	cb 01       	movw	r24, r22
	}
	return abs(_amperage - adsChars.perfectAmperage[_num]) * 100.0 / (adsChars.perfectAmperage[_num] * 0.20);
}
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	df 90       	pop	r13
     7a2:	cf 90       	pop	r12
     7a4:	bf 90       	pop	r11
     7a6:	af 90       	pop	r10
     7a8:	9f 90       	pop	r9
     7aa:	8f 90       	pop	r8
     7ac:	08 95       	ret

000007ae <_Z17isFullErrorExistsPfS_>:
 * Проверка наличия отклоеннеия.
 * Ошибка проверяется только при положительных разностях
 * _amperage - массив измеренных токов
 * _voltage - массив измеренных напряжений
*/
bool isFullErrorExists(float* _amperage, float* _voltage) {
     7ae:	4f 92       	push	r4
     7b0:	5f 92       	push	r5
     7b2:	6f 92       	push	r6
     7b4:	7f 92       	push	r7
     7b6:	8f 92       	push	r8
     7b8:	9f 92       	push	r9
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	60 97       	sbiw	r28, 0x10	; 16
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
	float divAmperage[3] = {0, 0, 0};
     7de:	19 82       	std	Y+1, r1	; 0x01
     7e0:	1a 82       	std	Y+2, r1	; 0x02
     7e2:	1b 82       	std	Y+3, r1	; 0x03
     7e4:	1c 82       	std	Y+4, r1	; 0x04
     7e6:	1d 82       	std	Y+5, r1	; 0x05
     7e8:	1e 82       	std	Y+6, r1	; 0x06
     7ea:	1f 82       	std	Y+7, r1	; 0x07
     7ec:	18 86       	std	Y+8, r1	; 0x08
     7ee:	19 86       	std	Y+9, r1	; 0x09
     7f0:	1a 86       	std	Y+10, r1	; 0x0a
     7f2:	1b 86       	std	Y+11, r1	; 0x0b
     7f4:	1c 86       	std	Y+12, r1	; 0x0c
     7f6:	7b 01       	movw	r14, r22
     7f8:	2d ee       	ldi	r18, 0xED	; 237
     7fa:	82 2e       	mov	r8, r18
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	92 2e       	mov	r9, r18
     800:	38 e3       	ldi	r19, 0x38	; 56
     802:	a3 2e       	mov	r10, r19
     804:	31 e0       	ldi	r19, 0x01	; 1
     806:	b3 2e       	mov	r11, r19
     808:	6c 01       	movw	r12, r24
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5f       	subi	r16, 0xFF	; 255
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	3b 01       	movw	r6, r22
     812:	8c e0       	ldi	r24, 0x0C	; 12
     814:	68 0e       	add	r6, r24
     816:	71 1c       	adc	r7, r1
	byte sign = 100;
	
	// получаем разницу идеального от измеренного тока и изменяем значения счетчика знака
	for(byte i = 0; i < 3; i++) {
		// на ходу вычисляем значения идеального тока
		adsChars.perfectAmperage[i] = _voltage[i] / settings.impedance[i];
     818:	d7 01       	movw	r26, r14
     81a:	6d 91       	ld	r22, X+
     81c:	7d 91       	ld	r23, X+
     81e:	8d 91       	ld	r24, X+
     820:	9d 91       	ld	r25, X+
     822:	7d 01       	movw	r14, r26
     824:	f4 01       	movw	r30, r8
     826:	21 91       	ld	r18, Z+
     828:	31 91       	ld	r19, Z+
     82a:	41 91       	ld	r20, Z+
     82c:	51 91       	ld	r21, Z+
     82e:	4f 01       	movw	r8, r30
     830:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
     834:	d5 01       	movw	r26, r10
     836:	6d 93       	st	X+, r22
     838:	7d 93       	st	X+, r23
     83a:	8d 93       	st	X+, r24
     83c:	9d 93       	st	X+, r25
     83e:	5d 01       	movw	r10, r26
		divAmperage[i] = adsChars.perfectAmperage[i] - _amperage[i];
     840:	f6 01       	movw	r30, r12
     842:	21 91       	ld	r18, Z+
     844:	31 91       	ld	r19, Z+
     846:	41 91       	ld	r20, Z+
     848:	51 91       	ld	r21, Z+
     84a:	6f 01       	movw	r12, r30
     84c:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
     850:	d8 01       	movw	r26, r16
     852:	6d 93       	st	X+, r22
     854:	7d 93       	st	X+, r23
     856:	8d 93       	st	X+, r24
     858:	9d 93       	st	X+, r25
     85a:	8d 01       	movw	r16, r26
	float divAmperage[3] = {0, 0, 0};
	// 100 - магическое число и ничего не значит, прсото для удобства 
	byte sign = 100;
	
	// получаем разницу идеального от измеренного тока и изменяем значения счетчика знака
	for(byte i = 0; i < 3; i++) {
     85c:	e6 14       	cp	r14, r6
     85e:	f7 04       	cpc	r15, r7
     860:	d9 f6       	brne	.-74     	; 0x818 <_Z17isFullErrorExistsPfS_+0x6a>
	// если знак = -97, значит все значения измеренных токов меньше идеальных и замыкания нет
	if (sign == -97) {
		return false;
	}
	// По формуле вычисляем глоабльную ошибку по токам |AB - BC| + |BC - AC| + |AC - AB| 
	float _error = abs(divAmperage[0] - divAmperage[1]) + abs(divAmperage[1] - divAmperage[2]) + abs(divAmperage[2] - divAmperage[0]);
     862:	49 80       	ldd	r4, Y+1	; 0x01
     864:	5a 80       	ldd	r5, Y+2	; 0x02
     866:	6b 80       	ldd	r6, Y+3	; 0x03
     868:	7c 80       	ldd	r7, Y+4	; 0x04
     86a:	8d 80       	ldd	r8, Y+5	; 0x05
     86c:	9e 80       	ldd	r9, Y+6	; 0x06
     86e:	af 80       	ldd	r10, Y+7	; 0x07
     870:	b8 84       	ldd	r11, Y+8	; 0x08
     872:	a5 01       	movw	r20, r10
     874:	94 01       	movw	r18, r8
     876:	c3 01       	movw	r24, r6
     878:	b2 01       	movw	r22, r4
     87a:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
     87e:	6b 01       	movw	r12, r22
     880:	7c 01       	movw	r14, r24
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	a9 01       	movw	r20, r18
     888:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
     88c:	18 16       	cp	r1, r24
     88e:	24 f0       	brlt	.+8      	; 0x898 <_Z17isFullErrorExistsPfS_+0xea>
     890:	f7 fa       	bst	r15, 7
     892:	f0 94       	com	r15
     894:	f7 f8       	bld	r15, 7
     896:	f0 94       	com	r15
     898:	89 85       	ldd	r24, Y+9	; 0x09
     89a:	9a 85       	ldd	r25, Y+10	; 0x0a
     89c:	ab 85       	ldd	r26, Y+11	; 0x0b
     89e:	bc 85       	ldd	r27, Y+12	; 0x0c
     8a0:	8d 87       	std	Y+13, r24	; 0x0d
     8a2:	9e 87       	std	Y+14, r25	; 0x0e
     8a4:	af 87       	std	Y+15, r26	; 0x0f
     8a6:	b8 8b       	std	Y+16, r27	; 0x10
     8a8:	9c 01       	movw	r18, r24
     8aa:	ad 01       	movw	r20, r26
     8ac:	c5 01       	movw	r24, r10
     8ae:	b4 01       	movw	r22, r8
     8b0:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
     8b4:	4b 01       	movw	r8, r22
     8b6:	5c 01       	movw	r10, r24
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	a9 01       	movw	r20, r18
     8be:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
     8c2:	18 16       	cp	r1, r24
     8c4:	24 f0       	brlt	.+8      	; 0x8ce <_Z17isFullErrorExistsPfS_+0x120>
     8c6:	b7 fa       	bst	r11, 7
     8c8:	b0 94       	com	r11
     8ca:	b7 f8       	bld	r11, 7
     8cc:	b0 94       	com	r11
     8ce:	a5 01       	movw	r20, r10
     8d0:	94 01       	movw	r18, r8
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3>
     8da:	6b 01       	movw	r12, r22
     8dc:	7c 01       	movw	r14, r24
     8de:	a3 01       	movw	r20, r6
     8e0:	92 01       	movw	r18, r4
     8e2:	6d 85       	ldd	r22, Y+13	; 0x0d
     8e4:	7e 85       	ldd	r23, Y+14	; 0x0e
     8e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e8:	98 89       	ldd	r25, Y+16	; 0x10
     8ea:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
     8ee:	4b 01       	movw	r8, r22
     8f0:	5c 01       	movw	r10, r24
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	a9 01       	movw	r20, r18
     8f8:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
     8fc:	18 16       	cp	r1, r24
     8fe:	24 f0       	brlt	.+8      	; 0x908 <__stack+0x9>
     900:	b7 fa       	bst	r11, 7
     902:	b0 94       	com	r11
     904:	b7 f8       	bld	r11, 7
     906:	b0 94       	com	r11
     908:	a7 01       	movw	r20, r14
     90a:	96 01       	movw	r18, r12
     90c:	c5 01       	movw	r24, r10
     90e:	b4 01       	movw	r22, r8
     910:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3>
     914:	6b 01       	movw	r12, r22
     916:	7c 01       	movw	r14, r24
     918:	2a e9       	ldi	r18, 0x9A	; 154
     91a:	39 e9       	ldi	r19, 0x99	; 153
     91c:	49 e9       	ldi	r20, 0x99	; 153
     91e:	5f e3       	ldi	r21, 0x3F	; 63
     920:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
     924:	9b 01       	movw	r18, r22
     926:	ac 01       	movw	r20, r24
     928:	11 e0       	ldi	r17, 0x01	; 1
     92a:	c7 01       	movw	r24, r14
     92c:	b6 01       	movw	r22, r12
     92e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
     932:	18 16       	cp	r1, r24
     934:	0c f4       	brge	.+2      	; 0x938 <__stack+0x39>
     936:	10 e0       	ldi	r17, 0x00	; 0

	// пока дадим 20% допуска отклонения общей величины
	return !(_error <= _error * 1.20);
}
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	81 27       	eor	r24, r17
     93c:	60 96       	adiw	r28, 0x10	; 16
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	9f 90       	pop	r9
     95e:	8f 90       	pop	r8
     960:	7f 90       	pop	r7
     962:	6f 90       	pop	r6
     964:	5f 90       	pop	r5
     966:	4f 90       	pop	r4
     968:	08 95       	ret

0000096a <_Z12getAdsParamsv>:
}

/**
 * Получение параметров с АЦП
 */
void getAdsParams() {
     96a:	2f 92       	push	r2
     96c:	3f 92       	push	r3
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	a5 97       	sbiw	r28, 0x25	; 37
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
	// Временные данные по напряжению, току и иделаьному току
	float measuredVoltage[3] = {0, 0, 0};
     99e:	1d 86       	std	Y+13, r1	; 0x0d
     9a0:	1e 86       	std	Y+14, r1	; 0x0e
     9a2:	1f 86       	std	Y+15, r1	; 0x0f
     9a4:	18 8a       	std	Y+16, r1	; 0x10
     9a6:	19 8a       	std	Y+17, r1	; 0x11
     9a8:	1a 8a       	std	Y+18, r1	; 0x12
     9aa:	1b 8a       	std	Y+19, r1	; 0x13
     9ac:	1c 8a       	std	Y+20, r1	; 0x14
     9ae:	1d 8a       	std	Y+21, r1	; 0x15
     9b0:	1e 8a       	std	Y+22, r1	; 0x16
     9b2:	1f 8a       	std	Y+23, r1	; 0x17
     9b4:	18 8e       	std	Y+24, r1	; 0x18
	float measuredAmperage[3] = {0, 0, 0};
     9b6:	19 82       	std	Y+1, r1	; 0x01
     9b8:	1a 82       	std	Y+2, r1	; 0x02
     9ba:	1b 82       	std	Y+3, r1	; 0x03
     9bc:	1c 82       	std	Y+4, r1	; 0x04
     9be:	1d 82       	std	Y+5, r1	; 0x05
     9c0:	1e 82       	std	Y+6, r1	; 0x06
     9c2:	1f 82       	std	Y+7, r1	; 0x07
     9c4:	18 86       	std	Y+8, r1	; 0x08
     9c6:	19 86       	std	Y+9, r1	; 0x09
     9c8:	1a 86       	std	Y+10, r1	; 0x0a
     9ca:	1b 86       	std	Y+11, r1	; 0x0b
     9cc:	1c 86       	std	Y+12, r1	; 0x0c
     9ce:	6e 01       	movw	r12, r28
     9d0:	2d e0       	ldi	r18, 0x0D	; 13
     9d2:	c2 0e       	add	r12, r18
     9d4:	d1 1c       	adc	r13, r1
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	7c 01       	movw	r14, r24
     9dc:	4c 01       	movw	r8, r24
     9de:	36 01       	movw	r6, r12
	float perfectAmperage[3] = {0, 0, 0};
		
	// получение данных с ацп для кжадой обмотки
	for (byte i = 0; i < 3; i++) {
     9e0:	10 e0       	ldi	r17, 0x00	; 0
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
     9e2:	61 2f       	mov	r22, r17
     9e4:	8b e5       	ldi	r24, 0x5B	; 91
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     9ec:	bc 01       	movw	r22, r24
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 a4 19 	call	0x3348	; 0x3348 <__floatunsisf>
     9f6:	d3 01       	movw	r26, r6
     9f8:	6d 93       	st	X+, r22
     9fa:	7d 93       	st	X+, r23
     9fc:	8d 93       	st	X+, r24
     9fe:	9d 93       	st	X+, r25
     a00:	3d 01       	movw	r6, r26
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
     a02:	61 2f       	mov	r22, r17
     a04:	86 e5       	ldi	r24, 0x56	; 86
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     a0c:	bc 01       	movw	r22, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 a4 19 	call	0x3348	; 0x3348 <__floatunsisf>
     a16:	f4 01       	movw	r30, r8
     a18:	61 93       	st	Z+, r22
     a1a:	71 93       	st	Z+, r23
     a1c:	81 93       	st	Z+, r24
     a1e:	91 93       	st	Z+, r25
     a20:	4f 01       	movw	r8, r30
	float measuredVoltage[3] = {0, 0, 0};
	float measuredAmperage[3] = {0, 0, 0};
	float perfectAmperage[3] = {0, 0, 0};
		
	// получение данных с ацп для кжадой обмотки
	for (byte i = 0; i < 3; i++) {
     a22:	1f 5f       	subi	r17, 0xFF	; 255
     a24:	13 30       	cpi	r17, 0x03	; 3
     a26:	e9 f6       	brne	.-70     	; 0x9e2 <_Z12getAdsParamsv+0x78>
	for (byte i = 0; i < 3; i++) {
		// увеличиваем данные для усреднения
		adsChars.sumVoltage[i] += measuredVoltage[i];
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
		// вычисляем текущие реальные значения
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierAmperage[i];
     a28:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_start+0x18>
     a2c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_start+0x19>
     a30:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_start+0x1a>
     a34:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_start+0x1b>
     a38:	8e 8f       	std	Y+30, r24	; 0x1e
     a3a:	9f 8f       	std	Y+31, r25	; 0x1f
     a3c:	a8 a3       	std	Y+32, r26	; 0x20
     a3e:	b9 a3       	std	Y+33, r27	; 0x21
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierVoltage[i];
     a40:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_start+0x1c>
     a44:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_start+0x1d>
     a48:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <__data_start+0x1e>
     a4c:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <__data_start+0x1f>
     a50:	8a a3       	std	Y+34, r24	; 0x22
     a52:	9b a3       	std	Y+35, r25	; 0x23
     a54:	ac a3       	std	Y+36, r26	; 0x24
     a56:	bd a3       	std	Y+37, r27	; 0x25
     a58:	00 e2       	ldi	r16, 0x20	; 32
     a5a:	11 e0       	ldi	r17, 0x01	; 1
     a5c:	a7 ee       	ldi	r26, 0xE7	; 231
     a5e:	b1 e0       	ldi	r27, 0x01	; 1
     a60:	ba 8f       	std	Y+26, r27	; 0x1a
     a62:	a9 8f       	std	Y+25, r26	; 0x19
     a64:	dd 8e       	std	Y+29, r13	; 0x1d
     a66:	cc 8e       	std	Y+28, r12	; 0x1c
     a68:	17 01       	movw	r2, r14
     a6a:	b3 e0       	ldi	r27, 0x03	; 3
     a6c:	bb 8f       	std	Y+27, r27	; 0x1b
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}
	
	for (byte i = 0; i < 3; i++) {
		// увеличиваем данные для усреднения
		adsChars.sumVoltage[i] += measuredVoltage[i];
     a6e:	f6 01       	movw	r30, r12
     a70:	81 90       	ld	r8, Z+
     a72:	91 90       	ld	r9, Z+
     a74:	a1 90       	ld	r10, Z+
     a76:	b1 90       	ld	r11, Z+
     a78:	6f 01       	movw	r12, r30
     a7a:	a5 01       	movw	r20, r10
     a7c:	94 01       	movw	r18, r8
     a7e:	d8 01       	movw	r26, r16
     a80:	94 96       	adiw	r26, 0x24	; 36
     a82:	6d 91       	ld	r22, X+
     a84:	7d 91       	ld	r23, X+
     a86:	8d 91       	ld	r24, X+
     a88:	9c 91       	ld	r25, X
     a8a:	97 97       	sbiw	r26, 0x27	; 39
     a8c:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3>
     a90:	f8 01       	movw	r30, r16
     a92:	64 a3       	std	Z+36, r22	; 0x24
     a94:	75 a3       	std	Z+37, r23	; 0x25
     a96:	86 a3       	std	Z+38, r24	; 0x26
     a98:	97 a3       	std	Z+39, r25	; 0x27
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
     a9a:	d1 01       	movw	r26, r2
     a9c:	4d 90       	ld	r4, X+
     a9e:	5d 90       	ld	r5, X+
     aa0:	6d 90       	ld	r6, X+
     aa2:	7c 90       	ld	r7, X
     aa4:	a3 01       	movw	r20, r6
     aa6:	92 01       	movw	r18, r4
     aa8:	60 a9       	ldd	r22, Z+48	; 0x30
     aaa:	71 a9       	ldd	r23, Z+49	; 0x31
     aac:	82 a9       	ldd	r24, Z+50	; 0x32
     aae:	93 a9       	ldd	r25, Z+51	; 0x33
     ab0:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3>
     ab4:	f8 01       	movw	r30, r16
     ab6:	60 ab       	std	Z+48, r22	; 0x30
     ab8:	71 ab       	std	Z+49, r23	; 0x31
     aba:	82 ab       	std	Z+50, r24	; 0x32
     abc:	93 ab       	std	Z+51, r25	; 0x33
		// вычисляем текущие реальные значения
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierAmperage[i];
     abe:	a9 8d       	ldd	r26, Y+25	; 0x19
     ac0:	ba 8d       	ldd	r27, Y+26	; 0x1a
     ac2:	91 96       	adiw	r26, 0x21	; 33
     ac4:	2d 91       	ld	r18, X+
     ac6:	3d 91       	ld	r19, X+
     ac8:	4d 91       	ld	r20, X+
     aca:	5c 91       	ld	r21, X
     acc:	94 97       	sbiw	r26, 0x24	; 36
     ace:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ad0:	7f 8d       	ldd	r23, Y+31	; 0x1f
     ad2:	88 a1       	ldd	r24, Y+32	; 0x20
     ad4:	99 a1       	ldd	r25, Y+33	; 0x21
     ad6:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
     ada:	a5 01       	movw	r20, r10
     adc:	94 01       	movw	r18, r8
     ade:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
     ae2:	ec 8d       	ldd	r30, Y+28	; 0x1c
     ae4:	fd 8d       	ldd	r31, Y+29	; 0x1d
     ae6:	61 93       	st	Z+, r22
     ae8:	71 93       	st	Z+, r23
     aea:	81 93       	st	Z+, r24
     aec:	91 93       	st	Z+, r25
     aee:	fd 8f       	std	Y+29, r31	; 0x1d
     af0:	ec 8f       	std	Y+28, r30	; 0x1c
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierVoltage[i];
     af2:	a9 8d       	ldd	r26, Y+25	; 0x19
     af4:	ba 8d       	ldd	r27, Y+26	; 0x1a
     af6:	55 96       	adiw	r26, 0x15	; 21
     af8:	2d 91       	ld	r18, X+
     afa:	3d 91       	ld	r19, X+
     afc:	4d 91       	ld	r20, X+
     afe:	5c 91       	ld	r21, X
     b00:	58 97       	sbiw	r26, 0x18	; 24
     b02:	6a a1       	ldd	r22, Y+34	; 0x22
     b04:	7b a1       	ldd	r23, Y+35	; 0x23
     b06:	8c a1       	ldd	r24, Y+36	; 0x24
     b08:	9d a1       	ldd	r25, Y+37	; 0x25
     b0a:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
     b0e:	a3 01       	movw	r20, r6
     b10:	92 01       	movw	r18, r4
     b12:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
     b16:	f1 01       	movw	r30, r2
     b18:	61 93       	st	Z+, r22
     b1a:	71 93       	st	Z+, r23
     b1c:	81 93       	st	Z+, r24
     b1e:	91 93       	st	Z+, r25
     b20:	1f 01       	movw	r2, r30
     b22:	fb 8d       	ldd	r31, Y+27	; 0x1b
     b24:	f1 50       	subi	r31, 0x01	; 1
     b26:	fb 8f       	std	Y+27, r31	; 0x1b
     b28:	0c 5f       	subi	r16, 0xFC	; 252
     b2a:	1f 4f       	sbci	r17, 0xFF	; 255
     b2c:	89 8d       	ldd	r24, Y+25	; 0x19
     b2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b30:	04 96       	adiw	r24, 0x04	; 4
     b32:	9a 8f       	std	Y+26, r25	; 0x1a
     b34:	89 8f       	std	Y+25, r24	; 0x19
	for (byte i = 0; i < 3; i++) {
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}
	
	for (byte i = 0; i < 3; i++) {
     b36:	f1 11       	cpse	r31, r1
     b38:	9a cf       	rjmp	.-204    	; 0xa6e <_Z12getAdsParamsv+0x104>
     b3a:	0d ec       	ldi	r16, 0xCD	; 205
     b3c:	11 e0       	ldi	r17, 0x01	; 1
     b3e:	d1 2c       	mov	r13, r1
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierVoltage[i];
	}
	
	// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
	for (byte i = 0; i < 3; i++) {
		if (isFullErrorExists(measuredAmperage, measuredVoltage)) {
     b40:	be 01       	movw	r22, r28
     b42:	63 5f       	subi	r22, 0xF3	; 243
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z17isFullErrorExistsPfS_>
     b4e:	88 23       	and	r24, r24
     b50:	d9 f0       	breq	.+54     	; 0xb88 <_Z12getAdsParamsv+0x21e>
			if (getICLevelByWinding(measuredAmperage[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
     b52:	d7 01       	movw	r26, r14
     b54:	6d 91       	ld	r22, X+
     b56:	7d 91       	ld	r23, X+
     b58:	8d 91       	ld	r24, X+
     b5a:	9c 91       	ld	r25, X
     b5c:	4d 2d       	mov	r20, r13
     b5e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_Z19getICLevelByWindingfh>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	40 ea       	ldi	r20, 0xA0	; 160
     b68:	51 e4       	ldi	r21, 0x41	; 65
     b6a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
     b6e:	87 fd       	sbrc	r24, 7
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <_Z12getAdsParamsv+0x21e>
     b72:	f8 01       	movw	r30, r16
     b74:	84 85       	ldd	r24, Z+12	; 0x0c
     b76:	95 85       	ldd	r25, Z+13	; 0x0d
     b78:	a6 85       	ldd	r26, Z+14	; 0x0e
     b7a:	b7 85       	ldd	r27, Z+15	; 0x0f
     b7c:	88 3e       	cpi	r24, 0xE8	; 232
     b7e:	f3 e0       	ldi	r31, 0x03	; 3
     b80:	9f 07       	cpc	r25, r31
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	10 f1       	brcs	.+68     	; 0xbcc <_Z12getAdsParamsv+0x262>
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierAmperage[i];
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierVoltage[i];
	}
	
	// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
	for (byte i = 0; i < 3; i++) {
     b88:	d3 94       	inc	r13
     b8a:	24 e0       	ldi	r18, 0x04	; 4
     b8c:	e2 0e       	add	r14, r18
     b8e:	f1 1c       	adc	r15, r1
     b90:	0c 5f       	subi	r16, 0xFC	; 252
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	d8 12       	cpse	r13, r24
     b98:	d3 cf       	rjmp	.-90     	; 0xb40 <_Z12getAdsParamsv+0x1d6>
			if (getICLevelByWinding(measuredAmperage[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
				icError.criticalLvlCount[i]++;
			}
		}
	}
}
     b9a:	a5 96       	adiw	r28, 0x25	; 37
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	bf 90       	pop	r11
     bb8:	af 90       	pop	r10
     bba:	9f 90       	pop	r9
     bbc:	8f 90       	pop	r8
     bbe:	7f 90       	pop	r7
     bc0:	6f 90       	pop	r6
     bc2:	5f 90       	pop	r5
     bc4:	4f 90       	pop	r4
     bc6:	3f 90       	pop	r3
     bc8:	2f 90       	pop	r2
     bca:	08 95       	ret
	
	// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
	for (byte i = 0; i < 3; i++) {
		if (isFullErrorExists(measuredAmperage, measuredVoltage)) {
			if (getICLevelByWinding(measuredAmperage[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
				icError.criticalLvlCount[i]++;
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	a1 1d       	adc	r26, r1
     bd0:	b1 1d       	adc	r27, r1
     bd2:	f8 01       	movw	r30, r16
     bd4:	84 87       	std	Z+12, r24	; 0x0c
     bd6:	95 87       	std	Z+13, r25	; 0x0d
     bd8:	a6 87       	std	Z+14, r26	; 0x0e
     bda:	b7 87       	std	Z+15, r27	; 0x0f
     bdc:	d5 cf       	rjmp	.-86     	; 0xb88 <_Z12getAdsParamsv+0x21e>

00000bde <_Z27lcdPrinRoundedCurErrorLevelh>:

/*
	Отображение округленных значений ошибки в зависимости от обмотки 
	_num - номер обмотки
*/
void lcdPrinRoundedCurErrorLevel(byte _num) {
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
	if (icError.curLvl[_num] < 1000) {
     be6:	24 e0       	ldi	r18, 0x04	; 4
     be8:	82 9f       	mul	r24, r18
     bea:	c0 01       	movw	r24, r0
     bec:	11 24       	eor	r1, r1
     bee:	fc 01       	movw	r30, r24
     bf0:	e3 53       	subi	r30, 0x33	; 51
     bf2:	fe 4f       	sbci	r31, 0xFE	; 254
     bf4:	c0 80       	ld	r12, Z
     bf6:	d1 80       	ldd	r13, Z+1	; 0x01
     bf8:	e2 80       	ldd	r14, Z+2	; 0x02
     bfa:	f3 80       	ldd	r15, Z+3	; 0x03
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	4a e7       	ldi	r20, 0x7A	; 122
     c02:	54 e4       	ldi	r21, 0x44	; 68
     c04:	c7 01       	movw	r24, r14
     c06:	b6 01       	movw	r22, r12
     c08:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
     c0c:	87 ff       	sbrs	r24, 7
     c0e:	24 c0       	rjmp	.+72     	; 0xc58 <_Z27lcdPrinRoundedCurErrorLevelh+0x7a>
		lcd.print(round(icError.curLvl[_num]));
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	a9 01       	movw	r20, r18
     c16:	c7 01       	movw	r24, r14
     c18:	b6 01       	movw	r22, r12
     c1a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	5f e3       	ldi	r21, 0x3F	; 63
     c26:	87 fd       	sbrc	r24, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <_Z27lcdPrinRoundedCurErrorLevelh+0x56>
     c2a:	c7 01       	movw	r24, r14
     c2c:	b6 01       	movw	r22, r12
     c2e:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3>
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <_Z27lcdPrinRoundedCurErrorLevelh+0x5e>
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
     c3c:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__fixsfsi>
     c40:	2a e0       	ldi	r18, 0x0A	; 10
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	ab 01       	movw	r20, r22
     c46:	bc 01       	movw	r22, r24
     c48:	89 eb       	ldi	r24, 0xB9	; 185
     c4a:	91 e0       	ldi	r25, 0x01	; 1
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
	Отображение округленных значений ошибки в зависимости от обмотки 
	_num - номер обмотки
*/
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
     c54:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <_ZN5Print5printEli>
	} else {
		lcd.print(999);
     c58:	4a e0       	ldi	r20, 0x0A	; 10
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	67 ee       	ldi	r22, 0xE7	; 231
     c5e:	73 e0       	ldi	r23, 0x03	; 3
     c60:	89 eb       	ldi	r24, 0xB9	; 185
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN5Print5printEii>
		lcd.print(F("+"));
     c68:	67 e4       	ldi	r22, 0x47	; 71
     c6a:	72 e0       	ldi	r23, 0x02	; 2
     c6c:	89 eb       	ldi	r24, 0xB9	; 185
     c6e:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
	} else {
		lcd.print(999);
		lcd.print(F("+"));
     c78:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>

00000c7c <_Z19lcdPrintCriticalLvlh>:
/*
	Отображение счетчиков выхода за пределы допуска ошибки
	_num - номер обмотки
*/
void lcdPrintCriticalLvl(byte _num) {
	if (icError.criticalLvlCount[_num] < 1000) {
     c7c:	24 e0       	ldi	r18, 0x04	; 4
     c7e:	82 9f       	mul	r24, r18
     c80:	c0 01       	movw	r24, r0
     c82:	11 24       	eor	r1, r1
     c84:	fc 01       	movw	r30, r24
     c86:	e7 52       	subi	r30, 0x27	; 39
     c88:	fe 4f       	sbci	r31, 0xFE	; 254
     c8a:	40 81       	ld	r20, Z
     c8c:	51 81       	ldd	r21, Z+1	; 0x01
     c8e:	62 81       	ldd	r22, Z+2	; 0x02
     c90:	73 81       	ldd	r23, Z+3	; 0x03
     c92:	48 3e       	cpi	r20, 0xE8	; 232
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	58 07       	cpc	r21, r24
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	30 f4       	brcc	.+12     	; 0xcaa <_Z19lcdPrintCriticalLvlh+0x2e>
		lcd.print(icError.criticalLvlCount[_num]);
     c9e:	2a e0       	ldi	r18, 0x0A	; 10
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	89 eb       	ldi	r24, 0xB9	; 185
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <_ZN5Print5printEmi>
	} else {
		lcd.print(999);
     caa:	4a e0       	ldi	r20, 0x0A	; 10
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	67 ee       	ldi	r22, 0xE7	; 231
     cb0:	73 e0       	ldi	r23, 0x03	; 3
     cb2:	89 eb       	ldi	r24, 0xB9	; 185
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN5Print5printEii>
		lcd.print(F("+"));
     cba:	65 e4       	ldi	r22, 0x45	; 69
     cbc:	72 e0       	ldi	r23, 0x02	; 2
     cbe:	89 eb       	ldi	r24, 0xB9	; 185
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>

00000cc6 <_Z18showStaticAmperagev>:

/*
	Отображение дополнительной статики для режима отображения по току
*/
void showStaticAmperage() {
	lcd.setCursor(3, 0);
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	63 e0       	ldi	r22, 0x03	; 3
     cca:	89 eb       	ldi	r24, 0xB9	; 185
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("P"));
     cd2:	63 e7       	ldi	r22, 0x73	; 115
     cd4:	71 e0       	ldi	r23, 0x01	; 1
     cd6:	89 eb       	ldi	r24, 0xB9	; 185
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	89 eb       	ldi	r24, 0xB9	; 185
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("M"));
     cea:	61 e7       	ldi	r22, 0x71	; 113
     cec:	71 e0       	ldi	r23, 0x01	; 1
     cee:	89 eb       	ldi	r24, 0xB9	; 185
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>

00000cf6 <_Z22showStaticWindingCharsv>:
/*
	Отображение статики по обмоткам
	MP значит measured|perfect
*/
void showStaticWindingChars() {
	lcd.setCursor(4, 0);
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	64 e0       	ldi	r22, 0x04	; 4
     cfa:	89 eb       	ldi	r24, 0xB9	; 185
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("I="));
     d02:	6a e6       	ldi	r22, 0x6A	; 106
     d04:	71 e0       	ldi	r23, 0x01	; 1
     d06:	89 eb       	ldi	r24, 0xB9	; 185
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	89 eb       	ldi	r24, 0xB9	; 185
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("V="));
     d1a:	67 e6       	ldi	r22, 0x67	; 103
     d1c:	71 e0       	ldi	r23, 0x01	; 1
     d1e:	89 eb       	ldi	r24, 0xB9	; 185
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(8, 1);
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	68 e0       	ldi	r22, 0x08	; 8
     d2a:	89 eb       	ldi	r24, 0xB9	; 185
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("E="));
     d32:	64 e6       	ldi	r22, 0x64	; 100
     d34:	71 e0       	ldi	r23, 0x01	; 1
     d36:	89 eb       	ldi	r24, 0xB9	; 185
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>

00000d3e <_Z19displayStaticAsModev>:

/*
	Отображение статики в ависимости от режима отображения
*/
void displayStaticAsMode() {
	lcd.clear();
     d3e:	89 eb       	ldi	r24, 0xB9	; 185
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN17LiquidCrystal_I2C5clearEv>
	switch(modeWork.current) {
     d46:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <modeWork>
     d4a:	8e 2f       	mov	r24, r30
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	86 31       	cpi	r24, 0x16	; 22
     d50:	91 05       	cpc	r25, r1
     d52:	08 f0       	brcs	.+2      	; 0xd56 <_Z19displayStaticAsModev+0x18>
     d54:	b4 c0       	rjmp	.+360    	; 0xebe <_Z19displayStaticAsModev+0x180>
     d56:	fc 01       	movw	r30, r24
     d58:	ec 5c       	subi	r30, 0xCC	; 204
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcd.print(F("Connection type"));
     d60:	65 e3       	ldi	r22, 0x35	; 53
     d62:	72 e0       	ldi	r23, 0x02	; 2
     d64:	a8 c0       	rjmp	.+336    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
		break;
		case MW_SETUP_GAIN_AMPERAGE:
			lcd.print(F("A gain maxV/step"));
     d66:	64 e2       	ldi	r22, 0x24	; 36
     d68:	72 e0       	ldi	r23, 0x02	; 2
     d6a:	a5 c0       	rjmp	.+330    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			lcd.print(F("V gain maxV/step"));
     d6c:	63 e1       	ldi	r22, 0x13	; 19
     d6e:	72 e0       	ldi	r23, 0x02	; 2
     d70:	a2 c0       	rjmp	.+324    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_IMPEDANCE_AB:
			lcd.print(F("R1 AB"));
     d72:	6d e0       	ldi	r22, 0x0D	; 13
     d74:	72 e0       	ldi	r23, 0x02	; 2
     d76:	9f c0       	rjmp	.+318    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			lcd.print(F("R2 BC"));
     d78:	67 e0       	ldi	r22, 0x07	; 7
     d7a:	72 e0       	ldi	r23, 0x02	; 2
     d7c:	9c c0       	rjmp	.+312    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			lcd.print(F("R3 AC"));
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	72 e0       	ldi	r23, 0x02	; 2
     d82:	99 c0       	rjmp	.+306    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			lcd.print(F("Vm AB"));
     d84:	6b ef       	ldi	r22, 0xFB	; 251
     d86:	71 e0       	ldi	r23, 0x01	; 1
     d88:	96 c0       	rjmp	.+300    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			lcd.print(F("Vm BC"));
     d8a:	65 ef       	ldi	r22, 0xF5	; 245
     d8c:	71 e0       	ldi	r23, 0x01	; 1
     d8e:	93 c0       	rjmp	.+294    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			lcd.print(F("Vm AC"));
     d90:	6f ee       	ldi	r22, 0xEF	; 239
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	90 c0       	rjmp	.+288    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			lcd.print(F("Am AB"));
     d96:	69 ee       	ldi	r22, 0xE9	; 233
     d98:	71 e0       	ldi	r23, 0x01	; 1
     d9a:	8d c0       	rjmp	.+282    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			lcd.print(F("Am BC"));
     d9c:	63 ee       	ldi	r22, 0xE3	; 227
     d9e:	71 e0       	ldi	r23, 0x01	; 1
     da0:	8a c0       	rjmp	.+276    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcd.print(F("Am AC"));
     da2:	6d ed       	ldi	r22, 0xDD	; 221
     da4:	71 e0       	ldi	r23, 0x01	; 1
     da6:	87 c0       	rjmp	.+270    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcd.print(F("ECount"));
     da8:	66 ed       	ldi	r22, 0xD6	; 214
     daa:	71 e0       	ldi	r23, 0x01	; 1
     dac:	89 eb       	ldi	r24, 0xB9	; 185
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	68 e0       	ldi	r22, 0x08	; 8
     db8:	89 eb       	ldi	r24, 0xB9	; 185
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AB="));
     dc0:	62 ed       	ldi	r22, 0xD2	; 210
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	89 eb       	ldi	r24, 0xB9	; 185
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	89 eb       	ldi	r24, 0xB9	; 185
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("BC="));
     dd8:	6e ec       	ldi	r22, 0xCE	; 206
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	89 eb       	ldi	r24, 0xB9	; 185
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 1);
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	68 e0       	ldi	r22, 0x08	; 8
     de8:	89 eb       	ldi	r24, 0xB9	; 185
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AC="));
     df0:	6a ec       	ldi	r22, 0xCA	; 202
     df2:	71 e0       	ldi	r23, 0x01	; 1
     df4:	60 c0       	rjmp	.+192    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SHOW_ERRORS:
			lcd.print(F("I1="));
     df6:	66 ec       	ldi	r22, 0xC6	; 198
     df8:	71 e0       	ldi	r23, 0x01	; 1
     dfa:	89 eb       	ldi	r24, 0xB9	; 185
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	68 e0       	ldi	r22, 0x08	; 8
     e06:	89 eb       	ldi	r24, 0xB9	; 185
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I2="));
     e0e:	62 ec       	ldi	r22, 0xC2	; 194
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	89 eb       	ldi	r24, 0xB9	; 185
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	89 eb       	ldi	r24, 0xB9	; 185
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I3="));
     e26:	6e eb       	ldi	r22, 0xBE	; 190
     e28:	71 e0       	ldi	r23, 0x01	; 1
     e2a:	89 eb       	ldi	r24, 0xB9	; 185
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(14, 1);
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	6e e0       	ldi	r22, 0x0E	; 14
     e36:	89 eb       	ldi	r24, 0xB9	; 185
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("e%"));
     e3e:	6b eb       	ldi	r22, 0xBB	; 187
     e40:	71 e0       	ldi	r23, 0x01	; 1
     e42:	39 c0       	rjmp	.+114    	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SHOW_AMPERAGE_AB:
			lcd.print(F("AB"));
     e44:	68 eb       	ldi	r22, 0xB8	; 184
     e46:	71 e0       	ldi	r23, 0x01	; 1
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <_Z19displayStaticAsModev+0x116>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_BC:
			lcd.print(F("BC"));
     e4a:	65 eb       	ldi	r22, 0xB5	; 181
     e4c:	71 e0       	ldi	r23, 0x01	; 1
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <_Z19displayStaticAsModev+0x116>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_AC:
			lcd.print(F("AC"));
     e50:	62 eb       	ldi	r22, 0xB2	; 178
     e52:	71 e0       	ldi	r23, 0x01	; 1
     e54:	89 eb       	ldi	r24, 0xB9	; 185
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticAmperage();
     e5c:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <_Z18showStaticAmperagev>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			lcd.print(F("AB"));
     e60:	6f ea       	ldi	r22, 0xAF	; 175
     e62:	71 e0       	ldi	r23, 0x01	; 1
     e64:	05 c0       	rjmp	.+10     	; 0xe70 <_Z19displayStaticAsModev+0x132>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			lcd.print(F("BC"));
     e66:	6c ea       	ldi	r22, 0xAC	; 172
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <_Z19displayStaticAsModev+0x132>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			lcd.print(F("AC"));
     e6c:	69 ea       	ldi	r22, 0xA9	; 169
     e6e:	71 e0       	ldi	r23, 0x01	; 1
     e70:	89 eb       	ldi	r24, 0xB9	; 185
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticWindingChars();
     e78:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <_Z22showStaticWindingCharsv>
			break;
		case MW_CONTROLL_MEASUREMENT:
			lcd.print(F("Measurement"));
     e7c:	6d e9       	ldi	r22, 0x9D	; 157
     e7e:	71 e0       	ldi	r23, 0x01	; 1
     e80:	89 eb       	ldi	r24, 0xB9	; 185
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     e88:	41 e0       	ldi	r20, 0x01	; 1
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	89 eb       	ldi	r24, 0xB9	; 185
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("B1=work; B2=stop"));
     e94:	6c e8       	ldi	r22, 0x8C	; 140
     e96:	71 e0       	ldi	r23, 0x01	; 1
     e98:	0e c0       	rjmp	.+28     	; 0xeb6 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_NEED_SETUP:
			lcd.print(F("Oooops!"));
     e9a:	64 e8       	ldi	r22, 0x84	; 132
     e9c:	71 e0       	ldi	r23, 0x01	; 1
     e9e:	89 eb       	ldi	r24, 0xB9	; 185
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     ea6:	41 e0       	ldi	r20, 0x01	; 1
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	89 eb       	ldi	r24, 0xB9	; 185
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("Setup required"));
     eb2:	65 e7       	ldi	r22, 0x75	; 117
     eb4:	71 e0       	ldi	r23, 0x01	; 1
     eb6:	89 eb       	ldi	r24, 0xB9	; 185
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
     ebe:	08 95       	ret

00000ec0 <_Z12lcdClearCellhhh>:
	Очистка определенного блока экрана с установкой на этом месте курсора
	col - номер колонки
	row - номер строки
	rowLength - количество ячеек для очистки в строке
*/
void lcdClearCell(byte col, byte row, byte rowLength) {                
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	d8 2f       	mov	r29, r24
     eca:	16 2f       	mov	r17, r22
     ecc:	04 2f       	mov	r16, r20
	lcd.setCursor(col, row);                                        
     ece:	46 2f       	mov	r20, r22
     ed0:	68 2f       	mov	r22, r24
     ed2:	89 eb       	ldi	r24, 0xB9	; 185
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>
	for (byte i = 0; i < rowLength; i++) {                             
     eda:	c0 e0       	ldi	r28, 0x00	; 0
     edc:	c0 17       	cp	r28, r16
     ede:	41 f0       	breq	.+16     	; 0xef0 <_Z12lcdClearCellhhh+0x30>
		lcd.print(F(" "));
     ee0:	62 e6       	ldi	r22, 0x62	; 98
     ee2:	71 e0       	ldi	r23, 0x01	; 1
     ee4:	89 eb       	ldi	r24, 0xB9	; 185
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
	row - номер строки
	rowLength - количество ячеек для очистки в строке
*/
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
     eec:	cf 5f       	subi	r28, 0xFF	; 255
     eee:	f6 cf       	rjmp	.-20     	; 0xedc <_Z12lcdClearCellhhh+0x1c>
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     ef0:	41 2f       	mov	r20, r17
     ef2:	6d 2f       	mov	r22, r29
     ef4:	89 eb       	ldi	r24, 0xB9	; 185
     ef6:	91 e0       	ldi	r25, 0x01	; 1
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     f00:	0c 94 1f 13 	jmp	0x263e	; 0x263e <_ZN17LiquidCrystal_I2C9setCursorEhh>

00000f04 <_Z12showGainInfov>:

/*
	Оторажаем возможные варианты усиления
*/
void showGainInfo() {
	lcdClearCell(0, 1, 16);
     f04:	40 e1       	ldi	r20, 0x10	; 16
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
	switch((int)setDigit.value) {
     f0e:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
     f12:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
     f16:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
     f1a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
     f1e:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__fixsfsi>
     f22:	62 30       	cpi	r22, 0x02	; 2
     f24:	71 05       	cpc	r23, r1
     f26:	b1 f0       	breq	.+44     	; 0xf54 <_Z12showGainInfov+0x50>
     f28:	3c f4       	brge	.+14     	; 0xf38 <_Z12showGainInfov+0x34>
     f2a:	61 15       	cp	r22, r1
     f2c:	71 05       	cpc	r23, r1
     f2e:	61 f0       	breq	.+24     	; 0xf48 <_Z12showGainInfov+0x44>
     f30:	61 30       	cpi	r22, 0x01	; 1
     f32:	71 05       	cpc	r23, r1
     f34:	61 f0       	breq	.+24     	; 0xf4e <_Z12showGainInfov+0x4a>
     f36:	08 95       	ret
     f38:	64 30       	cpi	r22, 0x04	; 4
     f3a:	71 05       	cpc	r23, r1
     f3c:	89 f0       	breq	.+34     	; 0xf60 <_Z12showGainInfov+0x5c>
     f3e:	6c f0       	brlt	.+26     	; 0xf5a <_Z12showGainInfov+0x56>
     f40:	65 30       	cpi	r22, 0x05	; 5
     f42:	71 05       	cpc	r23, r1
     f44:	81 f0       	breq	.+32     	; 0xf66 <_Z12showGainInfov+0x62>
     f46:	08 95       	ret
		case 0:
			lcd.print(F("6.144 0.1875"));
     f48:	6f e9       	ldi	r22, 0x9F	; 159
     f4a:	72 e0       	ldi	r23, 0x02	; 2
     f4c:	0e c0       	rjmp	.+28     	; 0xf6a <_Z12showGainInfov+0x66>
			break;
		case 1:
			lcd.print(F("4.096 0.125"));
     f4e:	63 e9       	ldi	r22, 0x93	; 147
     f50:	72 e0       	ldi	r23, 0x02	; 2
     f52:	0b c0       	rjmp	.+22     	; 0xf6a <_Z12showGainInfov+0x66>
			break;
		case 2:
			lcd.print(F("2.048 0.0625"));
     f54:	66 e8       	ldi	r22, 0x86	; 134
     f56:	72 e0       	ldi	r23, 0x02	; 2
     f58:	08 c0       	rjmp	.+16     	; 0xf6a <_Z12showGainInfov+0x66>
			break;
		case 3:
			lcd.print(F("1.024 0.03125"));
     f5a:	68 e7       	ldi	r22, 0x78	; 120
     f5c:	72 e0       	ldi	r23, 0x02	; 2
     f5e:	05 c0       	rjmp	.+10     	; 0xf6a <_Z12showGainInfov+0x66>
			break;
		case 4:
			lcd.print(F("0.512 0.015625"));
     f60:	69 e6       	ldi	r22, 0x69	; 105
     f62:	72 e0       	ldi	r23, 0x02	; 2
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <_Z12showGainInfov+0x66>
			break;
		case 5:
			lcd.print(F("0.256 0.0078125"));
     f66:	69 e5       	ldi	r22, 0x59	; 89
     f68:	72 e0       	ldi	r23, 0x02	; 2
     f6a:	89 eb       	ldi	r24, 0xB9	; 185
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>

00000f72 <_Z17showAmperageCharsh>:

/*
	Отображение идеального и измеренного тока
	_num - номер обмотки
*/
void showAmperageChars(byte _num) {
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	c8 2f       	mov	r28, r24
	lcdClearCell(6, 0, 9);
     f84:	49 e0       	ldi	r20, 0x09	; 9
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	86 e0       	ldi	r24, 0x06	; 6
     f8a:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
     f8e:	d0 e0       	ldi	r29, 0x00	; 0
     f90:	8e 01       	movw	r16, r28
     f92:	0d 5f       	subi	r16, 0xFD	; 253
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	f8 01       	movw	r30, r16
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	ee 0f       	add	r30, r30
     f9e:	ff 1f       	adc	r31, r31
     fa0:	e0 5e       	subi	r30, 0xE0	; 224
     fa2:	fe 4f       	sbci	r31, 0xFE	; 254
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	60 81       	ld	r22, Z
     fae:	71 81       	ldd	r23, Z+1	; 0x01
     fb0:	82 81       	ldd	r24, Z+2	; 0x02
     fb2:	93 81       	ldd	r25, Z+3	; 0x03
     fb4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
     fb8:	26 96       	adiw	r28, 0x06	; 6
     fba:	87 fd       	sbrc	r24, 7
     fbc:	15 c0       	rjmp	.+42     	; 0xfe8 <_Z17showAmperageCharsh+0x76>
		roundedSign = 9;
	} else if (adsChars.perfectAmperage[_num] < 100) {
     fbe:	fe 01       	movw	r30, r28
     fc0:	ee 0f       	add	r30, r30
     fc2:	ff 1f       	adc	r31, r31
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	e0 5e       	subi	r30, 0xE0	; 224
     fca:	fe 4f       	sbci	r31, 0xFE	; 254
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	48 ec       	ldi	r20, 0xC8	; 200
     fd2:	52 e4       	ldi	r21, 0x42	; 66
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
     fe0:	87 fd       	sbrc	r24, 7
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <_Z17showAmperageCharsh+0x7a>
		roundedSign = 8;
	} else {
		roundedSign = 5;
     fe4:	25 e0       	ldi	r18, 0x05	; 5
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <_Z17showAmperageCharsh+0x7c>
*/
void showAmperageChars(byte _num) {
	lcdClearCell(6, 0, 9);
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 9;
     fe8:	29 e0       	ldi	r18, 0x09	; 9
     fea:	01 c0       	rjmp	.+2      	; 0xfee <_Z17showAmperageCharsh+0x7c>
	} else if (adsChars.perfectAmperage[_num] < 100) {
		roundedSign = 8;
     fec:	28 e0       	ldi	r18, 0x08	; 8
	} else {
		roundedSign = 5;
	}
	lcd.print(adsChars.perfectAmperage[_num], roundedSign);
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	cc 0f       	add	r28, r28
     ff2:	dd 1f       	adc	r29, r29
     ff4:	cc 0f       	add	r28, r28
     ff6:	dd 1f       	adc	r29, r29
     ff8:	c0 5e       	subi	r28, 0xE0	; 224
     ffa:	de 4f       	sbci	r29, 0xFE	; 254
     ffc:	48 81       	ld	r20, Y
     ffe:	59 81       	ldd	r21, Y+1	; 0x01
    1000:	6a 81       	ldd	r22, Y+2	; 0x02
    1002:	7b 81       	ldd	r23, Y+3	; 0x03
    1004:	89 eb       	ldi	r24, 0xB9	; 185
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN5Print5printEdi>
	
	
	lcdClearCell(5, 1, 9);
    100c:	49 e0       	ldi	r20, 0x09	; 9
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
	if (adsChars.measuredAmperage[_num] < 10) {
    1016:	00 0f       	add	r16, r16
    1018:	11 1f       	adc	r17, r17
    101a:	00 0f       	add	r16, r16
    101c:	11 1f       	adc	r17, r17
    101e:	f8 01       	movw	r30, r16
    1020:	e0 5e       	subi	r30, 0xE0	; 224
    1022:	fe 4f       	sbci	r31, 0xFE	; 254
    1024:	c0 80       	ld	r12, Z
    1026:	d1 80       	ldd	r13, Z+1	; 0x01
    1028:	e2 80       	ldd	r14, Z+2	; 0x02
    102a:	f3 80       	ldd	r15, Z+3	; 0x03
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    103c:	87 fd       	sbrc	r24, 7
    103e:	0c c0       	rjmp	.+24     	; 0x1058 <_Z17showAmperageCharsh+0xe6>
		roundedSign = 9;
	} else if (adsChars.measuredAmperage[_num] < 100) {
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	48 ec       	ldi	r20, 0xC8	; 200
    1046:	52 e4       	ldi	r21, 0x42	; 66
    1048:	c7 01       	movw	r24, r14
    104a:	b6 01       	movw	r22, r12
    104c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    1050:	87 fd       	sbrc	r24, 7
    1052:	04 c0       	rjmp	.+8      	; 0x105c <_Z17showAmperageCharsh+0xea>
		roundedSign = 8;
	} else {
		roundedSign = 5;
    1054:	25 e0       	ldi	r18, 0x05	; 5
    1056:	03 c0       	rjmp	.+6      	; 0x105e <_Z17showAmperageCharsh+0xec>
	lcd.print(adsChars.perfectAmperage[_num], roundedSign);
	
	
	lcdClearCell(5, 1, 9);
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 9;
    1058:	29 e0       	ldi	r18, 0x09	; 9
    105a:	01 c0       	rjmp	.+2      	; 0x105e <_Z17showAmperageCharsh+0xec>
	} else if (adsChars.measuredAmperage[_num] < 100) {
		roundedSign = 8;
    105c:	28 e0       	ldi	r18, 0x08	; 8
	} else {
		roundedSign = 5;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.measuredAmperage[_num], roundedSign);
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	b7 01       	movw	r22, r14
    1062:	a6 01       	movw	r20, r12
    1064:	89 eb       	ldi	r24, 0xB9	; 185
    1066:	91 e0       	ldi	r25, 0x01	; 1
		} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
		roundedSign = 8;
	} else {
		roundedSign = 5;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.measuredAmperage[_num], roundedSign);
    1078:	0c 94 d9 1e 	jmp	0x3db2	; 0x3db2 <_ZN5Print5printEdi>

0000107c <_Z22showWindingCharsValuesh>:

/*
	Отображение характеристик по обмоткам
	_num - номер обмотки
*/
void showWindingCharsValues(byte _num) {
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	c8 2f       	mov	r28, r24
	lcdClearCell(6, 0, 10);
    108a:	4a e0       	ldi	r20, 0x0A	; 10
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	86 e0       	ldi	r24, 0x06	; 6
    1090:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
    1094:	d0 e0       	ldi	r29, 0x00	; 0
    1096:	fe 01       	movw	r30, r28
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	e4 5d       	subi	r30, 0xD4	; 212
    10a2:	fe 4f       	sbci	r31, 0xFE	; 254
    10a4:	c0 80       	ld	r12, Z
    10a6:	d1 80       	ldd	r13, Z+1	; 0x01
    10a8:	e2 80       	ldd	r14, Z+2	; 0x02
    10aa:	f3 80       	ldd	r15, Z+3	; 0x03
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	c7 01       	movw	r24, r14
    10b6:	b6 01       	movw	r22, r12
    10b8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    10bc:	87 fd       	sbrc	r24, 7
    10be:	0c c0       	rjmp	.+24     	; 0x10d8 <_Z22showWindingCharsValuesh+0x5c>
		roundedSign = 8;
	} else if (adsChars.measuredAmperage[_num] < 100) {
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	48 ec       	ldi	r20, 0xC8	; 200
    10c6:	52 e4       	ldi	r21, 0x42	; 66
    10c8:	c7 01       	movw	r24, r14
    10ca:	b6 01       	movw	r22, r12
    10cc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    10d0:	87 fd       	sbrc	r24, 7
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <_Z22showWindingCharsValuesh+0x60>
		roundedSign = 7;
	} else {
		roundedSign = 4;
    10d4:	24 e0       	ldi	r18, 0x04	; 4
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <_Z22showWindingCharsValuesh+0x62>
*/
void showWindingCharsValues(byte _num) {
	lcdClearCell(6, 0, 10);
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 8;
    10d8:	28 e0       	ldi	r18, 0x08	; 8
    10da:	01 c0       	rjmp	.+2      	; 0x10de <_Z22showWindingCharsValuesh+0x62>
	} else if (adsChars.measuredAmperage[_num] < 100) {
		roundedSign = 7;
    10dc:	27 e0       	ldi	r18, 0x07	; 7
	} else {
		roundedSign = 4;
	}
	lcd.print(adsChars.measuredAmperage[_num], roundedSign);
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	b7 01       	movw	r22, r14
    10e2:	a6 01       	movw	r20, r12
    10e4:	89 eb       	ldi	r24, 0xB9	; 185
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN5Print5printEdi>
	
	
	lcdClearCell(2, 1, 8);
    10ec:	48 e0       	ldi	r20, 0x08	; 8
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
	if (adsChars.voltage[_num] < 100) {
    10f6:	cc 0f       	add	r28, r28
    10f8:	dd 1f       	adc	r29, r29
    10fa:	cc 0f       	add	r28, r28
    10fc:	dd 1f       	adc	r29, r29
    10fe:	fe 01       	movw	r30, r28
    1100:	e0 5e       	subi	r30, 0xE0	; 224
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
    1104:	c0 80       	ld	r12, Z
    1106:	d1 80       	ldd	r13, Z+1	; 0x01
    1108:	e2 80       	ldd	r14, Z+2	; 0x02
    110a:	f3 80       	ldd	r15, Z+3	; 0x03
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	48 ec       	ldi	r20, 0xC8	; 200
    1112:	52 e4       	ldi	r21, 0x42	; 66
    1114:	c7 01       	movw	r24, r14
    1116:	b6 01       	movw	r22, r12
    1118:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    111c:	87 fd       	sbrc	r24, 7
    111e:	0c c0       	rjmp	.+24     	; 0x1138 <_Z22showWindingCharsValuesh+0xbc>
		roundedSign = 2;
	} else if (adsChars.voltage[_num] < 1000) {
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a e7       	ldi	r20, 0x7A	; 122
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	c7 01       	movw	r24, r14
    112a:	b6 01       	movw	r22, r12
    112c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    1130:	87 ff       	sbrs	r24, 7
    1132:	27 c0       	rjmp	.+78     	; 0x1182 <_Z22showWindingCharsValuesh+0x106>
		roundedSign = 1;
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	01 c0       	rjmp	.+2      	; 0x113a <_Z22showWindingCharsValuesh+0xbe>
	lcd.print(adsChars.measuredAmperage[_num], roundedSign);
	
	
	lcdClearCell(2, 1, 8);
	if (adsChars.voltage[_num] < 100) {
		roundedSign = 2;
    1138:	22 e0       	ldi	r18, 0x02	; 2
		roundedSign = 1;
	} else {
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	b7 01       	movw	r22, r14
    113e:	a6 01       	movw	r20, r12
    1140:	89 eb       	ldi	r24, 0xB9	; 185
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN5Print5printEdi>
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
    1148:	45 e0       	ldi	r20, 0x05	; 5
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	8a e0       	ldi	r24, 0x0A	; 10
    114e:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
	lcd.print(icError.curLvl[_num], 1);
    1152:	c3 53       	subi	r28, 0x33	; 51
    1154:	de 4f       	sbci	r29, 0xFE	; 254
    1156:	48 81       	ld	r20, Y
    1158:	59 81       	ldd	r21, Y+1	; 0x01
    115a:	6a 81       	ldd	r22, Y+2	; 0x02
    115c:	7b 81       	ldd	r23, Y+3	; 0x03
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	89 eb       	ldi	r24, 0xB9	; 185
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN5Print5printEdi>
	lcd.print(F("%"));
    116a:	6d e6       	ldi	r22, 0x6D	; 109
    116c:	71 e0       	ldi	r23, 0x01	; 1
    116e:	89 eb       	ldi	r24, 0xB9	; 185
    1170:	91 e0       	ldi	r25, 0x01	; 1
}
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	df 90       	pop	r13
    117c:	cf 90       	pop	r12
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
	lcd.print(icError.curLvl[_num], 1);
	lcd.print(F("%"));
    117e:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
	} else {
		lcd.print(999);
    1182:	4a e0       	ldi	r20, 0x0A	; 10
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	67 ee       	ldi	r22, 0xE7	; 231
    1188:	73 e0       	ldi	r23, 0x03	; 3
    118a:	89 eb       	ldi	r24, 0xB9	; 185
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN5Print5printEii>
		lcd.print(F("+"));
    1192:	6f e6       	ldi	r22, 0x6F	; 111
    1194:	71 e0       	ldi	r23, 0x01	; 1
    1196:	89 eb       	ldi	r24, 0xB9	; 185
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    119e:	d4 cf       	rjmp	.-88     	; 0x1148 <_Z22showWindingCharsValuesh+0xcc>

000011a0 <_Z13displayAsModev>:
/*
	Отображение динамиеских данных в зависимости от режима
*/
void displayAsMode() {
	// Если мы изменили режим отображения, то необходимо обновиь статику и динамику
	if (modeWork.current != modeWork.prev) {
    11a0:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    11a4:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <modeWork+0x1>
    11a8:	89 17       	cp	r24, r25
    11aa:	39 f0       	breq	.+14     	; 0x11ba <_Z13displayAsModev+0x1a>
		modeWork.prev = modeWork.current;
    11ac:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <modeWork+0x1>
		lcdUpdateScreen = true;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
		displayStaticAsMode();
    11b6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z19displayStaticAsModev>
	}
	if (!lcdUpdateScreen) {
    11ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <lcdUpdateScreen>
    11be:	88 23       	and	r24, r24
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <_Z13displayAsModev+0x24>
    11c2:	99 c0       	rjmp	.+306    	; 0x12f6 <_Z13displayAsModev+0x156>
		return;
	} 
	lcdUpdateScreen = false;
    11c4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <lcdUpdateScreen>
	// обновляем динамику
	switch(modeWork.current) {
    11c8:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <modeWork>
    11cc:	8e 2f       	mov	r24, r30
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	31 97       	sbiw	r30, 0x01	; 1
    11d4:	e4 31       	cpi	r30, 0x14	; 20
    11d6:	f1 05       	cpc	r31, r1
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <_Z13displayAsModev+0x3c>
    11da:	8d c0       	rjmp	.+282    	; 0x12f6 <_Z13displayAsModev+0x156>
    11dc:	e6 5b       	subi	r30, 0xB6	; 182
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcdClearCell(0, 1, 8);
    11e4:	48 e0       	ldi	r20, 0x08	; 8
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			if (setDigit.value == CONNECTION_TYPE_STAR) {
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    11f8:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    11fc:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    1200:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    1204:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    1208:	81 11       	cpse	r24, r1
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <_Z13displayAsModev+0x72>
				lcd.print(F("Star"));
    120c:	64 e5       	ldi	r22, 0x54	; 84
    120e:	72 e0       	ldi	r23, 0x02	; 2
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <_Z13displayAsModev+0x76>
			} else {
				lcd.print(F("Triangle"));
    1212:	6b e4       	ldi	r22, 0x4B	; 75
    1214:	72 e0       	ldi	r23, 0x02	; 2
    1216:	89 eb       	ldi	r24, 0xB9	; 185
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			}
			break;
		case MW_SETUP_GAIN_AMPERAGE:
		case MW_SETUP_GAIN_VOLTAGE:
			showGainInfo();
    121e:	0c 94 82 07 	jmp	0xf04	; 0xf04 <_Z12showGainInfov>
		case MW_SETUP_MULT_VOLTAGE_BC:
		case MW_SETUP_MULT_VOLTAGE_AC:
		case MW_SETUP_MULT_AMPERAGE_AB:
		case MW_SETUP_MULT_AMPERAGE_BC:
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcdClearCell(7, 0, 8);
    1222:	48 e0       	ldi	r20, 0x08	; 8
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	87 e0       	ldi	r24, 0x07	; 7
    1228:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			lcd.print(F("x"));
    122c:	69 e4       	ldi	r22, 0x49	; 73
    122e:	72 e0       	ldi	r23, 0x02	; 2
    1230:	89 eb       	ldi	r24, 0xB9	; 185
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(setDigit.curMultiplier, 3);
    1238:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <setDigit+0x4>
    123c:	50 91 ca 01 	lds	r21, 0x01CA	; 0x8001ca <setDigit+0x5>
    1240:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <setDigit+0x6>
    1244:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <setDigit+0x7>
    1248:	23 e0       	ldi	r18, 0x03	; 3
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	89 eb       	ldi	r24, 0xB9	; 185
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN5Print5printEdi>
			lcdClearCell(0, 1, 16);
    1254:	40 e1       	ldi	r20, 0x10	; 16
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			lcd.print(setDigit.value, 3);
    125e:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    1262:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    1266:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    126a:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    126e:	23 e0       	ldi	r18, 0x03	; 3
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	89 eb       	ldi	r24, 0xB9	; 185
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0c 94 d9 1e 	jmp	0x3db2	; 0x3db2 <_ZN5Print5printEdi>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcdClearCell(11, 0, 4);
    127a:	44 e0       	ldi	r20, 0x04	; 4
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	8b e0       	ldi	r24, 0x0B	; 11
    1280:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(0);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(3, 1, 4);
    128a:	44 e0       	ldi	r20, 0x04	; 4
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(1);
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(11, 1, 4);
    129a:	44 e0       	ldi	r20, 0x04	; 4
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	8b e0       	ldi	r24, 0x0B	; 11
    12a0:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(2);
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <_Z19lcdPrintCriticalLvlh>
			break;
		case MW_SHOW_ERRORS:
			lcdClearCell(3, 0, 5);
    12aa:	45 e0       	ldi	r20, 0x05	; 5
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(0);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	0e 94 ef 05 	call	0xbde	; 0xbde <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(11, 0, 5);
    12ba:	45 e0       	ldi	r20, 0x05	; 5
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	8b e0       	ldi	r24, 0x0B	; 11
    12c0:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(1);
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	0e 94 ef 05 	call	0xbde	; 0xbde <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(3, 1, 5);
    12ca:	45 e0       	ldi	r20, 0x05	; 5
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	83 e0       	ldi	r24, 0x03	; 3
    12d0:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(2);
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_Z27lcdPrinRoundedCurErrorLevelh>
			break;
		case MW_SHOW_AMPERAGE_AB:
			showAmperageChars(0);
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <_Z13displayAsModev+0x140>
			break;
		case MW_SHOW_AMPERAGE_BC:
			showAmperageChars(1);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <_Z17showAmperageCharsh>
			break;
		case MW_SHOW_AMPERAGE_AC:
			showAmperageChars(2);
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	fc cf       	rjmp	.-8      	; 0x12e0 <_Z13displayAsModev+0x140>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			showWindingCharsValues(0);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <_Z13displayAsModev+0x152>
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			showWindingCharsValues(1);
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <_Z13displayAsModev+0x152>
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			showWindingCharsValues(2);
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	0c 94 3e 08 	jmp	0x107c	; 0x107c <_Z22showWindingCharsValuesh>
    12f6:	08 95       	ret

000012f8 <loop>:
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
	}
}

void loop() {
    12f8:	2f 92       	push	r2
    12fa:	3f 92       	push	r3
    12fc:	4f 92       	push	r4
    12fe:	5f 92       	push	r5
    1300:	6f 92       	push	r6
    1302:	7f 92       	push	r7
    1304:	8f 92       	push	r8
    1306:	9f 92       	push	r9
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	27 97       	sbiw	r28, 0x07	; 7
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
	// Следим за кнопками
	button1Callback.tick();
    132c:	85 e3       	ldi	r24, 0x35	; 53
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <_ZN9OneButton4tickEv>
	button2Callback.tick();
    1334:	84 e1       	ldi	r24, 0x14	; 20
    1336:	92 e0       	ldi	r25, 0x02	; 2
    1338:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <_ZN9OneButton4tickEv>
	// Отображаем данные на экран
	displayAsMode();
    133c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z13displayAsModev>
	// Если в режиме измерений
	if(settings.isReadyToWork == MM_WORK) {
    1340:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <settings>
    1344:	88 23       	and	r24, r24
    1346:	09 f4       	brne	.+2      	; 0x134a <loop+0x52>
    1348:	71 c1       	rjmp	.+738    	; 0x162c <loop+0x334>
		// получаем параметры
		getAdsParams();
    134a:	0e 94 b5 04 	call	0x96a	; 0x96a <_Z12getAdsParamsv>
		// и продолжаем получать пока не накопим 50 измерений
		if (adsChars.currentMeasurement < adsChars.measurementsCount) {
    134e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <adsChars+0x3d>
    1352:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <adsChars+0x3c>
    1356:	89 17       	cp	r24, r25
    1358:	20 f4       	brcc	.+8      	; 0x1362 <loop+0x6a>
			adsChars.currentMeasurement++;
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <adsChars+0x3d>
    1360:	65 c1       	rjmp	.+714    	; 0x162c <loop+0x334>
		} else {
			// после накопления measurementsCount обновляем экран и смотрим на наличия межветковых замыканий
			lcdUpdateScreen = true;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
    1368:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    136c:	00 91 b2 01 	lds	r16, 0x01B2	; 0x8001b2 <__data_end>
    1370:	10 91 b3 01 	lds	r17, 0x01B3	; 0x8001b3 <__data_end+0x1>
    1374:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <__data_end+0x2>
    1378:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <__data_end+0x3>
    137c:	2b 01       	movw	r4, r22
    137e:	3c 01       	movw	r6, r24
    1380:	40 1a       	sub	r4, r16
    1382:	51 0a       	sbc	r5, r17
    1384:	62 0a       	sbc	r6, r18
    1386:	73 0a       	sbc	r7, r19
    1388:	20 e2       	ldi	r18, 0x20	; 32
    138a:	31 e0       	ldi	r19, 0x01	; 1
    138c:	3f 83       	std	Y+7, r19	; 0x07
    138e:	2e 83       	std	Y+6, r18	; 0x06
    1390:	07 ee       	ldi	r16, 0xE7	; 231
    1392:	11 e0       	ldi	r17, 0x01	; 1
    1394:	8d ec       	ldi	r24, 0xCD	; 205
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	9d 83       	std	Y+5, r25	; 0x05
    139a:	8c 83       	std	Y+4, r24	; 0x04
    139c:	1c 01       	movw	r2, r24
    139e:	e1 e0       	ldi	r30, 0x01	; 1
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	fb 83       	std	Y+3, r31	; 0x03
    13a4:	ea 83       	std	Y+2, r30	; 0x02
			for (byte i = 0; i < 3; i++) {
    13a6:	19 82       	std	Y+1, r1	; 0x01
				// вычисляем реальные значения напряжения, тока и идеального тока от измеренного напряжения и известного сопротивления
				adsChars.voltage[i] = adsChars.sumVoltage[i] / adsChars.measurementsCount * ads.voltageStep * settings.multiplierVoltage[i];
    13a8:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <adsChars+0x3c>
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 a6 19 	call	0x334c	; 0x334c <__floatsisf>
    13b6:	6b 01       	movw	r12, r22
    13b8:	7c 01       	movw	r14, r24
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	ee 81       	ldd	r30, Y+6	; 0x06
    13c0:	ff 81       	ldd	r31, Y+7	; 0x07
    13c2:	64 a1       	ldd	r22, Z+36	; 0x24
    13c4:	75 a1       	ldd	r23, Z+37	; 0x25
    13c6:	86 a1       	ldd	r24, Z+38	; 0x26
    13c8:	97 a1       	ldd	r25, Z+39	; 0x27
    13ca:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
    13ce:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_start+0x18>
    13d2:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_start+0x19>
    13d6:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <__data_start+0x1a>
    13da:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <__data_start+0x1b>
    13de:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    13e2:	f8 01       	movw	r30, r16
    13e4:	25 89       	ldd	r18, Z+21	; 0x15
    13e6:	36 89       	ldd	r19, Z+22	; 0x16
    13e8:	47 89       	ldd	r20, Z+23	; 0x17
    13ea:	50 8d       	ldd	r21, Z+24	; 0x18
    13ec:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    13f0:	4b 01       	movw	r8, r22
    13f2:	5c 01       	movw	r10, r24
    13f4:	ee 81       	ldd	r30, Y+6	; 0x06
    13f6:	ff 81       	ldd	r31, Y+7	; 0x07
    13f8:	60 83       	st	Z, r22
    13fa:	71 83       	std	Z+1, r23	; 0x01
    13fc:	82 83       	std	Z+2, r24	; 0x02
    13fe:	93 83       	std	Z+3, r25	; 0x03
				adsChars.measuredAmperage[i] = adsChars.sumMeasuredAmperage[i] / adsChars.measurementsCount * ads.amperageStep * settings.multiplierAmperage[i];
    1400:	a7 01       	movw	r20, r14
    1402:	96 01       	movw	r18, r12
    1404:	60 a9       	ldd	r22, Z+48	; 0x30
    1406:	71 a9       	ldd	r23, Z+49	; 0x31
    1408:	82 a9       	ldd	r24, Z+50	; 0x32
    140a:	93 a9       	ldd	r25, Z+51	; 0x33
    140c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
    1410:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_start+0x1c>
    1414:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_start+0x1d>
    1418:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_start+0x1e>
    141c:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <__data_start+0x1f>
    1420:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    1424:	f8 01       	movw	r30, r16
    1426:	21 a1       	ldd	r18, Z+33	; 0x21
    1428:	32 a1       	ldd	r19, Z+34	; 0x22
    142a:	43 a1       	ldd	r20, Z+35	; 0x23
    142c:	54 a1       	ldd	r21, Z+36	; 0x24
    142e:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    1432:	6b 01       	movw	r12, r22
    1434:	7c 01       	movw	r14, r24
    1436:	ee 81       	ldd	r30, Y+6	; 0x06
    1438:	ff 81       	ldd	r31, Y+7	; 0x07
    143a:	64 87       	std	Z+12, r22	; 0x0c
    143c:	75 87       	std	Z+13, r23	; 0x0d
    143e:	86 87       	std	Z+14, r24	; 0x0e
    1440:	97 87       	std	Z+15, r25	; 0x0f
				adsChars.perfectAmperage[i] = adsChars.voltage[i] / settings.impedance[i];
    1442:	f8 01       	movw	r30, r16
    1444:	26 81       	ldd	r18, Z+6	; 0x06
    1446:	37 81       	ldd	r19, Z+7	; 0x07
    1448:	40 85       	ldd	r20, Z+8	; 0x08
    144a:	51 85       	ldd	r21, Z+9	; 0x09
    144c:	c5 01       	movw	r24, r10
    144e:	b4 01       	movw	r22, r8
    1450:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
    1454:	ee 81       	ldd	r30, Y+6	; 0x06
    1456:	ff 81       	ldd	r31, Y+7	; 0x07
    1458:	60 8f       	std	Z+24, r22	; 0x18
    145a:	71 8f       	std	Z+25, r23	; 0x19
    145c:	82 8f       	std	Z+26, r24	; 0x1a
    145e:	93 8f       	std	Z+27, r25	; 0x1b
				icError.curLvl[i] = getICLevelByWinding(adsChars.measuredAmperage[i], i);
    1460:	49 81       	ldd	r20, Y+1	; 0x01
    1462:	c7 01       	movw	r24, r14
    1464:	b6 01       	movw	r22, r12
    1466:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_Z19getICLevelByWindingfh>
    146a:	f1 01       	movw	r30, r2
    146c:	60 83       	st	Z, r22
    146e:	71 83       	std	Z+1, r23	; 0x01
    1470:	82 83       	std	Z+2, r24	; 0x02
    1472:	93 83       	std	Z+3, r25	; 0x03
				if (canSerial) {
    1474:	f9 ee       	ldi	r31, 0xE9	; 233
    1476:	4f 16       	cp	r4, r31
    1478:	f3 e0       	ldi	r31, 0x03	; 3
    147a:	5f 06       	cpc	r5, r31
    147c:	61 04       	cpc	r6, r1
    147e:	71 04       	cpc	r7, r1
    1480:	08 f4       	brcc	.+2      	; 0x1484 <loop+0x18c>
    1482:	64 c0       	rjmp	.+200    	; 0x154c <loop+0x254>
					Serial.print(F("Winding |")); Serial.print((i + 1)); Serial.println(F("|"));
    1484:	6b e2       	ldi	r22, 0x2B	; 43
    1486:	73 e0       	ldi	r23, 0x03	; 3
    1488:	84 e2       	ldi	r24, 0x24	; 36
    148a:	93 e0       	ldi	r25, 0x03	; 3
    148c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1490:	4a e0       	ldi	r20, 0x0A	; 10
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	6a 81       	ldd	r22, Y+2	; 0x02
    1496:	7b 81       	ldd	r23, Y+3	; 0x03
    1498:	84 e2       	ldi	r24, 0x24	; 36
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN5Print5printEii>
    14a0:	69 e2       	ldi	r22, 0x29	; 41
    14a2:	73 e0       	ldi	r23, 0x03	; 3
    14a4:	84 e2       	ldi	r24, 0x24	; 36
    14a6:	93 e0       	ldi	r25, 0x03	; 3
    14a8:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F("measured voltage = "));  Serial.println(adsChars.voltage[i], 10);
    14ac:	65 e1       	ldi	r22, 0x15	; 21
    14ae:	73 e0       	ldi	r23, 0x03	; 3
    14b0:	84 e2       	ldi	r24, 0x24	; 36
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    14b8:	ee 81       	ldd	r30, Y+6	; 0x06
    14ba:	ff 81       	ldd	r31, Y+7	; 0x07
    14bc:	40 81       	ld	r20, Z
    14be:	51 81       	ldd	r21, Z+1	; 0x01
    14c0:	62 81       	ldd	r22, Z+2	; 0x02
    14c2:	73 81       	ldd	r23, Z+3	; 0x03
    14c4:	2a e0       	ldi	r18, 0x0A	; 10
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	84 e2       	ldi	r24, 0x24	; 36
    14ca:	93 e0       	ldi	r25, 0x03	; 3
    14cc:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
					Serial.print(F("measured amperage = "));  Serial.println(adsChars.measuredAmperage[i], 10);
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	73 e0       	ldi	r23, 0x03	; 3
    14d4:	84 e2       	ldi	r24, 0x24	; 36
    14d6:	93 e0       	ldi	r25, 0x03	; 3
    14d8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    14dc:	ee 81       	ldd	r30, Y+6	; 0x06
    14de:	ff 81       	ldd	r31, Y+7	; 0x07
    14e0:	44 85       	ldd	r20, Z+12	; 0x0c
    14e2:	55 85       	ldd	r21, Z+13	; 0x0d
    14e4:	66 85       	ldd	r22, Z+14	; 0x0e
    14e6:	77 85       	ldd	r23, Z+15	; 0x0f
    14e8:	2a e0       	ldi	r18, 0x0A	; 10
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	84 e2       	ldi	r24, 0x24	; 36
    14ee:	93 e0       	ldi	r25, 0x03	; 3
    14f0:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
					Serial.print(F("perfect amperage = ")); Serial.println(adsChars.perfectAmperage[i], 10);
    14f4:	6c ee       	ldi	r22, 0xEC	; 236
    14f6:	72 e0       	ldi	r23, 0x02	; 2
    14f8:	84 e2       	ldi	r24, 0x24	; 36
    14fa:	93 e0       	ldi	r25, 0x03	; 3
    14fc:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1500:	ee 81       	ldd	r30, Y+6	; 0x06
    1502:	ff 81       	ldd	r31, Y+7	; 0x07
    1504:	40 8d       	ldd	r20, Z+24	; 0x18
    1506:	51 8d       	ldd	r21, Z+25	; 0x19
    1508:	62 8d       	ldd	r22, Z+26	; 0x1a
    150a:	73 8d       	ldd	r23, Z+27	; 0x1b
    150c:	2a e0       	ldi	r18, 0x0A	; 10
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	84 e2       	ldi	r24, 0x24	; 36
    1512:	93 e0       	ldi	r25, 0x03	; 3
    1514:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
					Serial.print(F("error = ")); Serial.println(icError.curLvl[i]);
    1518:	63 ee       	ldi	r22, 0xE3	; 227
    151a:	72 e0       	ldi	r23, 0x02	; 2
    151c:	84 e2       	ldi	r24, 0x24	; 36
    151e:	93 e0       	ldi	r25, 0x03	; 3
    1520:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1524:	f1 01       	movw	r30, r2
    1526:	40 81       	ld	r20, Z
    1528:	51 81       	ldd	r21, Z+1	; 0x01
    152a:	62 81       	ldd	r22, Z+2	; 0x02
    152c:	73 81       	ldd	r23, Z+3	; 0x03
    152e:	22 e0       	ldi	r18, 0x02	; 2
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	84 e2       	ldi	r24, 0x24	; 36
    1534:	93 e0       	ldi	r25, 0x03	; 3
    1536:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
					if (i != 2) {
    153a:	f9 81       	ldd	r31, Y+1	; 0x01
    153c:	f2 30       	cpi	r31, 0x02	; 2
    153e:	31 f0       	breq	.+12     	; 0x154c <loop+0x254>
						Serial.println(F("---"));
    1540:	6f ed       	ldi	r22, 0xDF	; 223
    1542:	72 e0       	ldi	r23, 0x02	; 2
    1544:	84 e2       	ldi	r24, 0x24	; 36
    1546:	93 e0       	ldi	r25, 0x03	; 3
    1548:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
			adsChars.currentMeasurement++;
		} else {
			// после накопления measurementsCount обновляем экран и смотрим на наличия межветковых замыканий
			lcdUpdateScreen = true;
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
			for (byte i = 0; i < 3; i++) {
    154c:	29 81       	ldd	r18, Y+1	; 0x01
    154e:	2f 5f       	subi	r18, 0xFF	; 255
    1550:	29 83       	std	Y+1, r18	; 0x01
    1552:	8e 81       	ldd	r24, Y+6	; 0x06
    1554:	9f 81       	ldd	r25, Y+7	; 0x07
    1556:	04 96       	adiw	r24, 0x04	; 4
    1558:	9f 83       	std	Y+7, r25	; 0x07
    155a:	8e 83       	std	Y+6, r24	; 0x06
    155c:	0c 5f       	subi	r16, 0xFC	; 252
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	94 e0       	ldi	r25, 0x04	; 4
    1562:	29 0e       	add	r2, r25
    1564:	31 1c       	adc	r3, r1
    1566:	ea 81       	ldd	r30, Y+2	; 0x02
    1568:	fb 81       	ldd	r31, Y+3	; 0x03
    156a:	31 96       	adiw	r30, 0x01	; 1
    156c:	fb 83       	std	Y+3, r31	; 0x03
    156e:	ea 83       	std	Y+2, r30	; 0x02
    1570:	23 30       	cpi	r18, 0x03	; 3
    1572:	09 f0       	breq	.+2      	; 0x1576 <loop+0x27e>
    1574:	19 cf       	rjmp	.-462    	; 0x13a8 <loop+0xb0>
					if (i != 2) {
						Serial.println(F("---"));
					}
				}
			}
			if (canSerial) {
    1576:	f9 ee       	ldi	r31, 0xE9	; 233
    1578:	4f 16       	cp	r4, r31
    157a:	f3 e0       	ldi	r31, 0x03	; 3
    157c:	5f 06       	cpc	r5, r31
    157e:	61 04       	cpc	r6, r1
    1580:	71 04       	cpc	r7, r1
    1582:	80 f0       	brcs	.+32     	; 0x15a4 <loop+0x2ac>
				Serial.println(F("---end---"));
    1584:	65 ed       	ldi	r22, 0xD5	; 213
    1586:	72 e0       	ldi	r23, 0x02	; 2
    1588:	84 e2       	ldi	r24, 0x24	; 36
    158a:	93 e0       	ldi	r25, 0x03	; 3
    158c:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
				serialUpdateStamp = millis();
    1590:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    1594:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <__data_end>
    1598:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <__data_end+0x1>
    159c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end+0x2>
    15a0:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <__data_end+0x3>
			}
			initAvgVars();
    15a4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_Z11initAvgVarsv>
			
			// проверяем на наличие замыкания
			bool isHasIC = false;
			for (byte i = 0; i < 3; i++) {
				// если мы перешли порог, то проверяем на ассиметрию
				if (icError.curLvl[i] > 100 - settings.connectionType) {
    15a8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <settings+0x1>
    15ac:	64 e6       	ldi	r22, 0x64	; 100
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	68 1b       	sub	r22, r24
    15b2:	71 09       	sbc	r23, r1
    15b4:	07 2e       	mov	r0, r23
    15b6:	00 0c       	add	r0, r0
    15b8:	88 0b       	sbc	r24, r24
    15ba:	99 0b       	sbc	r25, r25
    15bc:	0e 94 a6 19 	call	0x334c	; 0x334c <__floatsisf>
    15c0:	6b 01       	movw	r12, r22
    15c2:	7c 01       	movw	r14, r24
    15c4:	ec 81       	ldd	r30, Y+4	; 0x04
    15c6:	fd 81       	ldd	r31, Y+5	; 0x05
    15c8:	61 91       	ld	r22, Z+
    15ca:	71 91       	ld	r23, Z+
    15cc:	81 91       	ld	r24, Z+
    15ce:	91 91       	ld	r25, Z+
    15d0:	fd 83       	std	Y+5, r31	; 0x05
    15d2:	ec 83       	std	Y+4, r30	; 0x04
    15d4:	a7 01       	movw	r20, r14
    15d6:	96 01       	movw	r18, r12
    15d8:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
    15dc:	18 16       	cp	r1, r24
    15de:	4c f4       	brge	.+18     	; 0x15f2 <loop+0x2fa>
					icError.hasAsymmetry = isFullErrorExists(adsChars.measuredAmperage, adsChars.voltage);
    15e0:	60 e2       	ldi	r22, 0x20	; 32
    15e2:	71 e0       	ldi	r23, 0x01	; 1
    15e4:	8c e2       	ldi	r24, 0x2C	; 44
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z17isFullErrorExistsPfS_>
    15ec:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <icError+0x18>
					isHasIC = true;
					break;
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <loop+0x308>
			}
			initAvgVars();
			
			// проверяем на наличие замыкания
			bool isHasIC = false;
			for (byte i = 0; i < 3; i++) {
    15f2:	29 ed       	ldi	r18, 0xD9	; 217
    15f4:	31 e0       	ldi	r19, 0x01	; 1
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	9d 81       	ldd	r25, Y+5	; 0x05
    15fa:	28 17       	cp	r18, r24
    15fc:	39 07       	cpc	r19, r25
    15fe:	11 f7       	brne	.-60     	; 0x15c4 <loop+0x2cc>
					isHasIC = true;
					break;
				}
			}

			if (!icError.hasAsymmetry) {
    1600:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <icError+0x18>
    1604:	88 23       	and	r24, r24
    1606:	91 f0       	breq	.+36     	; 0x162c <loop+0x334>
				isHasIC = false;
			} else {
				settings.isReadyToWork = MM_STOP;
    1608:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <settings>
				
				Serial.println(F("WARNING!!! Measurement Stoped IC EXISTS!"));
    160c:	6c ea       	ldi	r22, 0xAC	; 172
    160e:	72 e0       	ldi	r23, 0x02	; 2
    1610:	84 e2       	ldi	r24, 0x24	; 36
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
				modeWork.current = MW_SHOW_ERRORS_COUNTERS;
    1618:	8d e0       	ldi	r24, 0x0D	; 13
    161a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
				digitalWrite(BEEPER, HIGH);
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	80 e1       	ldi	r24, 0x10	; 16
    1622:	0e 94 4f 20 	call	0x409e	; 0x409e <digitalWrite>
				icError.hasIC = true;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <icError+0x19>
			}
		}
	} 
}
    162c:	27 96       	adiw	r28, 0x07	; 7
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	7f 90       	pop	r7
    1652:	6f 90       	pop	r6
    1654:	5f 90       	pop	r5
    1656:	4f 90       	pop	r4
    1658:	3f 90       	pop	r3
    165a:	2f 90       	pop	r2
    165c:	08 95       	ret

0000165e <_Z31getCurrentWindingImpedanceValuev>:
}

/*
	Получение текущего значения сопротивления обмотки от измеренных значений напряжения и силы тока
*/
float getCurrentWindingImpedanceValue() {
    165e:	4f 92       	push	r4
    1660:	5f 92       	push	r5
    1662:	6f 92       	push	r6
    1664:	7f 92       	push	r7
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	00 d0       	rcall	.+0      	; 0x167e <_Z31getCurrentWindingImpedanceValuev+0x20>
    167e:	00 d0       	rcall	.+0      	; 0x1680 <_Z31getCurrentWindingImpedanceValuev+0x22>
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
	byte _windingIndex = 0;
	float _voltage = 0;
	float _amperage = 0;
	
	// В зависимости от текущего режима настроек получаем номер обмотки
	switch(modeWork.current){
    1684:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    1688:	8b 30       	cpi	r24, 0x0B	; 11
    168a:	21 f0       	breq	.+8      	; 0x1694 <_Z31getCurrentWindingImpedanceValuev+0x36>
    168c:	8c 30       	cpi	r24, 0x0C	; 12
    168e:	21 f4       	brne	.+8      	; 0x1698 <_Z31getCurrentWindingImpedanceValuev+0x3a>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			_windingIndex = 1;
			break;
		case MW_SETUP_IMPEDANCE_AC:
			_windingIndex = 2;
    1690:	12 e0       	ldi	r17, 0x02	; 2
			break;
    1692:	03 c0       	rjmp	.+6      	; 0x169a <_Z31getCurrentWindingImpedanceValuev+0x3c>
	switch(modeWork.current){
		case MW_SETUP_IMPEDANCE_AB:
			_windingIndex = 0;
			break;
		case MW_SETUP_IMPEDANCE_BC:
			_windingIndex = 1;
    1694:	11 e0       	ldi	r17, 0x01	; 1
    1696:	01 c0       	rjmp	.+2      	; 0x169a <_Z31getCurrentWindingImpedanceValuev+0x3c>

/*
	Получение текущего значения сопротивления обмотки от измеренных значений напряжения и силы тока
*/
float getCurrentWindingImpedanceValue() {
	byte _windingIndex = 0;
    1698:	10 e0       	ldi	r17, 0x00	; 0
		case MW_SETUP_IMPEDANCE_AC:
			_windingIndex = 2;
			break;
	}

	_voltage = adsVoltage.readADC_SingleEnded(_windingIndex);
    169a:	61 2f       	mov	r22, r17
    169c:	8b e5       	ldi	r24, 0x5B	; 91
    169e:	92 e0       	ldi	r25, 0x02	; 2
    16a0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
	_amperage = adsAmperage.readADC_SingleEnded(_windingIndex);
    16a8:	61 2f       	mov	r22, r17
    16aa:	86 e5       	ldi	r24, 0x56	; 86
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    16b2:	bc 01       	movw	r22, r24
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 a4 19 	call	0x3348	; 0x3348 <__floatunsisf>
    16bc:	6b 01       	movw	r12, r22
    16be:	7c 01       	movw	r14, r24

	_voltage *= ads.voltageStep * settings.multiplierVoltage[_windingIndex];
    16c0:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <__data_start+0x18>
    16c4:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <__data_start+0x19>
    16c8:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <__data_start+0x1a>
    16cc:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <__data_start+0x1b>
    16d0:	24 e0       	ldi	r18, 0x04	; 4
    16d2:	12 9f       	mul	r17, r18
    16d4:	f0 01       	movw	r30, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	e9 51       	subi	r30, 0x19	; 25
    16da:	fe 4f       	sbci	r31, 0xFE	; 254
    16dc:	45 88       	ldd	r4, Z+21	; 0x15
    16de:	56 88       	ldd	r5, Z+22	; 0x16
    16e0:	67 88       	ldd	r6, Z+23	; 0x17
    16e2:	70 8c       	ldd	r7, Z+24	; 0x18
	_amperage *= ads.amperageStep * settings.multiplierAmperage[_windingIndex];;
    16e4:	21 a1       	ldd	r18, Z+33	; 0x21
    16e6:	32 a1       	ldd	r19, Z+34	; 0x22
    16e8:	43 a1       	ldd	r20, Z+35	; 0x23
    16ea:	54 a1       	ldd	r21, Z+36	; 0x24
    16ec:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <__data_start+0x1c>
    16f0:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <__data_start+0x1d>
    16f4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_start+0x1e>
    16f8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_start+0x1f>
    16fc:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    1700:	a7 01       	movw	r20, r14
    1702:	96 01       	movw	r18, r12
    1704:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    1708:	6b 01       	movw	r12, r22
    170a:	7c 01       	movw	r14, r24
	
	return _amperage == 0? 0: _voltage / _amperage;
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	a9 01       	movw	r20, r18
    1712:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    1716:	88 23       	and	r24, r24
    1718:	e1 f0       	breq	.+56     	; 0x1752 <_Z31getCurrentWindingImpedanceValuev+0xf4>
		case MW_SETUP_IMPEDANCE_AC:
			_windingIndex = 2;
			break;
	}

	_voltage = adsVoltage.readADC_SingleEnded(_windingIndex);
    171a:	29 81       	ldd	r18, Y+1	; 0x01
    171c:	3a 81       	ldd	r19, Y+2	; 0x02
    171e:	b9 01       	movw	r22, r18
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 a4 19 	call	0x3348	; 0x3348 <__floatunsisf>
    1728:	69 83       	std	Y+1, r22	; 0x01
    172a:	7a 83       	std	Y+2, r23	; 0x02
    172c:	8b 83       	std	Y+3, r24	; 0x03
    172e:	9c 83       	std	Y+4, r25	; 0x04
	_amperage = adsAmperage.readADC_SingleEnded(_windingIndex);

	_voltage *= ads.voltageStep * settings.multiplierVoltage[_windingIndex];
	_amperage *= ads.amperageStep * settings.multiplierAmperage[_windingIndex];;
	
	return _amperage == 0? 0: _voltage / _amperage;
    1730:	a3 01       	movw	r20, r6
    1732:	92 01       	movw	r18, r4
    1734:	c5 01       	movw	r24, r10
    1736:	b4 01       	movw	r22, r8
    1738:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    173c:	29 81       	ldd	r18, Y+1	; 0x01
    173e:	3a 81       	ldd	r19, Y+2	; 0x02
    1740:	4b 81       	ldd	r20, Y+3	; 0x03
    1742:	5c 81       	ldd	r21, Y+4	; 0x04
    1744:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    1748:	a7 01       	movw	r20, r14
    174a:	96 01       	movw	r18, r12
    174c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <_Z31getCurrentWindingImpedanceValuev+0xfa>
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	cb 01       	movw	r24, r22
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	9f 90       	pop	r9
    1774:	8f 90       	pop	r8
    1776:	7f 90       	pop	r7
    1778:	6f 90       	pop	r6
    177a:	5f 90       	pop	r5
    177c:	4f 90       	pop	r4
    177e:	08 95       	ret

00001780 <_Z21button1LongPressStartv>:
}

/*
	Обработчик длиннкого клика первой клавиши
*/
void button1LongPressStart() {
    1780:	cf 92       	push	r12
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
	// выбор множителя x1x10x100x0.1x0.01x0.001 в режимах установки множителя
	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
    1788:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    178c:	9c ef       	ldi	r25, 0xFC	; 252
    178e:	98 0f       	add	r25, r24
    1790:	96 30       	cpi	r25, 0x06	; 6
    1792:	40 f5       	brcc	.+80     	; 0x17e4 <_Z21button1LongPressStartv+0x64>
		setDigit.curMultiplier = setDigit.curMultiplier >= 100.0f? 0.001f: setDigit.curMultiplier * 10.0f;
    1794:	c0 90 c9 01 	lds	r12, 0x01C9	; 0x8001c9 <setDigit+0x4>
    1798:	d0 90 ca 01 	lds	r13, 0x01CA	; 0x8001ca <setDigit+0x5>
    179c:	e0 90 cb 01 	lds	r14, 0x01CB	; 0x8001cb <setDigit+0x6>
    17a0:	f0 90 cc 01 	lds	r15, 0x01CC	; 0x8001cc <setDigit+0x7>
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	48 ec       	ldi	r20, 0xC8	; 200
    17aa:	52 e4       	ldi	r21, 0x42	; 66
    17ac:	c7 01       	movw	r24, r14
    17ae:	b6 01       	movw	r22, r12
    17b0:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
    17b4:	87 ff       	sbrs	r24, 7
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <_Z21button1LongPressStartv+0x4a>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	c7 01       	movw	r24, r14
    17c2:	b6 01       	movw	r22, r12
    17c4:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <_Z21button1LongPressStartv+0x52>
    17ca:	6f e6       	ldi	r22, 0x6F	; 111
    17cc:	72 e1       	ldi	r23, 0x12	; 18
    17ce:	83 e8       	ldi	r24, 0x83	; 131
    17d0:	9a e3       	ldi	r25, 0x3A	; 58
    17d2:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <setDigit+0x4>
    17d6:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <setDigit+0x5>
    17da:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <setDigit+0x6>
    17de:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <setDigit+0x7>
    17e2:	0e c0       	rjmp	.+28     	; 0x1800 <_Z21button1LongPressStartv+0x80>
		lcdUpdateScreen = true;
		return;
	}
	
	// получение текущих значений сопротивления в режимах установки импеданса
	if (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC) {
    17e4:	96 ef       	ldi	r25, 0xF6	; 246
    17e6:	98 0f       	add	r25, r24
    17e8:	93 30       	cpi	r25, 0x03	; 3
    17ea:	70 f4       	brcc	.+28     	; 0x1808 <_Z21button1LongPressStartv+0x88>
		setDigit.value = getCurrentWindingImpedanceValue();
    17ec:	0e 94 2f 0b 	call	0x165e	; 0x165e <_Z31getCurrentWindingImpedanceValuev>
    17f0:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <setDigit>
    17f4:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <setDigit+0x1>
    17f8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <setDigit+0x2>
    17fc:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <setDigit+0x3>
		lcdUpdateScreen = true;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
    1806:	0b c0       	rjmp	.+22     	; 0x181e <_Z21button1LongPressStartv+0x9e>
		return;
	}
	
	// В режимах просмотра данных, длинный клик переводит в режим вопроса о продолжении измерений
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1808:	93 ef       	ldi	r25, 0xF3	; 243
    180a:	98 0f       	add	r25, r24
    180c:	98 30       	cpi	r25, 0x08	; 8
    180e:	10 f4       	brcc	.+4      	; 0x1814 <_Z21button1LongPressStartv+0x94>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
    1810:	85 e1       	ldi	r24, 0x15	; 21
    1812:	03 c0       	rjmp	.+6      	; 0x181a <_Z21button1LongPressStartv+0x9a>
		return;
	}
	
	// В ржеиме выбора о старте измерений - отклоенние вопроса
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1814:	85 31       	cpi	r24, 0x15	; 21
    1816:	19 f4       	brne	.+6      	; 0x181e <_Z21button1LongPressStartv+0x9e>
		modeWork.current = MW_SHOWING_START;
    1818:	8d e0       	ldi	r24, 0x0D	; 13
    181a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
	}
}
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	cf 90       	pop	r12
    1826:	08 95       	ret

00001828 <_Z12setEditValuev>:

/*
	Получение значений настройки в настроечную переменную для изменения во время настроек
*/
void setEditValue() {
	lcdUpdateScreen = true;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
	switch(modeWork.current) {
    182e:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <modeWork>
    1832:	8e 2f       	mov	r24, r30
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	fc 01       	movw	r30, r24
    1838:	31 97       	sbiw	r30, 0x01	; 1
    183a:	ec 30       	cpi	r30, 0x0C	; 12
    183c:	f1 05       	cpc	r31, r1
    183e:	08 f0       	brcs	.+2      	; 0x1842 <_Z12setEditValuev+0x1a>
    1840:	72 c0       	rjmp	.+228    	; 0x1926 <_Z12setEditValuev+0xfe>
    1842:	e2 5a       	subi	r30, 0xA2	; 162
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			setDigit.value = settings.connectionType;
    184a:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <settings+0x1>
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <_Z12setEditValuev+0x2c>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			setDigit.value = settings.currentAmperageGain;
    1850:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <settings+0x13>
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 a4 19 	call	0x3348	; 0x3348 <__floatunsisf>
    185e:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <setDigit>
    1862:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <setDigit+0x1>
    1866:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <setDigit+0x2>
    186a:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <setDigit+0x3>
			break;
    186e:	5b c0       	rjmp	.+182    	; 0x1926 <_Z12setEditValuev+0xfe>
		case MW_SETUP_GAIN_VOLTAGE:
			setDigit.value = settings.currentVoltageGain;
    1870:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x14>
    1874:	ef cf       	rjmp	.-34     	; 0x1854 <_Z12setEditValuev+0x2c>
			break;			
		case MW_SETUP_IMPEDANCE_AB:
			setDigit.value = settings.impedance[0];
    1876:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <settings+0x6>
    187a:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <settings+0x7>
    187e:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <settings+0x8>
    1882:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <settings+0x9>
    1886:	47 c0       	rjmp	.+142    	; 0x1916 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			setDigit.value = settings.impedance[1];
    1888:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <settings+0xa>
    188c:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <settings+0xb>
    1890:	a0 91 f3 01 	lds	r26, 0x01F3	; 0x8001f3 <settings+0xc>
    1894:	b0 91 f4 01 	lds	r27, 0x01F4	; 0x8001f4 <settings+0xd>
    1898:	3e c0       	rjmp	.+124    	; 0x1916 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			setDigit.value = settings.impedance[2];
    189a:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <settings+0xe>
    189e:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <settings+0xf>
    18a2:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <settings+0x10>
    18a6:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <settings+0x11>
    18aa:	35 c0       	rjmp	.+106    	; 0x1916 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			setDigit.value = settings.multiplierVoltage[0];
    18ac:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <settings+0x15>
    18b0:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <settings+0x16>
    18b4:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <settings+0x17>
    18b8:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <settings+0x18>
    18bc:	2c c0       	rjmp	.+88     	; 0x1916 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			setDigit.value = settings.multiplierVoltage[1];
    18be:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <settings+0x19>
    18c2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <settings+0x1a>
    18c6:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <settings+0x1b>
    18ca:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <settings+0x1c>
    18ce:	23 c0       	rjmp	.+70     	; 0x1916 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			setDigit.value = settings.multiplierVoltage[2];
    18d0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <settings+0x1d>
    18d4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <settings+0x1e>
    18d8:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <settings+0x1f>
    18dc:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <settings+0x20>
    18e0:	1a c0       	rjmp	.+52     	; 0x1916 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			setDigit.value = settings.multiplierAmperage[0];
    18e2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <settings+0x21>
    18e6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <settings+0x22>
    18ea:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <settings+0x23>
    18ee:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <settings+0x24>
    18f2:	11 c0       	rjmp	.+34     	; 0x1916 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			setDigit.value = settings.multiplierAmperage[1];
    18f4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <settings+0x25>
    18f8:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <settings+0x26>
    18fc:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <settings+0x27>
    1900:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <settings+0x28>
    1904:	08 c0       	rjmp	.+16     	; 0x1916 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			setDigit.value = settings.multiplierAmperage[2];
    1906:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <settings+0x29>
    190a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <settings+0x2a>
    190e:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <settings+0x2b>
    1912:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <settings+0x2c>
    1916:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <setDigit>
    191a:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <setDigit+0x1>
    191e:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <setDigit+0x2>
    1922:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <setDigit+0x3>
			break;
	}
	setDigit.curMultiplier = 1.0f;
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e8       	ldi	r26, 0x80	; 128
    192c:	bf e3       	ldi	r27, 0x3F	; 63
    192e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <setDigit+0x4>
    1932:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <setDigit+0x5>
    1936:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <setDigit+0x6>
    193a:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <setDigit+0x7>
    193e:	08 95       	ret

00001940 <_Z12button2Clickv>:
}

/*
	Обработчика короткого клика второй клавиши
*/
void button2Click() {
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	cf 93       	push	r28
	// Если мы в настройках сопротивления то обнуляем значения сопротивлений
	if (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC) {
    194a:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    194e:	96 ef       	ldi	r25, 0xF6	; 246
    1950:	98 0f       	add	r25, r24
    1952:	93 30       	cpi	r25, 0x03	; 3
    1954:	60 f4       	brcc	.+24     	; 0x196e <_Z12button2Clickv+0x2e>
		setDigit.value = 0;
    1956:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <setDigit>
    195a:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <setDigit+0x1>
    195e:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <setDigit+0x2>
    1962:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <setDigit+0x3>
		lcdUpdateScreen = true;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
		return;
    196c:	70 c0       	rjmp	.+224    	; 0x1a4e <_Z12button2Clickv+0x10e>
	}
	
	// В режиме предупреждения необходимости настроек - переводим в режим настроек
	if (modeWork.current == MW_NEED_SETUP) {
    196e:	81 11       	cpse	r24, r1
    1970:	0a c0       	rjmp	.+20     	; 0x1986 <_Z12button2Clickv+0x46>
		lcdUpdateScreen = true;
    1972:	c1 e0       	ldi	r28, 0x01	; 1
    1974:	c0 93 b6 01 	sts	0x01B6, r28	; 0x8001b6 <lcdUpdateScreen>
		modeWork.current = MW_SETUP_START;
    1978:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <modeWork>
		setEditValue();
    197c:	0e 94 14 0c 	call	0x1828	; 0x1828 <_Z12setEditValuev>
		settings.isSetupMode = true;
    1980:	c0 93 f9 01 	sts	0x01F9, r28	; 0x8001f9 <settings+0x12>
		return;
    1984:	64 c0       	rjmp	.+200    	; 0x1a4e <_Z12button2Clickv+0x10e>
	}
		
	// Если режим настроек
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
    1986:	9f ef       	ldi	r25, 0xFF	; 255
    1988:	98 0f       	add	r25, r24
    198a:	9c 30       	cpi	r25, 0x0C	; 12
    198c:	08 f0       	brcs	.+2      	; 0x1990 <_Z12button2Clickv+0x50>
    198e:	4e c0       	rjmp	.+156    	; 0x1a2c <_Z12button2Clickv+0xec>
		lcdUpdateScreen = true;
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	c1 f4       	brne	.+48     	; 0x19ca <_Z12button2Clickv+0x8a>
			// режим выбора подключения - свапаем режим
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	a9 01       	movw	r20, r18
    19a0:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    19a4:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    19a8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    19ac:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    19b0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <_Z12button2Clickv+0x80>
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	dc 01       	movw	r26, r24
    19be:	2d c0       	rjmp	.+90     	; 0x1a1a <_Z12button2Clickv+0xda>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a0 e8       	ldi	r26, 0x80	; 128
    19c6:	bf e3       	ldi	r27, 0x3F	; 63
    19c8:	28 c0       	rjmp	.+80     	; 0x1a1a <_Z12button2Clickv+0xda>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в меньшую сторону
			setDigit.value = setDigit.value == 0? 5: setDigit.value - 1;
		}else {
			// Любой другой режим уменьшаем значение на величину curMultiplier
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    19ca:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <setDigit+0x4>
    19ce:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <setDigit+0x5>
    19d2:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <setDigit+0x6>
    19d6:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <setDigit+0x7>
    19da:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    19de:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    19e2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    19e6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    19ea:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
    19ee:	6b 01       	movw	r12, r22
    19f0:	7c 01       	movw	r14, r24
			if (setDigit.value < 0) {
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	a9 01       	movw	r20, r18
    19f8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    19fc:	87 fd       	sbrc	r24, 7
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <_Z12button2Clickv+0xd2>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в меньшую сторону
			setDigit.value = setDigit.value == 0? 5: setDigit.value - 1;
		}else {
			// Любой другой режим уменьшаем значение на величину curMultiplier
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    1a00:	c0 92 c5 01 	sts	0x01C5, r12	; 0x8001c5 <setDigit>
    1a04:	d0 92 c6 01 	sts	0x01C6, r13	; 0x8001c6 <setDigit+0x1>
    1a08:	e0 92 c7 01 	sts	0x01C7, r14	; 0x8001c7 <setDigit+0x2>
    1a0c:	f0 92 c8 01 	sts	0x01C8, r15	; 0x8001c8 <setDigit+0x3>
    1a10:	1e c0       	rjmp	.+60     	; 0x1a4e <_Z12button2Clickv+0x10e>
			if (setDigit.value < 0) {
				setDigit.value = 999.999f;
    1a12:	80 ef       	ldi	r24, 0xF0	; 240
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	a9 e7       	ldi	r26, 0x79	; 121
    1a18:	b4 e4       	ldi	r27, 0x44	; 68
    1a1a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <setDigit>
    1a1e:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <setDigit+0x1>
    1a22:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <setDigit+0x2>
    1a26:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <setDigit+0x3>
    1a2a:	11 c0       	rjmp	.+34     	; 0x1a4e <_Z12button2Clickv+0x10e>
		}
		return;
	}
	
	// В режиме отображения данных листаем назад меню
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1a2c:	23 ef       	ldi	r18, 0xF3	; 243
    1a2e:	28 0f       	add	r18, r24
    1a30:	28 30       	cpi	r18, 0x08	; 8
    1a32:	30 f4       	brcc	.+12     	; 0x1a40 <_Z12button2Clickv+0x100>
		modeWork.current = modeWork.current == MW_SHOWING_START? MW_SHOWING_STOP: modeWork.current - 1;
    1a34:	8d 30       	cpi	r24, 0x0D	; 13
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <_Z12button2Clickv+0xfa>
    1a38:	94 e1       	ldi	r25, 0x14	; 20
    1a3a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <modeWork>
		return;
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <_Z12button2Clickv+0x10e>
	}
	
	// Если вопрос о начале измерений, то клик его отклоняет
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1a40:	85 31       	cpi	r24, 0x15	; 21
    1a42:	29 f4       	brne	.+10     	; 0x1a4e <_Z12button2Clickv+0x10e>
		modeWork.current = MW_SHOWING_START;
    1a44:	8d e0       	ldi	r24, 0x0D	; 13
    1a46:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
		settings.isReadyToWork = MM_STOP;
    1a4a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <settings>
		return;
	}
}
    1a4e:	cf 91       	pop	r28
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	08 95       	ret

00001a5a <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>:
}

/*
	Установка степени усиления АЦП
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
    1a62:	16 2f       	mov	r17, r22
	Serial.print(F("ADS: "));
    1a64:	6f e2       	ldi	r22, 0x2F	; 47
    1a66:	71 e0       	ldi	r23, 0x01	; 1
    1a68:	84 e2       	ldi	r24, 0x24	; 36
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
	switch(_index) {
    1a70:	13 30       	cpi	r17, 0x03	; 3
    1a72:	21 f1       	breq	.+72     	; 0x1abc <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x62>
    1a74:	68 f4       	brcc	.+26     	; 0x1a90 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x36>
    1a76:	11 30       	cpi	r17, 0x01	; 1
    1a78:	c1 f0       	breq	.+48     	; 0x1aaa <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x50>
    1a7a:	12 30       	cpi	r17, 0x02	; 2
    1a7c:	89 f5       	brne	.+98     	; 0x1ae0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x86>
		case 1:
			Serial.println(F("GAIN_ONE"));
			_ads->setGain(GAIN_ONE);
			break;
		case 2:
			Serial.println(F("GAIN_TWO"));
    1a7e:	6d e1       	ldi	r22, 0x1D	; 29
    1a80:	71 e0       	ldi	r23, 0x01	; 1
    1a82:	84 e2       	ldi	r24, 0x24	; 36
    1a84:	93 e0       	ldi	r25, 0x03	; 3
    1a86:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_TWO);
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	74 e0       	ldi	r23, 0x04	; 4
    1a8e:	30 c0       	rjmp	.+96     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
/*
	Установка степени усиления АЦП
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	Serial.print(F("ADS: "));
	switch(_index) {
    1a90:	14 30       	cpi	r17, 0x04	; 4
    1a92:	e9 f0       	breq	.+58     	; 0x1ace <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x74>
    1a94:	15 30       	cpi	r17, 0x05	; 5
    1a96:	21 f5       	brne	.+72     	; 0x1ae0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x86>
		case 4:
			Serial.println(F("GAIN_EIGHT"));
			_ads->setGain(GAIN_EIGHT);
			break;
		case 5:
			Serial.println(F("GAIN_SIXTEEN"));
    1a98:	6b ef       	ldi	r22, 0xFB	; 251
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	84 e2       	ldi	r24, 0x24	; 36
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_SIXTEEN);
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	7a e0       	ldi	r23, 0x0A	; 10
    1aa8:	23 c0       	rjmp	.+70     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	Serial.print(F("ADS: "));
	switch(_index) {
		case 1:
			Serial.println(F("GAIN_ONE"));
    1aaa:	66 e2       	ldi	r22, 0x26	; 38
    1aac:	71 e0       	ldi	r23, 0x01	; 1
    1aae:	84 e2       	ldi	r24, 0x24	; 36
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_ONE);
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	72 e0       	ldi	r23, 0x02	; 2
    1aba:	1a c0       	rjmp	.+52     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
		case 2:
			Serial.println(F("GAIN_TWO"));
			_ads->setGain(GAIN_TWO);
			break;
		case 3:
			Serial.println(F("GAIN_FOUR"));
    1abc:	63 e1       	ldi	r22, 0x13	; 19
    1abe:	71 e0       	ldi	r23, 0x01	; 1
    1ac0:	84 e2       	ldi	r24, 0x24	; 36
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_FOUR);
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	76 e0       	ldi	r23, 0x06	; 6
    1acc:	11 c0       	rjmp	.+34     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
			break;
		case 4:
			Serial.println(F("GAIN_EIGHT"));
    1ace:	68 e0       	ldi	r22, 0x08	; 8
    1ad0:	71 e0       	ldi	r23, 0x01	; 1
    1ad2:	84 e2       	ldi	r24, 0x24	; 36
    1ad4:	93 e0       	ldi	r25, 0x03	; 3
    1ad6:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_EIGHT);
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	78 e0       	ldi	r23, 0x08	; 8
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
		case 5:
			Serial.println(F("GAIN_SIXTEEN"));
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			Serial.println(F("GAIN_TWOTHIRDS"));
    1ae0:	6c ee       	ldi	r22, 0xEC	; 236
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	84 e2       	ldi	r24, 0x24	; 36
    1ae6:	93 e0       	ldi	r25, 0x03	; 3
    1ae8:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_TWOTHIRDS);
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	ce 01       	movw	r24, r28
			break;
	}
}
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
			Serial.println(F("GAIN_SIXTEEN"));
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			Serial.println(F("GAIN_TWOTHIRDS"));
			_ads->setGain(GAIN_TWOTHIRDS);
    1af8:	0c 94 22 12 	jmp	0x2444	; 0x2444 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>

00001afc <_Z18initAdsVoltageGainv>:
}

/*
	Инициализация усиления АЦП по напряжению
*/
void initAdsVoltageGain() {
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
	setAdsGainByIndex(&adsVoltage, settings.currentVoltageGain);
    1b00:	c7 ee       	ldi	r28, 0xE7	; 231
    1b02:	d1 e0       	ldi	r29, 0x01	; 1
    1b04:	6c 89       	ldd	r22, Y+20	; 0x14
    1b06:	8b e5       	ldi	r24, 0x5B	; 91
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.voltageStep = ads.gainStep[settings.currentVoltageGain] / 1000.0;
    1b0e:	ec 89       	ldd	r30, Y+20	; 0x14
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	e8 9f       	mul	r30, r24
    1b14:	f0 01       	movw	r30, r0
    1b16:	11 24       	eor	r1, r1
    1b18:	e0 50       	subi	r30, 0x00	; 0
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a e7       	ldi	r20, 0x7A	; 122
    1b22:	54 e4       	ldi	r21, 0x44	; 68
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
    1b30:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_start+0x18>
    1b34:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_start+0x19>
    1b38:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_start+0x1a>
    1b3c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_start+0x1b>
}
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

00001b46 <_Z19initAdsAmperageGainv>:

/*
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
    1b4a:	c7 ee       	ldi	r28, 0xE7	; 231
    1b4c:	d1 e0       	ldi	r29, 0x01	; 1
    1b4e:	6b 89       	ldd	r22, Y+19	; 0x13
    1b50:	86 e5       	ldi	r24, 0x56	; 86
    1b52:	92 e0       	ldi	r25, 0x02	; 2
    1b54:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    1b58:	eb 89       	ldd	r30, Y+19	; 0x13
    1b5a:	84 e0       	ldi	r24, 0x04	; 4
    1b5c:	e8 9f       	mul	r30, r24
    1b5e:	f0 01       	movw	r30, r0
    1b60:	11 24       	eor	r1, r1
    1b62:	e0 50       	subi	r30, 0x00	; 0
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a e7       	ldi	r20, 0x7A	; 122
    1b6c:	54 e4       	ldi	r21, 0x44	; 68
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
    1b7a:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <__data_start+0x1c>
    1b7e:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <__data_start+0x1d>
    1b82:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_start+0x1e>
    1b86:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_start+0x1f>
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1b90:	26 e0       	ldi	r18, 0x06	; 6
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	55 e2       	ldi	r21, 0x25	; 37
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	84 e2       	ldi	r24, 0x24	; 36
    1b9c:	93 e0       	ldi	r25, 0x03	; 3
    1b9e:	0e 94 a4 1b 	call	0x3748	; 0x3748 <_ZN14HardwareSerial5beginEmh>
void lcdClearCell(byte col, byte row, byte rowLength);


void setup() {
	Serial.begin(9600);
	Serial.println(F("Initialization..."));
    1ba2:	63 e8       	ldi	r22, 0x83	; 131
    1ba4:	74 e0       	ldi	r23, 0x04	; 4
    1ba6:	84 e2       	ldi	r24, 0x24	; 36
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализация АЦП
	adsVoltage.setGain(GAIN_TWOTHIRDS);
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	8b e5       	ldi	r24, 0x5B	; 91
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	0e 94 22 12 	call	0x2444	; 0x2444 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsVoltage.begin();
    1bba:	8b e5       	ldi	r24, 0x5B	; 91
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN16Adafruit_ADS10155beginEv>
	adsAmperage.setGain(GAIN_TWOTHIRDS);
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	86 e5       	ldi	r24, 0x56	; 86
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 22 12 	call	0x2444	; 0x2444 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsAmperage.begin();
    1bce:	86 e5       	ldi	r24, 0x56	; 86
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN16Adafruit_ADS10155beginEv>
	// Инициализация LCD модуля
	lcd.init();
    1bd6:	89 eb       	ldi	r24, 0xB9	; 185
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    1bde:	89 eb       	ldi	r24, 0xB9	; 185
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	0e 94 cb 12 	call	0x2596	; 0x2596 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    1be6:	89 eb       	ldi	r24, 0xB9	; 185
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN17LiquidCrystal_I2C5clearEv>
	Serial.println(F("LCD inited!"));
    1bee:	67 e7       	ldi	r22, 0x77	; 119
    1bf0:	74 e0       	ldi	r23, 0x04	; 4
    1bf2:	84 e2       	ldi	r24, 0x24	; 36
    1bf4:	93 e0       	ldi	r25, 0x03	; 3
    1bf6:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализая кнопок
	button1Callback.attachClick(button1Click);								// Установка callback функции на короткий клик
    1bfa:	67 ef       	ldi	r22, 0xF7	; 247
    1bfc:	72 e0       	ldi	r23, 0x02	; 2
    1bfe:	85 e3       	ldi	r24, 0x35	; 53
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN9OneButton11attachClickEPFvvE>
	button1Callback.attachLongPressStart(button1LongPressStart);			// Установка callback функции на длинный клик
    1c06:	60 ec       	ldi	r22, 0xC0	; 192
    1c08:	7b e0       	ldi	r23, 0x0B	; 11
    1c0a:	85 e3       	ldi	r24, 0x35	; 53
    1c0c:	92 e0       	ldi	r25, 0x02	; 2
    1c0e:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN9OneButton20attachLongPressStartEPFvvE>
	button1Callback.setDebounceTicks(30);									// Время до идентификации клика в мс для нивилирования дребезга контактов
    1c12:	6e e1       	ldi	r22, 0x1E	; 30
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	85 e3       	ldi	r24, 0x35	; 53
    1c18:	92 e0       	ldi	r25, 0x02	; 2
    1c1a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN9OneButton16setDebounceTicksEi>
	button1Callback.setClickTicks(200);										// Количество мс нажатия для того чтобы клик был идентифицирован
    1c1e:	68 ec       	ldi	r22, 0xC8	; 200
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	85 e3       	ldi	r24, 0x35	; 53
    1c24:	92 e0       	ldi	r25, 0x02	; 2
    1c26:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_ZN9OneButton13setClickTicksEi>
	button1Callback.setPressTicks(1000);									// Количество мс нажатия для идентификаци длинного клика
    1c2a:	68 ee       	ldi	r22, 0xE8	; 232
    1c2c:	73 e0       	ldi	r23, 0x03	; 3
    1c2e:	85 e3       	ldi	r24, 0x35	; 53
    1c30:	92 e0       	ldi	r25, 0x02	; 2
    1c32:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 1 inited!"));
    1c36:	66 e6       	ldi	r22, 0x66	; 102
    1c38:	74 e0       	ldi	r23, 0x04	; 4
    1c3a:	84 e2       	ldi	r24, 0x24	; 36
    1c3c:	93 e0       	ldi	r25, 0x03	; 3
    1c3e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	button2Callback.attachClick(button2Click);
    1c42:	60 ea       	ldi	r22, 0xA0	; 160
    1c44:	7c e0       	ldi	r23, 0x0C	; 12
    1c46:	84 e1       	ldi	r24, 0x14	; 20
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN9OneButton11attachClickEPFvvE>
	button2Callback.attachLongPressStart(button2LongPressStart);
    1c4e:	6e e6       	ldi	r22, 0x6E	; 110
    1c50:	71 e1       	ldi	r23, 0x11	; 17
    1c52:	84 e1       	ldi	r24, 0x14	; 20
    1c54:	92 e0       	ldi	r25, 0x02	; 2
    1c56:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN9OneButton20attachLongPressStartEPFvvE>
	button2Callback.setDebounceTicks(30);
    1c5a:	6e e1       	ldi	r22, 0x1E	; 30
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	84 e1       	ldi	r24, 0x14	; 20
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN9OneButton16setDebounceTicksEi>
	button2Callback.setClickTicks(200);
    1c66:	68 ec       	ldi	r22, 0xC8	; 200
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	84 e1       	ldi	r24, 0x14	; 20
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_ZN9OneButton13setClickTicksEi>
	button2Callback.setPressTicks(1000);
    1c72:	68 ee       	ldi	r22, 0xE8	; 232
    1c74:	73 e0       	ldi	r23, 0x03	; 3
    1c76:	84 e1       	ldi	r24, 0x14	; 20
    1c78:	92 e0       	ldi	r25, 0x02	; 2
    1c7a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 2 inited!"));
    1c7e:	65 e5       	ldi	r22, 0x55	; 85
    1c80:	74 e0       	ldi	r23, 0x04	; 4
    1c82:	84 e2       	ldi	r24, 0x24	; 36
    1c84:	93 e0       	ldi	r25, 0x03	; 3
    1c86:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализация старт-пакета данных
	if (eeprom_read_byte(&eeprom_first_start) != 100) {
    1c8a:	87 e2       	ldi	r24, 0x27	; 39
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeprom_read_byte>
    1c92:	84 36       	cpi	r24, 0x64	; 100
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <setup+0x108>
    1c96:	59 c0       	rjmp	.+178    	; 0x1d4a <setup+0x1ba>
		eeprom_update_byte(&eeprom_connection_type, CONNECTION_TYPE_STAR);
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	86 e2       	ldi	r24, 0x26	; 38
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_amperage, 0);
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	85 e2       	ldi	r24, 0x25	; 37
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_voltage, 0);
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	84 e2       	ldi	r24, 0x24	; 36
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <eeprom_update_byte>
		eeprom_update_float(&eeprom_impedance_ab, 0);
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	ba 01       	movw	r22, r20
    1cbc:	80 e2       	ldi	r24, 0x20	; 32
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_bc, 0);
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	ba 01       	movw	r22, r20
    1cca:	8c e1       	ldi	r24, 0x1C	; 28
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_ac, 0);
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	ba 01       	movw	r22, r20
    1cd8:	88 e1       	ldi	r24, 0x18	; 24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ab, 0);
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	ba 01       	movw	r22, r20
    1ce6:	84 e1       	ldi	r24, 0x14	; 20
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_bc, 0);
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	ba 01       	movw	r22, r20
    1cf4:	80 e1       	ldi	r24, 0x10	; 16
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ac, 0);
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	ba 01       	movw	r22, r20
    1d02:	8c e0       	ldi	r24, 0x0C	; 12
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ab, 0);
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	ba 01       	movw	r22, r20
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_bc, 0);
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	ba 01       	movw	r22, r20
    1d1e:	84 e0       	ldi	r24, 0x04	; 4
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ac, 0);
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	ba 01       	movw	r22, r20
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 f5 20 	call	0x41ea	; 0x41ea <eeprom_update_dword>
		eeprom_update_byte(&eeprom_first_start, 100);
    1d34:	64 e6       	ldi	r22, 0x64	; 100
    1d36:	87 e2       	ldi	r24, 0x27	; 39
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <eeprom_update_byte>
		Serial.println(F("EEPROM first start writed!"));
    1d3e:	6a e3       	ldi	r22, 0x3A	; 58
    1d40:	74 e0       	ldi	r23, 0x04	; 4
    1d42:	84 e2       	ldi	r24, 0x24	; 36
    1d44:	93 e0       	ldi	r25, 0x03	; 3
    1d46:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	// Теперь старт данные получаем из памяти при старте
	settings.currentAmperageGain = eeprom_read_byte(&eeprom_gain_amperage);
    1d4a:	85 e2       	ldi	r24, 0x25	; 37
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeprom_read_byte>
    1d52:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <settings+0x13>
	settings.currentVoltageGain = eeprom_read_byte(&eeprom_gain_voltage);
    1d56:	84 e2       	ldi	r24, 0x24	; 36
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeprom_read_byte>
    1d5e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <settings+0x14>
	settings.connectionType = eeprom_read_byte(&eeprom_connection_type);
    1d62:	86 e2       	ldi	r24, 0x26	; 38
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeprom_read_byte>
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <setup+0x1e2>
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <settings+0x1>
	settings.impedance[0] = eeprom_read_float(&eeprom_impedance_ab);
    1d76:	80 e2       	ldi	r24, 0x20	; 32
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1d7e:	60 93 ed 01 	sts	0x01ED, r22	; 0x8001ed <settings+0x6>
    1d82:	70 93 ee 01 	sts	0x01EE, r23	; 0x8001ee <settings+0x7>
    1d86:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <settings+0x8>
    1d8a:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <settings+0x9>
	settings.impedance[1] = eeprom_read_float(&eeprom_impedance_bc);
    1d8e:	8c e1       	ldi	r24, 0x1C	; 28
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1d96:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <settings+0xa>
    1d9a:	70 93 f2 01 	sts	0x01F2, r23	; 0x8001f2 <settings+0xb>
    1d9e:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <settings+0xc>
    1da2:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <settings+0xd>
	settings.impedance[2] = eeprom_read_float(&eeprom_impedance_ac);
    1da6:	88 e1       	ldi	r24, 0x18	; 24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1dae:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <settings+0xe>
    1db2:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <settings+0xf>
    1db6:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <settings+0x10>
    1dba:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <settings+0x11>
	settings.multiplierVoltage[0] = eeprom_read_float(&eeprom_voltage_mult_ab);
    1dbe:	84 e1       	ldi	r24, 0x14	; 20
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1dc6:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <settings+0x15>
    1dca:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <settings+0x16>
    1dce:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <settings+0x17>
    1dd2:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <settings+0x18>
	settings.multiplierVoltage[1] = eeprom_read_float(&eeprom_voltage_mult_bc);
    1dd6:	80 e1       	ldi	r24, 0x10	; 16
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1dde:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <settings+0x19>
    1de2:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <settings+0x1a>
    1de6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <settings+0x1b>
    1dea:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <settings+0x1c>
	settings.multiplierVoltage[2] = eeprom_read_float(&eeprom_voltage_mult_ac);
    1dee:	8c e0       	ldi	r24, 0x0C	; 12
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1df6:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <settings+0x1d>
    1dfa:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <settings+0x1e>
    1dfe:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <settings+0x1f>
    1e02:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <settings+0x20>
	settings.multiplierAmperage[0] = eeprom_read_float(&eeprom_amperage_mult_ab);
    1e06:	88 e0       	ldi	r24, 0x08	; 8
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1e0e:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <settings+0x21>
    1e12:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <settings+0x22>
    1e16:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <settings+0x23>
    1e1a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <settings+0x24>
	settings.multiplierAmperage[1] = eeprom_read_float(&eeprom_amperage_mult_bc);
    1e1e:	84 e0       	ldi	r24, 0x04	; 4
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1e26:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <settings+0x25>
    1e2a:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <settings+0x26>
    1e2e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <settings+0x27>
    1e32:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <settings+0x28>
	settings.multiplierAmperage[2] = eeprom_read_float(&eeprom_amperage_mult_ac);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeprom_read_dword>
    1e3e:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <settings+0x29>
    1e42:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <settings+0x2a>
    1e46:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <settings+0x2b>
    1e4a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <settings+0x2c>
	Serial.println(F("EEPROM values:"));
    1e4e:	6b e2       	ldi	r22, 0x2B	; 43
    1e50:	74 e0       	ldi	r23, 0x04	; 4
    1e52:	84 e2       	ldi	r24, 0x24	; 36
    1e54:	93 e0       	ldi	r25, 0x03	; 3
    1e56:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("gain_amperage: ")); Serial.println(settings.currentAmperageGain);
    1e5a:	6b e1       	ldi	r22, 0x1B	; 27
    1e5c:	74 e0       	ldi	r23, 0x04	; 4
    1e5e:	84 e2       	ldi	r24, 0x24	; 36
    1e60:	93 e0       	ldi	r25, 0x03	; 3
    1e62:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1e66:	4a e0       	ldi	r20, 0x0A	; 10
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <settings+0x13>
    1e6e:	84 e2       	ldi	r24, 0x24	; 36
    1e70:	93 e0       	ldi	r25, 0x03	; 3
    1e72:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_ZN5Print7printlnEhi>
	Serial.print(F("gain_voltage: ")); Serial.println(settings.currentVoltageGain);
    1e76:	6c e0       	ldi	r22, 0x0C	; 12
    1e78:	74 e0       	ldi	r23, 0x04	; 4
    1e7a:	84 e2       	ldi	r24, 0x24	; 36
    1e7c:	93 e0       	ldi	r25, 0x03	; 3
    1e7e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1e82:	4a e0       	ldi	r20, 0x0A	; 10
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x14>
    1e8a:	84 e2       	ldi	r24, 0x24	; 36
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_ZN5Print7printlnEhi>
	Serial.print(F("connection_type: ")); Serial.println(settings.connectionType);
    1e92:	6a ef       	ldi	r22, 0xFA	; 250
    1e94:	73 e0       	ldi	r23, 0x03	; 3
    1e96:	84 e2       	ldi	r24, 0x24	; 36
    1e98:	93 e0       	ldi	r25, 0x03	; 3
    1e9a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1e9e:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <settings+0x1>
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	4a e0       	ldi	r20, 0x0A	; 10
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	84 e2       	ldi	r24, 0x24	; 36
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN5Print7printlnEii>
	Serial.print(F("impedance_ab: ")); Serial.println(settings.impedance[0], 10);
    1eb0:	6b ee       	ldi	r22, 0xEB	; 235
    1eb2:	73 e0       	ldi	r23, 0x03	; 3
    1eb4:	84 e2       	ldi	r24, 0x24	; 36
    1eb6:	93 e0       	ldi	r25, 0x03	; 3
    1eb8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1ebc:	40 91 ed 01 	lds	r20, 0x01ED	; 0x8001ed <settings+0x6>
    1ec0:	50 91 ee 01 	lds	r21, 0x01EE	; 0x8001ee <settings+0x7>
    1ec4:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <settings+0x8>
    1ec8:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <settings+0x9>
    1ecc:	2a e0       	ldi	r18, 0x0A	; 10
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	84 e2       	ldi	r24, 0x24	; 36
    1ed2:	93 e0       	ldi	r25, 0x03	; 3
    1ed4:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	Serial.print(F("impedance_bc: ")); Serial.println(settings.impedance[1], 10);
    1ed8:	6c ed       	ldi	r22, 0xDC	; 220
    1eda:	73 e0       	ldi	r23, 0x03	; 3
    1edc:	84 e2       	ldi	r24, 0x24	; 36
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1ee4:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <settings+0xa>
    1ee8:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <settings+0xb>
    1eec:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <settings+0xc>
    1ef0:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <settings+0xd>
    1ef4:	2a e0       	ldi	r18, 0x0A	; 10
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	84 e2       	ldi	r24, 0x24	; 36
    1efa:	93 e0       	ldi	r25, 0x03	; 3
    1efc:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	Serial.print(F("impedance_ac: ")); Serial.println(settings.impedance[2], 10);
    1f00:	6d ec       	ldi	r22, 0xCD	; 205
    1f02:	73 e0       	ldi	r23, 0x03	; 3
    1f04:	84 e2       	ldi	r24, 0x24	; 36
    1f06:	93 e0       	ldi	r25, 0x03	; 3
    1f08:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1f0c:	40 91 f5 01 	lds	r20, 0x01F5	; 0x8001f5 <settings+0xe>
    1f10:	50 91 f6 01 	lds	r21, 0x01F6	; 0x8001f6 <settings+0xf>
    1f14:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <settings+0x10>
    1f18:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <settings+0x11>
    1f1c:	2a e0       	ldi	r18, 0x0A	; 10
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	84 e2       	ldi	r24, 0x24	; 36
    1f22:	93 e0       	ldi	r25, 0x03	; 3
    1f24:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_ab: ")); Serial.println(settings.multiplierVoltage[0], 3);
    1f28:	6b eb       	ldi	r22, 0xBB	; 187
    1f2a:	73 e0       	ldi	r23, 0x03	; 3
    1f2c:	84 e2       	ldi	r24, 0x24	; 36
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1f34:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <settings+0x15>
    1f38:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <settings+0x16>
    1f3c:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <settings+0x17>
    1f40:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <settings+0x18>
    1f44:	23 e0       	ldi	r18, 0x03	; 3
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	84 e2       	ldi	r24, 0x24	; 36
    1f4a:	93 e0       	ldi	r25, 0x03	; 3
    1f4c:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_bc: ")); Serial.println(settings.multiplierVoltage[1], 3);
    1f50:	69 ea       	ldi	r22, 0xA9	; 169
    1f52:	73 e0       	ldi	r23, 0x03	; 3
    1f54:	84 e2       	ldi	r24, 0x24	; 36
    1f56:	93 e0       	ldi	r25, 0x03	; 3
    1f58:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1f5c:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <settings+0x19>
    1f60:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <settings+0x1a>
    1f64:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <settings+0x1b>
    1f68:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <settings+0x1c>
    1f6c:	23 e0       	ldi	r18, 0x03	; 3
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	84 e2       	ldi	r24, 0x24	; 36
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_ac: ")); Serial.println(settings.multiplierVoltage[2], 3);
    1f78:	67 e9       	ldi	r22, 0x97	; 151
    1f7a:	73 e0       	ldi	r23, 0x03	; 3
    1f7c:	84 e2       	ldi	r24, 0x24	; 36
    1f7e:	93 e0       	ldi	r25, 0x03	; 3
    1f80:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1f84:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <settings+0x1d>
    1f88:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <settings+0x1e>
    1f8c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <settings+0x1f>
    1f90:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <settings+0x20>
    1f94:	23 e0       	ldi	r18, 0x03	; 3
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	84 e2       	ldi	r24, 0x24	; 36
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_ab: ")); Serial.println(settings.multiplierAmperage[0], 3);
    1fa0:	64 e8       	ldi	r22, 0x84	; 132
    1fa2:	73 e0       	ldi	r23, 0x03	; 3
    1fa4:	84 e2       	ldi	r24, 0x24	; 36
    1fa6:	93 e0       	ldi	r25, 0x03	; 3
    1fa8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1fac:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <settings+0x21>
    1fb0:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <settings+0x22>
    1fb4:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <settings+0x23>
    1fb8:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <settings+0x24>
    1fbc:	23 e0       	ldi	r18, 0x03	; 3
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	84 e2       	ldi	r24, 0x24	; 36
    1fc2:	93 e0       	ldi	r25, 0x03	; 3
    1fc4:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_bc: ")); Serial.println(settings.multiplierAmperage[1], 3);
    1fc8:	61 e7       	ldi	r22, 0x71	; 113
    1fca:	73 e0       	ldi	r23, 0x03	; 3
    1fcc:	84 e2       	ldi	r24, 0x24	; 36
    1fce:	93 e0       	ldi	r25, 0x03	; 3
    1fd0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1fd4:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <settings+0x25>
    1fd8:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <settings+0x26>
    1fdc:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <settings+0x27>
    1fe0:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <settings+0x28>
    1fe4:	23 e0       	ldi	r18, 0x03	; 3
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	84 e2       	ldi	r24, 0x24	; 36
    1fea:	93 e0       	ldi	r25, 0x03	; 3
    1fec:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_ac: ")); Serial.println(settings.multiplierAmperage[2], 3);
    1ff0:	6e e5       	ldi	r22, 0x5E	; 94
    1ff2:	73 e0       	ldi	r23, 0x03	; 3
    1ff4:	84 e2       	ldi	r24, 0x24	; 36
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    1ffc:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <settings+0x29>
    2000:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <settings+0x2a>
    2004:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <settings+0x2b>
    2008:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <settings+0x2c>
    200c:	23 e0       	ldi	r18, 0x03	; 3
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	84 e2       	ldi	r24, 0x24	; 36
    2012:	93 e0       	ldi	r25, 0x03	; 3
    2014:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN5Print7printlnEdi>
	
	initAdsVoltageGain();
    2018:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_Z18initAdsVoltageGainv>
	initAdsAmperageGain();
    201c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <_Z19initAdsAmperageGainv>
	
	settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    2020:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <settings+0x1>
    2024:	88 23       	and	r24, r24
    2026:	29 f0       	breq	.+10     	; 0x2032 <setup+0x4a2>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 ea       	ldi	r26, 0xA0	; 160
    202e:	b0 e4       	ldi	r27, 0x40	; 64
    2030:	04 c0       	rjmp	.+8      	; 0x203a <setup+0x4aa>
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	a0 e2       	ldi	r26, 0x20	; 32
    2038:	b0 e4       	ldi	r27, 0x40	; 64
    203a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <settings+0x2>
    203e:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <settings+0x3>
    2042:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <settings+0x4>
    2046:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <settings+0x5>

	checkIsReadyToWork();
    204a:	0e 94 a5 02 	call	0x54a	; 0x54a <_Z18checkIsReadyToWorkv>
	
	// Инициализируем пищалку
	pinMode(BEEPER, OUTPUT);
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	80 e1       	ldi	r24, 0x10	; 16
    2052:	0e 94 13 20 	call	0x4026	; 0x4026 <pinMode>
	digitalWrite(BEEPER, LOW);
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	80 e1       	ldi	r24, 0x10	; 16
    205a:	0e 94 4f 20 	call	0x409e	; 0x409e <digitalWrite>
	
	modeWork.prev = modeWork.current;
    205e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    2062:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <modeWork+0x1>
	initAvgVars();
    2066:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_Z11initAvgVarsv>
	Serial.println(F("Completed!"));
    206a:	63 e5       	ldi	r22, 0x53	; 83
    206c:	73 e0       	ldi	r23, 0x03	; 3
    206e:	84 e2       	ldi	r24, 0x24	; 36
    2070:	93 e0       	ldi	r25, 0x03	; 3
    2072:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Stand by..."));
    2076:	67 e4       	ldi	r22, 0x47	; 71
    2078:	73 e0       	ldi	r23, 0x03	; 3
    207a:	84 e2       	ldi	r24, 0x24	; 36
    207c:	93 e0       	ldi	r25, 0x03	; 3
    207e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
	displayStaticAsMode();
    2082:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z19displayStaticAsModev>
	displayAsMode();
    2086:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <_Z13displayAsModev>

0000208a <_Z12saveSettingsv>:
}

/*
	Сохранение настроек при сменах режима
*/
void saveSettings() {
    208a:	cf 92       	push	r12
    208c:	df 92       	push	r13
    208e:	ef 92       	push	r14
    2090:	ff 92       	push	r15
    2092:	cf 93       	push	r28
	switch(modeWork.current) {
    2094:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <modeWork>
    2098:	8e 2f       	mov	r24, r30
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	fc 01       	movw	r30, r24
    209e:	31 97       	sbiw	r30, 0x01	; 1
    20a0:	ec 30       	cpi	r30, 0x0C	; 12
    20a2:	f1 05       	cpc	r31, r1
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <_Z12saveSettingsv+0x1e>
    20a6:	14 c1       	rjmp	.+552    	; 0x22d0 <_Z12saveSettingsv+0x246>
    20a8:	e6 59       	subi	r30, 0x96	; 150
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			settings.connectionType = setDigit.value;
    20b0:	c0 90 c5 01 	lds	r12, 0x01C5	; 0x8001c5 <setDigit>
    20b4:	d0 90 c6 01 	lds	r13, 0x01C6	; 0x8001c6 <setDigit+0x1>
    20b8:	e0 90 c7 01 	lds	r14, 0x01C7	; 0x8001c7 <setDigit+0x2>
    20bc:	f0 90 c8 01 	lds	r15, 0x01C8	; 0x8001c8 <setDigit+0x3>
    20c0:	c1 e0       	ldi	r28, 0x01	; 1
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	a9 01       	movw	r20, r18
    20c8:	c7 01       	movw	r24, r14
    20ca:	b6 01       	movw	r22, r12
    20cc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    20d0:	81 11       	cpse	r24, r1
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <_Z12saveSettingsv+0x4c>
    20d4:	c0 e0       	ldi	r28, 0x00	; 0
    20d6:	c0 93 e8 01 	sts	0x01E8, r28	; 0x8001e8 <settings+0x1>
			settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	a9 01       	movw	r20, r18
    20e0:	c7 01       	movw	r24, r14
    20e2:	b6 01       	movw	r22, r12
    20e4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    20e8:	81 11       	cpse	r24, r1
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <_Z12saveSettingsv+0x6c>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a0 e2       	ldi	r26, 0x20	; 32
    20f2:	b0 e4       	ldi	r27, 0x40	; 64
    20f4:	04 c0       	rjmp	.+8      	; 0x20fe <_Z12saveSettingsv+0x74>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a0 ea       	ldi	r26, 0xA0	; 160
    20fc:	b0 e4       	ldi	r27, 0x40	; 64
    20fe:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <settings+0x2>
    2102:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <settings+0x3>
    2106:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <settings+0x4>
    210a:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <settings+0x5>
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
    210e:	6c 2f       	mov	r22, r28
    2110:	86 e2       	ldi	r24, 0x26	; 38
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	12 c0       	rjmp	.+36     	; 0x213a <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
    2116:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    211a:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    211e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2122:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2126:	0e 94 75 19 	call	0x32ea	; 0x32ea <__fixunssfsi>
    212a:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <settings+0x13>
			initAdsAmperageGain();
    212e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <_Z19initAdsAmperageGainv>
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    2132:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <settings+0x13>
    2136:	85 e2       	ldi	r24, 0x25	; 37
    2138:	90 e0       	ldi	r25, 0x00	; 0
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
			break;
	}
	
}
    213a:	cf 91       	pop	r28
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
			initAdsAmperageGain();
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    2144:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <eeprom_update_byte>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			settings.currentVoltageGain = setDigit.value;
    2148:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    214c:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2150:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2154:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2158:	0e 94 75 19 	call	0x32ea	; 0x32ea <__fixunssfsi>
    215c:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <settings+0x14>
			initAdsVoltageGain();
    2160:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_Z18initAdsVoltageGainv>
			eeprom_update_byte(&eeprom_gain_voltage, settings.currentVoltageGain);
    2164:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x14>
    2168:	84 e2       	ldi	r24, 0x24	; 36
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	e6 cf       	rjmp	.-52     	; 0x213a <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_IMPEDANCE_AB:
			settings.impedance[0] = setDigit.value;
    216e:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    2172:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2176:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    217a:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    217e:	40 93 ed 01 	sts	0x01ED, r20	; 0x8001ed <settings+0x6>
    2182:	50 93 ee 01 	sts	0x01EE, r21	; 0x8001ee <settings+0x7>
    2186:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <settings+0x8>
    218a:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <settings+0x9>
			eeprom_update_float(&eeprom_impedance_ab, settings.impedance[0]);
    218e:	80 e2       	ldi	r24, 0x20	; 32
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	97 c0       	rjmp	.+302    	; 0x22c2 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			settings.impedance[1] = setDigit.value;
    2194:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    2198:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    219c:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    21a0:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    21a4:	40 93 f1 01 	sts	0x01F1, r20	; 0x8001f1 <settings+0xa>
    21a8:	50 93 f2 01 	sts	0x01F2, r21	; 0x8001f2 <settings+0xb>
    21ac:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <settings+0xc>
    21b0:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <settings+0xd>
			eeprom_update_float(&eeprom_impedance_bc, settings.impedance[1]);
    21b4:	8c e1       	ldi	r24, 0x1C	; 28
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	84 c0       	rjmp	.+264    	; 0x22c2 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			settings.impedance[2] = setDigit.value;
    21ba:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    21be:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    21c2:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    21c6:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    21ca:	40 93 f5 01 	sts	0x01F5, r20	; 0x8001f5 <settings+0xe>
    21ce:	50 93 f6 01 	sts	0x01F6, r21	; 0x8001f6 <settings+0xf>
    21d2:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <settings+0x10>
    21d6:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <settings+0x11>
			eeprom_update_float(&eeprom_impedance_ac, settings.impedance[2]);
    21da:	88 e1       	ldi	r24, 0x18	; 24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	71 c0       	rjmp	.+226    	; 0x22c2 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			settings.multiplierVoltage[0] = setDigit.value;
    21e0:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    21e4:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    21e8:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    21ec:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    21f0:	40 93 fc 01 	sts	0x01FC, r20	; 0x8001fc <settings+0x15>
    21f4:	50 93 fd 01 	sts	0x01FD, r21	; 0x8001fd <settings+0x16>
    21f8:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <settings+0x17>
    21fc:	70 93 ff 01 	sts	0x01FF, r23	; 0x8001ff <settings+0x18>
			eeprom_update_float(&eeprom_voltage_mult_ab, settings.multiplierVoltage[0]);
    2200:	84 e1       	ldi	r24, 0x14	; 20
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	5e c0       	rjmp	.+188    	; 0x22c2 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			settings.multiplierVoltage[1] = setDigit.value;
    2206:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    220a:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    220e:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2212:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2216:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <settings+0x19>
    221a:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <settings+0x1a>
    221e:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <settings+0x1b>
    2222:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <settings+0x1c>
			eeprom_update_float(&eeprom_voltage_mult_bc, settings.multiplierVoltage[1]);
    2226:	80 e1       	ldi	r24, 0x10	; 16
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	4b c0       	rjmp	.+150    	; 0x22c2 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			settings.multiplierVoltage[2] = setDigit.value;
    222c:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    2230:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2234:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2238:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    223c:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <settings+0x1d>
    2240:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <settings+0x1e>
    2244:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <settings+0x1f>
    2248:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <settings+0x20>
			eeprom_update_float(&eeprom_voltage_mult_ac, settings.multiplierVoltage[2]);
    224c:	8c e0       	ldi	r24, 0x0C	; 12
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	38 c0       	rjmp	.+112    	; 0x22c2 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			settings.multiplierAmperage[0] = setDigit.value;
    2252:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    2256:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    225a:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    225e:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2262:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <settings+0x21>
    2266:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <settings+0x22>
    226a:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <settings+0x23>
    226e:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <settings+0x24>
			eeprom_update_float(&eeprom_amperage_mult_ab, settings.multiplierAmperage[0]);
    2272:	88 e0       	ldi	r24, 0x08	; 8
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	25 c0       	rjmp	.+74     	; 0x22c2 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			settings.multiplierAmperage[1] = setDigit.value;
    2278:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    227c:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2280:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2284:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2288:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <settings+0x25>
    228c:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <settings+0x26>
    2290:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <settings+0x27>
    2294:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <settings+0x28>
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
    2298:	84 e0       	ldi	r24, 0x04	; 4
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	12 c0       	rjmp	.+36     	; 0x22c2 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
    229e:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    22a2:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    22a6:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    22aa:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    22ae:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <settings+0x29>
    22b2:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <settings+0x2a>
    22b6:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <settings+0x2b>
    22ba:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <settings+0x2c>
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	
}
    22c2:	cf 91       	pop	r28
    22c4:	ff 90       	pop	r15
    22c6:	ef 90       	pop	r14
    22c8:	df 90       	pop	r13
    22ca:	cf 90       	pop	r12
			settings.multiplierAmperage[1] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    22cc:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <eeprom_update_dword>
			break;
	}
	
}
    22d0:	cf 91       	pop	r28
    22d2:	ff 90       	pop	r15
    22d4:	ef 90       	pop	r14
    22d6:	df 90       	pop	r13
    22d8:	cf 90       	pop	r12
    22da:	08 95       	ret

000022dc <_Z21button2LongPressStartv>:
}

/*
	Обработчик длинного клика второй клавиши
*/
void button2LongPressStart() {
    22dc:	cf 93       	push	r28
	// При наличии замыкания отключает пищалку
	if (icError.hasIC) {
    22de:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <icError+0x19>
    22e2:	88 23       	and	r24, r24
    22e4:	39 f0       	breq	.+14     	; 0x22f4 <_Z21button2LongPressStartv+0x18>
		digitalWrite(BEEPER, LOW);
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	80 e1       	ldi	r24, 0x10	; 16
    22ea:	0e 94 4f 20 	call	0x409e	; 0x409e <digitalWrite>
		icError.hasIC = false;
    22ee:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <icError+0x19>
		return;
    22f2:	4b c0       	rjmp	.+150    	; 0x238a <_Z21button2LongPressStartv+0xae>
	}
	
	// В режиме предупреждения о необходимости натсроек ничего не делает
	if (modeWork.current == MW_NEED_SETUP) {
    22f4:	c0 91 b7 01 	lds	r28, 0x01B7	; 0x8001b7 <modeWork>
    22f8:	cc 23       	and	r28, r28
    22fa:	09 f4       	brne	.+2      	; 0x22fe <_Z21button2LongPressStartv+0x22>
    22fc:	46 c0       	rjmp	.+140    	; 0x238a <_Z21button2LongPressStartv+0xae>
		return;
	}
	
	// В режиме отображения количества выхода за пределы измерений обнуляет их и средние значения
	if (modeWork.current == MW_SHOW_ERRORS_COUNTERS) {
    22fe:	cd 30       	cpi	r28, 0x0D	; 13
    2300:	01 f5       	brne	.+64     	; 0x2342 <_Z21button2LongPressStartv+0x66>
		for(byte i = 0; i < 3; i++) {
			icError.criticalLvlCount[i] = 0;
    2302:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <icError+0xc>
    2306:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <icError+0xd>
    230a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <icError+0xe>
    230e:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <icError+0xf>
    2312:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <icError+0x10>
    2316:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <icError+0x11>
    231a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <icError+0x12>
    231e:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <icError+0x13>
    2322:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <icError+0x14>
    2326:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <icError+0x15>
    232a:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <icError+0x16>
    232e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <icError+0x17>
		}
		initAvgVars();
    2332:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_Z11initAvgVarsv>
		modeWork.current = MW_SHOWING_START;
    2336:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <modeWork>
		lcdUpdateScreen = true;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
		return;
    2340:	24 c0       	rjmp	.+72     	; 0x238a <_Z21button2LongPressStartv+0xae>
	}
	
	// Перевод в режим настроек и выход из него
	if (settings.isSetupMode) {
    2342:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <settings+0x12>
    2346:	88 23       	and	r24, r24
    2348:	89 f0       	breq	.+34     	; 0x236c <_Z21button2LongPressStartv+0x90>
		if (modeWork.current == MW_SETUP_STOP) {
    234a:	cc 30       	cpi	r28, 0x0C	; 12
    234c:	29 f4       	brne	.+10     	; 0x2358 <_Z21button2LongPressStartv+0x7c>
			saveSettings();
    234e:	0e 94 45 10 	call	0x208a	; 0x208a <_Z12saveSettingsv>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    2352:	cf 91       	pop	r28
	
	// Перевод в режим настроек и выход из него
	if (settings.isSetupMode) {
		if (modeWork.current == MW_SETUP_STOP) {
			saveSettings();
			checkIsReadyToWork();
    2354:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_Z18checkIsReadyToWorkv>
		} else {
			saveSettings();
    2358:	0e 94 45 10 	call	0x208a	; 0x208a <_Z12saveSettingsv>
			modeWork.current++;
    235c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    2360:	8f 5f       	subi	r24, 0xFF	; 255
    2362:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    2366:	cf 91       	pop	r28
			saveSettings();
			checkIsReadyToWork();
		} else {
			saveSettings();
			modeWork.current++;
			setEditValue();
    2368:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <_Z12setEditValuev>
		}
	} else {
		Serial.println(F("**Measurement Stoped!"));
    236c:	65 e3       	ldi	r22, 0x35	; 53
    236e:	71 e0       	ldi	r23, 0x01	; 1
    2370:	84 e2       	ldi	r24, 0x24	; 36
    2372:	93 e0       	ldi	r25, 0x03	; 3
    2374:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <_ZN5Print7printlnEPK19__FlashStringHelper>
		settings.isReadyToWork = MM_STOP;
    2378:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <settings>
		modeWork.current = MW_SETUP_START;
    237c:	c1 e0       	ldi	r28, 0x01	; 1
    237e:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <modeWork>
		setEditValue();
    2382:	0e 94 14 0c 	call	0x1828	; 0x1828 <_Z12setEditValuev>
		settings.isSetupMode = true;
    2386:	c0 93 f9 01 	sts	0x01F9, r28	; 0x8001f9 <settings+0x12>
	}
}
    238a:	cf 91       	pop	r28
    238c:	08 95       	ret

0000238e <_GLOBAL__sub_I_eeprom_first_start>:
	| GAIN_SIXTEEN   | x16  |    0.256    | 0.0078125	 |
	------------------------------------------------------
*/

// Объекты работы с АЦП модулями
Adafruit_ADS1115 adsVoltage(0x48);			
    238e:	68 e4       	ldi	r22, 0x48	; 72
    2390:	8b e5       	ldi	r24, 0x5B	; 91
    2392:	92 e0       	ldi	r25, 0x02	; 2
    2394:	0e 94 16 12 	call	0x242c	; 0x242c <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 adsAmperage(0x49);
    2398:	69 e4       	ldi	r22, 0x49	; 73
    239a:	86 e5       	ldi	r24, 0x56	; 86
    239c:	92 e0       	ldi	r25, 0x02	; 2
    239e:	0e 94 16 12 	call	0x242c	; 0x242c <_ZN16Adafruit_ADS1115C1Eh>
		В режиме измерения смена режима показа назад
	Динное нажатие:
		В режиме измерения в меню критических величин сбрасывает счетчик
		Переход в режим настроек/отображения измерений кроме режима критических величин
*/
OneButton button1Callback(BUTTON_1, false);
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	50 e0       	ldi	r21, 0x00	; 0
    23a8:	6e e0       	ldi	r22, 0x0E	; 14
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	85 e3       	ldi	r24, 0x35	; 53
    23ae:	92 e0       	ldi	r25, 0x02	; 2
    23b0:	0e 94 c1 13 	call	0x2782	; 0x2782 <_ZN9OneButtonC1Eiib>
OneButton button2Callback(BUTTON_2, false);
    23b4:	21 e0       	ldi	r18, 0x01	; 1
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	6f e0       	ldi	r22, 0x0F	; 15
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	84 e1       	ldi	r24, 0x14	; 20
    23c0:	92 e0       	ldi	r25, 0x02	; 2
    23c2:	0e 94 c1 13 	call	0x2782	; 0x2782 <_ZN9OneButtonC1Eiib>
	currentAmperageGain - индекс усиления АЦП по току
	currentVoltageGain - индекс усиления АЦП по напряжению
	multiplierVoltage - множитель по напряжению для вычисления реального значения
	multiplierAmperage - множитель по току для вычисления реального значения
*/
struct Settings {
    23c6:	e7 ee       	ldi	r30, 0xE7	; 231
    23c8:	f1 e0       	ldi	r31, 0x01	; 1
    23ca:	10 82       	st	Z, r1
    23cc:	11 82       	std	Z+1, r1	; 0x01
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a0 e2       	ldi	r26, 0x20	; 32
    23d4:	b0 e4       	ldi	r27, 0x40	; 64
    23d6:	82 83       	std	Z+2, r24	; 0x02
    23d8:	93 83       	std	Z+3, r25	; 0x03
    23da:	a4 83       	std	Z+4, r26	; 0x04
    23dc:	b5 83       	std	Z+5, r27	; 0x05
    23de:	16 82       	std	Z+6, r1	; 0x06
    23e0:	17 82       	std	Z+7, r1	; 0x07
    23e2:	10 86       	std	Z+8, r1	; 0x08
    23e4:	11 86       	std	Z+9, r1	; 0x09
    23e6:	12 86       	std	Z+10, r1	; 0x0a
    23e8:	13 86       	std	Z+11, r1	; 0x0b
    23ea:	14 86       	std	Z+12, r1	; 0x0c
    23ec:	15 86       	std	Z+13, r1	; 0x0d
    23ee:	16 86       	std	Z+14, r1	; 0x0e
    23f0:	17 86       	std	Z+15, r1	; 0x0f
    23f2:	10 8a       	std	Z+16, r1	; 0x10
    23f4:	11 8a       	std	Z+17, r1	; 0x11
    23f6:	13 8a       	std	Z+19, r1	; 0x13
    23f8:	14 8a       	std	Z+20, r1	; 0x14
    23fa:	8c e0       	ldi	r24, 0x0C	; 12
    23fc:	ee e5       	ldi	r30, 0x5E	; 94
    23fe:	f1 e0       	ldi	r31, 0x01	; 1
    2400:	ac ef       	ldi	r26, 0xFC	; 252
    2402:	b1 e0       	ldi	r27, 0x01	; 1
    2404:	01 90       	ld	r0, Z+
    2406:	0d 92       	st	X+, r0
    2408:	8a 95       	dec	r24
    240a:	e1 f7       	brne	.-8      	; 0x2404 <_GLOBAL__sub_I_eeprom_first_start+0x76>
    240c:	8c e0       	ldi	r24, 0x0C	; 12
    240e:	ee e5       	ldi	r30, 0x5E	; 94
    2410:	f1 e0       	ldi	r31, 0x01	; 1
    2412:	a8 e0       	ldi	r26, 0x08	; 8
    2414:	b2 e0       	ldi	r27, 0x02	; 2
    2416:	01 90       	ld	r0, Z+
    2418:	0d 92       	st	X+, r0
    241a:	8a 95       	dec	r24
    241c:	e1 f7       	brne	.-8      	; 0x2416 <_GLOBAL__sub_I_eeprom_first_start+0x88>
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    241e:	22 e0       	ldi	r18, 0x02	; 2
    2420:	40 e1       	ldi	r20, 0x10	; 16
    2422:	67 e2       	ldi	r22, 0x27	; 39
    2424:	89 eb       	ldi	r24, 0xB9	; 185
    2426:	91 e0       	ldi	r25, 0x01	; 1
    2428:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <_ZN17LiquidCrystal_I2CC1Ehhh>

0000242c <_ZN16Adafruit_ADS1115C1Eh>:
  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH, threshold << m_bitShift);

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    242c:	fc 01       	movw	r30, r24
    242e:	14 82       	std	Z+4, r1	; 0x04
    2430:	13 82       	std	Z+3, r1	; 0x03
    2432:	60 83       	st	Z, r22
    2434:	88 e0       	ldi	r24, 0x08	; 8
    2436:	81 83       	std	Z+1, r24	; 0x01
    2438:	12 82       	std	Z+2, r1	; 0x02
    243a:	08 95       	ret

0000243c <_ZN16Adafruit_ADS10155beginEv>:
    243c:	8e ec       	ldi	r24, 0xCE	; 206
    243e:	92 e0       	ldi	r25, 0x02	; 2
    2440:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <_ZN7TwoWire5beginEv>

00002444 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    2444:	fc 01       	movw	r30, r24
    2446:	74 83       	std	Z+4, r23	; 0x04
    2448:	63 83       	std	Z+3, r22	; 0x03
    244a:	08 95       	ret

0000244c <_ZL13writeRegisterhhj>:
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	16 2f       	mov	r17, r22
    2454:	ea 01       	movw	r28, r20
    2456:	68 2f       	mov	r22, r24
    2458:	8e ec       	ldi	r24, 0xCE	; 206
    245a:	92 e0       	ldi	r25, 0x02	; 2
    245c:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN7TwoWire17beginTransmissionEh>
    2460:	61 2f       	mov	r22, r17
    2462:	8e ec       	ldi	r24, 0xCE	; 206
    2464:	92 e0       	ldi	r25, 0x02	; 2
    2466:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN7TwoWire5writeEh>
    246a:	6d 2f       	mov	r22, r29
    246c:	8e ec       	ldi	r24, 0xCE	; 206
    246e:	92 e0       	ldi	r25, 0x02	; 2
    2470:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN7TwoWire5writeEh>
    2474:	6c 2f       	mov	r22, r28
    2476:	8e ec       	ldi	r24, 0xCE	; 206
    2478:	92 e0       	ldi	r25, 0x02	; 2
    247a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN7TwoWire5writeEh>
    247e:	8e ec       	ldi	r24, 0xCE	; 206
    2480:	92 e0       	ldi	r25, 0x02	; 2
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0c 94 83 18 	jmp	0x3106	; 0x3106 <_ZN7TwoWire15endTransmissionEv>

0000248c <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	18 2f       	mov	r17, r24
  Wire.beginTransmission(i2cAddress);
    2494:	68 2f       	mov	r22, r24
    2496:	8e ec       	ldi	r24, 0xCE	; 206
    2498:	92 e0       	ldi	r25, 0x02	; 2
    249a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN7TwoWire17beginTransmissionEh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	8e ec       	ldi	r24, 0xCE	; 206
    24a2:	92 e0       	ldi	r25, 0x02	; 2
    24a4:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN7TwoWire5writeEh>
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
    24a8:	8e ec       	ldi	r24, 0xCE	; 206
    24aa:	92 e0       	ldi	r25, 0x02	; 2
    24ac:	0e 94 83 18 	call	0x3106	; 0x3106 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
    24b0:	42 e0       	ldi	r20, 0x02	; 2
    24b2:	61 2f       	mov	r22, r17
    24b4:	8e ec       	ldi	r24, 0xCE	; 206
    24b6:	92 e0       	ldi	r25, 0x02	; 2
    24b8:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZN7TwoWire11requestFromEhh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
  #if ARDUINO >= 100
  return Wire.read();
    24bc:	8e ec       	ldi	r24, 0xCE	; 206
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_ZN7TwoWire4readEv>
    24c4:	18 2f       	mov	r17, r24
    24c6:	8e ec       	ldi	r24, 0xCE	; 206
    24c8:	92 e0       	ldi	r25, 0x02	; 2
    24ca:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_ZN7TwoWire4readEv>
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
  Wire.requestFrom(i2cAddress, (uint8_t)2);
  return ((i2cread() << 8) | i2cread());  
    24ce:	d1 2f       	mov	r29, r17
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	c2 2f       	mov	r28, r18
}
    24d4:	9e 01       	movw	r18, r28
    24d6:	28 2b       	or	r18, r24
    24d8:	c9 01       	movw	r24, r18
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	08 95       	ret

000024e2 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
  if (channel > 3)
    24e6:	64 30       	cpi	r22, 0x04	; 4
    24e8:	50 f5       	brcc	.+84     	; 0x253e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x5c>
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
    24ea:	fc 01       	movw	r30, r24
    24ec:	43 81       	ldd	r20, Z+3	; 0x03
    24ee:	54 81       	ldd	r21, Z+4	; 0x04

  // Set single-ended input channel
  switch (channel)
    24f0:	62 30       	cpi	r22, 0x02	; 2
    24f2:	51 f0       	breq	.+20     	; 0x2508 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
    24f4:	63 30       	cpi	r22, 0x03	; 3
    24f6:	59 f0       	breq	.+22     	; 0x250e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2c>
    24f8:	61 30       	cpi	r22, 0x01	; 1
    24fa:	19 f0       	breq	.+6      	; 0x2502 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    24fc:	43 68       	ori	r20, 0x83	; 131
    24fe:	51 64       	ori	r21, 0x41	; 65
      break;
    2500:	08 c0       	rjmp	.+16     	; 0x2512 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    2502:	43 68       	ori	r20, 0x83	; 131
    2504:	51 65       	ori	r21, 0x51	; 81
      break;
    2506:	05 c0       	rjmp	.+10     	; 0x2512 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    2508:	43 68       	ori	r20, 0x83	; 131
    250a:	51 66       	ori	r21, 0x61	; 97
      break;
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    250e:	43 68       	ori	r20, 0x83	; 131
    2510:	51 67       	ori	r21, 0x71	; 113
    2512:	ec 01       	movw	r28, r24

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    2514:	50 68       	ori	r21, 0x80	; 128
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	88 81       	ld	r24, Y
    251a:	0e 94 26 12 	call	0x244c	; 0x244c <_ZL13writeRegisterhhj>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
    251e:	69 81       	ldd	r22, Y+1	; 0x01
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
    252a:	88 81       	ld	r24, Y
    252c:	0e 94 46 12 	call	0x248c	; 0x248c <_ZL12readRegisterhh.isra.0>
    2530:	0a 80       	ldd	r0, Y+2	; 0x02
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x56>
    2534:	96 95       	lsr	r25
    2536:	87 95       	ror	r24
    2538:	0a 94       	dec	r0
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x52>
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x60>
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	08 95       	ret

00002548 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	08 95       	ret

0000254e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    254e:	08 95       	ret

00002550 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    2550:	fc 01       	movw	r30, r24
    2552:	13 82       	std	Z+3, r1	; 0x03
    2554:	12 82       	std	Z+2, r1	; 0x02
    2556:	86 e7       	ldi	r24, 0x76	; 118
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	64 83       	std	Z+4, r22	; 0x04
    2560:	41 87       	std	Z+9, r20	; 0x09
    2562:	22 87       	std	Z+10, r18	; 0x0a
    2564:	13 86       	std	Z+11, r1	; 0x0b
    2566:	08 95       	ret

00002568 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	ec 01       	movw	r28, r24
    2570:	16 2f       	mov	r17, r22
    2572:	6c 81       	ldd	r22, Y+4	; 0x04
    2574:	8e ec       	ldi	r24, 0xCE	; 206
    2576:	92 e0       	ldi	r25, 0x02	; 2
    2578:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN7TwoWire17beginTransmissionEh>
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	61 2b       	or	r22, r17
    2580:	8e ec       	ldi	r24, 0xCE	; 206
    2582:	92 e0       	ldi	r25, 0x02	; 2
    2584:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN7TwoWire5writeEh>
    2588:	8e ec       	ldi	r24, 0xCE	; 206
    258a:	92 e0       	ldi	r25, 0x02	; 2
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0c 94 83 18 	jmp	0x3106	; 0x3106 <_ZN7TwoWire15endTransmissionEv>

00002596 <_ZN17LiquidCrystal_I2C9backlightEv>:
    2596:	28 e0       	ldi	r18, 0x08	; 8
    2598:	fc 01       	movw	r30, r24
    259a:	23 87       	std	Z+11, r18	; 0x0b
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000025a2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	8c 01       	movw	r16, r24
    25aa:	c6 2f       	mov	r28, r22
    25ac:	64 60       	ori	r22, 0x04	; 4
    25ae:	0e 94 b4 12 	call	0x2568	; 0x2568 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <delayMicroseconds>
    25ba:	6c 2f       	mov	r22, r28
    25bc:	6b 7f       	andi	r22, 0xFB	; 251
    25be:	c8 01       	movw	r24, r16
    25c0:	0e 94 b4 12 	call	0x2568	; 0x2568 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25c4:	82 e3       	ldi	r24, 0x32	; 50
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <delayMicroseconds>

000025d2 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    25d2:	1f 93       	push	r17
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	ec 01       	movw	r28, r24
    25da:	16 2f       	mov	r17, r22
    25dc:	0e 94 b4 12 	call	0x2568	; 0x2568 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25e0:	61 2f       	mov	r22, r17
    25e2:	ce 01       	movw	r24, r28
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000025ee <_ZN17LiquidCrystal_I2C4sendEhh>:
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	8c 01       	movw	r16, r24
    25f8:	c6 2f       	mov	r28, r22
    25fa:	d4 2f       	mov	r29, r20
    25fc:	60 7f       	andi	r22, 0xF0	; 240
    25fe:	64 2b       	or	r22, r20
    2600:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2604:	80 e1       	ldi	r24, 0x10	; 16
    2606:	c8 9f       	mul	r28, r24
    2608:	b0 01       	movw	r22, r0
    260a:	11 24       	eor	r1, r1
    260c:	6d 2b       	or	r22, r29
    260e:	c8 01       	movw	r24, r16
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000261c <_ZN17LiquidCrystal_I2C7commandEh>:
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <_ZN17LiquidCrystal_I2C4sendEhh>

00002622 <_ZN17LiquidCrystal_I2C5clearEv>:
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN17LiquidCrystal_I2C7commandEh>
    2628:	80 ed       	ldi	r24, 0xD0	; 208
    262a:	97 e0       	ldi	r25, 0x07	; 7
    262c:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <delayMicroseconds>

00002630 <_ZN17LiquidCrystal_I2C4homeEv>:
    2630:	62 e0       	ldi	r22, 0x02	; 2
    2632:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN17LiquidCrystal_I2C7commandEh>
    2636:	80 ed       	ldi	r24, 0xD0	; 208
    2638:	97 e0       	ldi	r25, 0x07	; 7
    263a:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <delayMicroseconds>

0000263e <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	28 97       	sbiw	r28, 0x08	; 8
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	9c 01       	movw	r18, r24
    2654:	88 e0       	ldi	r24, 0x08	; 8
    2656:	ea e6       	ldi	r30, 0x6A	; 106
    2658:	f1 e0       	ldi	r31, 0x01	; 1
    265a:	de 01       	movw	r26, r28
    265c:	11 96       	adiw	r26, 0x01	; 1
    265e:	01 90       	ld	r0, Z+
    2660:	0d 92       	st	X+, r0
    2662:	8a 95       	dec	r24
    2664:	e1 f7       	brne	.-8      	; 0x265e <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2666:	f9 01       	movw	r30, r18
    2668:	80 85       	ldd	r24, Z+8	; 0x08
    266a:	84 17       	cp	r24, r20
    266c:	10 f4       	brcc	.+4      	; 0x2672 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    266e:	4f ef       	ldi	r20, 0xFF	; 255
    2670:	48 0f       	add	r20, r24
    2672:	fe 01       	movw	r30, r28
    2674:	31 96       	adiw	r30, 0x01	; 1
    2676:	e4 0f       	add	r30, r20
    2678:	f1 1d       	adc	r31, r1
    267a:	e4 0f       	add	r30, r20
    267c:	f1 1d       	adc	r31, r1
    267e:	90 81       	ld	r25, Z
    2680:	69 0f       	add	r22, r25
    2682:	60 68       	ori	r22, 0x80	; 128
    2684:	c9 01       	movw	r24, r18
    2686:	28 96       	adiw	r28, 0x08	; 8
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	0c 94 0e 13 	jmp	0x261c	; 0x261c <_ZN17LiquidCrystal_I2C7commandEh>

0000269a <_ZN17LiquidCrystal_I2C7displayEv>:
    269a:	fc 01       	movw	r30, r24
    269c:	66 81       	ldd	r22, Z+6	; 0x06
    269e:	26 2f       	mov	r18, r22
    26a0:	24 60       	ori	r18, 0x04	; 4
    26a2:	26 83       	std	Z+6, r18	; 0x06
    26a4:	6c 60       	ori	r22, 0x0C	; 12
    26a6:	0c 94 0e 13 	jmp	0x261c	; 0x261c <_ZN17LiquidCrystal_I2C7commandEh>

000026aa <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	08 95       	ret

000026b6 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	ec 01       	movw	r28, r24
	if (lines > 1) {
    26bc:	42 30       	cpi	r20, 0x02	; 2
    26be:	18 f0       	brcs	.+6      	; 0x26c6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	88 60       	ori	r24, 0x08	; 8
    26c4:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    26c6:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    26c8:	22 23       	and	r18, r18
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    26cc:	41 30       	cpi	r20, 0x01	; 1
    26ce:	19 f4       	brne	.+6      	; 0x26d6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	84 60       	ori	r24, 0x04	; 4
    26d4:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    26d6:	62 e3       	ldi	r22, 0x32	; 50
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    26e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e4:	ce 01       	movw	r24, r28
    26e6:	0e 94 b4 12 	call	0x2568	; 0x2568 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    26ea:	68 ee       	ldi	r22, 0xE8	; 232
    26ec:	73 e0       	ldi	r23, 0x03	; 3
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    26f6:	60 e3       	ldi	r22, 0x30	; 48
    26f8:	ce 01       	movw	r24, r28
    26fa:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    26fe:	84 e9       	ldi	r24, 0x94	; 148
    2700:	91 e1       	ldi	r25, 0x11	; 17
    2702:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2706:	60 e3       	ldi	r22, 0x30	; 48
    2708:	ce 01       	movw	r24, r28
    270a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    270e:	84 e9       	ldi	r24, 0x94	; 148
    2710:	91 e1       	ldi	r25, 0x11	; 17
    2712:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2716:	60 e3       	ldi	r22, 0x30	; 48
    2718:	ce 01       	movw	r24, r28
    271a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    271e:	86 e9       	ldi	r24, 0x96	; 150
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2726:	60 e2       	ldi	r22, 0x20	; 32
    2728:	ce 01       	movw	r24, r28
    272a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    272e:	6d 81       	ldd	r22, Y+5	; 0x05
    2730:	60 62       	ori	r22, 0x20	; 32
    2732:	ce 01       	movw	r24, r28
    2734:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2738:	84 e0       	ldi	r24, 0x04	; 4
    273a:	8e 83       	std	Y+6, r24	; 0x06
	display();
    273c:	ce 01       	movw	r24, r28
    273e:	0e 94 4d 13 	call	0x269a	; 0x269a <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2742:	ce 01       	movw	r24, r28
    2744:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    274c:	66 e0       	ldi	r22, 0x06	; 6
    274e:	ce 01       	movw	r24, r28
    2750:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    2754:	ce 01       	movw	r24, r28
  
}
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    275a:	0c 94 18 13 	jmp	0x2630	; 0x2630 <_ZN17LiquidCrystal_I2C4homeEv>

0000275e <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	ec 01       	movw	r28, r24
	Wire.begin();
    2764:	8e ec       	ldi	r24, 0xCE	; 206
    2766:	92 e0       	ldi	r25, 0x02	; 2
    2768:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    276c:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	4a 85       	ldd	r20, Y+10	; 0x0a
    2772:	69 85       	ldd	r22, Y+9	; 0x09
    2774:	ce 01       	movw	r24, r28
}
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    277a:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <_ZN17LiquidCrystal_I2C5beginEhhh>

0000277e <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    277e:	0c 94 af 13 	jmp	0x275e	; 0x275e <_ZN17LiquidCrystal_I2C9init_privEv>

00002782 <_ZN9OneButtonC1Eiib>:

void OneButton::reset(void){
  _state = 0; // restart.
  _startTime = 0;
  _stopTime = 0;
  _isLongPressed = false;
    2782:	fc 01       	movw	r30, r24
    2784:	86 2f       	mov	r24, r22
    2786:	a2 e3       	ldi	r26, 0x32	; 50
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	b3 83       	std	Z+3, r27	; 0x03
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	a8 e5       	ldi	r26, 0x58	; 88
    2790:	b2 e0       	ldi	r27, 0x02	; 2
    2792:	b5 83       	std	Z+5, r27	; 0x05
    2794:	a4 83       	std	Z+4, r26	; 0x04
    2796:	a8 ee       	ldi	r26, 0xE8	; 232
    2798:	b3 e0       	ldi	r27, 0x03	; 3
    279a:	b7 83       	std	Z+7, r27	; 0x07
    279c:	a6 83       	std	Z+6, r26	; 0x06
    279e:	12 86       	std	Z+10, r1	; 0x0a
    27a0:	14 86       	std	Z+12, r1	; 0x0c
    27a2:	13 86       	std	Z+11, r1	; 0x0b
    27a4:	16 86       	std	Z+14, r1	; 0x0e
    27a6:	15 86       	std	Z+13, r1	; 0x0d
    27a8:	10 8a       	std	Z+16, r1	; 0x10
    27aa:	17 86       	std	Z+15, r1	; 0x0f
    27ac:	12 8a       	std	Z+18, r1	; 0x12
    27ae:	11 8a       	std	Z+17, r1	; 0x11
    27b0:	14 8a       	std	Z+20, r1	; 0x14
    27b2:	13 8a       	std	Z+19, r1	; 0x13
    27b4:	16 8a       	std	Z+22, r1	; 0x16
    27b6:	15 8a       	std	Z+21, r1	; 0x15
    27b8:	10 8e       	std	Z+24, r1	; 0x18
    27ba:	17 8a       	std	Z+23, r1	; 0x17
    27bc:	60 83       	st	Z, r22
    27be:	71 83       	std	Z+1, r23	; 0x01
    27c0:	45 2b       	or	r20, r21
    27c2:	19 f0       	breq	.+6      	; 0x27ca <_ZN9OneButtonC1Eiib+0x48>
    27c4:	11 86       	std	Z+9, r1	; 0x09
    27c6:	10 86       	std	Z+8, r1	; 0x08
    27c8:	04 c0       	rjmp	.+8      	; 0x27d2 <_ZN9OneButtonC1Eiib+0x50>
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	51 87       	std	Z+9, r21	; 0x09
    27d0:	40 87       	std	Z+8, r20	; 0x08
    27d2:	22 23       	and	r18, r18
    27d4:	11 f0       	breq	.+4      	; 0x27da <_ZN9OneButtonC1Eiib+0x58>
    27d6:	62 e0       	ldi	r22, 0x02	; 2
    27d8:	01 c0       	rjmp	.+2      	; 0x27dc <_ZN9OneButtonC1Eiib+0x5a>
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	0c 94 13 20 	jmp	0x4026	; 0x4026 <pinMode>

000027e0 <_ZN9OneButton16setDebounceTicksEi>:
    27e0:	fc 01       	movw	r30, r24
    27e2:	73 83       	std	Z+3, r23	; 0x03
    27e4:	62 83       	std	Z+2, r22	; 0x02
    27e6:	08 95       	ret

000027e8 <_ZN9OneButton13setClickTicksEi>:
    27e8:	fc 01       	movw	r30, r24
    27ea:	75 83       	std	Z+5, r23	; 0x05
    27ec:	64 83       	std	Z+4, r22	; 0x04
    27ee:	08 95       	ret

000027f0 <_ZN9OneButton13setPressTicksEi>:
    27f0:	fc 01       	movw	r30, r24
    27f2:	77 83       	std	Z+7, r23	; 0x07
    27f4:	66 83       	std	Z+6, r22	; 0x06
    27f6:	08 95       	ret

000027f8 <_ZN9OneButton11attachClickEPFvvE>:
    27f8:	fc 01       	movw	r30, r24
    27fa:	74 87       	std	Z+12, r23	; 0x0c
    27fc:	63 87       	std	Z+11, r22	; 0x0b
    27fe:	08 95       	ret

00002800 <_ZN9OneButton20attachLongPressStartEPFvvE>:
    2800:	fc 01       	movw	r30, r24
    2802:	72 8b       	std	Z+18, r23	; 0x12
    2804:	61 8b       	std	Z+17, r22	; 0x11
    2806:	08 95       	ret

00002808 <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	ec 01       	movw	r28, r24
    2818:	16 2f       	mov	r17, r22
  unsigned long now = millis(); // current (relative) time in msecs.
    281a:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    281e:	6b 01       	movw	r12, r22
    2820:	7c 01       	movw	r14, r24

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
    2822:	8f 89       	ldd	r24, Y+23	; 0x17
    2824:	98 8d       	ldd	r25, Y+24	; 0x18
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	31 f4       	brne	.+12     	; 0x2836 <_ZN9OneButton4tickEb+0x2e>
    if (activeLevel) {
    282a:	11 23       	and	r17, r17
    282c:	09 f4       	brne	.+2      	; 0x2830 <_ZN9OneButton4tickEb+0x28>
    282e:	bc c0       	rjmp	.+376    	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
      _state = 1; // step to state 1
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	78 c0       	rjmp	.+240    	; 0x2926 <_ZN9OneButton4tickEb+0x11e>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	91 05       	cpc	r25, r1
    283a:	d9 f5       	brne	.+118    	; 0x28b2 <_ZN9OneButton4tickEb+0xaa>
    283c:	89 8d       	ldd	r24, Y+25	; 0x19
    283e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2840:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2842:	bc 8d       	ldd	r27, Y+28	; 0x1c

    if ((!activeLevel) &&
    2844:	b7 01       	movw	r22, r14
    2846:	a6 01       	movw	r20, r12
    2848:	48 1b       	sub	r20, r24
    284a:	59 0b       	sbc	r21, r25
    284c:	6a 0b       	sbc	r22, r26
    284e:	7b 0b       	sbc	r23, r27
    2850:	11 11       	cpse	r17, r1
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <_ZN9OneButton4tickEb+0x6a>
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	9b 81       	ldd	r25, Y+3	; 0x03
    2858:	a0 e0       	ldi	r26, 0x00	; 0
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	48 17       	cp	r20, r24
    285e:	59 07       	cpc	r21, r25
    2860:	6a 07       	cpc	r22, r26
    2862:	7b 07       	cpc	r23, r27
    2864:	18 f4       	brcc	.+6      	; 0x286c <_ZN9OneButton4tickEb+0x64>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
    2866:	18 8e       	std	Y+24, r1	; 0x18
    2868:	1f 8a       	std	Y+23, r1	; 0x17
    286a:	9e c0       	rjmp	.+316    	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	1d c0       	rjmp	.+58     	; 0x28ac <_ZN9OneButton4tickEb+0xa4>
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
    2872:	8e 81       	ldd	r24, Y+6	; 0x06
    2874:	9f 81       	ldd	r25, Y+7	; 0x07
    2876:	a0 e0       	ldi	r26, 0x00	; 0
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	84 17       	cp	r24, r20
    287c:	95 07       	cpc	r25, r21
    287e:	a6 07       	cpc	r26, r22
    2880:	b7 07       	cpc	r27, r23
    2882:	08 f0       	brcs	.+2      	; 0x2886 <_ZN9OneButton4tickEb+0x7e>
    2884:	91 c0       	rjmp	.+290    	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true; // Keep track of long press state
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	8a 87       	std	Y+10, r24	; 0x0a
      if (_pressFunc)
    288a:	ef 85       	ldd	r30, Y+15	; 0x0f
    288c:	f8 89       	ldd	r31, Y+16	; 0x10
    288e:	30 97       	sbiw	r30, 0x00	; 0
    2890:	09 f0       	breq	.+2      	; 0x2894 <_ZN9OneButton4tickEb+0x8c>
        _pressFunc();
    2892:	09 95       	icall
      if (_longPressStartFunc)
    2894:	e9 89       	ldd	r30, Y+17	; 0x11
    2896:	fa 89       	ldd	r31, Y+18	; 0x12
    2898:	30 97       	sbiw	r30, 0x00	; 0
    289a:	09 f0       	breq	.+2      	; 0x289e <_ZN9OneButton4tickEb+0x96>
        _longPressStartFunc();
    289c:	09 95       	icall
      if (_duringLongPressFunc)
    289e:	ed 89       	ldd	r30, Y+21	; 0x15
    28a0:	fe 89       	ldd	r31, Y+22	; 0x16
    28a2:	30 97       	sbiw	r30, 0x00	; 0
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <_ZN9OneButton4tickEb+0xa0>
        _duringLongPressFunc();
    28a6:	09 95       	icall
      _state = 6; // step to state 6
    28a8:	86 e0       	ldi	r24, 0x06	; 6
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	98 8f       	std	Y+24, r25	; 0x18
    28ae:	8f 8b       	std	Y+23, r24	; 0x17
    28b0:	68 c0       	rjmp	.+208    	; 0x2982 <_ZN9OneButton4tickEb+0x17a>
      _stopTime = now; // remember stopping time
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) {
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	91 05       	cpc	r25, r1
    28b6:	f1 f5       	brne	.+124    	; 0x2934 <_ZN9OneButton4tickEb+0x12c>
    // waiting for menu pin being pressed the second time or timeout.
    if (_doubleClickFunc == NULL ||
    28b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    28bc:	89 2b       	or	r24, r25
    28be:	99 f0       	breq	.+38     	; 0x28e6 <_ZN9OneButton4tickEb+0xde>
    28c0:	89 8d       	ldd	r24, Y+25	; 0x19
    28c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28c4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    28c6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    28c8:	b7 01       	movw	r22, r14
    28ca:	a6 01       	movw	r20, r12
    28cc:	48 1b       	sub	r20, r24
    28ce:	59 0b       	sbc	r21, r25
    28d0:	6a 0b       	sbc	r22, r26
    28d2:	7b 0b       	sbc	r23, r27
    28d4:	8c 81       	ldd	r24, Y+4	; 0x04
    28d6:	9d 81       	ldd	r25, Y+5	; 0x05
    28d8:	a0 e0       	ldi	r26, 0x00	; 0
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	84 17       	cp	r24, r20
    28de:	95 07       	cpc	r25, r21
    28e0:	a6 07       	cpc	r26, r22
    28e2:	b7 07       	cpc	r27, r23
    28e4:	38 f4       	brcc	.+14     	; 0x28f4 <_ZN9OneButton4tickEb+0xec>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
    28e6:	eb 85       	ldd	r30, Y+11	; 0x0b
    28e8:	fc 85       	ldd	r31, Y+12	; 0x0c
    28ea:	30 97       	sbiw	r30, 0x00	; 0
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <_ZN9OneButton4tickEb+0xe8>
    28ee:	bb cf       	rjmp	.-138    	; 0x2866 <_ZN9OneButton4tickEb+0x5e>
        _clickFunc();
    28f0:	09 95       	icall
    28f2:	b9 cf       	rjmp	.-142    	; 0x2866 <_ZN9OneButton4tickEb+0x5e>
      _state = 0; // restart.

    } else if ((activeLevel) &&
    28f4:	11 23       	and	r17, r17
    28f6:	09 f4       	brne	.+2      	; 0x28fa <_ZN9OneButton4tickEb+0xf2>
    28f8:	57 c0       	rjmp	.+174    	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
    28fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28fe:	af 8d       	ldd	r26, Y+31	; 0x1f
    2900:	b8 a1       	ldd	r27, Y+32	; 0x20
    2902:	b7 01       	movw	r22, r14
    2904:	a6 01       	movw	r20, r12
    2906:	48 1b       	sub	r20, r24
    2908:	59 0b       	sbc	r21, r25
    290a:	6a 0b       	sbc	r22, r26
    290c:	7b 0b       	sbc	r23, r27
    290e:	8a 81       	ldd	r24, Y+2	; 0x02
    2910:	9b 81       	ldd	r25, Y+3	; 0x03
    2912:	a0 e0       	ldi	r26, 0x00	; 0
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	84 17       	cp	r24, r20
    2918:	95 07       	cpc	r25, r21
    291a:	a6 07       	cpc	r26, r22
    291c:	b7 07       	cpc	r27, r23
    291e:	08 f0       	brcs	.+2      	; 0x2922 <_ZN9OneButton4tickEb+0x11a>
    2920:	43 c0       	rjmp	.+134    	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
    2922:	83 e0       	ldi	r24, 0x03	; 3
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	98 8f       	std	Y+24, r25	; 0x18
    2928:	8f 8b       	std	Y+23, r24	; 0x17
      _startTime = now; // remember starting time
    292a:	c9 8e       	std	Y+25, r12	; 0x19
    292c:	da 8e       	std	Y+26, r13	; 0x1a
    292e:	eb 8e       	std	Y+27, r14	; 0x1b
    2930:	fc 8e       	std	Y+28, r15	; 0x1c
    2932:	3a c0       	rjmp	.+116    	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    2934:	83 30       	cpi	r24, 0x03	; 3
    2936:	91 05       	cpc	r25, r1
    2938:	c1 f4       	brne	.+48     	; 0x296a <_ZN9OneButton4tickEb+0x162>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
    293a:	11 11       	cpse	r17, r1
    293c:	35 c0       	rjmp	.+106    	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
    293e:	89 8d       	ldd	r24, Y+25	; 0x19
    2940:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2942:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2944:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2946:	b7 01       	movw	r22, r14
    2948:	a6 01       	movw	r20, r12
    294a:	48 1b       	sub	r20, r24
    294c:	59 0b       	sbc	r21, r25
    294e:	6a 0b       	sbc	r22, r26
    2950:	7b 0b       	sbc	r23, r27
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	9b 81       	ldd	r25, Y+3	; 0x03
    2956:	a0 e0       	ldi	r26, 0x00	; 0
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	84 17       	cp	r24, r20
    295c:	95 07       	cpc	r25, r21
    295e:	a6 07       	cpc	r26, r22
    2960:	b7 07       	cpc	r27, r23
    2962:	10 f5       	brcc	.+68     	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      // this was a 2 click sequence.
      if (_doubleClickFunc)
    2964:	ed 85       	ldd	r30, Y+13	; 0x0d
    2966:	fe 85       	ldd	r31, Y+14	; 0x0e
    2968:	07 c0       	rjmp	.+14     	; 0x2978 <_ZN9OneButton4tickEb+0x170>
        _doubleClickFunc();
      _state = 0; // restart.
      _stopTime = now; // remember stopping time
    } // if

  } else if (_state == 6) {
    296a:	06 97       	sbiw	r24, 0x06	; 6
    296c:	e9 f4       	brne	.+58     	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
    296e:	11 11       	cpse	r17, r1
    2970:	0d c0       	rjmp	.+26     	; 0x298c <_ZN9OneButton4tickEb+0x184>
      _isLongPressed = false; // Keep track of long press state
    2972:	1a 86       	std	Y+10, r1	; 0x0a
      if (_longPressStopFunc)
    2974:	eb 89       	ldd	r30, Y+19	; 0x13
    2976:	fc 89       	ldd	r31, Y+20	; 0x14
    2978:	30 97       	sbiw	r30, 0x00	; 0
    297a:	09 f0       	breq	.+2      	; 0x297e <_ZN9OneButton4tickEb+0x176>
        _longPressStopFunc();
    297c:	09 95       	icall
      _state = 0; // restart.
    297e:	18 8e       	std	Y+24, r1	; 0x18
    2980:	1f 8a       	std	Y+23, r1	; 0x17
      _stopTime = now; // remember stopping time
    2982:	cd 8e       	std	Y+29, r12	; 0x1d
    2984:	de 8e       	std	Y+30, r13	; 0x1e
    2986:	ef 8e       	std	Y+31, r14	; 0x1f
    2988:	f8 a2       	std	Y+32, r15	; 0x20
    298a:	0e c0       	rjmp	.+28     	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	8a 87       	std	Y+10, r24	; 0x0a
      if (_duringLongPressFunc)
    2990:	ed 89       	ldd	r30, Y+21	; 0x15
    2992:	fe 89       	ldd	r31, Y+22	; 0x16
    2994:	30 97       	sbiw	r30, 0x00	; 0
    2996:	41 f0       	breq	.+16     	; 0x29a8 <_ZN9OneButton4tickEb+0x1a0>
        _duringLongPressFunc();
    } // if

  } // if
} // OneButton.tick()
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
    29a4:	cf 90       	pop	r12
      _stopTime = now; // remember stopping time
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
    29a6:	09 94       	ijmp
    } // if

  } // if
} // OneButton.tick()
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	ff 90       	pop	r15
    29b0:	ef 90       	pop	r14
    29b2:	df 90       	pop	r13
    29b4:	cf 90       	pop	r12
    29b6:	08 95       	ret

000029b8 <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	ec 01       	movw	r28, r24
  if (_pin >= 0) {
    29be:	88 81       	ld	r24, Y
    29c0:	99 81       	ldd	r25, Y+1	; 0x01
    29c2:	97 fd       	sbrc	r25, 7
    29c4:	0e c0       	rjmp	.+28     	; 0x29e2 <_ZN9OneButton4tickEv+0x2a>
    tick(digitalRead(_pin) == _buttonPressed);
    29c6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <digitalRead>
    29ca:	61 e0       	ldi	r22, 0x01	; 1
    29cc:	28 85       	ldd	r18, Y+8	; 0x08
    29ce:	39 85       	ldd	r19, Y+9	; 0x09
    29d0:	28 17       	cp	r18, r24
    29d2:	39 07       	cpc	r19, r25
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <_ZN9OneButton4tickEv+0x20>
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	ce 01       	movw	r24, r28
  }
}
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
    29de:	0c 94 04 14 	jmp	0x2808	; 0x2808 <_ZN9OneButton4tickEb>
  }
}
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	08 95       	ret

000029e8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    29e8:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_state>
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <twi_sendStop>
    29f2:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_inRepStart>
    29f6:	61 e0       	ldi	r22, 0x01	; 1
    29f8:	82 e1       	ldi	r24, 0x12	; 18
    29fa:	0e 94 4f 20 	call	0x409e	; 0x409e <digitalWrite>
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	83 e1       	ldi	r24, 0x13	; 19
    2a02:	0e 94 4f 20 	call	0x409e	; 0x409e <digitalWrite>
    2a06:	e9 eb       	ldi	r30, 0xB9	; 185
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	8e 7f       	andi	r24, 0xFE	; 254
    2a0e:	80 83       	st	Z, r24
    2a10:	80 81       	ld	r24, Z
    2a12:	8d 7f       	andi	r24, 0xFD	; 253
    2a14:	80 83       	st	Z, r24
    2a16:	88 e4       	ldi	r24, 0x48	; 72
    2a18:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2a1c:	85 e4       	ldi	r24, 0x45	; 69
    2a1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a22:	08 95       	ret

00002a24 <twi_readFrom>:
    2a24:	41 32       	cpi	r20, 0x21	; 33
    2a26:	08 f0       	brcs	.+2      	; 0x2a2a <twi_readFrom+0x6>
    2a28:	43 c0       	rjmp	.+134    	; 0x2ab0 <twi_readFrom+0x8c>
    2a2a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <twi_state>
    2a2e:	91 11       	cpse	r25, r1
    2a30:	fc cf       	rjmp	.-8      	; 0x2a2a <twi_readFrom+0x6>
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <twi_state>
    2a38:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <twi_sendStop>
    2a3c:	2f ef       	ldi	r18, 0xFF	; 255
    2a3e:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <twi_error>
    2a42:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_masterBufferIndex>
    2a46:	24 0f       	add	r18, r20
    2a48:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <twi_masterBufferLength>
    2a4c:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <twi_slarw>
    2a50:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <twi_slarw>
    2a54:	88 0f       	add	r24, r24
    2a56:	89 2b       	or	r24, r25
    2a58:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <twi_slarw>
    2a5c:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_inRepStart>
    2a60:	81 30       	cpi	r24, 0x01	; 1
    2a62:	61 f4       	brne	.+24     	; 0x2a7c <twi_readFrom+0x58>
    2a64:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_inRepStart>
    2a68:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_slarw>
    2a6c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2a70:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a74:	83 fd       	sbrc	r24, 3
    2a76:	f8 cf       	rjmp	.-16     	; 0x2a68 <twi_readFrom+0x44>
    2a78:	85 ec       	ldi	r24, 0xC5	; 197
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <twi_readFrom+0x5a>
    2a7c:	85 ee       	ldi	r24, 0xE5	; 229
    2a7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a82:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <twi_state>
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	e1 f3       	breq	.-8      	; 0x2a82 <twi_readFrom+0x5e>
    2a8a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2a8e:	84 17       	cp	r24, r20
    2a90:	10 f4       	brcc	.+4      	; 0x2a96 <twi_readFrom+0x72>
    2a92:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2a96:	a6 ea       	ldi	r26, 0xA6	; 166
    2a98:	b2 e0       	ldi	r27, 0x02	; 2
    2a9a:	96 2f       	mov	r25, r22
    2a9c:	fb 01       	movw	r30, r22
    2a9e:	8e 2f       	mov	r24, r30
    2aa0:	89 1b       	sub	r24, r25
    2aa2:	84 17       	cp	r24, r20
    2aa4:	18 f4       	brcc	.+6      	; 0x2aac <twi_readFrom+0x88>
    2aa6:	8d 91       	ld	r24, X+
    2aa8:	81 93       	st	Z+, r24
    2aaa:	f9 cf       	rjmp	.-14     	; 0x2a9e <twi_readFrom+0x7a>
    2aac:	84 2f       	mov	r24, r20
    2aae:	08 95       	ret
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	08 95       	ret

00002ab4 <twi_writeTo>:
    2ab4:	0f 93       	push	r16
    2ab6:	41 32       	cpi	r20, 0x21	; 33
    2ab8:	08 f0       	brcs	.+2      	; 0x2abc <twi_writeTo+0x8>
    2aba:	4a c0       	rjmp	.+148    	; 0x2b50 <twi_writeTo+0x9c>
    2abc:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <twi_state>
    2ac0:	91 11       	cpse	r25, r1
    2ac2:	fc cf       	rjmp	.-8      	; 0x2abc <twi_writeTo+0x8>
    2ac4:	32 e0       	ldi	r19, 0x02	; 2
    2ac6:	30 93 cd 02 	sts	0x02CD, r19	; 0x8002cd <twi_state>
    2aca:	00 93 cb 02 	sts	0x02CB, r16	; 0x8002cb <twi_sendStop>
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	30 93 60 02 	sts	0x0260, r19	; 0x800260 <twi_error>
    2ad4:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_masterBufferIndex>
    2ad8:	40 93 a4 02 	sts	0x02A4, r20	; 0x8002a4 <twi_masterBufferLength>
    2adc:	56 2f       	mov	r21, r22
    2ade:	a6 ea       	ldi	r26, 0xA6	; 166
    2ae0:	b2 e0       	ldi	r27, 0x02	; 2
    2ae2:	fb 01       	movw	r30, r22
    2ae4:	3e 2f       	mov	r19, r30
    2ae6:	35 1b       	sub	r19, r21
    2ae8:	34 17       	cp	r19, r20
    2aea:	18 f4       	brcc	.+6      	; 0x2af2 <twi_writeTo+0x3e>
    2aec:	31 91       	ld	r19, Z+
    2aee:	3d 93       	st	X+, r19
    2af0:	f9 cf       	rjmp	.-14     	; 0x2ae4 <twi_writeTo+0x30>
    2af2:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <twi_slarw>
    2af6:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <twi_slarw>
    2afa:	88 0f       	add	r24, r24
    2afc:	83 2b       	or	r24, r19
    2afe:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <twi_slarw>
    2b02:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_inRepStart>
    2b06:	81 30       	cpi	r24, 0x01	; 1
    2b08:	61 f4       	brne	.+24     	; 0x2b22 <twi_writeTo+0x6e>
    2b0a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_inRepStart>
    2b0e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_slarw>
    2b12:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b16:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b1a:	83 fd       	sbrc	r24, 3
    2b1c:	f8 cf       	rjmp	.-16     	; 0x2b0e <twi_writeTo+0x5a>
    2b1e:	85 ec       	ldi	r24, 0xC5	; 197
    2b20:	01 c0       	rjmp	.+2      	; 0x2b24 <twi_writeTo+0x70>
    2b22:	85 ee       	ldi	r24, 0xE5	; 229
    2b24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b28:	22 23       	and	r18, r18
    2b2a:	21 f0       	breq	.+8      	; 0x2b34 <twi_writeTo+0x80>
    2b2c:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <twi_state>
    2b30:	82 30       	cpi	r24, 0x02	; 2
    2b32:	d1 f3       	breq	.-12     	; 0x2b28 <twi_writeTo+0x74>
    2b34:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_error>
    2b38:	8f 3f       	cpi	r24, 0xFF	; 255
    2b3a:	79 f0       	breq	.+30     	; 0x2b5a <twi_writeTo+0xa6>
    2b3c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_error>
    2b40:	80 32       	cpi	r24, 0x20	; 32
    2b42:	41 f0       	breq	.+16     	; 0x2b54 <twi_writeTo+0xa0>
    2b44:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_error>
    2b48:	80 33       	cpi	r24, 0x30	; 48
    2b4a:	31 f0       	breq	.+12     	; 0x2b58 <twi_writeTo+0xa4>
    2b4c:	94 e0       	ldi	r25, 0x04	; 4
    2b4e:	05 c0       	rjmp	.+10     	; 0x2b5a <twi_writeTo+0xa6>
    2b50:	91 e0       	ldi	r25, 0x01	; 1
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <twi_writeTo+0xa6>
    2b54:	92 e0       	ldi	r25, 0x02	; 2
    2b56:	01 c0       	rjmp	.+2      	; 0x2b5a <twi_writeTo+0xa6>
    2b58:	93 e0       	ldi	r25, 0x03	; 3
    2b5a:	89 2f       	mov	r24, r25
    2b5c:	0f 91       	pop	r16
    2b5e:	08 95       	ret

00002b60 <twi_transmit>:
    2b60:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <twi_txBufferLength>
    2b64:	26 2f       	mov	r18, r22
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	24 0f       	add	r18, r20
    2b6a:	31 1d       	adc	r19, r1
    2b6c:	21 32       	cpi	r18, 0x21	; 33
    2b6e:	31 05       	cpc	r19, r1
    2b70:	dc f4       	brge	.+54     	; 0x2ba8 <twi_transmit+0x48>
    2b72:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <twi_state>
    2b76:	24 30       	cpi	r18, 0x04	; 4
    2b78:	c9 f4       	brne	.+50     	; 0x2bac <twi_transmit+0x4c>
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	86 17       	cp	r24, r22
    2b82:	58 f4       	brcc	.+22     	; 0x2b9a <twi_transmit+0x3a>
    2b84:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <twi_txBufferLength>
    2b88:	21 91       	ld	r18, Z+
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	ac 57       	subi	r26, 0x7C	; 124
    2b8e:	bd 4f       	sbci	r27, 0xFD	; 253
    2b90:	a3 0f       	add	r26, r19
    2b92:	b1 1d       	adc	r27, r1
    2b94:	2c 93       	st	X, r18
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	f3 cf       	rjmp	.-26     	; 0x2b80 <twi_transmit+0x20>
    2b9a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    2b9e:	68 0f       	add	r22, r24
    2ba0:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <twi_txBufferLength>
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	08 95       	ret
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	08 95       	ret
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	08 95       	ret

00002bb0 <twi_attachSlaveRxEvent>:
    2bb0:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <twi_onSlaveReceive+0x1>
    2bb4:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <twi_onSlaveReceive>
    2bb8:	08 95       	ret

00002bba <twi_attachSlaveTxEvent>:
    2bba:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <twi_onSlaveTransmit+0x1>
    2bbe:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <twi_onSlaveTransmit>
    2bc2:	08 95       	ret

00002bc4 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2bc4:	85 ed       	ldi	r24, 0xD5	; 213
    2bc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2bca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2bce:	84 fd       	sbrc	r24, 4
    2bd0:	fc cf       	rjmp	.-8      	; 0x2bca <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2bd2:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_state>
    2bd6:	08 95       	ret

00002bd8 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2bd8:	85 ec       	ldi	r24, 0xC5	; 197
    2bda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2bde:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_state>
    2be2:	08 95       	ret

00002be4 <__vector_24>:
}

ISR(TWI_vect)
{
    2be4:	1f 92       	push	r1
    2be6:	0f 92       	push	r0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	0f 92       	push	r0
    2bec:	11 24       	eor	r1, r1
    2bee:	2f 93       	push	r18
    2bf0:	3f 93       	push	r19
    2bf2:	4f 93       	push	r20
    2bf4:	5f 93       	push	r21
    2bf6:	6f 93       	push	r22
    2bf8:	7f 93       	push	r23
    2bfa:	8f 93       	push	r24
    2bfc:	9f 93       	push	r25
    2bfe:	af 93       	push	r26
    2c00:	bf 93       	push	r27
    2c02:	ef 93       	push	r30
    2c04:	ff 93       	push	r31
  switch(TW_STATUS){
    2c06:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2c0a:	88 7f       	andi	r24, 0xF8	; 248
    2c0c:	80 36       	cpi	r24, 0x60	; 96
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <__vector_24+0x2e>
    2c10:	9e c0       	rjmp	.+316    	; 0x2d4e <__vector_24+0x16a>
    2c12:	78 f5       	brcc	.+94     	; 0x2c72 <__vector_24+0x8e>
    2c14:	88 32       	cpi	r24, 0x28	; 40
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <__vector_24+0x36>
    2c18:	5d c0       	rjmp	.+186    	; 0x2cd4 <__vector_24+0xf0>
    2c1a:	90 f4       	brcc	.+36     	; 0x2c40 <__vector_24+0x5c>
    2c1c:	80 31       	cpi	r24, 0x10	; 16
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <__vector_24+0x3e>
    2c20:	56 c0       	rjmp	.+172    	; 0x2cce <__vector_24+0xea>
    2c22:	38 f4       	brcc	.+14     	; 0x2c32 <__vector_24+0x4e>
    2c24:	88 23       	and	r24, r24
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <__vector_24+0x46>
    2c28:	f5 c0       	rjmp	.+490    	; 0x2e14 <__vector_24+0x230>
    2c2a:	88 30       	cpi	r24, 0x08	; 8
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <__vector_24+0x4c>
    2c2e:	4f c0       	rjmp	.+158    	; 0x2cce <__vector_24+0xea>
    2c30:	f5 c0       	rjmp	.+490    	; 0x2e1c <__vector_24+0x238>
    2c32:	88 31       	cpi	r24, 0x18	; 24
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <__vector_24+0x54>
    2c36:	4e c0       	rjmp	.+156    	; 0x2cd4 <__vector_24+0xf0>
    2c38:	80 32       	cpi	r24, 0x20	; 32
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <__vector_24+0x5a>
    2c3c:	5f c0       	rjmp	.+190    	; 0x2cfc <__vector_24+0x118>
    2c3e:	ee c0       	rjmp	.+476    	; 0x2e1c <__vector_24+0x238>
    2c40:	80 34       	cpi	r24, 0x40	; 64
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <__vector_24+0x62>
    2c44:	6a c0       	rjmp	.+212    	; 0x2d1a <__vector_24+0x136>
    2c46:	58 f4       	brcc	.+22     	; 0x2c5e <__vector_24+0x7a>
    2c48:	80 33       	cpi	r24, 0x30	; 48
    2c4a:	09 f4       	brne	.+2      	; 0x2c4e <__vector_24+0x6a>
    2c4c:	57 c0       	rjmp	.+174    	; 0x2cfc <__vector_24+0x118>
    2c4e:	88 33       	cpi	r24, 0x38	; 56
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <__vector_24+0x70>
    2c52:	e4 c0       	rjmp	.+456    	; 0x2e1c <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2c54:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <twi_error>
      twi_releaseBus();
    2c58:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <twi_releaseBus>
      break;
    2c5c:	df c0       	rjmp	.+446    	; 0x2e1c <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2c5e:	80 35       	cpi	r24, 0x50	; 80
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <__vector_24+0x80>
    2c62:	4f c0       	rjmp	.+158    	; 0x2d02 <__vector_24+0x11e>
    2c64:	88 35       	cpi	r24, 0x58	; 88
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <__vector_24+0x86>
    2c68:	5d c0       	rjmp	.+186    	; 0x2d24 <__vector_24+0x140>
    2c6a:	88 34       	cpi	r24, 0x48	; 72
    2c6c:	09 f0       	breq	.+2      	; 0x2c70 <__vector_24+0x8c>
    2c6e:	d6 c0       	rjmp	.+428    	; 0x2e1c <__vector_24+0x238>
    2c70:	d3 c0       	rjmp	.+422    	; 0x2e18 <__vector_24+0x234>
    2c72:	88 39       	cpi	r24, 0x98	; 152
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <__vector_24+0x94>
    2c76:	c4 c0       	rjmp	.+392    	; 0x2e00 <__vector_24+0x21c>
    2c78:	a8 f4       	brcc	.+42     	; 0x2ca4 <__vector_24+0xc0>
    2c7a:	88 37       	cpi	r24, 0x78	; 120
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <__vector_24+0x9c>
    2c7e:	67 c0       	rjmp	.+206    	; 0x2d4e <__vector_24+0x16a>
    2c80:	38 f4       	brcc	.+14     	; 0x2c90 <__vector_24+0xac>
    2c82:	88 36       	cpi	r24, 0x68	; 104
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <__vector_24+0xa4>
    2c86:	63 c0       	rjmp	.+198    	; 0x2d4e <__vector_24+0x16a>
    2c88:	80 37       	cpi	r24, 0x70	; 112
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <__vector_24+0xaa>
    2c8c:	60 c0       	rjmp	.+192    	; 0x2d4e <__vector_24+0x16a>
    2c8e:	c6 c0       	rjmp	.+396    	; 0x2e1c <__vector_24+0x238>
    2c90:	88 38       	cpi	r24, 0x88	; 136
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <__vector_24+0xb2>
    2c94:	b5 c0       	rjmp	.+362    	; 0x2e00 <__vector_24+0x21c>
    2c96:	80 39       	cpi	r24, 0x90	; 144
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <__vector_24+0xb8>
    2c9a:	5f c0       	rjmp	.+190    	; 0x2d5a <__vector_24+0x176>
    2c9c:	80 38       	cpi	r24, 0x80	; 128
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <__vector_24+0xbe>
    2ca0:	bd c0       	rjmp	.+378    	; 0x2e1c <__vector_24+0x238>
    2ca2:	5b c0       	rjmp	.+182    	; 0x2d5a <__vector_24+0x176>
    2ca4:	80 3b       	cpi	r24, 0xB0	; 176
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <__vector_24+0xc6>
    2ca8:	83 c0       	rjmp	.+262    	; 0x2db0 <__vector_24+0x1cc>
    2caa:	38 f4       	brcc	.+14     	; 0x2cba <__vector_24+0xd6>
    2cac:	80 3a       	cpi	r24, 0xA0	; 160
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <__vector_24+0xce>
    2cb0:	66 c0       	rjmp	.+204    	; 0x2d7e <__vector_24+0x19a>
    2cb2:	88 3a       	cpi	r24, 0xA8	; 168
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <__vector_24+0xd4>
    2cb6:	7c c0       	rjmp	.+248    	; 0x2db0 <__vector_24+0x1cc>
    2cb8:	b1 c0       	rjmp	.+354    	; 0x2e1c <__vector_24+0x238>
    2cba:	80 3c       	cpi	r24, 0xC0	; 192
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <__vector_24+0xdc>
    2cbe:	a4 c0       	rjmp	.+328    	; 0x2e08 <__vector_24+0x224>
    2cc0:	88 3c       	cpi	r24, 0xC8	; 200
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <__vector_24+0xe2>
    2cc4:	a1 c0       	rjmp	.+322    	; 0x2e08 <__vector_24+0x224>
    2cc6:	88 3b       	cpi	r24, 0xB8	; 184
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <__vector_24+0xe8>
    2cca:	87 c0       	rjmp	.+270    	; 0x2dda <__vector_24+0x1f6>
    2ccc:	a7 c0       	rjmp	.+334    	; 0x2e1c <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2cce:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_slarw>
    2cd2:	10 c0       	rjmp	.+32     	; 0x2cf4 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2cd4:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2cd8:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_masterBufferLength>
    2cdc:	98 17       	cp	r25, r24
    2cde:	70 f5       	brcc	.+92     	; 0x2d3c <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2ce0:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	8e 0f       	add	r24, r30
    2ce8:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_masterBufferIndex>
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	ea 55       	subi	r30, 0x5A	; 90
    2cf0:	fd 4f       	sbci	r31, 0xFD	; 253
    2cf2:	80 81       	ld	r24, Z
    2cf4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2cf8:	85 ec       	ldi	r24, 0xC5	; 197
    2cfa:	83 c0       	rjmp	.+262    	; 0x2e02 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2cfc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <twi_error>
    2d00:	8b c0       	rjmp	.+278    	; 0x2e18 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d02:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	8e 0f       	add	r24, r30
    2d0a:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_masterBufferIndex>
    2d0e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	ea 55       	subi	r30, 0x5A	; 90
    2d16:	fd 4f       	sbci	r31, 0xFD	; 253
    2d18:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2d1a:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2d1e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_masterBufferLength>
    2d22:	6b c0       	rjmp	.+214    	; 0x2dfa <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d24:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	8e 0f       	add	r24, r30
    2d2c:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_masterBufferIndex>
    2d30:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	ea 55       	subi	r30, 0x5A	; 90
    2d38:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3a:	80 83       	st	Z, r24
	if (twi_sendStop)
    2d3c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <twi_sendStop>
    2d40:	81 11       	cpse	r24, r1
    2d42:	6a c0       	rjmp	.+212    	; 0x2e18 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2d4a:	84 ea       	ldi	r24, 0xA4	; 164
    2d4c:	5e c0       	rjmp	.+188    	; 0x2e0a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2d54:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_rxBufferIndex>
    2d58:	cf cf       	rjmp	.-98     	; 0x2cf8 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2d5a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d5e:	80 32       	cpi	r24, 0x20	; 32
    2d60:	08 f0       	brcs	.+2      	; 0x2d64 <__vector_24+0x180>
    2d62:	4e c0       	rjmp	.+156    	; 0x2e00 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2d64:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	8e 0f       	add	r24, r30
    2d6c:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_rxBufferIndex>
    2d70:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	ee 59       	subi	r30, 0x9E	; 158
    2d78:	fd 4f       	sbci	r31, 0xFD	; 253
    2d7a:	80 83       	st	Z, r24
    2d7c:	bd cf       	rjmp	.-134    	; 0x2cf8 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2d7e:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2d82:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d86:	80 32       	cpi	r24, 0x20	; 32
    2d88:	30 f4       	brcc	.+12     	; 0x2d96 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2d8a:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	ee 59       	subi	r30, 0x9E	; 158
    2d92:	fd 4f       	sbci	r31, 0xFD	; 253
    2d94:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2d96:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d9a:	70 e0       	ldi	r23, 0x00	; 0
    2d9c:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <twi_onSlaveReceive>
    2da0:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <twi_onSlaveReceive+0x1>
    2da4:	82 e6       	ldi	r24, 0x62	; 98
    2da6:	92 e0       	ldi	r25, 0x02	; 2
    2da8:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2daa:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_rxBufferIndex>
      break;
    2dae:	36 c0       	rjmp	.+108    	; 0x2e1c <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2db0:	84 e0       	ldi	r24, 0x04	; 4
    2db2:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2db6:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2dba:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2dbe:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <twi_onSlaveTransmit>
    2dc2:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <twi_onSlaveTransmit+0x1>
    2dc6:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2dc8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    2dcc:	81 11       	cpse	r24, r1
    2dce:	05 c0       	rjmp	.+10     	; 0x2dda <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2dd6:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2dda:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_txBufferIndex>
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	8e 0f       	add	r24, r30
    2de2:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_txBufferIndex>
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	ec 57       	subi	r30, 0x7C	; 124
    2dea:	fd 4f       	sbci	r31, 0xFD	; 253
    2dec:	80 81       	ld	r24, Z
    2dee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2df2:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <twi_txBufferIndex>
    2df6:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    2dfa:	98 17       	cp	r25, r24
    2dfc:	08 f4       	brcc	.+2      	; 0x2e00 <__vector_24+0x21c>
    2dfe:	7c cf       	rjmp	.-264    	; 0x2cf8 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2e00:	85 e8       	ldi	r24, 0x85	; 133
    2e02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e06:	0a c0       	rjmp	.+20     	; 0x2e1c <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2e08:	85 ec       	ldi	r24, 0xC5	; 197
    2e0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2e0e:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_state>
      break;
    2e12:	04 c0       	rjmp	.+8      	; 0x2e1c <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2e14:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <twi_error>
      twi_stop();
    2e18:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <twi_stop>
      break;
  }
}
    2e1c:	ff 91       	pop	r31
    2e1e:	ef 91       	pop	r30
    2e20:	bf 91       	pop	r27
    2e22:	af 91       	pop	r26
    2e24:	9f 91       	pop	r25
    2e26:	8f 91       	pop	r24
    2e28:	7f 91       	pop	r23
    2e2a:	6f 91       	pop	r22
    2e2c:	5f 91       	pop	r21
    2e2e:	4f 91       	pop	r20
    2e30:	3f 91       	pop	r19
    2e32:	2f 91       	pop	r18
    2e34:	0f 90       	pop	r0
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	0f 90       	pop	r0
    2e3a:	1f 90       	pop	r1
    2e3c:	18 95       	reti

00002e3e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2e3e:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2e48:	82 1b       	sub	r24, r18
    2e4a:	91 09       	sbc	r25, r1
    2e4c:	08 95       	ret

00002e4e <_ZN7TwoWire4readEv>:
    2e4e:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2e52:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2e56:	98 17       	cp	r25, r24
    2e58:	50 f4       	brcc	.+20     	; 0x2e6e <_ZN7TwoWire4readEv+0x20>
    2e5a:	e9 2f       	mov	r30, r25
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	ec 5f       	subi	r30, 0xFC	; 252
    2e60:	fc 4f       	sbci	r31, 0xFC	; 252
    2e62:	20 81       	ld	r18, Z
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	9f 5f       	subi	r25, 0xFF	; 255
    2e68:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <_ZN7TwoWire4readEv+0x24>
    2e6e:	2f ef       	ldi	r18, 0xFF	; 255
    2e70:	3f ef       	ldi	r19, 0xFF	; 255
    2e72:	c9 01       	movw	r24, r18
    2e74:	08 95       	ret

00002e76 <_ZN7TwoWire4peekEv>:
    2e76:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2e7a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2e7e:	e8 17       	cp	r30, r24
    2e80:	30 f4       	brcc	.+12     	; 0x2e8e <_ZN7TwoWire4peekEv+0x18>
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	ec 5f       	subi	r30, 0xFC	; 252
    2e86:	fc 4f       	sbci	r31, 0xFC	; 252
    2e88:	80 81       	ld	r24, Z
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	08 95       	ret
    2e8e:	8f ef       	ldi	r24, 0xFF	; 255
    2e90:	9f ef       	ldi	r25, 0xFF	; 255
    2e92:	08 95       	ret

00002e94 <_ZN7TwoWire5flushEv>:
    2e94:	08 95       	ret

00002e96 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	ec 01       	movw	r28, r24
    2e9c:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <_ZN7TwoWire14user_onReceiveE>
    2ea0:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <_ZN7TwoWire14user_onReceiveE+0x1>
    2ea4:	30 97       	sbiw	r30, 0x00	; 0
    2ea6:	f1 f0       	breq	.+60     	; 0x2ee4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2ea8:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2eac:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2eb0:	98 17       	cp	r25, r24
    2eb2:	c0 f0       	brcs	.+48     	; 0x2ee4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	29 2f       	mov	r18, r25
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	26 17       	cp	r18, r22
    2ebc:	37 07       	cpc	r19, r23
    2ebe:	54 f4       	brge	.+20     	; 0x2ed4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2ec0:	de 01       	movw	r26, r28
    2ec2:	a2 0f       	add	r26, r18
    2ec4:	b3 1f       	adc	r27, r19
    2ec6:	4c 91       	ld	r20, X
    2ec8:	d9 01       	movw	r26, r18
    2eca:	ac 5f       	subi	r26, 0xFC	; 252
    2ecc:	bc 4f       	sbci	r27, 0xFC	; 252
    2ece:	4c 93       	st	X, r20
    2ed0:	9f 5f       	subi	r25, 0xFF	; 255
    2ed2:	f1 cf       	rjmp	.-30     	; 0x2eb6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2ed4:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2ed8:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2edc:	cb 01       	movw	r24, r22
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	09 94       	ijmp
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	08 95       	ret

00002eea <_ZN7TwoWire16onRequestServiceEv>:
    2eea:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <_ZN7TwoWire14user_onRequestE>
    2eee:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <_ZN7TwoWire14user_onRequestE+0x1>
    2ef2:	30 97       	sbiw	r30, 0x00	; 0
    2ef4:	29 f0       	breq	.+10     	; 0x2f00 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2ef6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    2efa:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    2efe:	09 94       	ijmp
    2f00:	08 95       	ret

00002f02 <_ZN7TwoWire5writeEPKhj>:
    2f02:	cf 92       	push	r12
    2f04:	df 92       	push	r13
    2f06:	ef 92       	push	r14
    2f08:	ff 92       	push	r15
    2f0a:	0f 93       	push	r16
    2f0c:	1f 93       	push	r17
    2f0e:	cf 93       	push	r28
    2f10:	df 93       	push	r29
    2f12:	7c 01       	movw	r14, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	8a 01       	movw	r16, r20
    2f18:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <_ZN7TwoWire12transmittingE>
    2f1c:	22 23       	and	r18, r18
    2f1e:	89 f0       	breq	.+34     	; 0x2f42 <_ZN7TwoWire5writeEPKhj+0x40>
    2f20:	eb 01       	movw	r28, r22
    2f22:	6b 01       	movw	r12, r22
    2f24:	c4 0e       	add	r12, r20
    2f26:	d5 1e       	adc	r13, r21
    2f28:	cc 15       	cp	r28, r12
    2f2a:	dd 05       	cpc	r29, r13
    2f2c:	69 f0       	breq	.+26     	; 0x2f48 <_ZN7TwoWire5writeEPKhj+0x46>
    2f2e:	69 91       	ld	r22, Y+
    2f30:	d7 01       	movw	r26, r14
    2f32:	ed 91       	ld	r30, X+
    2f34:	fc 91       	ld	r31, X
    2f36:	01 90       	ld	r0, Z+
    2f38:	f0 81       	ld	r31, Z
    2f3a:	e0 2d       	mov	r30, r0
    2f3c:	c7 01       	movw	r24, r14
    2f3e:	09 95       	icall
    2f40:	f3 cf       	rjmp	.-26     	; 0x2f28 <_ZN7TwoWire5writeEPKhj+0x26>
    2f42:	64 2f       	mov	r22, r20
    2f44:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <twi_transmit>
    2f48:	c8 01       	movw	r24, r16
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	df 90       	pop	r13
    2f58:	cf 90       	pop	r12
    2f5a:	08 95       	ret

00002f5c <_ZN7TwoWire5writeEh>:
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	1f 92       	push	r1
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	69 83       	std	Y+1, r22	; 0x01
    2f68:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <_ZN7TwoWire12transmittingE>
    2f6c:	22 23       	and	r18, r18
    2f6e:	d1 f0       	breq	.+52     	; 0x2fa4 <_ZN7TwoWire5writeEh+0x48>
    2f70:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    2f74:	20 32       	cpi	r18, 0x20	; 32
    2f76:	40 f0       	brcs	.+16     	; 0x2f88 <_ZN7TwoWire5writeEh+0x2c>
    2f78:	21 e0       	ldi	r18, 0x01	; 1
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	33 83       	std	Z+3, r19	; 0x03
    2f80:	22 83       	std	Z+2, r18	; 0x02
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	15 c0       	rjmp	.+42     	; 0x2fb2 <_ZN7TwoWire5writeEh+0x56>
    2f88:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    2f8c:	e8 2f       	mov	r30, r24
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	ef 51       	subi	r30, 0x1F	; 31
    2f92:	fd 4f       	sbci	r31, 0xFD	; 253
    2f94:	99 81       	ldd	r25, Y+1	; 0x01
    2f96:	90 83       	st	Z, r25
    2f98:	8f 5f       	subi	r24, 0xFF	; 255
    2f9a:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    2f9e:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    2fa2:	05 c0       	rjmp	.+10     	; 0x2fae <_ZN7TwoWire5writeEh+0x52>
    2fa4:	61 e0       	ldi	r22, 0x01	; 1
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <twi_transmit>
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0f 90       	pop	r0
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	08 95       	ret

00002fba <_ZN7TwoWireC1Ev>:
    2fba:	fc 01       	movw	r30, r24
    2fbc:	13 82       	std	Z+3, r1	; 0x03
    2fbe:	12 82       	std	Z+2, r1	; 0x02
    2fc0:	88 ee       	ldi	r24, 0xE8	; 232
    2fc2:	93 e0       	ldi	r25, 0x03	; 3
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	84 83       	std	Z+4, r24	; 0x04
    2fca:	95 83       	std	Z+5, r25	; 0x05
    2fcc:	a6 83       	std	Z+6, r26	; 0x06
    2fce:	b7 83       	std	Z+7, r27	; 0x07
    2fd0:	82 e8       	ldi	r24, 0x82	; 130
    2fd2:	91 e0       	ldi	r25, 0x01	; 1
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    2fd8:	08 95       	ret

00002fda <_ZN7TwoWire5beginEv>:
    2fda:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2fde:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2fe2:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    2fe6:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    2fea:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <twi_init>
    2fee:	85 e7       	ldi	r24, 0x75	; 117
    2ff0:	97 e1       	ldi	r25, 0x17	; 23
    2ff2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <twi_attachSlaveTxEvent>
    2ff6:	8b e4       	ldi	r24, 0x4B	; 75
    2ff8:	97 e1       	ldi	r25, 0x17	; 23
    2ffa:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <twi_attachSlaveRxEvent>

00002ffe <_ZN7TwoWire17beginTransmissionEh>:
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_ZN7TwoWire12transmittingE>
    3004:	60 93 01 03 	sts	0x0301, r22	; 0x800301 <_ZN7TwoWire9txAddressE>
    3008:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    300c:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    3010:	08 95       	ret

00003012 <_ZN7TwoWire15endTransmissionEh>:
    3012:	0f 93       	push	r16
    3014:	06 2f       	mov	r16, r22
    3016:	21 e0       	ldi	r18, 0x01	; 1
    3018:	40 91 df 02 	lds	r20, 0x02DF	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    301c:	61 ee       	ldi	r22, 0xE1	; 225
    301e:	72 e0       	ldi	r23, 0x02	; 2
    3020:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZN7TwoWire9txAddressE>
    3024:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <twi_writeTo>
    3028:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    302c:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    3030:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_ZN7TwoWire12transmittingE>
    3034:	0f 91       	pop	r16
    3036:	08 95       	ret

00003038 <_ZN7TwoWire11requestFromEhhmhh>:
    3038:	4f 92       	push	r4
    303a:	5f 92       	push	r5
    303c:	6f 92       	push	r6
    303e:	7f 92       	push	r7
    3040:	af 92       	push	r10
    3042:	bf 92       	push	r11
    3044:	cf 92       	push	r12
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	5c 01       	movw	r10, r24
    3054:	f6 2e       	mov	r15, r22
    3056:	d4 2f       	mov	r29, r20
    3058:	28 01       	movw	r4, r16
    305a:	39 01       	movw	r6, r18
    305c:	ee 20       	and	r14, r14
    305e:	21 f1       	breq	.+72     	; 0x30a8 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3060:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN7TwoWire17beginTransmissionEh>
    3064:	ce 2d       	mov	r28, r14
    3066:	c4 30       	cpi	r28, 0x04	; 4
    3068:	08 f0       	brcs	.+2      	; 0x306c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    306a:	c3 e0       	ldi	r28, 0x03	; 3
    306c:	c1 50       	subi	r28, 0x01	; 1
    306e:	c0 f0       	brcs	.+48     	; 0x30a0 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3070:	28 e0       	ldi	r18, 0x08	; 8
    3072:	c2 9f       	mul	r28, r18
    3074:	c0 01       	movw	r24, r0
    3076:	11 24       	eor	r1, r1
    3078:	a3 01       	movw	r20, r6
    307a:	92 01       	movw	r18, r4
    307c:	04 c0       	rjmp	.+8      	; 0x3086 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    307e:	56 95       	lsr	r21
    3080:	47 95       	ror	r20
    3082:	37 95       	ror	r19
    3084:	27 95       	ror	r18
    3086:	8a 95       	dec	r24
    3088:	d2 f7       	brpl	.-12     	; 0x307e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    308a:	ca 01       	movw	r24, r20
    308c:	b9 01       	movw	r22, r18
    308e:	d5 01       	movw	r26, r10
    3090:	ed 91       	ld	r30, X+
    3092:	fc 91       	ld	r31, X
    3094:	01 90       	ld	r0, Z+
    3096:	f0 81       	ld	r31, Z
    3098:	e0 2d       	mov	r30, r0
    309a:	c5 01       	movw	r24, r10
    309c:	09 95       	icall
    309e:	e6 cf       	rjmp	.-52     	; 0x306c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    30a0:	60 e0       	ldi	r22, 0x00	; 0
    30a2:	c5 01       	movw	r24, r10
    30a4:	0e 94 09 18 	call	0x3012	; 0x3012 <_ZN7TwoWire15endTransmissionEh>
    30a8:	4d 2f       	mov	r20, r29
    30aa:	d1 32       	cpi	r29, 0x21	; 33
    30ac:	08 f0       	brcs	.+2      	; 0x30b0 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	2c 2d       	mov	r18, r12
    30b2:	64 e0       	ldi	r22, 0x04	; 4
    30b4:	73 e0       	ldi	r23, 0x03	; 3
    30b6:	8f 2d       	mov	r24, r15
    30b8:	0e 94 12 15 	call	0x2a24	; 0x2a24 <twi_readFrom>
    30bc:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    30c0:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	ff 90       	pop	r15
    30ce:	ef 90       	pop	r14
    30d0:	cf 90       	pop	r12
    30d2:	bf 90       	pop	r11
    30d4:	af 90       	pop	r10
    30d6:	7f 90       	pop	r7
    30d8:	6f 90       	pop	r6
    30da:	5f 90       	pop	r5
    30dc:	4f 90       	pop	r4
    30de:	08 95       	ret

000030e0 <_ZN7TwoWire11requestFromEhhh>:
    30e0:	cf 92       	push	r12
    30e2:	ef 92       	push	r14
    30e4:	0f 93       	push	r16
    30e6:	1f 93       	push	r17
    30e8:	c2 2e       	mov	r12, r18
    30ea:	e1 2c       	mov	r14, r1
    30ec:	00 e0       	ldi	r16, 0x00	; 0
    30ee:	10 e0       	ldi	r17, 0x00	; 0
    30f0:	98 01       	movw	r18, r16
    30f2:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN7TwoWire11requestFromEhhmhh>
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	ef 90       	pop	r14
    30fc:	cf 90       	pop	r12
    30fe:	08 95       	ret

00003100 <_ZN7TwoWire11requestFromEhh>:
    3100:	21 e0       	ldi	r18, 0x01	; 1
    3102:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <_ZN7TwoWire11requestFromEhhh>

00003106 <_ZN7TwoWire15endTransmissionEv>:
    3106:	61 e0       	ldi	r22, 0x01	; 1
    3108:	0c 94 09 18 	jmp	0x3012	; 0x3012 <_ZN7TwoWire15endTransmissionEh>

0000310c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    310c:	8e ec       	ldi	r24, 0xCE	; 206
    310e:	92 e0       	ldi	r25, 0x02	; 2
    3110:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <_ZN7TwoWireC1Ev>

00003114 <__subsf3>:
    3114:	50 58       	subi	r21, 0x80	; 128

00003116 <__addsf3>:
    3116:	bb 27       	eor	r27, r27
    3118:	aa 27       	eor	r26, r26
    311a:	0e 94 a2 18 	call	0x3144	; 0x3144 <__addsf3x>
    311e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__fp_round>
    3122:	0e 94 0e 1a 	call	0x341c	; 0x341c <__fp_pscA>
    3126:	38 f0       	brcs	.+14     	; 0x3136 <__addsf3+0x20>
    3128:	0e 94 15 1a 	call	0x342a	; 0x342a <__fp_pscB>
    312c:	20 f0       	brcs	.+8      	; 0x3136 <__addsf3+0x20>
    312e:	39 f4       	brne	.+14     	; 0x313e <__addsf3+0x28>
    3130:	9f 3f       	cpi	r25, 0xFF	; 255
    3132:	19 f4       	brne	.+6      	; 0x313a <__addsf3+0x24>
    3134:	26 f4       	brtc	.+8      	; 0x313e <__addsf3+0x28>
    3136:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__fp_nan>
    313a:	0e f4       	brtc	.+2      	; 0x313e <__addsf3+0x28>
    313c:	e0 95       	com	r30
    313e:	e7 fb       	bst	r30, 7
    3140:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__fp_inf>

00003144 <__addsf3x>:
    3144:	e9 2f       	mov	r30, r25
    3146:	0e 94 2d 1a 	call	0x345a	; 0x345a <__fp_split3>
    314a:	58 f3       	brcs	.-42     	; 0x3122 <__addsf3+0xc>
    314c:	ba 17       	cp	r27, r26
    314e:	62 07       	cpc	r22, r18
    3150:	73 07       	cpc	r23, r19
    3152:	84 07       	cpc	r24, r20
    3154:	95 07       	cpc	r25, r21
    3156:	20 f0       	brcs	.+8      	; 0x3160 <__addsf3x+0x1c>
    3158:	79 f4       	brne	.+30     	; 0x3178 <__addsf3x+0x34>
    315a:	a6 f5       	brtc	.+104    	; 0x31c4 <__addsf3x+0x80>
    315c:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__fp_zero>
    3160:	0e f4       	brtc	.+2      	; 0x3164 <__addsf3x+0x20>
    3162:	e0 95       	com	r30
    3164:	0b 2e       	mov	r0, r27
    3166:	ba 2f       	mov	r27, r26
    3168:	a0 2d       	mov	r26, r0
    316a:	0b 01       	movw	r0, r22
    316c:	b9 01       	movw	r22, r18
    316e:	90 01       	movw	r18, r0
    3170:	0c 01       	movw	r0, r24
    3172:	ca 01       	movw	r24, r20
    3174:	a0 01       	movw	r20, r0
    3176:	11 24       	eor	r1, r1
    3178:	ff 27       	eor	r31, r31
    317a:	59 1b       	sub	r21, r25
    317c:	99 f0       	breq	.+38     	; 0x31a4 <__addsf3x+0x60>
    317e:	59 3f       	cpi	r21, 0xF9	; 249
    3180:	50 f4       	brcc	.+20     	; 0x3196 <__addsf3x+0x52>
    3182:	50 3e       	cpi	r21, 0xE0	; 224
    3184:	68 f1       	brcs	.+90     	; 0x31e0 <__addsf3x+0x9c>
    3186:	1a 16       	cp	r1, r26
    3188:	f0 40       	sbci	r31, 0x00	; 0
    318a:	a2 2f       	mov	r26, r18
    318c:	23 2f       	mov	r18, r19
    318e:	34 2f       	mov	r19, r20
    3190:	44 27       	eor	r20, r20
    3192:	58 5f       	subi	r21, 0xF8	; 248
    3194:	f3 cf       	rjmp	.-26     	; 0x317c <__addsf3x+0x38>
    3196:	46 95       	lsr	r20
    3198:	37 95       	ror	r19
    319a:	27 95       	ror	r18
    319c:	a7 95       	ror	r26
    319e:	f0 40       	sbci	r31, 0x00	; 0
    31a0:	53 95       	inc	r21
    31a2:	c9 f7       	brne	.-14     	; 0x3196 <__addsf3x+0x52>
    31a4:	7e f4       	brtc	.+30     	; 0x31c4 <__addsf3x+0x80>
    31a6:	1f 16       	cp	r1, r31
    31a8:	ba 0b       	sbc	r27, r26
    31aa:	62 0b       	sbc	r22, r18
    31ac:	73 0b       	sbc	r23, r19
    31ae:	84 0b       	sbc	r24, r20
    31b0:	ba f0       	brmi	.+46     	; 0x31e0 <__addsf3x+0x9c>
    31b2:	91 50       	subi	r25, 0x01	; 1
    31b4:	a1 f0       	breq	.+40     	; 0x31de <__addsf3x+0x9a>
    31b6:	ff 0f       	add	r31, r31
    31b8:	bb 1f       	adc	r27, r27
    31ba:	66 1f       	adc	r22, r22
    31bc:	77 1f       	adc	r23, r23
    31be:	88 1f       	adc	r24, r24
    31c0:	c2 f7       	brpl	.-16     	; 0x31b2 <__addsf3x+0x6e>
    31c2:	0e c0       	rjmp	.+28     	; 0x31e0 <__addsf3x+0x9c>
    31c4:	ba 0f       	add	r27, r26
    31c6:	62 1f       	adc	r22, r18
    31c8:	73 1f       	adc	r23, r19
    31ca:	84 1f       	adc	r24, r20
    31cc:	48 f4       	brcc	.+18     	; 0x31e0 <__addsf3x+0x9c>
    31ce:	87 95       	ror	r24
    31d0:	77 95       	ror	r23
    31d2:	67 95       	ror	r22
    31d4:	b7 95       	ror	r27
    31d6:	f7 95       	ror	r31
    31d8:	9e 3f       	cpi	r25, 0xFE	; 254
    31da:	08 f0       	brcs	.+2      	; 0x31de <__addsf3x+0x9a>
    31dc:	b0 cf       	rjmp	.-160    	; 0x313e <__addsf3+0x28>
    31de:	93 95       	inc	r25
    31e0:	88 0f       	add	r24, r24
    31e2:	08 f0       	brcs	.+2      	; 0x31e6 <__addsf3x+0xa2>
    31e4:	99 27       	eor	r25, r25
    31e6:	ee 0f       	add	r30, r30
    31e8:	97 95       	ror	r25
    31ea:	87 95       	ror	r24
    31ec:	08 95       	ret

000031ee <__cmpsf2>:
    31ee:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fp_cmp>
    31f2:	08 f4       	brcc	.+2      	; 0x31f6 <__cmpsf2+0x8>
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	08 95       	ret

000031f8 <__divsf3>:
    31f8:	0e 94 10 19 	call	0x3220	; 0x3220 <__divsf3x>
    31fc:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__fp_round>
    3200:	0e 94 15 1a 	call	0x342a	; 0x342a <__fp_pscB>
    3204:	58 f0       	brcs	.+22     	; 0x321c <__divsf3+0x24>
    3206:	0e 94 0e 1a 	call	0x341c	; 0x341c <__fp_pscA>
    320a:	40 f0       	brcs	.+16     	; 0x321c <__divsf3+0x24>
    320c:	29 f4       	brne	.+10     	; 0x3218 <__divsf3+0x20>
    320e:	5f 3f       	cpi	r21, 0xFF	; 255
    3210:	29 f0       	breq	.+10     	; 0x321c <__divsf3+0x24>
    3212:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__fp_inf>
    3216:	51 11       	cpse	r21, r1
    3218:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_szero>
    321c:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__fp_nan>

00003220 <__divsf3x>:
    3220:	0e 94 2d 1a 	call	0x345a	; 0x345a <__fp_split3>
    3224:	68 f3       	brcs	.-38     	; 0x3200 <__divsf3+0x8>

00003226 <__divsf3_pse>:
    3226:	99 23       	and	r25, r25
    3228:	b1 f3       	breq	.-20     	; 0x3216 <__divsf3+0x1e>
    322a:	55 23       	and	r21, r21
    322c:	91 f3       	breq	.-28     	; 0x3212 <__divsf3+0x1a>
    322e:	95 1b       	sub	r25, r21
    3230:	55 0b       	sbc	r21, r21
    3232:	bb 27       	eor	r27, r27
    3234:	aa 27       	eor	r26, r26
    3236:	62 17       	cp	r22, r18
    3238:	73 07       	cpc	r23, r19
    323a:	84 07       	cpc	r24, r20
    323c:	38 f0       	brcs	.+14     	; 0x324c <__divsf3_pse+0x26>
    323e:	9f 5f       	subi	r25, 0xFF	; 255
    3240:	5f 4f       	sbci	r21, 0xFF	; 255
    3242:	22 0f       	add	r18, r18
    3244:	33 1f       	adc	r19, r19
    3246:	44 1f       	adc	r20, r20
    3248:	aa 1f       	adc	r26, r26
    324a:	a9 f3       	breq	.-22     	; 0x3236 <__divsf3_pse+0x10>
    324c:	35 d0       	rcall	.+106    	; 0x32b8 <__divsf3_pse+0x92>
    324e:	0e 2e       	mov	r0, r30
    3250:	3a f0       	brmi	.+14     	; 0x3260 <__divsf3_pse+0x3a>
    3252:	e0 e8       	ldi	r30, 0x80	; 128
    3254:	32 d0       	rcall	.+100    	; 0x32ba <__divsf3_pse+0x94>
    3256:	91 50       	subi	r25, 0x01	; 1
    3258:	50 40       	sbci	r21, 0x00	; 0
    325a:	e6 95       	lsr	r30
    325c:	00 1c       	adc	r0, r0
    325e:	ca f7       	brpl	.-14     	; 0x3252 <__divsf3_pse+0x2c>
    3260:	2b d0       	rcall	.+86     	; 0x32b8 <__divsf3_pse+0x92>
    3262:	fe 2f       	mov	r31, r30
    3264:	29 d0       	rcall	.+82     	; 0x32b8 <__divsf3_pse+0x92>
    3266:	66 0f       	add	r22, r22
    3268:	77 1f       	adc	r23, r23
    326a:	88 1f       	adc	r24, r24
    326c:	bb 1f       	adc	r27, r27
    326e:	26 17       	cp	r18, r22
    3270:	37 07       	cpc	r19, r23
    3272:	48 07       	cpc	r20, r24
    3274:	ab 07       	cpc	r26, r27
    3276:	b0 e8       	ldi	r27, 0x80	; 128
    3278:	09 f0       	breq	.+2      	; 0x327c <__divsf3_pse+0x56>
    327a:	bb 0b       	sbc	r27, r27
    327c:	80 2d       	mov	r24, r0
    327e:	bf 01       	movw	r22, r30
    3280:	ff 27       	eor	r31, r31
    3282:	93 58       	subi	r25, 0x83	; 131
    3284:	5f 4f       	sbci	r21, 0xFF	; 255
    3286:	3a f0       	brmi	.+14     	; 0x3296 <__divsf3_pse+0x70>
    3288:	9e 3f       	cpi	r25, 0xFE	; 254
    328a:	51 05       	cpc	r21, r1
    328c:	78 f0       	brcs	.+30     	; 0x32ac <__divsf3_pse+0x86>
    328e:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__fp_inf>
    3292:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_szero>
    3296:	5f 3f       	cpi	r21, 0xFF	; 255
    3298:	e4 f3       	brlt	.-8      	; 0x3292 <__divsf3_pse+0x6c>
    329a:	98 3e       	cpi	r25, 0xE8	; 232
    329c:	d4 f3       	brlt	.-12     	; 0x3292 <__divsf3_pse+0x6c>
    329e:	86 95       	lsr	r24
    32a0:	77 95       	ror	r23
    32a2:	67 95       	ror	r22
    32a4:	b7 95       	ror	r27
    32a6:	f7 95       	ror	r31
    32a8:	9f 5f       	subi	r25, 0xFF	; 255
    32aa:	c9 f7       	brne	.-14     	; 0x329e <__divsf3_pse+0x78>
    32ac:	88 0f       	add	r24, r24
    32ae:	91 1d       	adc	r25, r1
    32b0:	96 95       	lsr	r25
    32b2:	87 95       	ror	r24
    32b4:	97 f9       	bld	r25, 7
    32b6:	08 95       	ret
    32b8:	e1 e0       	ldi	r30, 0x01	; 1
    32ba:	66 0f       	add	r22, r22
    32bc:	77 1f       	adc	r23, r23
    32be:	88 1f       	adc	r24, r24
    32c0:	bb 1f       	adc	r27, r27
    32c2:	62 17       	cp	r22, r18
    32c4:	73 07       	cpc	r23, r19
    32c6:	84 07       	cpc	r24, r20
    32c8:	ba 07       	cpc	r27, r26
    32ca:	20 f0       	brcs	.+8      	; 0x32d4 <__divsf3_pse+0xae>
    32cc:	62 1b       	sub	r22, r18
    32ce:	73 0b       	sbc	r23, r19
    32d0:	84 0b       	sbc	r24, r20
    32d2:	ba 0b       	sbc	r27, r26
    32d4:	ee 1f       	adc	r30, r30
    32d6:	88 f7       	brcc	.-30     	; 0x32ba <__divsf3_pse+0x94>
    32d8:	e0 95       	com	r30
    32da:	08 95       	ret

000032dc <__fixsfsi>:
    32dc:	0e 94 75 19 	call	0x32ea	; 0x32ea <__fixunssfsi>
    32e0:	68 94       	set
    32e2:	b1 11       	cpse	r27, r1
    32e4:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_szero>
    32e8:	08 95       	ret

000032ea <__fixunssfsi>:
    32ea:	0e 94 35 1a 	call	0x346a	; 0x346a <__fp_splitA>
    32ee:	88 f0       	brcs	.+34     	; 0x3312 <__fixunssfsi+0x28>
    32f0:	9f 57       	subi	r25, 0x7F	; 127
    32f2:	98 f0       	brcs	.+38     	; 0x331a <__fixunssfsi+0x30>
    32f4:	b9 2f       	mov	r27, r25
    32f6:	99 27       	eor	r25, r25
    32f8:	b7 51       	subi	r27, 0x17	; 23
    32fa:	b0 f0       	brcs	.+44     	; 0x3328 <__fixunssfsi+0x3e>
    32fc:	e1 f0       	breq	.+56     	; 0x3336 <__fixunssfsi+0x4c>
    32fe:	66 0f       	add	r22, r22
    3300:	77 1f       	adc	r23, r23
    3302:	88 1f       	adc	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	1a f0       	brmi	.+6      	; 0x330e <__fixunssfsi+0x24>
    3308:	ba 95       	dec	r27
    330a:	c9 f7       	brne	.-14     	; 0x32fe <__fixunssfsi+0x14>
    330c:	14 c0       	rjmp	.+40     	; 0x3336 <__fixunssfsi+0x4c>
    330e:	b1 30       	cpi	r27, 0x01	; 1
    3310:	91 f0       	breq	.+36     	; 0x3336 <__fixunssfsi+0x4c>
    3312:	0e 94 4f 1a 	call	0x349e	; 0x349e <__fp_zero>
    3316:	b1 e0       	ldi	r27, 0x01	; 1
    3318:	08 95       	ret
    331a:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__fp_zero>
    331e:	67 2f       	mov	r22, r23
    3320:	78 2f       	mov	r23, r24
    3322:	88 27       	eor	r24, r24
    3324:	b8 5f       	subi	r27, 0xF8	; 248
    3326:	39 f0       	breq	.+14     	; 0x3336 <__fixunssfsi+0x4c>
    3328:	b9 3f       	cpi	r27, 0xF9	; 249
    332a:	cc f3       	brlt	.-14     	; 0x331e <__fixunssfsi+0x34>
    332c:	86 95       	lsr	r24
    332e:	77 95       	ror	r23
    3330:	67 95       	ror	r22
    3332:	b3 95       	inc	r27
    3334:	d9 f7       	brne	.-10     	; 0x332c <__fixunssfsi+0x42>
    3336:	3e f4       	brtc	.+14     	; 0x3346 <__fixunssfsi+0x5c>
    3338:	90 95       	com	r25
    333a:	80 95       	com	r24
    333c:	70 95       	com	r23
    333e:	61 95       	neg	r22
    3340:	7f 4f       	sbci	r23, 0xFF	; 255
    3342:	8f 4f       	sbci	r24, 0xFF	; 255
    3344:	9f 4f       	sbci	r25, 0xFF	; 255
    3346:	08 95       	ret

00003348 <__floatunsisf>:
    3348:	e8 94       	clt
    334a:	09 c0       	rjmp	.+18     	; 0x335e <__floatsisf+0x12>

0000334c <__floatsisf>:
    334c:	97 fb       	bst	r25, 7
    334e:	3e f4       	brtc	.+14     	; 0x335e <__floatsisf+0x12>
    3350:	90 95       	com	r25
    3352:	80 95       	com	r24
    3354:	70 95       	com	r23
    3356:	61 95       	neg	r22
    3358:	7f 4f       	sbci	r23, 0xFF	; 255
    335a:	8f 4f       	sbci	r24, 0xFF	; 255
    335c:	9f 4f       	sbci	r25, 0xFF	; 255
    335e:	99 23       	and	r25, r25
    3360:	a9 f0       	breq	.+42     	; 0x338c <__floatsisf+0x40>
    3362:	f9 2f       	mov	r31, r25
    3364:	96 e9       	ldi	r25, 0x96	; 150
    3366:	bb 27       	eor	r27, r27
    3368:	93 95       	inc	r25
    336a:	f6 95       	lsr	r31
    336c:	87 95       	ror	r24
    336e:	77 95       	ror	r23
    3370:	67 95       	ror	r22
    3372:	b7 95       	ror	r27
    3374:	f1 11       	cpse	r31, r1
    3376:	f8 cf       	rjmp	.-16     	; 0x3368 <__floatsisf+0x1c>
    3378:	fa f4       	brpl	.+62     	; 0x33b8 <__floatsisf+0x6c>
    337a:	bb 0f       	add	r27, r27
    337c:	11 f4       	brne	.+4      	; 0x3382 <__floatsisf+0x36>
    337e:	60 ff       	sbrs	r22, 0
    3380:	1b c0       	rjmp	.+54     	; 0x33b8 <__floatsisf+0x6c>
    3382:	6f 5f       	subi	r22, 0xFF	; 255
    3384:	7f 4f       	sbci	r23, 0xFF	; 255
    3386:	8f 4f       	sbci	r24, 0xFF	; 255
    3388:	9f 4f       	sbci	r25, 0xFF	; 255
    338a:	16 c0       	rjmp	.+44     	; 0x33b8 <__floatsisf+0x6c>
    338c:	88 23       	and	r24, r24
    338e:	11 f0       	breq	.+4      	; 0x3394 <__floatsisf+0x48>
    3390:	96 e9       	ldi	r25, 0x96	; 150
    3392:	11 c0       	rjmp	.+34     	; 0x33b6 <__floatsisf+0x6a>
    3394:	77 23       	and	r23, r23
    3396:	21 f0       	breq	.+8      	; 0x33a0 <__floatsisf+0x54>
    3398:	9e e8       	ldi	r25, 0x8E	; 142
    339a:	87 2f       	mov	r24, r23
    339c:	76 2f       	mov	r23, r22
    339e:	05 c0       	rjmp	.+10     	; 0x33aa <__floatsisf+0x5e>
    33a0:	66 23       	and	r22, r22
    33a2:	71 f0       	breq	.+28     	; 0x33c0 <__floatsisf+0x74>
    33a4:	96 e8       	ldi	r25, 0x86	; 134
    33a6:	86 2f       	mov	r24, r22
    33a8:	70 e0       	ldi	r23, 0x00	; 0
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	2a f0       	brmi	.+10     	; 0x33b8 <__floatsisf+0x6c>
    33ae:	9a 95       	dec	r25
    33b0:	66 0f       	add	r22, r22
    33b2:	77 1f       	adc	r23, r23
    33b4:	88 1f       	adc	r24, r24
    33b6:	da f7       	brpl	.-10     	; 0x33ae <__floatsisf+0x62>
    33b8:	88 0f       	add	r24, r24
    33ba:	96 95       	lsr	r25
    33bc:	87 95       	ror	r24
    33be:	97 f9       	bld	r25, 7
    33c0:	08 95       	ret

000033c2 <__fp_cmp>:
    33c2:	99 0f       	add	r25, r25
    33c4:	00 08       	sbc	r0, r0
    33c6:	55 0f       	add	r21, r21
    33c8:	aa 0b       	sbc	r26, r26
    33ca:	e0 e8       	ldi	r30, 0x80	; 128
    33cc:	fe ef       	ldi	r31, 0xFE	; 254
    33ce:	16 16       	cp	r1, r22
    33d0:	17 06       	cpc	r1, r23
    33d2:	e8 07       	cpc	r30, r24
    33d4:	f9 07       	cpc	r31, r25
    33d6:	c0 f0       	brcs	.+48     	; 0x3408 <__fp_cmp+0x46>
    33d8:	12 16       	cp	r1, r18
    33da:	13 06       	cpc	r1, r19
    33dc:	e4 07       	cpc	r30, r20
    33de:	f5 07       	cpc	r31, r21
    33e0:	98 f0       	brcs	.+38     	; 0x3408 <__fp_cmp+0x46>
    33e2:	62 1b       	sub	r22, r18
    33e4:	73 0b       	sbc	r23, r19
    33e6:	84 0b       	sbc	r24, r20
    33e8:	95 0b       	sbc	r25, r21
    33ea:	39 f4       	brne	.+14     	; 0x33fa <__fp_cmp+0x38>
    33ec:	0a 26       	eor	r0, r26
    33ee:	61 f0       	breq	.+24     	; 0x3408 <__fp_cmp+0x46>
    33f0:	23 2b       	or	r18, r19
    33f2:	24 2b       	or	r18, r20
    33f4:	25 2b       	or	r18, r21
    33f6:	21 f4       	brne	.+8      	; 0x3400 <__fp_cmp+0x3e>
    33f8:	08 95       	ret
    33fa:	0a 26       	eor	r0, r26
    33fc:	09 f4       	brne	.+2      	; 0x3400 <__fp_cmp+0x3e>
    33fe:	a1 40       	sbci	r26, 0x01	; 1
    3400:	a6 95       	lsr	r26
    3402:	8f ef       	ldi	r24, 0xFF	; 255
    3404:	81 1d       	adc	r24, r1
    3406:	81 1d       	adc	r24, r1
    3408:	08 95       	ret

0000340a <__fp_inf>:
    340a:	97 f9       	bld	r25, 7
    340c:	9f 67       	ori	r25, 0x7F	; 127
    340e:	80 e8       	ldi	r24, 0x80	; 128
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	60 e0       	ldi	r22, 0x00	; 0
    3414:	08 95       	ret

00003416 <__fp_nan>:
    3416:	9f ef       	ldi	r25, 0xFF	; 255
    3418:	80 ec       	ldi	r24, 0xC0	; 192
    341a:	08 95       	ret

0000341c <__fp_pscA>:
    341c:	00 24       	eor	r0, r0
    341e:	0a 94       	dec	r0
    3420:	16 16       	cp	r1, r22
    3422:	17 06       	cpc	r1, r23
    3424:	18 06       	cpc	r1, r24
    3426:	09 06       	cpc	r0, r25
    3428:	08 95       	ret

0000342a <__fp_pscB>:
    342a:	00 24       	eor	r0, r0
    342c:	0a 94       	dec	r0
    342e:	12 16       	cp	r1, r18
    3430:	13 06       	cpc	r1, r19
    3432:	14 06       	cpc	r1, r20
    3434:	05 06       	cpc	r0, r21
    3436:	08 95       	ret

00003438 <__fp_round>:
    3438:	09 2e       	mov	r0, r25
    343a:	03 94       	inc	r0
    343c:	00 0c       	add	r0, r0
    343e:	11 f4       	brne	.+4      	; 0x3444 <__fp_round+0xc>
    3440:	88 23       	and	r24, r24
    3442:	52 f0       	brmi	.+20     	; 0x3458 <__fp_round+0x20>
    3444:	bb 0f       	add	r27, r27
    3446:	40 f4       	brcc	.+16     	; 0x3458 <__fp_round+0x20>
    3448:	bf 2b       	or	r27, r31
    344a:	11 f4       	brne	.+4      	; 0x3450 <__fp_round+0x18>
    344c:	60 ff       	sbrs	r22, 0
    344e:	04 c0       	rjmp	.+8      	; 0x3458 <__fp_round+0x20>
    3450:	6f 5f       	subi	r22, 0xFF	; 255
    3452:	7f 4f       	sbci	r23, 0xFF	; 255
    3454:	8f 4f       	sbci	r24, 0xFF	; 255
    3456:	9f 4f       	sbci	r25, 0xFF	; 255
    3458:	08 95       	ret

0000345a <__fp_split3>:
    345a:	57 fd       	sbrc	r21, 7
    345c:	90 58       	subi	r25, 0x80	; 128
    345e:	44 0f       	add	r20, r20
    3460:	55 1f       	adc	r21, r21
    3462:	59 f0       	breq	.+22     	; 0x347a <__fp_splitA+0x10>
    3464:	5f 3f       	cpi	r21, 0xFF	; 255
    3466:	71 f0       	breq	.+28     	; 0x3484 <__fp_splitA+0x1a>
    3468:	47 95       	ror	r20

0000346a <__fp_splitA>:
    346a:	88 0f       	add	r24, r24
    346c:	97 fb       	bst	r25, 7
    346e:	99 1f       	adc	r25, r25
    3470:	61 f0       	breq	.+24     	; 0x348a <__fp_splitA+0x20>
    3472:	9f 3f       	cpi	r25, 0xFF	; 255
    3474:	79 f0       	breq	.+30     	; 0x3494 <__fp_splitA+0x2a>
    3476:	87 95       	ror	r24
    3478:	08 95       	ret
    347a:	12 16       	cp	r1, r18
    347c:	13 06       	cpc	r1, r19
    347e:	14 06       	cpc	r1, r20
    3480:	55 1f       	adc	r21, r21
    3482:	f2 cf       	rjmp	.-28     	; 0x3468 <__fp_split3+0xe>
    3484:	46 95       	lsr	r20
    3486:	f1 df       	rcall	.-30     	; 0x346a <__fp_splitA>
    3488:	08 c0       	rjmp	.+16     	; 0x349a <__fp_splitA+0x30>
    348a:	16 16       	cp	r1, r22
    348c:	17 06       	cpc	r1, r23
    348e:	18 06       	cpc	r1, r24
    3490:	99 1f       	adc	r25, r25
    3492:	f1 cf       	rjmp	.-30     	; 0x3476 <__fp_splitA+0xc>
    3494:	86 95       	lsr	r24
    3496:	71 05       	cpc	r23, r1
    3498:	61 05       	cpc	r22, r1
    349a:	08 94       	sec
    349c:	08 95       	ret

0000349e <__fp_zero>:
    349e:	e8 94       	clt

000034a0 <__fp_szero>:
    34a0:	bb 27       	eor	r27, r27
    34a2:	66 27       	eor	r22, r22
    34a4:	77 27       	eor	r23, r23
    34a6:	cb 01       	movw	r24, r22
    34a8:	97 f9       	bld	r25, 7
    34aa:	08 95       	ret

000034ac <__gesf2>:
    34ac:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fp_cmp>
    34b0:	08 f4       	brcc	.+2      	; 0x34b4 <__gesf2+0x8>
    34b2:	8f ef       	ldi	r24, 0xFF	; 255
    34b4:	08 95       	ret

000034b6 <__mulsf3>:
    34b6:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__mulsf3x>
    34ba:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__fp_round>
    34be:	0e 94 0e 1a 	call	0x341c	; 0x341c <__fp_pscA>
    34c2:	38 f0       	brcs	.+14     	; 0x34d2 <__mulsf3+0x1c>
    34c4:	0e 94 15 1a 	call	0x342a	; 0x342a <__fp_pscB>
    34c8:	20 f0       	brcs	.+8      	; 0x34d2 <__mulsf3+0x1c>
    34ca:	95 23       	and	r25, r21
    34cc:	11 f0       	breq	.+4      	; 0x34d2 <__mulsf3+0x1c>
    34ce:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__fp_inf>
    34d2:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__fp_nan>
    34d6:	11 24       	eor	r1, r1
    34d8:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_szero>

000034dc <__mulsf3x>:
    34dc:	0e 94 2d 1a 	call	0x345a	; 0x345a <__fp_split3>
    34e0:	70 f3       	brcs	.-36     	; 0x34be <__mulsf3+0x8>

000034e2 <__mulsf3_pse>:
    34e2:	95 9f       	mul	r25, r21
    34e4:	c1 f3       	breq	.-16     	; 0x34d6 <__mulsf3+0x20>
    34e6:	95 0f       	add	r25, r21
    34e8:	50 e0       	ldi	r21, 0x00	; 0
    34ea:	55 1f       	adc	r21, r21
    34ec:	62 9f       	mul	r22, r18
    34ee:	f0 01       	movw	r30, r0
    34f0:	72 9f       	mul	r23, r18
    34f2:	bb 27       	eor	r27, r27
    34f4:	f0 0d       	add	r31, r0
    34f6:	b1 1d       	adc	r27, r1
    34f8:	63 9f       	mul	r22, r19
    34fa:	aa 27       	eor	r26, r26
    34fc:	f0 0d       	add	r31, r0
    34fe:	b1 1d       	adc	r27, r1
    3500:	aa 1f       	adc	r26, r26
    3502:	64 9f       	mul	r22, r20
    3504:	66 27       	eor	r22, r22
    3506:	b0 0d       	add	r27, r0
    3508:	a1 1d       	adc	r26, r1
    350a:	66 1f       	adc	r22, r22
    350c:	82 9f       	mul	r24, r18
    350e:	22 27       	eor	r18, r18
    3510:	b0 0d       	add	r27, r0
    3512:	a1 1d       	adc	r26, r1
    3514:	62 1f       	adc	r22, r18
    3516:	73 9f       	mul	r23, r19
    3518:	b0 0d       	add	r27, r0
    351a:	a1 1d       	adc	r26, r1
    351c:	62 1f       	adc	r22, r18
    351e:	83 9f       	mul	r24, r19
    3520:	a0 0d       	add	r26, r0
    3522:	61 1d       	adc	r22, r1
    3524:	22 1f       	adc	r18, r18
    3526:	74 9f       	mul	r23, r20
    3528:	33 27       	eor	r19, r19
    352a:	a0 0d       	add	r26, r0
    352c:	61 1d       	adc	r22, r1
    352e:	23 1f       	adc	r18, r19
    3530:	84 9f       	mul	r24, r20
    3532:	60 0d       	add	r22, r0
    3534:	21 1d       	adc	r18, r1
    3536:	82 2f       	mov	r24, r18
    3538:	76 2f       	mov	r23, r22
    353a:	6a 2f       	mov	r22, r26
    353c:	11 24       	eor	r1, r1
    353e:	9f 57       	subi	r25, 0x7F	; 127
    3540:	50 40       	sbci	r21, 0x00	; 0
    3542:	9a f0       	brmi	.+38     	; 0x356a <__mulsf3_pse+0x88>
    3544:	f1 f0       	breq	.+60     	; 0x3582 <__mulsf3_pse+0xa0>
    3546:	88 23       	and	r24, r24
    3548:	4a f0       	brmi	.+18     	; 0x355c <__mulsf3_pse+0x7a>
    354a:	ee 0f       	add	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	bb 1f       	adc	r27, r27
    3550:	66 1f       	adc	r22, r22
    3552:	77 1f       	adc	r23, r23
    3554:	88 1f       	adc	r24, r24
    3556:	91 50       	subi	r25, 0x01	; 1
    3558:	50 40       	sbci	r21, 0x00	; 0
    355a:	a9 f7       	brne	.-22     	; 0x3546 <__mulsf3_pse+0x64>
    355c:	9e 3f       	cpi	r25, 0xFE	; 254
    355e:	51 05       	cpc	r21, r1
    3560:	80 f0       	brcs	.+32     	; 0x3582 <__mulsf3_pse+0xa0>
    3562:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__fp_inf>
    3566:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_szero>
    356a:	5f 3f       	cpi	r21, 0xFF	; 255
    356c:	e4 f3       	brlt	.-8      	; 0x3566 <__mulsf3_pse+0x84>
    356e:	98 3e       	cpi	r25, 0xE8	; 232
    3570:	d4 f3       	brlt	.-12     	; 0x3566 <__mulsf3_pse+0x84>
    3572:	86 95       	lsr	r24
    3574:	77 95       	ror	r23
    3576:	67 95       	ror	r22
    3578:	b7 95       	ror	r27
    357a:	f7 95       	ror	r31
    357c:	e7 95       	ror	r30
    357e:	9f 5f       	subi	r25, 0xFF	; 255
    3580:	c1 f7       	brne	.-16     	; 0x3572 <__mulsf3_pse+0x90>
    3582:	fe 2b       	or	r31, r30
    3584:	88 0f       	add	r24, r24
    3586:	91 1d       	adc	r25, r1
    3588:	96 95       	lsr	r25
    358a:	87 95       	ror	r24
    358c:	97 f9       	bld	r25, 7
    358e:	08 95       	ret

00003590 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3590:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3592:	91 8d       	ldd	r25, Z+25	; 0x19
    3594:	22 8d       	ldd	r18, Z+26	; 0x1a
    3596:	89 2f       	mov	r24, r25
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	80 5c       	subi	r24, 0xC0	; 192
    359c:	9f 4f       	sbci	r25, 0xFF	; 255
    359e:	82 1b       	sub	r24, r18
    35a0:	91 09       	sbc	r25, r1
}
    35a2:	8f 73       	andi	r24, 0x3F	; 63
    35a4:	99 27       	eor	r25, r25
    35a6:	08 95       	ret

000035a8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    35a8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    35aa:	91 8d       	ldd	r25, Z+25	; 0x19
    35ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ae:	98 17       	cp	r25, r24
    35b0:	31 f0       	breq	.+12     	; 0x35be <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    35b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    35b4:	e8 0f       	add	r30, r24
    35b6:	f1 1d       	adc	r31, r1
    35b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    35be:	8f ef       	ldi	r24, 0xFF	; 255
    35c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    35c2:	08 95       	ret

000035c4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    35c4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    35c6:	91 8d       	ldd	r25, Z+25	; 0x19
    35c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ca:	98 17       	cp	r25, r24
    35cc:	61 f0       	breq	.+24     	; 0x35e6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    35ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    35d0:	df 01       	movw	r26, r30
    35d2:	a8 0f       	add	r26, r24
    35d4:	b1 1d       	adc	r27, r1
    35d6:	5d 96       	adiw	r26, 0x1d	; 29
    35d8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    35da:	92 8d       	ldd	r25, Z+26	; 0x1a
    35dc:	9f 5f       	subi	r25, 0xFF	; 255
    35de:	9f 73       	andi	r25, 0x3F	; 63
    35e0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    35e6:	8f ef       	ldi	r24, 0xFF	; 255
    35e8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    35ea:	08 95       	ret

000035ec <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    35ec:	fc 01       	movw	r30, r24
    35ee:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    35f0:	44 8d       	ldd	r20, Z+28	; 0x1c
    35f2:	25 2f       	mov	r18, r21
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	84 2f       	mov	r24, r20
    35f8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    35fa:	82 1b       	sub	r24, r18
    35fc:	93 0b       	sbc	r25, r19
    35fe:	54 17       	cp	r21, r20
    3600:	10 f0       	brcs	.+4      	; 0x3606 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3602:	cf 96       	adiw	r24, 0x3f	; 63
    3604:	08 95       	ret
  return tail - head - 1;
    3606:	01 97       	sbiw	r24, 0x01	; 1
}
    3608:	08 95       	ret

0000360a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    360a:	81 e6       	ldi	r24, 0x61	; 97
    360c:	9c e1       	ldi	r25, 0x1C	; 28
    360e:	89 2b       	or	r24, r25
    3610:	49 f0       	breq	.+18     	; 0x3624 <_Z14serialEventRunv+0x1a>
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	89 2b       	or	r24, r25
    3618:	29 f0       	breq	.+10     	; 0x3624 <_Z14serialEventRunv+0x1a>
    361a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <_Z17Serial0_availablev>
    361e:	81 11       	cpse	r24, r1
    3620:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3624:	08 95       	ret

00003626 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3626:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3628:	84 8d       	ldd	r24, Z+28	; 0x1c
    362a:	df 01       	movw	r26, r30
    362c:	a8 0f       	add	r26, r24
    362e:	b1 1d       	adc	r27, r1
    3630:	a3 5a       	subi	r26, 0xA3	; 163
    3632:	bf 4f       	sbci	r27, 0xFF	; 255
    3634:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3636:	84 8d       	ldd	r24, Z+28	; 0x1c
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	01 96       	adiw	r24, 0x01	; 1
    363c:	8f 73       	andi	r24, 0x3F	; 63
    363e:	99 27       	eor	r25, r25
    3640:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3642:	a6 89       	ldd	r26, Z+22	; 0x16
    3644:	b7 89       	ldd	r27, Z+23	; 0x17
    3646:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3648:	a0 89       	ldd	r26, Z+16	; 0x10
    364a:	b1 89       	ldd	r27, Z+17	; 0x11
    364c:	8c 91       	ld	r24, X
    364e:	83 70       	andi	r24, 0x03	; 3
    3650:	80 64       	ori	r24, 0x40	; 64
    3652:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3654:	93 8d       	ldd	r25, Z+27	; 0x1b
    3656:	84 8d       	ldd	r24, Z+28	; 0x1c
    3658:	98 13       	cpse	r25, r24
    365a:	06 c0       	rjmp	.+12     	; 0x3668 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    365c:	02 88       	ldd	r0, Z+18	; 0x12
    365e:	f3 89       	ldd	r31, Z+19	; 0x13
    3660:	e0 2d       	mov	r30, r0
    3662:	80 81       	ld	r24, Z
    3664:	8f 7d       	andi	r24, 0xDF	; 223
    3666:	80 83       	st	Z, r24
    3668:	08 95       	ret

0000366a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    366a:	ef 92       	push	r14
    366c:	ff 92       	push	r15
    366e:	0f 93       	push	r16
    3670:	1f 93       	push	r17
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	ec 01       	movw	r28, r24
  _written = true;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    367c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    367e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3680:	98 13       	cpse	r25, r24
    3682:	05 c0       	rjmp	.+10     	; 0x368e <_ZN14HardwareSerial5writeEh+0x24>
    3684:	e8 89       	ldd	r30, Y+16	; 0x10
    3686:	f9 89       	ldd	r31, Y+17	; 0x11
    3688:	80 81       	ld	r24, Z
    368a:	85 fd       	sbrc	r24, 5
    368c:	26 c0       	rjmp	.+76     	; 0x36da <_ZN14HardwareSerial5writeEh+0x70>
    368e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3690:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3692:	10 e0       	ldi	r17, 0x00	; 0
    3694:	0f 5f       	subi	r16, 0xFF	; 255
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	0f 73       	andi	r16, 0x3F	; 63
    369a:	11 27       	eor	r17, r17
    369c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    369e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    36a0:	e8 12       	cpse	r14, r24
    36a2:	0c c0       	rjmp	.+24     	; 0x36bc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	07 fc       	sbrc	r0, 7
    36a8:	fa cf       	rjmp	.-12     	; 0x369e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    36aa:	e8 89       	ldd	r30, Y+16	; 0x10
    36ac:	f9 89       	ldd	r31, Y+17	; 0x11
    36ae:	80 81       	ld	r24, Z
    36b0:	85 ff       	sbrs	r24, 5
    36b2:	f5 cf       	rjmp	.-22     	; 0x369e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    36b4:	ce 01       	movw	r24, r28
    36b6:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    36ba:	f1 cf       	rjmp	.-30     	; 0x369e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    36bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36be:	fe 01       	movw	r30, r28
    36c0:	e8 0f       	add	r30, r24
    36c2:	f1 1d       	adc	r31, r1
    36c4:	e3 5a       	subi	r30, 0xA3	; 163
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    36ca:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    36cc:	f8 94       	cli
    _tx_buffer_head = i;
    36ce:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    36d0:	ea 89       	ldd	r30, Y+18	; 0x12
    36d2:	fb 89       	ldd	r31, Y+19	; 0x13
    36d4:	80 81       	ld	r24, Z
    36d6:	80 62       	ori	r24, 0x20	; 32
    36d8:	0a c0       	rjmp	.+20     	; 0x36ee <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    36da:	9f b7       	in	r25, 0x3f	; 63
    36dc:	f8 94       	cli
      *_udr = c;
    36de:	ee 89       	ldd	r30, Y+22	; 0x16
    36e0:	ff 89       	ldd	r31, Y+23	; 0x17
    36e2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    36e4:	e8 89       	ldd	r30, Y+16	; 0x10
    36e6:	f9 89       	ldd	r31, Y+17	; 0x11
    36e8:	80 81       	ld	r24, Z
    36ea:	83 70       	andi	r24, 0x03	; 3
    36ec:	80 64       	ori	r24, 0x40	; 64
    36ee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    36f0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	ff 90       	pop	r15
    3700:	ef 90       	pop	r14
    3702:	08 95       	ret

00003704 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    370a:	88 8d       	ldd	r24, Y+24	; 0x18
    370c:	88 23       	and	r24, r24
    370e:	c9 f0       	breq	.+50     	; 0x3742 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3710:	ea 89       	ldd	r30, Y+18	; 0x12
    3712:	fb 89       	ldd	r31, Y+19	; 0x13
    3714:	80 81       	ld	r24, Z
    3716:	85 fd       	sbrc	r24, 5
    3718:	05 c0       	rjmp	.+10     	; 0x3724 <_ZN14HardwareSerial5flushEv+0x20>
    371a:	a8 89       	ldd	r26, Y+16	; 0x10
    371c:	b9 89       	ldd	r27, Y+17	; 0x11
    371e:	8c 91       	ld	r24, X
    3720:	86 fd       	sbrc	r24, 6
    3722:	0f c0       	rjmp	.+30     	; 0x3742 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	07 fc       	sbrc	r0, 7
    3728:	f5 cf       	rjmp	.-22     	; 0x3714 <_ZN14HardwareSerial5flushEv+0x10>
    372a:	80 81       	ld	r24, Z
    372c:	85 ff       	sbrs	r24, 5
    372e:	f2 cf       	rjmp	.-28     	; 0x3714 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3730:	a8 89       	ldd	r26, Y+16	; 0x10
    3732:	b9 89       	ldd	r27, Y+17	; 0x11
    3734:	8c 91       	ld	r24, X
    3736:	85 ff       	sbrs	r24, 5
    3738:	ed cf       	rjmp	.-38     	; 0x3714 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    373a:	ce 01       	movw	r24, r28
    373c:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3740:	e7 cf       	rjmp	.-50     	; 0x3710 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	08 95       	ret

00003748 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3748:	cf 92       	push	r12
    374a:	df 92       	push	r13
    374c:	ef 92       	push	r14
    374e:	ff 92       	push	r15
    3750:	1f 93       	push	r17
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	ec 01       	movw	r28, r24
    3758:	6a 01       	movw	r12, r20
    375a:	7b 01       	movw	r14, r22
    375c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    375e:	e8 89       	ldd	r30, Y+16	; 0x10
    3760:	f9 89       	ldd	r31, Y+17	; 0x11
    3762:	82 e0       	ldi	r24, 0x02	; 2
    3764:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3766:	41 15       	cp	r20, r1
    3768:	51 4e       	sbci	r21, 0xE1	; 225
    376a:	61 05       	cpc	r22, r1
    376c:	71 05       	cpc	r23, r1
    376e:	b1 f0       	breq	.+44     	; 0x379c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	79 e0       	ldi	r23, 0x09	; 9
    3774:	8d e3       	ldi	r24, 0x3D	; 61
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	a7 01       	movw	r20, r14
    377a:	96 01       	movw	r18, r12
    377c:	0e 94 ad 20 	call	0x415a	; 0x415a <__udivmodsi4>
    3780:	da 01       	movw	r26, r20
    3782:	c9 01       	movw	r24, r18
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	a1 09       	sbc	r26, r1
    3788:	b1 09       	sbc	r27, r1
    378a:	b6 95       	lsr	r27
    378c:	a7 95       	ror	r26
    378e:	97 95       	ror	r25
    3790:	87 95       	ror	r24
    3792:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3794:	21 15       	cp	r18, r1
    3796:	80 e1       	ldi	r24, 0x10	; 16
    3798:	38 07       	cpc	r19, r24
    379a:	a8 f0       	brcs	.+42     	; 0x37c6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    379c:	e8 89       	ldd	r30, Y+16	; 0x10
    379e:	f9 89       	ldd	r31, Y+17	; 0x11
    37a0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    37a2:	60 e8       	ldi	r22, 0x80	; 128
    37a4:	74 e8       	ldi	r23, 0x84	; 132
    37a6:	8e e1       	ldi	r24, 0x1E	; 30
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	a7 01       	movw	r20, r14
    37ac:	96 01       	movw	r18, r12
    37ae:	0e 94 ad 20 	call	0x415a	; 0x415a <__udivmodsi4>
    37b2:	da 01       	movw	r26, r20
    37b4:	c9 01       	movw	r24, r18
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	a1 09       	sbc	r26, r1
    37ba:	b1 09       	sbc	r27, r1
    37bc:	b6 95       	lsr	r27
    37be:	a7 95       	ror	r26
    37c0:	97 95       	ror	r25
    37c2:	87 95       	ror	r24
    37c4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    37c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    37c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    37ca:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    37cc:	ee 85       	ldd	r30, Y+14	; 0x0e
    37ce:	ff 85       	ldd	r31, Y+15	; 0x0f
    37d0:	20 83       	st	Z, r18

  _written = false;
    37d2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    37d4:	ec 89       	ldd	r30, Y+20	; 0x14
    37d6:	fd 89       	ldd	r31, Y+21	; 0x15
    37d8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    37da:	ea 89       	ldd	r30, Y+18	; 0x12
    37dc:	fb 89       	ldd	r31, Y+19	; 0x13
    37de:	80 81       	ld	r24, Z
    37e0:	80 61       	ori	r24, 0x10	; 16
    37e2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    37e4:	ea 89       	ldd	r30, Y+18	; 0x12
    37e6:	fb 89       	ldd	r31, Y+19	; 0x13
    37e8:	80 81       	ld	r24, Z
    37ea:	88 60       	ori	r24, 0x08	; 8
    37ec:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    37ee:	ea 89       	ldd	r30, Y+18	; 0x12
    37f0:	fb 89       	ldd	r31, Y+19	; 0x13
    37f2:	80 81       	ld	r24, Z
    37f4:	80 68       	ori	r24, 0x80	; 128
    37f6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    37f8:	ea 89       	ldd	r30, Y+18	; 0x12
    37fa:	fb 89       	ldd	r31, Y+19	; 0x13
    37fc:	80 81       	ld	r24, Z
    37fe:	8f 7d       	andi	r24, 0xDF	; 223
    3800:	80 83       	st	Z, r24
}
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	1f 91       	pop	r17
    3808:	ff 90       	pop	r15
    380a:	ef 90       	pop	r14
    380c:	df 90       	pop	r13
    380e:	cf 90       	pop	r12
    3810:	08 95       	ret

00003812 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3812:	1f 92       	push	r1
    3814:	0f 92       	push	r0
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	0f 92       	push	r0
    381a:	11 24       	eor	r1, r1
    381c:	2f 93       	push	r18
    381e:	8f 93       	push	r24
    3820:	9f 93       	push	r25
    3822:	ef 93       	push	r30
    3824:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3826:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <Serial+0x10>
    382a:	f0 91 35 03 	lds	r31, 0x0335	; 0x800335 <Serial+0x11>
    382e:	80 81       	ld	r24, Z
    3830:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <Serial+0x16>
    3834:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <Serial+0x17>
    3838:	82 fd       	sbrc	r24, 2
    383a:	12 c0       	rjmp	.+36     	; 0x3860 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    383c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    383e:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <Serial+0x19>
    3842:	8f 5f       	subi	r24, 0xFF	; 255
    3844:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3846:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <Serial+0x1a>
    384a:	82 17       	cp	r24, r18
    384c:	51 f0       	breq	.+20     	; 0x3862 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    384e:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <Serial+0x19>
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	ec 5d       	subi	r30, 0xDC	; 220
    3856:	fc 4f       	sbci	r31, 0xFC	; 252
    3858:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    385a:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <Serial+0x19>
    385e:	01 c0       	rjmp	.+2      	; 0x3862 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3860:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3862:	ff 91       	pop	r31
    3864:	ef 91       	pop	r30
    3866:	9f 91       	pop	r25
    3868:	8f 91       	pop	r24
    386a:	2f 91       	pop	r18
    386c:	0f 90       	pop	r0
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	0f 90       	pop	r0
    3872:	1f 90       	pop	r1
    3874:	18 95       	reti

00003876 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3876:	1f 92       	push	r1
    3878:	0f 92       	push	r0
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	0f 92       	push	r0
    387e:	11 24       	eor	r1, r1
    3880:	2f 93       	push	r18
    3882:	3f 93       	push	r19
    3884:	4f 93       	push	r20
    3886:	5f 93       	push	r21
    3888:	6f 93       	push	r22
    388a:	7f 93       	push	r23
    388c:	8f 93       	push	r24
    388e:	9f 93       	push	r25
    3890:	af 93       	push	r26
    3892:	bf 93       	push	r27
    3894:	ef 93       	push	r30
    3896:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3898:	84 e2       	ldi	r24, 0x24	; 36
    389a:	93 e0       	ldi	r25, 0x03	; 3
    389c:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    38a0:	ff 91       	pop	r31
    38a2:	ef 91       	pop	r30
    38a4:	bf 91       	pop	r27
    38a6:	af 91       	pop	r26
    38a8:	9f 91       	pop	r25
    38aa:	8f 91       	pop	r24
    38ac:	7f 91       	pop	r23
    38ae:	6f 91       	pop	r22
    38b0:	5f 91       	pop	r21
    38b2:	4f 91       	pop	r20
    38b4:	3f 91       	pop	r19
    38b6:	2f 91       	pop	r18
    38b8:	0f 90       	pop	r0
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	0f 90       	pop	r0
    38be:	1f 90       	pop	r1
    38c0:	18 95       	reti

000038c2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    38c2:	84 e2       	ldi	r24, 0x24	; 36
    38c4:	93 e0       	ldi	r25, 0x03	; 3
    38c6:	0e 94 c8 1a 	call	0x3590	; 0x3590 <_ZN14HardwareSerial9availableEv>
    38ca:	21 e0       	ldi	r18, 0x01	; 1
    38cc:	89 2b       	or	r24, r25
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <_Z17Serial0_availablev+0x10>
    38d0:	20 e0       	ldi	r18, 0x00	; 0
}
    38d2:	82 2f       	mov	r24, r18
    38d4:	08 95       	ret

000038d6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    38d6:	e4 e2       	ldi	r30, 0x24	; 36
    38d8:	f3 e0       	ldi	r31, 0x03	; 3
    38da:	13 82       	std	Z+3, r1	; 0x03
    38dc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    38de:	88 ee       	ldi	r24, 0xE8	; 232
    38e0:	93 e0       	ldi	r25, 0x03	; 3
    38e2:	a0 e0       	ldi	r26, 0x00	; 0
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	84 83       	std	Z+4, r24	; 0x04
    38e8:	95 83       	std	Z+5, r25	; 0x05
    38ea:	a6 83       	std	Z+6, r26	; 0x06
    38ec:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    38ee:	84 e9       	ldi	r24, 0x94	; 148
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	80 83       	st	Z, r24
    38f6:	85 ec       	ldi	r24, 0xC5	; 197
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	95 87       	std	Z+13, r25	; 0x0d
    38fc:	84 87       	std	Z+12, r24	; 0x0c
    38fe:	84 ec       	ldi	r24, 0xC4	; 196
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	97 87       	std	Z+15, r25	; 0x0f
    3904:	86 87       	std	Z+14, r24	; 0x0e
    3906:	80 ec       	ldi	r24, 0xC0	; 192
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	91 8b       	std	Z+17, r25	; 0x11
    390c:	80 8b       	std	Z+16, r24	; 0x10
    390e:	81 ec       	ldi	r24, 0xC1	; 193
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	93 8b       	std	Z+19, r25	; 0x13
    3914:	82 8b       	std	Z+18, r24	; 0x12
    3916:	82 ec       	ldi	r24, 0xC2	; 194
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	95 8b       	std	Z+21, r25	; 0x15
    391c:	84 8b       	std	Z+20, r24	; 0x14
    391e:	86 ec       	ldi	r24, 0xC6	; 198
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	97 8b       	std	Z+23, r25	; 0x17
    3924:	86 8b       	std	Z+22, r24	; 0x16
    3926:	11 8e       	std	Z+25, r1	; 0x19
    3928:	12 8e       	std	Z+26, r1	; 0x1a
    392a:	13 8e       	std	Z+27, r1	; 0x1b
    392c:	14 8e       	std	Z+28, r1	; 0x1c
    392e:	08 95       	ret

00003930 <initVariant>:
    3930:	08 95       	ret

00003932 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3932:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <init>

	initVariant();
    3936:	0e 94 98 1c 	call	0x3930	; 0x3930 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    393a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    393e:	c5 e0       	ldi	r28, 0x05	; 5
    3940:	db e1       	ldi	r29, 0x1B	; 27
#endif
	
	setup();
    
	for (;;) {
		loop();
    3942:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <loop>
		if (serialEventRun) serialEventRun();
    3946:	20 97       	sbiw	r28, 0x00	; 0
    3948:	e1 f3       	breq	.-8      	; 0x3942 <main+0x10>
    394a:	0e 94 05 1b 	call	0x360a	; 0x360a <_Z14serialEventRunv>
    394e:	f9 cf       	rjmp	.-14     	; 0x3942 <main+0x10>

00003950 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3950:	cf 92       	push	r12
    3952:	df 92       	push	r13
    3954:	ef 92       	push	r14
    3956:	ff 92       	push	r15
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	6c 01       	movw	r12, r24
    3962:	7a 01       	movw	r14, r20
    3964:	8b 01       	movw	r16, r22
    3966:	c0 e0       	ldi	r28, 0x00	; 0
    3968:	d0 e0       	ldi	r29, 0x00	; 0
    396a:	ce 15       	cp	r28, r14
    396c:	df 05       	cpc	r29, r15
    396e:	81 f0       	breq	.+32     	; 0x3990 <_ZN5Print5writeEPKhj+0x40>
    3970:	d8 01       	movw	r26, r16
    3972:	6d 91       	ld	r22, X+
    3974:	8d 01       	movw	r16, r26
    3976:	d6 01       	movw	r26, r12
    3978:	ed 91       	ld	r30, X+
    397a:	fc 91       	ld	r31, X
    397c:	01 90       	ld	r0, Z+
    397e:	f0 81       	ld	r31, Z
    3980:	e0 2d       	mov	r30, r0
    3982:	c6 01       	movw	r24, r12
    3984:	09 95       	icall
    3986:	89 2b       	or	r24, r25
    3988:	11 f0       	breq	.+4      	; 0x398e <_ZN5Print5writeEPKhj+0x3e>
    398a:	21 96       	adiw	r28, 0x01	; 1
    398c:	ee cf       	rjmp	.-36     	; 0x396a <_ZN5Print5writeEPKhj+0x1a>
    398e:	7e 01       	movw	r14, r28
    3990:	c7 01       	movw	r24, r14
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	1f 91       	pop	r17
    3998:	0f 91       	pop	r16
    399a:	ff 90       	pop	r15
    399c:	ef 90       	pop	r14
    399e:	df 90       	pop	r13
    39a0:	cf 90       	pop	r12
    39a2:	08 95       	ret

000039a4 <_ZN5Print5writeEPKc>:
    39a4:	61 15       	cp	r22, r1
    39a6:	71 05       	cpc	r23, r1
    39a8:	79 f0       	breq	.+30     	; 0x39c8 <_ZN5Print5writeEPKc+0x24>
    39aa:	fb 01       	movw	r30, r22
    39ac:	01 90       	ld	r0, Z+
    39ae:	00 20       	and	r0, r0
    39b0:	e9 f7       	brne	.-6      	; 0x39ac <_ZN5Print5writeEPKc+0x8>
    39b2:	31 97       	sbiw	r30, 0x01	; 1
    39b4:	af 01       	movw	r20, r30
    39b6:	46 1b       	sub	r20, r22
    39b8:	57 0b       	sbc	r21, r23
    39ba:	dc 01       	movw	r26, r24
    39bc:	ed 91       	ld	r30, X+
    39be:	fc 91       	ld	r31, X
    39c0:	02 80       	ldd	r0, Z+2	; 0x02
    39c2:	f3 81       	ldd	r31, Z+3	; 0x03
    39c4:	e0 2d       	mov	r30, r0
    39c6:	09 94       	ijmp
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	08 95       	ret

000039ce <_ZN5Print5printEPK19__FlashStringHelper>:
    39ce:	ef 92       	push	r14
    39d0:	ff 92       	push	r15
    39d2:	0f 93       	push	r16
    39d4:	1f 93       	push	r17
    39d6:	cf 93       	push	r28
    39d8:	df 93       	push	r29
    39da:	8c 01       	movw	r16, r24
    39dc:	7b 01       	movw	r14, r22
    39de:	c0 e0       	ldi	r28, 0x00	; 0
    39e0:	d0 e0       	ldi	r29, 0x00	; 0
    39e2:	f7 01       	movw	r30, r14
    39e4:	ec 0f       	add	r30, r28
    39e6:	fd 1f       	adc	r31, r29
    39e8:	64 91       	lpm	r22, Z
    39ea:	66 23       	and	r22, r22
    39ec:	61 f0       	breq	.+24     	; 0x3a06 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    39ee:	d8 01       	movw	r26, r16
    39f0:	ed 91       	ld	r30, X+
    39f2:	fc 91       	ld	r31, X
    39f4:	01 90       	ld	r0, Z+
    39f6:	f0 81       	ld	r31, Z
    39f8:	e0 2d       	mov	r30, r0
    39fa:	c8 01       	movw	r24, r16
    39fc:	09 95       	icall
    39fe:	89 2b       	or	r24, r25
    3a00:	11 f0       	breq	.+4      	; 0x3a06 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3a02:	21 96       	adiw	r28, 0x01	; 1
    3a04:	ee cf       	rjmp	.-36     	; 0x39e2 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3a06:	ce 01       	movw	r24, r28
    3a08:	df 91       	pop	r29
    3a0a:	cf 91       	pop	r28
    3a0c:	1f 91       	pop	r17
    3a0e:	0f 91       	pop	r16
    3a10:	ff 90       	pop	r15
    3a12:	ef 90       	pop	r14
    3a14:	08 95       	ret

00003a16 <_ZN5Print5printEc>:
    3a16:	dc 01       	movw	r26, r24
    3a18:	ed 91       	ld	r30, X+
    3a1a:	fc 91       	ld	r31, X
    3a1c:	01 90       	ld	r0, Z+
    3a1e:	f0 81       	ld	r31, Z
    3a20:	e0 2d       	mov	r30, r0
    3a22:	09 94       	ijmp

00003a24 <_ZN5Print7printlnEv>:
    3a24:	62 ea       	ldi	r22, 0xA2	; 162
    3a26:	71 e0       	ldi	r23, 0x01	; 1
    3a28:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <_ZN5Print5writeEPKc>

00003a2c <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3a2c:	0f 93       	push	r16
    3a2e:	1f 93       	push	r17
    3a30:	cf 93       	push	r28
    3a32:	df 93       	push	r29
    3a34:	ec 01       	movw	r28, r24
    3a36:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN5Print5printEPK19__FlashStringHelper>
    3a3a:	8c 01       	movw	r16, r24
    3a3c:	ce 01       	movw	r24, r28
    3a3e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEv>
    3a42:	80 0f       	add	r24, r16
    3a44:	91 1f       	adc	r25, r17
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	08 95       	ret

00003a50 <_ZN5Print11printNumberEmh>:
    3a50:	8f 92       	push	r8
    3a52:	9f 92       	push	r9
    3a54:	af 92       	push	r10
    3a56:	bf 92       	push	r11
    3a58:	ef 92       	push	r14
    3a5a:	ff 92       	push	r15
    3a5c:	0f 93       	push	r16
    3a5e:	1f 93       	push	r17
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	a1 97       	sbiw	r28, 0x21	; 33
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	7c 01       	movw	r14, r24
    3a76:	fa 01       	movw	r30, r20
    3a78:	cb 01       	movw	r24, r22
    3a7a:	19 a2       	std	Y+33, r1	; 0x21
    3a7c:	22 30       	cpi	r18, 0x02	; 2
    3a7e:	08 f4       	brcc	.+2      	; 0x3a82 <_ZN5Print11printNumberEmh+0x32>
    3a80:	2a e0       	ldi	r18, 0x0A	; 10
    3a82:	8e 01       	movw	r16, r28
    3a84:	0f 5d       	subi	r16, 0xDF	; 223
    3a86:	1f 4f       	sbci	r17, 0xFF	; 255
    3a88:	82 2e       	mov	r8, r18
    3a8a:	91 2c       	mov	r9, r1
    3a8c:	a1 2c       	mov	r10, r1
    3a8e:	b1 2c       	mov	r11, r1
    3a90:	bf 01       	movw	r22, r30
    3a92:	a5 01       	movw	r20, r10
    3a94:	94 01       	movw	r18, r8
    3a96:	0e 94 ad 20 	call	0x415a	; 0x415a <__udivmodsi4>
    3a9a:	f9 01       	movw	r30, r18
    3a9c:	ca 01       	movw	r24, r20
    3a9e:	01 50       	subi	r16, 0x01	; 1
    3aa0:	11 09       	sbc	r17, r1
    3aa2:	6a 30       	cpi	r22, 0x0A	; 10
    3aa4:	10 f4       	brcc	.+4      	; 0x3aaa <_ZN5Print11printNumberEmh+0x5a>
    3aa6:	60 5d       	subi	r22, 0xD0	; 208
    3aa8:	01 c0       	rjmp	.+2      	; 0x3aac <_ZN5Print11printNumberEmh+0x5c>
    3aaa:	69 5c       	subi	r22, 0xC9	; 201
    3aac:	d8 01       	movw	r26, r16
    3aae:	6c 93       	st	X, r22
    3ab0:	23 2b       	or	r18, r19
    3ab2:	24 2b       	or	r18, r20
    3ab4:	25 2b       	or	r18, r21
    3ab6:	61 f7       	brne	.-40     	; 0x3a90 <_ZN5Print11printNumberEmh+0x40>
    3ab8:	b8 01       	movw	r22, r16
    3aba:	c7 01       	movw	r24, r14
    3abc:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <_ZN5Print5writeEPKc>
    3ac0:	a1 96       	adiw	r28, 0x21	; 33
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
    3acc:	df 91       	pop	r29
    3ace:	cf 91       	pop	r28
    3ad0:	1f 91       	pop	r17
    3ad2:	0f 91       	pop	r16
    3ad4:	ff 90       	pop	r15
    3ad6:	ef 90       	pop	r14
    3ad8:	bf 90       	pop	r11
    3ada:	af 90       	pop	r10
    3adc:	9f 90       	pop	r9
    3ade:	8f 90       	pop	r8
    3ae0:	08 95       	ret

00003ae2 <_ZN5Print5printEmi>:
    3ae2:	21 15       	cp	r18, r1
    3ae4:	31 05       	cpc	r19, r1
    3ae6:	41 f4       	brne	.+16     	; 0x3af8 <_ZN5Print5printEmi+0x16>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	ed 91       	ld	r30, X+
    3aec:	fc 91       	ld	r31, X
    3aee:	01 90       	ld	r0, Z+
    3af0:	f0 81       	ld	r31, Z
    3af2:	e0 2d       	mov	r30, r0
    3af4:	64 2f       	mov	r22, r20
    3af6:	09 94       	ijmp
    3af8:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <_ZN5Print11printNumberEmh>

00003afc <_ZN5Print5printEhi>:
    3afc:	9a 01       	movw	r18, r20
    3afe:	46 2f       	mov	r20, r22
    3b00:	50 e0       	ldi	r21, 0x00	; 0
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <_ZN5Print5printEmi>

00003b0a <_ZN5Print7printlnEhi>:
    3b0a:	0f 93       	push	r16
    3b0c:	1f 93       	push	r17
    3b0e:	cf 93       	push	r28
    3b10:	df 93       	push	r29
    3b12:	ec 01       	movw	r28, r24
    3b14:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <_ZN5Print5printEhi>
    3b18:	8c 01       	movw	r16, r24
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEv>
    3b20:	80 0f       	add	r24, r16
    3b22:	91 1f       	adc	r25, r17
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	08 95       	ret

00003b2e <_ZN5Print5printEji>:
    3b2e:	9a 01       	movw	r18, r20
    3b30:	ab 01       	movw	r20, r22
    3b32:	60 e0       	ldi	r22, 0x00	; 0
    3b34:	70 e0       	ldi	r23, 0x00	; 0
    3b36:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <_ZN5Print5printEmi>

00003b3a <_ZN5Print5printEli>:
    3b3a:	cf 92       	push	r12
    3b3c:	df 92       	push	r13
    3b3e:	ef 92       	push	r14
    3b40:	ff 92       	push	r15
    3b42:	0f 93       	push	r16
    3b44:	1f 93       	push	r17
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	21 15       	cp	r18, r1
    3b4c:	31 05       	cpc	r19, r1
    3b4e:	81 f4       	brne	.+32     	; 0x3b70 <_ZN5Print5printEli+0x36>
    3b50:	dc 01       	movw	r26, r24
    3b52:	ed 91       	ld	r30, X+
    3b54:	fc 91       	ld	r31, X
    3b56:	01 90       	ld	r0, Z+
    3b58:	f0 81       	ld	r31, Z
    3b5a:	e0 2d       	mov	r30, r0
    3b5c:	64 2f       	mov	r22, r20
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	ef 90       	pop	r14
    3b6a:	df 90       	pop	r13
    3b6c:	cf 90       	pop	r12
    3b6e:	09 94       	ijmp
    3b70:	2a 30       	cpi	r18, 0x0A	; 10
    3b72:	31 05       	cpc	r19, r1
    3b74:	01 f5       	brne	.+64     	; 0x3bb6 <_ZN5Print5printEli+0x7c>
    3b76:	77 ff       	sbrs	r23, 7
    3b78:	1d c0       	rjmp	.+58     	; 0x3bb4 <_ZN5Print5printEli+0x7a>
    3b7a:	6a 01       	movw	r12, r20
    3b7c:	7b 01       	movw	r14, r22
    3b7e:	ec 01       	movw	r28, r24
    3b80:	6d e2       	ldi	r22, 0x2D	; 45
    3b82:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <_ZN5Print5printEc>
    3b86:	8c 01       	movw	r16, r24
    3b88:	44 27       	eor	r20, r20
    3b8a:	55 27       	eor	r21, r21
    3b8c:	ba 01       	movw	r22, r20
    3b8e:	4c 19       	sub	r20, r12
    3b90:	5d 09       	sbc	r21, r13
    3b92:	6e 09       	sbc	r22, r14
    3b94:	7f 09       	sbc	r23, r15
    3b96:	2a e0       	ldi	r18, 0x0A	; 10
    3b98:	ce 01       	movw	r24, r28
    3b9a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN5Print11printNumberEmh>
    3b9e:	80 0f       	add	r24, r16
    3ba0:	91 1f       	adc	r25, r17
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	ff 90       	pop	r15
    3bac:	ef 90       	pop	r14
    3bae:	df 90       	pop	r13
    3bb0:	cf 90       	pop	r12
    3bb2:	08 95       	ret
    3bb4:	2a e0       	ldi	r18, 0x0A	; 10
    3bb6:	df 91       	pop	r29
    3bb8:	cf 91       	pop	r28
    3bba:	1f 91       	pop	r17
    3bbc:	0f 91       	pop	r16
    3bbe:	ff 90       	pop	r15
    3bc0:	ef 90       	pop	r14
    3bc2:	df 90       	pop	r13
    3bc4:	cf 90       	pop	r12
    3bc6:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <_ZN5Print11printNumberEmh>

00003bca <_ZN5Print5printEii>:
    3bca:	9a 01       	movw	r18, r20
    3bcc:	ab 01       	movw	r20, r22
    3bce:	77 0f       	add	r23, r23
    3bd0:	66 0b       	sbc	r22, r22
    3bd2:	77 0b       	sbc	r23, r23
    3bd4:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <_ZN5Print5printEli>

00003bd8 <_ZN5Print7printlnEii>:
    3bd8:	0f 93       	push	r16
    3bda:	1f 93       	push	r17
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	ec 01       	movw	r28, r24
    3be2:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN5Print5printEii>
    3be6:	8c 01       	movw	r16, r24
    3be8:	ce 01       	movw	r24, r28
    3bea:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEv>
    3bee:	80 0f       	add	r24, r16
    3bf0:	91 1f       	adc	r25, r17
    3bf2:	df 91       	pop	r29
    3bf4:	cf 91       	pop	r28
    3bf6:	1f 91       	pop	r17
    3bf8:	0f 91       	pop	r16
    3bfa:	08 95       	ret

00003bfc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3bfc:	7f 92       	push	r7
    3bfe:	8f 92       	push	r8
    3c00:	9f 92       	push	r9
    3c02:	af 92       	push	r10
    3c04:	bf 92       	push	r11
    3c06:	cf 92       	push	r12
    3c08:	df 92       	push	r13
    3c0a:	ef 92       	push	r14
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	8c 01       	movw	r16, r24
    3c18:	6a 01       	movw	r12, r20
    3c1a:	7b 01       	movw	r14, r22
    3c1c:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3c1e:	9a 01       	movw	r18, r20
    3c20:	ab 01       	movw	r20, r22
    3c22:	c7 01       	movw	r24, r14
    3c24:	b6 01       	movw	r22, r12
    3c26:	0e 94 a8 20 	call	0x4150	; 0x4150 <__unordsf2>
    3c2a:	88 23       	and	r24, r24
    3c2c:	19 f0       	breq	.+6      	; 0x3c34 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3c2e:	65 ea       	ldi	r22, 0xA5	; 165
    3c30:	71 e0       	ldi	r23, 0x01	; 1
    3c32:	27 c0       	rjmp	.+78     	; 0x3c82 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3c34:	46 01       	movw	r8, r12
    3c36:	57 01       	movw	r10, r14
    3c38:	e8 94       	clt
    3c3a:	b7 f8       	bld	r11, 7
    3c3c:	2f ef       	ldi	r18, 0xFF	; 255
    3c3e:	3f ef       	ldi	r19, 0xFF	; 255
    3c40:	4f e7       	ldi	r20, 0x7F	; 127
    3c42:	5f e7       	ldi	r21, 0x7F	; 127
    3c44:	c5 01       	movw	r24, r10
    3c46:	b4 01       	movw	r22, r8
    3c48:	0e 94 a8 20 	call	0x4150	; 0x4150 <__unordsf2>
    3c4c:	81 11       	cpse	r24, r1
    3c4e:	0d c0       	rjmp	.+26     	; 0x3c6a <_ZN5Print10printFloatEdh+0x6e>
    3c50:	2f ef       	ldi	r18, 0xFF	; 255
    3c52:	3f ef       	ldi	r19, 0xFF	; 255
    3c54:	4f e7       	ldi	r20, 0x7F	; 127
    3c56:	5f e7       	ldi	r21, 0x7F	; 127
    3c58:	c5 01       	movw	r24, r10
    3c5a:	b4 01       	movw	r22, r8
    3c5c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    3c60:	18 16       	cp	r1, r24
    3c62:	1c f4       	brge	.+6      	; 0x3c6a <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3c64:	69 ea       	ldi	r22, 0xA9	; 169
    3c66:	71 e0       	ldi	r23, 0x01	; 1
    3c68:	0c c0       	rjmp	.+24     	; 0x3c82 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3c6a:	2f ef       	ldi	r18, 0xFF	; 255
    3c6c:	3f ef       	ldi	r19, 0xFF	; 255
    3c6e:	4f e7       	ldi	r20, 0x7F	; 127
    3c70:	5f e4       	ldi	r21, 0x4F	; 79
    3c72:	c7 01       	movw	r24, r14
    3c74:	b6 01       	movw	r22, r12
    3c76:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__gesf2>
    3c7a:	18 16       	cp	r1, r24
    3c7c:	94 f4       	brge	.+36     	; 0x3ca2 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3c7e:	6d ea       	ldi	r22, 0xAD	; 173
    3c80:	71 e0       	ldi	r23, 0x01	; 1
    3c82:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	ff 90       	pop	r15
    3c8e:	ef 90       	pop	r14
    3c90:	df 90       	pop	r13
    3c92:	cf 90       	pop	r12
    3c94:	bf 90       	pop	r11
    3c96:	af 90       	pop	r10
    3c98:	9f 90       	pop	r9
    3c9a:	8f 90       	pop	r8
    3c9c:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3c9e:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3ca2:	2f ef       	ldi	r18, 0xFF	; 255
    3ca4:	3f ef       	ldi	r19, 0xFF	; 255
    3ca6:	4f e7       	ldi	r20, 0x7F	; 127
    3ca8:	5f ec       	ldi	r21, 0xCF	; 207
    3caa:	c7 01       	movw	r24, r14
    3cac:	b6 01       	movw	r22, r12
    3cae:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    3cb2:	87 fd       	sbrc	r24, 7
    3cb4:	e4 cf       	rjmp	.-56     	; 0x3c7e <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	a9 01       	movw	r20, r18
    3cbc:	c7 01       	movw	r24, r14
    3cbe:	b6 01       	movw	r22, r12
    3cc0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__cmpsf2>
    3cc4:	87 ff       	sbrs	r24, 7
    3cc6:	0a c0       	rjmp	.+20     	; 0x3cdc <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    3cc8:	6d e2       	ldi	r22, 0x2D	; 45
    3cca:	c8 01       	movw	r24, r16
    3ccc:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <_ZN5Print5printEc>
    3cd0:	ec 01       	movw	r28, r24
     number = -number;
    3cd2:	f7 fa       	bst	r15, 7
    3cd4:	f0 94       	com	r15
    3cd6:	f7 f8       	bld	r15, 7
    3cd8:	f0 94       	com	r15
    3cda:	02 c0       	rjmp	.+4      	; 0x3ce0 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3cdc:	c0 e0       	ldi	r28, 0x00	; 0
    3cde:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3ce0:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	70 e0       	ldi	r23, 0x00	; 0
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    3cea:	7b 14       	cp	r7, r11
    3cec:	41 f0       	breq	.+16     	; 0x3cfe <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e2       	ldi	r20, 0x20	; 32
    3cf4:	51 e4       	ldi	r21, 0x41	; 65
    3cf6:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3cfa:	b3 94       	inc	r11
    3cfc:	f6 cf       	rjmp	.-20     	; 0x3cea <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    3cfe:	a7 01       	movw	r20, r14
    3d00:	96 01       	movw	r18, r12
    3d02:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3>
    3d06:	6b 01       	movw	r12, r22
    3d08:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3d0a:	0e 94 75 19 	call	0x32ea	; 0x32ea <__fixunssfsi>
    3d0e:	4b 01       	movw	r8, r22
    3d10:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3d12:	2a e0       	ldi	r18, 0x0A	; 10
    3d14:	ab 01       	movw	r20, r22
    3d16:	bc 01       	movw	r22, r24
    3d18:	c8 01       	movw	r24, r16
    3d1a:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3d1e:	c8 0f       	add	r28, r24
    3d20:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    3d22:	77 20       	and	r7, r7
    3d24:	b9 f1       	breq	.+110    	; 0x3d94 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3d26:	c5 01       	movw	r24, r10
    3d28:	b4 01       	movw	r22, r8
    3d2a:	0e 94 a4 19 	call	0x3348	; 0x3348 <__floatunsisf>
    3d2e:	9b 01       	movw	r18, r22
    3d30:	ac 01       	movw	r20, r24
    3d32:	c7 01       	movw	r24, r14
    3d34:	b6 01       	movw	r22, r12
    3d36:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
    3d3a:	6b 01       	movw	r12, r22
    3d3c:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    3d3e:	6e e2       	ldi	r22, 0x2E	; 46
    3d40:	c8 01       	movw	r24, r16
    3d42:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <_ZN5Print5printEc>
    3d46:	c8 0f       	add	r28, r24
    3d48:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	40 e2       	ldi	r20, 0x20	; 32
    3d50:	51 e4       	ldi	r21, 0x41	; 65
    3d52:	c7 01       	movw	r24, r14
    3d54:	b6 01       	movw	r22, r12
    3d56:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsf3>
    3d5a:	4b 01       	movw	r8, r22
    3d5c:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    3d5e:	0e 94 75 19 	call	0x32ea	; 0x32ea <__fixunssfsi>
    3d62:	6b 01       	movw	r12, r22
    3d64:	7c 01       	movw	r14, r24
    n += print(toPrint);
    3d66:	4a e0       	ldi	r20, 0x0A	; 10
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	c8 01       	movw	r24, r16
    3d6c:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <_ZN5Print5printEji>
    3d70:	c8 0f       	add	r28, r24
    3d72:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    3d74:	b6 01       	movw	r22, r12
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	0e 94 a4 19 	call	0x3348	; 0x3348 <__floatunsisf>
    3d7e:	9b 01       	movw	r18, r22
    3d80:	ac 01       	movw	r20, r24
    3d82:	c5 01       	movw	r24, r10
    3d84:	b4 01       	movw	r22, r8
    3d86:	0e 94 8a 18 	call	0x3114	; 0x3114 <__subsf3>
    3d8a:	6b 01       	movw	r12, r22
    3d8c:	7c 01       	movw	r14, r24
    3d8e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3d90:	71 10       	cpse	r7, r1
    3d92:	db cf       	rjmp	.-74     	; 0x3d4a <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3d94:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3d96:	df 91       	pop	r29
    3d98:	cf 91       	pop	r28
    3d9a:	1f 91       	pop	r17
    3d9c:	0f 91       	pop	r16
    3d9e:	ff 90       	pop	r15
    3da0:	ef 90       	pop	r14
    3da2:	df 90       	pop	r13
    3da4:	cf 90       	pop	r12
    3da6:	bf 90       	pop	r11
    3da8:	af 90       	pop	r10
    3daa:	9f 90       	pop	r9
    3dac:	8f 90       	pop	r8
    3dae:	7f 90       	pop	r7
    3db0:	08 95       	ret

00003db2 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3db2:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <_ZN5Print10printFloatEdh>

00003db6 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	cf 93       	push	r28
    3dbc:	df 93       	push	r29
    3dbe:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3dc0:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN5Print10printFloatEdh>
    3dc4:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3dc6:	ce 01       	movw	r24, r28
    3dc8:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEv>
  return n;
}
    3dcc:	80 0f       	add	r24, r16
    3dce:	91 1f       	adc	r25, r17
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	08 95       	ret

00003dda <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3dda:	1f 92       	push	r1
    3ddc:	0f 92       	push	r0
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	0f 92       	push	r0
    3de2:	11 24       	eor	r1, r1
    3de4:	2f 93       	push	r18
    3de6:	3f 93       	push	r19
    3de8:	8f 93       	push	r24
    3dea:	9f 93       	push	r25
    3dec:	af 93       	push	r26
    3dee:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3df0:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <timer0_millis>
    3df4:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <timer0_millis+0x1>
    3df8:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <timer0_millis+0x2>
    3dfc:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3e00:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3e04:	23 e0       	ldi	r18, 0x03	; 3
    3e06:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3e08:	2d 37       	cpi	r18, 0x7D	; 125
    3e0a:	20 f4       	brcc	.+8      	; 0x3e14 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3e0c:	01 96       	adiw	r24, 0x01	; 1
    3e0e:	a1 1d       	adc	r26, r1
    3e10:	b1 1d       	adc	r27, r1
    3e12:	05 c0       	rjmp	.+10     	; 0x3e1e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3e14:	26 e8       	ldi	r18, 0x86	; 134
    3e16:	23 0f       	add	r18, r19
		m += 1;
    3e18:	02 96       	adiw	r24, 0x02	; 2
    3e1a:	a1 1d       	adc	r26, r1
    3e1c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3e1e:	20 93 c1 03 	sts	0x03C1, r18	; 0x8003c1 <timer0_fract>
	timer0_millis = m;
    3e22:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <timer0_millis>
    3e26:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <timer0_millis+0x1>
    3e2a:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <timer0_millis+0x2>
    3e2e:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <timer0_millis+0x3>
	timer0_overflow_count++;
    3e32:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <timer0_overflow_count>
    3e36:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <timer0_overflow_count+0x1>
    3e3a:	a0 91 c8 03 	lds	r26, 0x03C8	; 0x8003c8 <timer0_overflow_count+0x2>
    3e3e:	b0 91 c9 03 	lds	r27, 0x03C9	; 0x8003c9 <timer0_overflow_count+0x3>
    3e42:	01 96       	adiw	r24, 0x01	; 1
    3e44:	a1 1d       	adc	r26, r1
    3e46:	b1 1d       	adc	r27, r1
    3e48:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <timer0_overflow_count>
    3e4c:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <timer0_overflow_count+0x1>
    3e50:	a0 93 c8 03 	sts	0x03C8, r26	; 0x8003c8 <timer0_overflow_count+0x2>
    3e54:	b0 93 c9 03 	sts	0x03C9, r27	; 0x8003c9 <timer0_overflow_count+0x3>
}
    3e58:	bf 91       	pop	r27
    3e5a:	af 91       	pop	r26
    3e5c:	9f 91       	pop	r25
    3e5e:	8f 91       	pop	r24
    3e60:	3f 91       	pop	r19
    3e62:	2f 91       	pop	r18
    3e64:	0f 90       	pop	r0
    3e66:	0f be       	out	0x3f, r0	; 63
    3e68:	0f 90       	pop	r0
    3e6a:	1f 90       	pop	r1
    3e6c:	18 95       	reti

00003e6e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    3e6e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    3e70:	f8 94       	cli
	m = timer0_millis;
    3e72:	60 91 c2 03 	lds	r22, 0x03C2	; 0x8003c2 <timer0_millis>
    3e76:	70 91 c3 03 	lds	r23, 0x03C3	; 0x8003c3 <timer0_millis+0x1>
    3e7a:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <timer0_millis+0x2>
    3e7e:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <timer0_millis+0x3>
	SREG = oldSREG;
    3e82:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3e84:	08 95       	ret

00003e86 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3e86:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3e88:	f8 94       	cli
	m = timer0_overflow_count;
    3e8a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <timer0_overflow_count>
    3e8e:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <timer0_overflow_count+0x1>
    3e92:	a0 91 c8 03 	lds	r26, 0x03C8	; 0x8003c8 <timer0_overflow_count+0x2>
    3e96:	b0 91 c9 03 	lds	r27, 0x03C9	; 0x8003c9 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    3e9a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3e9c:	a8 9b       	sbis	0x15, 0	; 21
    3e9e:	05 c0       	rjmp	.+10     	; 0x3eaa <micros+0x24>
    3ea0:	2f 3f       	cpi	r18, 0xFF	; 255
    3ea2:	19 f0       	breq	.+6      	; 0x3eaa <micros+0x24>
		m++;
    3ea4:	01 96       	adiw	r24, 0x01	; 1
    3ea6:	a1 1d       	adc	r26, r1
    3ea8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3eaa:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3eac:	ba 2f       	mov	r27, r26
    3eae:	a9 2f       	mov	r26, r25
    3eb0:	98 2f       	mov	r25, r24
    3eb2:	88 27       	eor	r24, r24
    3eb4:	82 0f       	add	r24, r18
    3eb6:	91 1d       	adc	r25, r1
    3eb8:	a1 1d       	adc	r26, r1
    3eba:	b1 1d       	adc	r27, r1
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	cd 01       	movw	r24, r26
    3ec0:	42 e0       	ldi	r20, 0x02	; 2
    3ec2:	66 0f       	add	r22, r22
    3ec4:	77 1f       	adc	r23, r23
    3ec6:	88 1f       	adc	r24, r24
    3ec8:	99 1f       	adc	r25, r25
    3eca:	4a 95       	dec	r20
    3ecc:	d1 f7       	brne	.-12     	; 0x3ec2 <micros+0x3c>
}
    3ece:	08 95       	ret

00003ed0 <delay>:

void delay(unsigned long ms)
{
    3ed0:	8f 92       	push	r8
    3ed2:	9f 92       	push	r9
    3ed4:	af 92       	push	r10
    3ed6:	bf 92       	push	r11
    3ed8:	cf 92       	push	r12
    3eda:	df 92       	push	r13
    3edc:	ef 92       	push	r14
    3ede:	ff 92       	push	r15
    3ee0:	6b 01       	movw	r12, r22
    3ee2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3ee4:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <micros>
    3ee8:	4b 01       	movw	r8, r22
    3eea:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3eec:	c1 14       	cp	r12, r1
    3eee:	d1 04       	cpc	r13, r1
    3ef0:	e1 04       	cpc	r14, r1
    3ef2:	f1 04       	cpc	r15, r1
    3ef4:	01 f1       	breq	.+64     	; 0x3f36 <delay+0x66>
		yield();
    3ef6:	0e 94 a7 20 	call	0x414e	; 0x414e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3efa:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <micros>
    3efe:	dc 01       	movw	r26, r24
    3f00:	cb 01       	movw	r24, r22
    3f02:	88 19       	sub	r24, r8
    3f04:	99 09       	sbc	r25, r9
    3f06:	aa 09       	sbc	r26, r10
    3f08:	bb 09       	sbc	r27, r11
    3f0a:	88 3e       	cpi	r24, 0xE8	; 232
    3f0c:	93 40       	sbci	r25, 0x03	; 3
    3f0e:	a1 05       	cpc	r26, r1
    3f10:	b1 05       	cpc	r27, r1
    3f12:	60 f3       	brcs	.-40     	; 0x3eec <delay+0x1c>
			ms--;
    3f14:	21 e0       	ldi	r18, 0x01	; 1
    3f16:	c2 1a       	sub	r12, r18
    3f18:	d1 08       	sbc	r13, r1
    3f1a:	e1 08       	sbc	r14, r1
    3f1c:	f1 08       	sbc	r15, r1
			start += 1000;
    3f1e:	88 ee       	ldi	r24, 0xE8	; 232
    3f20:	88 0e       	add	r8, r24
    3f22:	83 e0       	ldi	r24, 0x03	; 3
    3f24:	98 1e       	adc	r9, r24
    3f26:	a1 1c       	adc	r10, r1
    3f28:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3f2a:	c1 14       	cp	r12, r1
    3f2c:	d1 04       	cpc	r13, r1
    3f2e:	e1 04       	cpc	r14, r1
    3f30:	f1 04       	cpc	r15, r1
    3f32:	19 f7       	brne	.-58     	; 0x3efa <delay+0x2a>
    3f34:	db cf       	rjmp	.-74     	; 0x3eec <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3f36:	ff 90       	pop	r15
    3f38:	ef 90       	pop	r14
    3f3a:	df 90       	pop	r13
    3f3c:	cf 90       	pop	r12
    3f3e:	bf 90       	pop	r11
    3f40:	af 90       	pop	r10
    3f42:	9f 90       	pop	r9
    3f44:	8f 90       	pop	r8
    3f46:	08 95       	ret

00003f48 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3f48:	82 30       	cpi	r24, 0x02	; 2
    3f4a:	91 05       	cpc	r25, r1
    3f4c:	38 f0       	brcs	.+14     	; 0x3f5c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3f4e:	88 0f       	add	r24, r24
    3f50:	99 1f       	adc	r25, r25
    3f52:	88 0f       	add	r24, r24
    3f54:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3f56:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <delayMicroseconds+0x10>
    3f5c:	08 95       	ret

00003f5e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3f5e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3f60:	84 b5       	in	r24, 0x24	; 36
    3f62:	82 60       	ori	r24, 0x02	; 2
    3f64:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3f66:	84 b5       	in	r24, 0x24	; 36
    3f68:	81 60       	ori	r24, 0x01	; 1
    3f6a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3f6c:	85 b5       	in	r24, 0x25	; 37
    3f6e:	82 60       	ori	r24, 0x02	; 2
    3f70:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3f72:	85 b5       	in	r24, 0x25	; 37
    3f74:	81 60       	ori	r24, 0x01	; 1
    3f76:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3f78:	ee e6       	ldi	r30, 0x6E	; 110
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	80 81       	ld	r24, Z
    3f7e:	81 60       	ori	r24, 0x01	; 1
    3f80:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3f82:	e1 e8       	ldi	r30, 0x81	; 129
    3f84:	f0 e0       	ldi	r31, 0x00	; 0
    3f86:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3f88:	80 81       	ld	r24, Z
    3f8a:	82 60       	ori	r24, 0x02	; 2
    3f8c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3f8e:	80 81       	ld	r24, Z
    3f90:	81 60       	ori	r24, 0x01	; 1
    3f92:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3f94:	e0 e8       	ldi	r30, 0x80	; 128
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	80 81       	ld	r24, Z
    3f9a:	81 60       	ori	r24, 0x01	; 1
    3f9c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3f9e:	e1 eb       	ldi	r30, 0xB1	; 177
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	80 81       	ld	r24, Z
    3fa4:	84 60       	ori	r24, 0x04	; 4
    3fa6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3fa8:	e0 eb       	ldi	r30, 0xB0	; 176
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	80 81       	ld	r24, Z
    3fae:	81 60       	ori	r24, 0x01	; 1
    3fb0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3fb2:	ea e7       	ldi	r30, 0x7A	; 122
    3fb4:	f0 e0       	ldi	r31, 0x00	; 0
    3fb6:	80 81       	ld	r24, Z
    3fb8:	84 60       	ori	r24, 0x04	; 4
    3fba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3fbc:	80 81       	ld	r24, Z
    3fbe:	82 60       	ori	r24, 0x02	; 2
    3fc0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3fc2:	80 81       	ld	r24, Z
    3fc4:	81 60       	ori	r24, 0x01	; 1
    3fc6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3fc8:	80 81       	ld	r24, Z
    3fca:	80 68       	ori	r24, 0x80	; 128
    3fcc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3fce:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3fd2:	08 95       	ret

00003fd4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3fd4:	83 30       	cpi	r24, 0x03	; 3
    3fd6:	81 f0       	breq	.+32     	; 0x3ff8 <turnOffPWM+0x24>
    3fd8:	28 f4       	brcc	.+10     	; 0x3fe4 <turnOffPWM+0x10>
    3fda:	81 30       	cpi	r24, 0x01	; 1
    3fdc:	99 f0       	breq	.+38     	; 0x4004 <turnOffPWM+0x30>
    3fde:	82 30       	cpi	r24, 0x02	; 2
    3fe0:	a1 f0       	breq	.+40     	; 0x400a <turnOffPWM+0x36>
    3fe2:	08 95       	ret
    3fe4:	87 30       	cpi	r24, 0x07	; 7
    3fe6:	a9 f0       	breq	.+42     	; 0x4012 <turnOffPWM+0x3e>
    3fe8:	88 30       	cpi	r24, 0x08	; 8
    3fea:	b9 f0       	breq	.+46     	; 0x401a <turnOffPWM+0x46>
    3fec:	84 30       	cpi	r24, 0x04	; 4
    3fee:	d1 f4       	brne	.+52     	; 0x4024 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3ff0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3ff4:	8f 7d       	andi	r24, 0xDF	; 223
    3ff6:	03 c0       	rjmp	.+6      	; 0x3ffe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3ff8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3ffc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3ffe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4002:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4004:	84 b5       	in	r24, 0x24	; 36
    4006:	8f 77       	andi	r24, 0x7F	; 127
    4008:	02 c0       	rjmp	.+4      	; 0x400e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    400a:	84 b5       	in	r24, 0x24	; 36
    400c:	8f 7d       	andi	r24, 0xDF	; 223
    400e:	84 bd       	out	0x24, r24	; 36
    4010:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4012:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4016:	8f 77       	andi	r24, 0x7F	; 127
    4018:	03 c0       	rjmp	.+6      	; 0x4020 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    401a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    401e:	8f 7d       	andi	r24, 0xDF	; 223
    4020:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4024:	08 95       	ret

00004026 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	fc 01       	movw	r30, r24
    402e:	e7 55       	subi	r30, 0x57	; 87
    4030:	fb 4f       	sbci	r31, 0xFB	; 251
    4032:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4034:	fc 01       	movw	r30, r24
    4036:	e3 54       	subi	r30, 0x43	; 67
    4038:	fb 4f       	sbci	r31, 0xFB	; 251
    403a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    403c:	88 23       	and	r24, r24
    403e:	61 f1       	breq	.+88     	; 0x4098 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	fc 01       	movw	r30, r24
    4048:	eb 51       	subi	r30, 0x1B	; 27
    404a:	fb 4f       	sbci	r31, 0xFB	; 251
    404c:	c5 91       	lpm	r28, Z+
    404e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4050:	fc 01       	movw	r30, r24
    4052:	e5 52       	subi	r30, 0x25	; 37
    4054:	fb 4f       	sbci	r31, 0xFB	; 251
    4056:	a5 91       	lpm	r26, Z+
    4058:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    405a:	61 11       	cpse	r22, r1
    405c:	09 c0       	rjmp	.+18     	; 0x4070 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    405e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4060:	f8 94       	cli
		*reg &= ~bit;
    4062:	88 81       	ld	r24, Y
    4064:	20 95       	com	r18
    4066:	82 23       	and	r24, r18
    4068:	88 83       	st	Y, r24
		*out &= ~bit;
    406a:	ec 91       	ld	r30, X
    406c:	2e 23       	and	r18, r30
    406e:	0b c0       	rjmp	.+22     	; 0x4086 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4070:	62 30       	cpi	r22, 0x02	; 2
    4072:	61 f4       	brne	.+24     	; 0x408c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4074:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4076:	f8 94       	cli
		*reg &= ~bit;
    4078:	88 81       	ld	r24, Y
    407a:	32 2f       	mov	r19, r18
    407c:	30 95       	com	r19
    407e:	83 23       	and	r24, r19
    4080:	88 83       	st	Y, r24
		*out |= bit;
    4082:	ec 91       	ld	r30, X
    4084:	2e 2b       	or	r18, r30
    4086:	2c 93       	st	X, r18
		SREG = oldSREG;
    4088:	9f bf       	out	0x3f, r25	; 63
    408a:	06 c0       	rjmp	.+12     	; 0x4098 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    408c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    408e:	f8 94       	cli
		*reg |= bit;
    4090:	e8 81       	ld	r30, Y
    4092:	2e 2b       	or	r18, r30
    4094:	28 83       	st	Y, r18
		SREG = oldSREG;
    4096:	8f bf       	out	0x3f, r24	; 63
	}
}
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	08 95       	ret

0000409e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    40a4:	28 2f       	mov	r18, r24
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	f9 01       	movw	r30, r18
    40aa:	eb 56       	subi	r30, 0x6B	; 107
    40ac:	fb 4f       	sbci	r31, 0xFB	; 251
    40ae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    40b0:	f9 01       	movw	r30, r18
    40b2:	e7 55       	subi	r30, 0x57	; 87
    40b4:	fb 4f       	sbci	r31, 0xFB	; 251
    40b6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    40b8:	f9 01       	movw	r30, r18
    40ba:	e3 54       	subi	r30, 0x43	; 67
    40bc:	fb 4f       	sbci	r31, 0xFB	; 251
    40be:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    40c0:	cc 23       	and	r28, r28
    40c2:	c1 f0       	breq	.+48     	; 0x40f4 <digitalWrite+0x56>
    40c4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    40c6:	81 11       	cpse	r24, r1
    40c8:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <turnOffPWM>

	out = portOutputRegister(port);
    40cc:	ec 2f       	mov	r30, r28
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	ee 0f       	add	r30, r30
    40d2:	ff 1f       	adc	r31, r31
    40d4:	e5 52       	subi	r30, 0x25	; 37
    40d6:	fb 4f       	sbci	r31, 0xFB	; 251
    40d8:	a5 91       	lpm	r26, Z+
    40da:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    40dc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    40de:	f8 94       	cli

	if (val == LOW) {
    40e0:	11 11       	cpse	r17, r1
    40e2:	04 c0       	rjmp	.+8      	; 0x40ec <digitalWrite+0x4e>
		*out &= ~bit;
    40e4:	8c 91       	ld	r24, X
    40e6:	d0 95       	com	r29
    40e8:	d8 23       	and	r29, r24
    40ea:	02 c0       	rjmp	.+4      	; 0x40f0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    40ec:	ec 91       	ld	r30, X
    40ee:	de 2b       	or	r29, r30
    40f0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    40f2:	9f bf       	out	0x3f, r25	; 63
}
    40f4:	df 91       	pop	r29
    40f6:	cf 91       	pop	r28
    40f8:	1f 91       	pop	r17
    40fa:	08 95       	ret

000040fc <digitalRead>:

int digitalRead(uint8_t pin)
{
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4100:	28 2f       	mov	r18, r24
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	f9 01       	movw	r30, r18
    4106:	eb 56       	subi	r30, 0x6B	; 107
    4108:	fb 4f       	sbci	r31, 0xFB	; 251
    410a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    410c:	f9 01       	movw	r30, r18
    410e:	e7 55       	subi	r30, 0x57	; 87
    4110:	fb 4f       	sbci	r31, 0xFB	; 251
    4112:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4114:	f9 01       	movw	r30, r18
    4116:	e3 54       	subi	r30, 0x43	; 67
    4118:	fb 4f       	sbci	r31, 0xFB	; 251
    411a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    411c:	cc 23       	and	r28, r28
    411e:	91 f0       	breq	.+36     	; 0x4144 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4120:	81 11       	cpse	r24, r1
    4122:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    4126:	ec 2f       	mov	r30, r28
    4128:	f0 e0       	ldi	r31, 0x00	; 0
    412a:	ee 0f       	add	r30, r30
    412c:	ff 1f       	adc	r31, r31
    412e:	ef 52       	subi	r30, 0x2F	; 47
    4130:	fb 4f       	sbci	r31, 0xFB	; 251
    4132:	a5 91       	lpm	r26, Z+
    4134:	b4 91       	lpm	r27, Z
    4136:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4138:	ed 23       	and	r30, r29
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	21 f4       	brne	.+8      	; 0x4148 <digitalRead+0x4c>
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	02 c0       	rjmp	.+4      	; 0x4148 <digitalRead+0x4c>
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	08 95       	ret

0000414e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    414e:	08 95       	ret

00004150 <__unordsf2>:
    4150:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fp_cmp>
    4154:	88 0b       	sbc	r24, r24
    4156:	99 0b       	sbc	r25, r25
    4158:	08 95       	ret

0000415a <__udivmodsi4>:
    415a:	a1 e2       	ldi	r26, 0x21	; 33
    415c:	1a 2e       	mov	r1, r26
    415e:	aa 1b       	sub	r26, r26
    4160:	bb 1b       	sub	r27, r27
    4162:	fd 01       	movw	r30, r26
    4164:	0d c0       	rjmp	.+26     	; 0x4180 <__udivmodsi4_ep>

00004166 <__udivmodsi4_loop>:
    4166:	aa 1f       	adc	r26, r26
    4168:	bb 1f       	adc	r27, r27
    416a:	ee 1f       	adc	r30, r30
    416c:	ff 1f       	adc	r31, r31
    416e:	a2 17       	cp	r26, r18
    4170:	b3 07       	cpc	r27, r19
    4172:	e4 07       	cpc	r30, r20
    4174:	f5 07       	cpc	r31, r21
    4176:	20 f0       	brcs	.+8      	; 0x4180 <__udivmodsi4_ep>
    4178:	a2 1b       	sub	r26, r18
    417a:	b3 0b       	sbc	r27, r19
    417c:	e4 0b       	sbc	r30, r20
    417e:	f5 0b       	sbc	r31, r21

00004180 <__udivmodsi4_ep>:
    4180:	66 1f       	adc	r22, r22
    4182:	77 1f       	adc	r23, r23
    4184:	88 1f       	adc	r24, r24
    4186:	99 1f       	adc	r25, r25
    4188:	1a 94       	dec	r1
    418a:	69 f7       	brne	.-38     	; 0x4166 <__udivmodsi4_loop>
    418c:	60 95       	com	r22
    418e:	70 95       	com	r23
    4190:	80 95       	com	r24
    4192:	90 95       	com	r25
    4194:	9b 01       	movw	r18, r22
    4196:	ac 01       	movw	r20, r24
    4198:	bd 01       	movw	r22, r26
    419a:	cf 01       	movw	r24, r30
    419c:	08 95       	ret

0000419e <__tablejump2__>:
    419e:	ee 0f       	add	r30, r30
    41a0:	ff 1f       	adc	r31, r31
    41a2:	05 90       	lpm	r0, Z+
    41a4:	f4 91       	lpm	r31, Z
    41a6:	e0 2d       	mov	r30, r0
    41a8:	09 94       	ijmp

000041aa <eeprom_read_byte>:
    41aa:	f9 99       	sbic	0x1f, 1	; 31
    41ac:	fe cf       	rjmp	.-4      	; 0x41aa <eeprom_read_byte>
    41ae:	92 bd       	out	0x22, r25	; 34
    41b0:	81 bd       	out	0x21, r24	; 33
    41b2:	f8 9a       	sbi	0x1f, 0	; 31
    41b4:	99 27       	eor	r25, r25
    41b6:	80 b5       	in	r24, 0x20	; 32
    41b8:	08 95       	ret

000041ba <eeprom_read_dword>:
    41ba:	a6 e1       	ldi	r26, 0x16	; 22
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	44 e0       	ldi	r20, 0x04	; 4
    41c0:	50 e0       	ldi	r21, 0x00	; 0
    41c2:	0c 94 03 21 	jmp	0x4206	; 0x4206 <eeprom_read_blraw>

000041c6 <eeprom_update_byte>:
    41c6:	26 2f       	mov	r18, r22

000041c8 <eeprom_update_r18>:
    41c8:	f9 99       	sbic	0x1f, 1	; 31
    41ca:	fe cf       	rjmp	.-4      	; 0x41c8 <eeprom_update_r18>
    41cc:	92 bd       	out	0x22, r25	; 34
    41ce:	81 bd       	out	0x21, r24	; 33
    41d0:	f8 9a       	sbi	0x1f, 0	; 31
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	00 b4       	in	r0, 0x20	; 32
    41d6:	02 16       	cp	r0, r18
    41d8:	39 f0       	breq	.+14     	; 0x41e8 <eeprom_update_r18+0x20>
    41da:	1f ba       	out	0x1f, r1	; 31
    41dc:	20 bd       	out	0x20, r18	; 32
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	f8 94       	cli
    41e2:	fa 9a       	sbi	0x1f, 2	; 31
    41e4:	f9 9a       	sbi	0x1f, 1	; 31
    41e6:	0f be       	out	0x3f, r0	; 63
    41e8:	08 95       	ret

000041ea <eeprom_update_dword>:
    41ea:	03 96       	adiw	r24, 0x03	; 3
    41ec:	27 2f       	mov	r18, r23
    41ee:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <eeprom_update_r18>
    41f2:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <eeprom_update_byte>
    41f6:	25 2f       	mov	r18, r21
    41f8:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <eeprom_update_r18>
    41fc:	24 2f       	mov	r18, r20
    41fe:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <eeprom_update_r18>

00004202 <eeprom_read_block>:
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22

00004206 <eeprom_read_blraw>:
    4206:	fc 01       	movw	r30, r24
    4208:	f9 99       	sbic	0x1f, 1	; 31
    420a:	fe cf       	rjmp	.-4      	; 0x4208 <eeprom_read_blraw+0x2>
    420c:	06 c0       	rjmp	.+12     	; 0x421a <eeprom_read_blraw+0x14>
    420e:	f2 bd       	out	0x22, r31	; 34
    4210:	e1 bd       	out	0x21, r30	; 33
    4212:	f8 9a       	sbi	0x1f, 0	; 31
    4214:	31 96       	adiw	r30, 0x01	; 1
    4216:	00 b4       	in	r0, 0x20	; 32
    4218:	0d 92       	st	X+, r0
    421a:	41 50       	subi	r20, 0x01	; 1
    421c:	50 40       	sbci	r21, 0x00	; 0
    421e:	b8 f7       	brcc	.-18     	; 0x420e <eeprom_read_blraw+0x8>
    4220:	08 95       	ret

00004222 <_exit>:
    4222:	f8 94       	cli

00004224 <__stop_program>:
    4224:	ff cf       	rjmp	.-2      	; 0x4224 <__stop_program>
