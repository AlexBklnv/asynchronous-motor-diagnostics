
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  0000421e  000042d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000421e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000218  008001b2  008001b2  00004384  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  00004384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043dc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000810  00000000  00000000  00004420  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010201  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d7b  00000000  00000000  00014e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000045c5  00000000  00000000  00017bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001568  00000000  00000000  0001c174  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004027  00000000  00000000  0001d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006029  00000000  00000000  00021703  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  0002772c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__ctors_end>
       4:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
       8:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
       c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      10:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      14:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      18:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      1c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      20:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      24:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      28:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      2c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      30:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      34:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      38:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      3c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      40:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__vector_16>
      44:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      48:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__vector_18>
      4c:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__vector_19>
      50:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      54:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      58:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      5c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      60:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__vector_24>
      64:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__bad_interrupt>
      68:	52 07       	cpc	r21, r18
      6a:	b5 06       	cpc	r11, r21
      6c:	b8 06       	cpc	r11, r24
      6e:	bb 06       	cpc	r11, r27
      70:	c7 06       	cpc	r12, r23
      72:	ca 06       	cpc	r12, r26
      74:	cd 06       	cpc	r12, r29
      76:	d0 06       	cpc	r13, r16
      78:	d3 06       	cpc	r13, r19
      7a:	d6 06       	cpc	r13, r22
      7c:	be 06       	cpc	r11, r30
      7e:	c1 06       	cpc	r12, r17
      80:	c4 06       	cpc	r12, r20
      82:	d9 06       	cpc	r13, r25
      84:	00 07       	cpc	r16, r16
      86:	27 07       	cpc	r18, r23
      88:	2a 07       	cpc	r18, r26
      8a:	2d 07       	cpc	r18, r29
      8c:	35 07       	cpc	r19, r21
      8e:	38 07       	cpc	r19, r24
      90:	3b 07       	cpc	r19, r27
      92:	43 07       	cpc	r20, r19
      94:	f7 08       	sbc	r15, r7
      96:	14 09       	sbc	r17, r4
      98:	14 09       	sbc	r17, r4
      9a:	16 09       	sbc	r17, r6
      9c:	16 09       	sbc	r17, r6
      9e:	16 09       	sbc	r17, r6
      a0:	16 09       	sbc	r17, r6
      a2:	16 09       	sbc	r17, r6
      a4:	16 09       	sbc	r17, r6
      a6:	16 09       	sbc	r17, r6
      a8:	16 09       	sbc	r17, r6
      aa:	16 09       	sbc	r17, r6
      ac:	42 09       	sbc	r20, r2
      ae:	5a 09       	sbc	r21, r10
      b0:	72 09       	sbc	r23, r2
      b2:	74 09       	sbc	r23, r4
      b4:	77 09       	sbc	r23, r7
      b6:	79 09       	sbc	r23, r9
      b8:	7b 09       	sbc	r23, r11
      ba:	7d 09       	sbc	r23, r13
      bc:	2a 0c       	add	r2, r10
      be:	2d 0c       	add	r2, r13
      c0:	3d 0c       	add	r3, r13
      c2:	5b 0c       	add	r5, r11
      c4:	64 0c       	add	r6, r4
      c6:	6d 0c       	add	r6, r13
      c8:	76 0c       	add	r7, r6
      ca:	7f 0c       	add	r7, r15
      cc:	88 0c       	add	r8, r8
      ce:	40 0c       	add	r4, r0
      d0:	49 0c       	add	r4, r9
      d2:	52 0c       	add	r5, r2
      d4:	54 10       	cpse	r5, r4
      d6:	87 10       	cpse	r8, r7
      d8:	a0 10       	cpse	r10, r0
      da:	ec 10       	cpse	r14, r12
      dc:	ff 10       	cpse	r15, r15
      de:	12 11       	cpse	r17, r2
      e0:	25 11       	cpse	r18, r5
      e2:	38 11       	cpse	r19, r8
      e4:	4b 11       	cpse	r20, r11
      e6:	b3 10       	cpse	r11, r3
      e8:	c6 10       	cpse	r12, r6
      ea:	d9 10       	cpse	r13, r9

000000ec <__trampolines_end>:
      ec:	2a 2a       	or	r2, r26
      ee:	4d 65       	ori	r20, 0x5D	; 93
      f0:	61 73       	andi	r22, 0x31	; 49
      f2:	75 72       	andi	r23, 0x25	; 37
      f4:	65 6d       	ori	r22, 0xD5	; 213
      f6:	65 6e       	ori	r22, 0xE5	; 229
      f8:	74 20       	and	r7, r4
      fa:	53 74       	andi	r21, 0x43	; 67
      fc:	6f 70       	andi	r22, 0x0F	; 15
      fe:	65 64       	ori	r22, 0x45	; 69
     100:	21 00       	.word	0x0021	; ????

00000102 <_ZZ12button1ClickvE3__c>:
     102:	2a 2a 4d 65 61 73 75 72 65 6d 65 6e 74 20 53 74     **Measurement St
     112:	61 72 74 65 64 21 00                                arted!.

00000119 <_ZZ12lcdClearCellhhhE3__c>:
     119:	20 00                                                .

0000011b <_ZZ22showStaticWindingCharsvE3__c_1>:
     11b:	45 3d 00                                            E=.

0000011e <_ZZ22showStaticWindingCharsvE3__c_0>:
     11e:	56 3d 00                                            V=.

00000121 <_ZZ22showStaticWindingCharsvE3__c>:
     121:	49 3d 00                                            I=.

00000124 <_ZZ22showWindingCharsValueshE3__c_0>:
     124:	25 00                                               %.

00000126 <_ZZ22showWindingCharsValueshE3__c>:
     126:	2b 00                                               +.

00000128 <_ZZ18showStaticAmperagevE3__c_0>:
     128:	4d 00                                               M.

0000012a <_ZZ18showStaticAmperagevE3__c>:
     12a:	50 00                                               P.

0000012c <_ZZ19displayStaticAsModevE3__c_28>:
     12c:	53 65 74 75 70 20 72 65 71 75 69 72 65 64 00        Setup required.

0000013b <_ZZ19displayStaticAsModevE3__c_27>:
     13b:	4f 6f 6f 6f 70 73 21 00                             Oooops!.

00000143 <_ZZ19displayStaticAsModevE3__c_26>:
     143:	42 31 3d 77 6f 72 6b 3b 20 42 32 3d 73 74 6f 70     B1=work; B2=stop
	...

00000154 <_ZZ19displayStaticAsModevE3__c_25>:
     154:	4d 65 61 73 75 72 65 6d 65 6e 74 00                 Measurement.

00000160 <_ZZ19displayStaticAsModevE3__c_24>:
     160:	41 43 00                                            AC.

00000163 <_ZZ19displayStaticAsModevE3__c_23>:
     163:	42 43 00                                            BC.

00000166 <_ZZ19displayStaticAsModevE3__c_22>:
     166:	41 42 00                                            AB.

00000169 <_ZZ19displayStaticAsModevE3__c_21>:
     169:	41 43 00                                            AC.

0000016c <_ZZ19displayStaticAsModevE3__c_20>:
     16c:	42 43 00                                            BC.

0000016f <_ZZ19displayStaticAsModevE3__c_19>:
     16f:	41 42 00                                            AB.

00000172 <_ZZ19displayStaticAsModevE3__c_18>:
     172:	65 25 00                                            e%.

00000175 <_ZZ19displayStaticAsModevE3__c_17>:
     175:	49 33 3d 00                                         I3=.

00000179 <_ZZ19displayStaticAsModevE3__c_16>:
     179:	49 32 3d 00                                         I2=.

0000017d <_ZZ19displayStaticAsModevE3__c_15>:
     17d:	49 31 3d 00                                         I1=.

00000181 <_ZZ19displayStaticAsModevE3__c_14>:
     181:	41 43 3d 00                                         AC=.

00000185 <_ZZ19displayStaticAsModevE3__c_13>:
     185:	42 43 3d 00                                         BC=.

00000189 <_ZZ19displayStaticAsModevE3__c_12>:
     189:	41 42 3d 00                                         AB=.

0000018d <_ZZ19displayStaticAsModevE3__c_11>:
     18d:	45 43 6f 75 6e 74 00                                ECount.

00000194 <_ZZ19displayStaticAsModevE3__c_10>:
     194:	41 6d 20 41 43 00                                   Am AC.

0000019a <_ZZ19displayStaticAsModevE3__c_9>:
     19a:	41 6d 20 42 43 00                                   Am BC.

000001a0 <_ZZ19displayStaticAsModevE3__c_8>:
     1a0:	41 6d 20 41 42 00                                   Am AB.

000001a6 <_ZZ19displayStaticAsModevE3__c_7>:
     1a6:	56 6d 20 41 43 00                                   Vm AC.

000001ac <_ZZ19displayStaticAsModevE3__c_6>:
     1ac:	56 6d 20 42 43 00                                   Vm BC.

000001b2 <_ZZ19displayStaticAsModevE3__c_5>:
     1b2:	56 6d 20 41 42 00                                   Vm AB.

000001b8 <_ZZ19displayStaticAsModevE3__c_4>:
     1b8:	52 33 20 41 43 00                                   R3 AC.

000001be <_ZZ19displayStaticAsModevE3__c_3>:
     1be:	52 32 20 42 43 00                                   R2 BC.

000001c4 <_ZZ19displayStaticAsModevE3__c_2>:
     1c4:	52 31 20 41 42 00                                   R1 AB.

000001ca <_ZZ19displayStaticAsModevE3__c_1>:
     1ca:	56 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     V gain maxV/step
	...

000001db <_ZZ19displayStaticAsModevE3__c_0>:
     1db:	41 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     A gain maxV/step
	...

000001ec <_ZZ19displayStaticAsModevE3__c>:
     1ec:	43 6f 6e 6e 65 63 74 69 6f 6e 20 74 79 70 65 00     Connection type.

000001fc <_ZZ19lcdPrintCriticalLvlhE3__c>:
     1fc:	2b 00                                               +.

000001fe <_ZZ27lcdPrinRoundedCurErrorLevelhE3__c>:
     1fe:	2b 00                                               +.

00000200 <_ZZ13displayAsModevE3__c_1>:
     200:	78 00                                               x.

00000202 <_ZZ13displayAsModevE3__c_0>:
     202:	54 72 69 61 6e 67 6c 65 00                          Triangle.

0000020b <_ZZ13displayAsModevE3__c>:
     20b:	53 74 61 72 00                                      Star.

00000210 <_ZZ12showGainInfovE3__c_4>:
     210:	30 2e 32 35 36 20 30 2e 30 30 37 38 31 32 35 00     0.256 0.0078125.

00000220 <_ZZ12showGainInfovE3__c_3>:
     220:	30 2e 35 31 32 20 30 2e 30 31 35 36 32 35 00        0.512 0.015625.

0000022f <_ZZ12showGainInfovE3__c_2>:
     22f:	31 2e 30 32 34 20 30 2e 30 33 31 32 35 00           1.024 0.03125.

0000023d <_ZZ12showGainInfovE3__c_1>:
     23d:	32 2e 30 34 38 20 30 2e 30 36 32 35 00              2.048 0.0625.

0000024a <_ZZ12showGainInfovE3__c_0>:
     24a:	34 2e 30 39 36 20 30 2e 31 32 35 00                 4.096 0.125.

00000256 <_ZZ12showGainInfovE3__c>:
     256:	36 2e 31 34 34 20 30 2e 31 38 37 35 00              6.144 0.1875.

00000263 <_ZZ4loopE3__c_7>:
     263:	57 41 52 4e 49 4e 47 21 21 21 20 4d 65 61 73 75     WARNING!!! Measu
     273:	72 65 6d 65 6e 74 20 53 74 6f 70 65 64 20 49 43     rement Stoped IC
     283:	20 45 58 49 53 54 53 21 00                           EXISTS!.

0000028c <_ZZ4loopE3__c_6>:
     28c:	2d 2d 2d 65 6e 64 2d 2d 2d 00                       ---end---.

00000296 <_ZZ4loopE3__c_5>:
     296:	2d 2d 2d 00                                         ---.

0000029a <_ZZ4loopE3__c_4>:
     29a:	65 72 72 6f 72 20 3d 20 00                          error = .

000002a3 <_ZZ4loopE3__c_3>:
     2a3:	70 65 72 66 65 63 74 20 61 6d 70 65 72 61 67 65     perfect amperage
     2b3:	20 3d 20 00                                          = .

000002b7 <_ZZ4loopE3__c_2>:
     2b7:	6d 65 61 73 75 72 65 64 20 61 6d 70 65 72 61 67     measured amperag
     2c7:	65 20 3d 20 00                                      e = .

000002cc <_ZZ4loopE3__c_1>:
     2cc:	6d 65 61 73 75 72 65 64 20 76 6f 6c 74 61 67 65     measured voltage
     2dc:	20 3d 20 00                                          = .

000002e0 <_ZZ4loopE3__c_0>:
     2e0:	7c 00                                               |.

000002e2 <_ZZ4loopE3__c>:
     2e2:	57 69 6e 64 69 6e 67 20 7c 00                       Winding |.

000002ec <_ZZ18checkIsReadyToWorkvE3__c>:
     2ec:	4e 65 65 64 20 73 65 74 75 70 20 70 61 72 61 6d     Need setup param
     2fc:	73 00                                               s.

000002fe <_ZZ5setupE3__c_18>:
     2fe:	53 74 61 6e 64 20 62 79 2e 2e 2e 00                 Stand by....

0000030a <_ZZ5setupE3__c_17>:
     30a:	43 6f 6d 70 6c 65 74 65 64 21 00                    Completed!.

00000315 <_ZZ5setupE3__c_16>:
     315:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 61 63     amperage_mult_ac
     325:	3a 20 00                                            : .

00000328 <_ZZ5setupE3__c_15>:
     328:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 62 63     amperage_mult_bc
     338:	3a 20 00                                            : .

0000033b <_ZZ5setupE3__c_14>:
     33b:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 61 62     amperage_mult_ab
     34b:	3a 20 00                                            : .

0000034e <_ZZ5setupE3__c_13>:
     34e:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 61 63 3a     voltage_mult_ac:
     35e:	20 00                                                .

00000360 <_ZZ5setupE3__c_12>:
     360:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 62 63 3a     voltage_mult_bc:
     370:	20 00                                                .

00000372 <_ZZ5setupE3__c_11>:
     372:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 61 62 3a     voltage_mult_ab:
     382:	20 00                                                .

00000384 <_ZZ5setupE3__c_10>:
     384:	69 6d 70 65 64 61 6e 63 65 5f 61 63 3a 20 00        impedance_ac: .

00000393 <_ZZ5setupE3__c_9>:
     393:	69 6d 70 65 64 61 6e 63 65 5f 62 63 3a 20 00        impedance_bc: .

000003a2 <_ZZ5setupE3__c_8>:
     3a2:	69 6d 70 65 64 61 6e 63 65 5f 61 62 3a 20 00        impedance_ab: .

000003b1 <_ZZ5setupE3__c_7>:
     3b1:	63 6f 6e 6e 65 63 74 69 6f 6e 5f 74 79 70 65 3a     connection_type:
     3c1:	20 00                                                .

000003c3 <_ZZ5setupE3__c_6>:
     3c3:	67 61 69 6e 5f 76 6f 6c 74 61 67 65 3a 20 00        gain_voltage: .

000003d2 <_ZZ5setupE3__c_5>:
     3d2:	67 61 69 6e 5f 61 6d 70 65 72 61 67 65 3a 20 00     gain_amperage: .

000003e2 <_ZZ5setupE3__c_4>:
     3e2:	45 45 50 52 4f 4d 20 76 61 6c 75 65 73 3a 00        EEPROM values:.

000003f1 <_ZZ5setupE3__c_3>:
     3f1:	45 45 50 52 4f 4d 20 66 69 72 73 74 20 73 74 61     EEPROM first sta
     401:	72 74 20 77 72 69 74 65 64 21 00                    rt writed!.

0000040c <_ZZ5setupE3__c_2>:
     40c:	42 75 74 74 6f 6e 20 32 20 69 6e 69 74 65 64 21     Button 2 inited!
	...

0000041d <_ZZ5setupE3__c_1>:
     41d:	42 75 74 74 6f 6e 20 31 20 69 6e 69 74 65 64 21     Button 1 inited!
	...

0000042e <_ZZ5setupE3__c_0>:
     42e:	4c 43 44 20 69 6e 69 74 65 64 21 00                 LCD inited!.

0000043a <_ZZ5setupE3__c>:
     43a:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 2e 2e     Initialization..
     44a:	2e 00                                               ..

0000044c <digital_pin_to_timer_PGM>:
     44c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     45c:	00 00 00 00                                         ....

00000460 <digital_pin_to_bit_mask_PGM>:
     460:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     470:	04 08 10 20                                         ... 

00000474 <digital_pin_to_port_PGM>:
     474:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     484:	03 03 03 03                                         ....

00000488 <port_to_input_PGM>:
     488:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000492 <port_to_output_PGM>:
     492:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000049c <port_to_mode_PGM>:
     49c:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000004a6 <__ctors_start>:
     4a6:	c3 11       	cpse	r28, r3
     4a8:	82 18       	sub	r8, r2
     4aa:	67 1c       	adc	r6, r7

000004ac <__ctors_end>:
     4ac:	11 24       	eor	r1, r1
     4ae:	1f be       	out	0x3f, r1	; 63
     4b0:	cf ef       	ldi	r28, 0xFF	; 255
     4b2:	d8 e0       	ldi	r29, 0x08	; 8
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	cd bf       	out	0x3d, r28	; 61

000004b8 <__do_copy_data>:
     4b8:	11 e0       	ldi	r17, 0x01	; 1
     4ba:	a0 e0       	ldi	r26, 0x00	; 0
     4bc:	b1 e0       	ldi	r27, 0x01	; 1
     4be:	ee e1       	ldi	r30, 0x1E	; 30
     4c0:	f2 e4       	ldi	r31, 0x42	; 66
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__do_copy_data+0x10>
     4c4:	05 90       	lpm	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	a2 3b       	cpi	r26, 0xB2	; 178
     4ca:	b1 07       	cpc	r27, r17
     4cc:	d9 f7       	brne	.-10     	; 0x4c4 <__do_copy_data+0xc>

000004ce <__do_clear_bss>:
     4ce:	23 e0       	ldi	r18, 0x03	; 3
     4d0:	a2 eb       	ldi	r26, 0xB2	; 178
     4d2:	b1 e0       	ldi	r27, 0x01	; 1
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <.do_clear_bss_start>

000004d6 <.do_clear_bss_loop>:
     4d6:	1d 92       	st	X+, r1

000004d8 <.do_clear_bss_start>:
     4d8:	aa 3c       	cpi	r26, 0xCA	; 202
     4da:	b2 07       	cpc	r27, r18
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <.do_clear_bss_loop>

000004de <__do_global_ctors>:
     4de:	12 e0       	ldi	r17, 0x02	; 2
     4e0:	c6 e5       	ldi	r28, 0x56	; 86
     4e2:	d2 e0       	ldi	r29, 0x02	; 2
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <__do_global_ctors+0x10>
     4e6:	21 97       	sbiw	r28, 0x01	; 1
     4e8:	fe 01       	movw	r30, r28
     4ea:	0e 94 cb 20 	call	0x4196	; 0x4196 <__tablejump2__>
     4ee:	c3 35       	cpi	r28, 0x53	; 83
     4f0:	d1 07       	cpc	r29, r17
     4f2:	c9 f7       	brne	.-14     	; 0x4e6 <__do_global_ctors+0x8>
     4f4:	0e 94 95 1c 	call	0x392a	; 0x392a <main>
     4f8:	0c 94 0d 21 	jmp	0x421a	; 0x421a <_exit>

000004fc <__bad_interrupt>:
     4fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000500 <_Z18checkIsReadyToWorkv>:
	displayStaticAsMode();
	displayAsMode();
}


void checkIsReadyToWork() {
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd ee       	ldi	r28, 0xED	; 237
     506:	d1 e0       	ldi	r29, 0x01	; 1
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
     508:	69 91       	ld	r22, Y+
     50a:	79 91       	ld	r23, Y+
     50c:	89 91       	ld	r24, Y+
     50e:	99 91       	ld	r25, Y+
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	a9 01       	movw	r20, r18
     516:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     51a:	88 23       	and	r24, r24
     51c:	e1 f0       	breq	.+56     	; 0x556 <_Z18checkIsReadyToWorkv+0x56>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	a9 01       	movw	r20, r18
     524:	6f 89       	ldd	r22, Y+23	; 0x17
     526:	78 8d       	ldd	r23, Y+24	; 0x18
     528:	89 8d       	ldd	r24, Y+25	; 0x19
     52a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     52c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     530:	88 23       	and	r24, r24
     532:	89 f0       	breq	.+34     	; 0x556 <_Z18checkIsReadyToWorkv+0x56>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	a9 01       	movw	r20, r18
     53a:	6b 85       	ldd	r22, Y+11	; 0x0b
     53c:	7c 85       	ldd	r23, Y+12	; 0x0c
     53e:	8d 85       	ldd	r24, Y+13	; 0x0d
     540:	9e 85       	ldd	r25, Y+14	; 0x0e
     542:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     546:	88 23       	and	r24, r24
     548:	31 f0       	breq	.+12     	; 0x556 <_Z18checkIsReadyToWorkv+0x56>
}


void checkIsReadyToWork() {
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	c9 3f       	cpi	r28, 0xF9	; 249
     54e:	d8 07       	cpc	r29, r24
     550:	d9 f6       	brne	.-74     	; 0x508 <_Z18checkIsReadyToWorkv+0x8>
	displayAsMode();
}


void checkIsReadyToWork() {
	bool isReadyToWork = true;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	01 c0       	rjmp	.+2      	; 0x558 <_Z18checkIsReadyToWorkv+0x58>
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
			isReadyToWork = false;
     556:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
		
	settings.isSetupMode = false;
     558:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <settings+0x12>
	if (isReadyToWork) {
     55c:	88 23       	and	r24, r24
     55e:	31 f0       	breq	.+12     	; 0x56c <_Z18checkIsReadyToWorkv+0x6c>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
     560:	85 e1       	ldi	r24, 0x15	; 21
     562:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
	}
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret
		
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
     56c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <modeWork>
		Serial.println(F("Need setup params"));
     570:	6c ee       	ldi	r22, 0xEC	; 236
     572:	72 e0       	ldi	r23, 0x02	; 2
     574:	84 e2       	ldi	r24, 0x24	; 36
     576:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
     57c:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>

00000580 <_Z11initAvgVarsv>:
	}
}



void initAvgVars() {
     580:	e4 e4       	ldi	r30, 0x44	; 68
     582:	f1 e0       	ldi	r31, 0x01	; 1
	for (byte i = 0; i < 3; i++) {
		adsChars.sumVoltage[i] = 0;
     584:	11 92       	st	Z+, r1
     586:	11 92       	st	Z+, r1
     588:	11 92       	st	Z+, r1
     58a:	11 92       	st	Z+, r1
		adsChars.sumMeasuredAmperage[i] = 0;
     58c:	10 86       	std	Z+8, r1	; 0x08
     58e:	11 86       	std	Z+9, r1	; 0x09
     590:	12 86       	std	Z+10, r1	; 0x0a
     592:	13 86       	std	Z+11, r1	; 0x0b
}



void initAvgVars() {
	for (byte i = 0; i < 3; i++) {
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	e0 35       	cpi	r30, 0x50	; 80
     598:	f8 07       	cpc	r31, r24
     59a:	a1 f7       	brne	.-24     	; 0x584 <_Z11initAvgVarsv+0x4>
		adsChars.sumVoltage[i] = 0;
		adsChars.sumMeasuredAmperage[i] = 0;
	}
	adsChars.currentMeasurement = 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <adsChars+0x3d>
     5a2:	08 95       	ret

000005a4 <_Z12button1Clickv>:
	_amperage *= ads.amperageStep * settings.multiplierAmperage[_windingIndex];;
	
	return _amperage == 0? 0: _voltage / _amperage;
}

void button1Click() {
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
	if (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC) {
     5ac:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
     5b0:	96 ef       	ldi	r25, 0xF6	; 246
     5b2:	98 0f       	add	r25, r24
     5b4:	93 30       	cpi	r25, 0x03	; 3
     5b6:	08 f4       	brcc	.+2      	; 0x5ba <_Z12button1Clickv+0x16>
     5b8:	a2 c0       	rjmp	.+324    	; 0x6fe <_Z12button1Clickv+0x15a>
		return;
	}
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
     5ba:	9f ef       	ldi	r25, 0xFF	; 255
     5bc:	98 0f       	add	r25, r24
     5be:	9c 30       	cpi	r25, 0x0C	; 12
     5c0:	08 f0       	brcs	.+2      	; 0x5c4 <_Z12button1Clickv+0x20>
     5c2:	7d c0       	rjmp	.+250    	; 0x6be <_Z12button1Clickv+0x11a>
		lcdUpdateScreen = true;
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	01 f5       	brne	.+64     	; 0x60e <_Z12button1Clickv+0x6a>
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR;
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	a9 01       	movw	r20, r18
     5d4:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
     5d8:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
     5dc:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
     5e0:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
     5e4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     5e8:	88 23       	and	r24, r24
     5ea:	21 f0       	breq	.+8      	; 0x5f4 <_Z12button1Clickv+0x50>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	dc 01       	movw	r26, r24
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <_Z12button1Clickv+0x58>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e8       	ldi	r26, 0x80	; 128
     5fa:	bf e3       	ldi	r27, 0x3F	; 63
     5fc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <setDigit>
     600:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <setDigit+0x1>
     604:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <setDigit+0x2>
     608:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <setDigit+0x3>
     60c:	78 c0       	rjmp	.+240    	; 0x6fe <_Z12button1Clickv+0x15a>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
     60e:	82 50       	subi	r24, 0x02	; 2
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	38 f5       	brcc	.+78     	; 0x662 <_Z12button1Clickv+0xbe>
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
     614:	c0 90 c5 01 	lds	r12, 0x01C5	; 0x8001c5 <setDigit>
     618:	d0 90 c6 01 	lds	r13, 0x01C6	; 0x8001c6 <setDigit+0x1>
     61c:	e0 90 c7 01 	lds	r14, 0x01C7	; 0x8001c7 <setDigit+0x2>
     620:	f0 90 c8 01 	lds	r15, 0x01C8	; 0x8001c8 <setDigit+0x3>
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 ea       	ldi	r20, 0xA0	; 160
     62a:	50 e4       	ldi	r21, 0x40	; 64
     62c:	c7 01       	movw	r24, r14
     62e:	b6 01       	movw	r22, r12
     630:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     634:	88 23       	and	r24, r24
     636:	49 f0       	breq	.+18     	; 0x64a <_Z12button1Clickv+0xa6>
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	c7 01       	movw	r24, r14
     642:	b6 01       	movw	r22, r12
     644:	0e 94 87 18 	call	0x310e	; 0x310e <__addsf3>
     648:	03 c0       	rjmp	.+6      	; 0x650 <_Z12button1Clickv+0xac>
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	cb 01       	movw	r24, r22
     650:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <setDigit>
     654:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <setDigit+0x1>
     658:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <setDigit+0x2>
     65c:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <setDigit+0x3>
     660:	4e c0       	rjmp	.+156    	; 0x6fe <_Z12button1Clickv+0x15a>
		} else {
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     662:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <setDigit+0x4>
     666:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <setDigit+0x5>
     66a:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <setDigit+0x6>
     66e:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <setDigit+0x7>
     672:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
     676:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
     67a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
     67e:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
     682:	0e 94 87 18 	call	0x310e	; 0x310e <__addsf3>
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
			if (setDigit.value >= 1000) {
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	4a e7       	ldi	r20, 0x7A	; 122
     690:	54 e4       	ldi	r21, 0x44	; 68
     692:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
     696:	87 ff       	sbrs	r24, 7
     698:	09 c0       	rjmp	.+18     	; 0x6ac <_Z12button1Clickv+0x108>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR;
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     69a:	c0 92 c5 01 	sts	0x01C5, r12	; 0x8001c5 <setDigit>
     69e:	d0 92 c6 01 	sts	0x01C6, r13	; 0x8001c6 <setDigit+0x1>
     6a2:	e0 92 c7 01 	sts	0x01C7, r14	; 0x8001c7 <setDigit+0x2>
     6a6:	f0 92 c8 01 	sts	0x01C8, r15	; 0x8001c8 <setDigit+0x3>
     6aa:	29 c0       	rjmp	.+82     	; 0x6fe <_Z12button1Clickv+0x15a>
			if (setDigit.value >= 1000) {
				setDigit.value = 0;
     6ac:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <setDigit>
     6b0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <setDigit+0x1>
     6b4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <setDigit+0x2>
     6b8:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <setDigit+0x3>
     6bc:	20 c0       	rjmp	.+64     	; 0x6fe <_Z12button1Clickv+0x15a>
			}
		}
		return;	
	}
	
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
     6be:	93 ef       	ldi	r25, 0xF3	; 243
     6c0:	98 0f       	add	r25, r24
     6c2:	98 30       	cpi	r25, 0x08	; 8
     6c4:	40 f4       	brcc	.+16     	; 0x6d6 <_Z12button1Clickv+0x132>
		modeWork.current = modeWork.current == MW_SHOWING_STOP? MW_SHOWING_START: modeWork.current + 1;
     6c6:	84 31       	cpi	r24, 0x14	; 20
     6c8:	11 f0       	breq	.+4      	; 0x6ce <_Z12button1Clickv+0x12a>
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <_Z12button1Clickv+0x12c>
     6ce:	8d e0       	ldi	r24, 0x0D	; 13
     6d0:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
		return;
     6d4:	14 c0       	rjmp	.+40     	; 0x6fe <_Z12button1Clickv+0x15a>
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
     6d6:	85 31       	cpi	r24, 0x15	; 21
     6d8:	91 f4       	brne	.+36     	; 0x6fe <_Z12button1Clickv+0x15a>
		modeWork.current = MW_SHOWING_START;
     6da:	8d e0       	ldi	r24, 0x0D	; 13
     6dc:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
		settings.isReadyToWork = MM_WORK;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <settings>
		
		Serial.println(F("**Measurement Started!"));
     6e6:	62 e0       	ldi	r22, 0x02	; 2
     6e8:	71 e0       	ldi	r23, 0x01	; 1
     6ea:	84 e2       	ldi	r24, 0x24	; 36
     6ec:	93 e0       	ldi	r25, 0x03	; 3
     6ee:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
		initAvgVars();
		return;
	}
}
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
		modeWork.current = MW_SHOWING_START;
		settings.isReadyToWork = MM_WORK;
		
		Serial.println(F("**Measurement Started!"));
		initAvgVars();
     6fa:	0c 94 c0 02 	jmp	0x580	; 0x580 <_Z11initAvgVarsv>
		return;
	}
}
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	08 95       	ret

00000708 <_Z19getICLevelByWindingfh>:
		adsChars.sumMeasuredAmperage[i] = 0;
	}
	adsChars.currentMeasurement = 1;
}

float getICLevelByWinding(float _amperage, byte _num) {
     708:	8f 92       	push	r8
     70a:	9f 92       	push	r9
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	6b 01       	movw	r12, r22
     71a:	7c 01       	movw	r14, r24
	if (adsChars.perfectAmperage[_num] >= _amperage) {
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	48 9f       	mul	r20, r24
     720:	f0 01       	movw	r30, r0
     722:	11 24       	eor	r1, r1
     724:	e8 5c       	subi	r30, 0xC8	; 200
     726:	fe 4f       	sbci	r31, 0xFE	; 254
     728:	80 80       	ld	r8, Z
     72a:	91 80       	ldd	r9, Z+1	; 0x01
     72c:	a2 80       	ldd	r10, Z+2	; 0x02
     72e:	b3 80       	ldd	r11, Z+3	; 0x03
     730:	a7 01       	movw	r20, r14
     732:	96 01       	movw	r18, r12
     734:	c5 01       	movw	r24, r10
     736:	b4 01       	movw	r22, r8
     738:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
     73c:	87 ff       	sbrs	r24, 7
     73e:	30 c0       	rjmp	.+96     	; 0x7a0 <_Z19getICLevelByWindingfh+0x98>
		return 0;
	}
	return abs(_amperage - adsChars.perfectAmperage[_num]) * 100.0 / (adsChars.perfectAmperage[_num] * 0.20);
     740:	a5 01       	movw	r20, r10
     742:	94 01       	movw	r18, r8
     744:	c7 01       	movw	r24, r14
     746:	b6 01       	movw	r22, r12
     748:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	a9 01       	movw	r20, r18
     756:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
     75a:	18 16       	cp	r1, r24
     75c:	3c f4       	brge	.+14     	; 0x76c <_Z19getICLevelByWindingfh+0x64>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	48 ec       	ldi	r20, 0xC8	; 200
     764:	52 e4       	ldi	r21, 0x42	; 66
     766:	c7 01       	movw	r24, r14
     768:	b6 01       	movw	r22, r12
     76a:	07 c0       	rjmp	.+14     	; 0x77a <_Z19getICLevelByWindingfh+0x72>
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	90 58       	subi	r25, 0x80	; 128
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	48 ec       	ldi	r20, 0xC8	; 200
     778:	52 e4       	ldi	r21, 0x42	; 66
     77a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
     77e:	6b 01       	movw	r12, r22
     780:	7c 01       	movw	r14, r24
     782:	2d ec       	ldi	r18, 0xCD	; 205
     784:	3c ec       	ldi	r19, 0xCC	; 204
     786:	4c e4       	ldi	r20, 0x4C	; 76
     788:	5e e3       	ldi	r21, 0x3E	; 62
     78a:	c5 01       	movw	r24, r10
     78c:	b4 01       	movw	r22, r8
     78e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
     792:	9b 01       	movw	r18, r22
     794:	ac 01       	movw	r20, r24
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <_Z19getICLevelByWindingfh+0x9e>
	adsChars.currentMeasurement = 1;
}

float getICLevelByWinding(float _amperage, byte _num) {
	if (adsChars.perfectAmperage[_num] >= _amperage) {
		return 0;
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	cb 01       	movw	r24, r22
	}
	return abs(_amperage - adsChars.perfectAmperage[_num]) * 100.0 / (adsChars.perfectAmperage[_num] * 0.20);
}
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	bf 90       	pop	r11
     7b0:	af 90       	pop	r10
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	08 95       	ret

000007b8 <_Z17isFullErrorExistsPfS_>:

/*
 * Проверка наличия отклоеннеия.
 * Ошибка проверяется только при положительных разностях
*/
bool isFullErrorExists(float* _amperage, float* _voltage) {
     7b8:	4f 92       	push	r4
     7ba:	5f 92       	push	r5
     7bc:	6f 92       	push	r6
     7be:	7f 92       	push	r7
     7c0:	8f 92       	push	r8
     7c2:	9f 92       	push	r9
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	60 97       	sbiw	r28, 0x10	; 16
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
	float divAmperage[3] = {0, 0, 0};
     7e8:	19 82       	std	Y+1, r1	; 0x01
     7ea:	1a 82       	std	Y+2, r1	; 0x02
     7ec:	1b 82       	std	Y+3, r1	; 0x03
     7ee:	1c 82       	std	Y+4, r1	; 0x04
     7f0:	1d 82       	std	Y+5, r1	; 0x05
     7f2:	1e 82       	std	Y+6, r1	; 0x06
     7f4:	1f 82       	std	Y+7, r1	; 0x07
     7f6:	18 86       	std	Y+8, r1	; 0x08
     7f8:	19 86       	std	Y+9, r1	; 0x09
     7fa:	1a 86       	std	Y+10, r1	; 0x0a
     7fc:	1b 86       	std	Y+11, r1	; 0x0b
     7fe:	1c 86       	std	Y+12, r1	; 0x0c
     800:	7b 01       	movw	r14, r22
     802:	2d ee       	ldi	r18, 0xED	; 237
     804:	82 2e       	mov	r8, r18
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	92 2e       	mov	r9, r18
     80a:	38 e3       	ldi	r19, 0x38	; 56
     80c:	a3 2e       	mov	r10, r19
     80e:	31 e0       	ldi	r19, 0x01	; 1
     810:	b3 2e       	mov	r11, r19
     812:	6c 01       	movw	r12, r24
     814:	8e 01       	movw	r16, r28
     816:	0f 5f       	subi	r16, 0xFF	; 255
     818:	1f 4f       	sbci	r17, 0xFF	; 255
     81a:	3b 01       	movw	r6, r22
     81c:	8c e0       	ldi	r24, 0x0C	; 12
     81e:	68 0e       	add	r6, r24
     820:	71 1c       	adc	r7, r1
	byte sign = 100;
	
	for(byte i = 0; i < 3; i++) {
		adsChars.perfectAmperage[i] = _voltage[i] / settings.impedance[i];
     822:	d7 01       	movw	r26, r14
     824:	6d 91       	ld	r22, X+
     826:	7d 91       	ld	r23, X+
     828:	8d 91       	ld	r24, X+
     82a:	9d 91       	ld	r25, X+
     82c:	7d 01       	movw	r14, r26
     82e:	f4 01       	movw	r30, r8
     830:	21 91       	ld	r18, Z+
     832:	31 91       	ld	r19, Z+
     834:	41 91       	ld	r20, Z+
     836:	51 91       	ld	r21, Z+
     838:	4f 01       	movw	r8, r30
     83a:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
     83e:	d5 01       	movw	r26, r10
     840:	6d 93       	st	X+, r22
     842:	7d 93       	st	X+, r23
     844:	8d 93       	st	X+, r24
     846:	9d 93       	st	X+, r25
     848:	5d 01       	movw	r10, r26
		divAmperage[i] = adsChars.perfectAmperage[i] - _amperage[i];
     84a:	f6 01       	movw	r30, r12
     84c:	21 91       	ld	r18, Z+
     84e:	31 91       	ld	r19, Z+
     850:	41 91       	ld	r20, Z+
     852:	51 91       	ld	r21, Z+
     854:	6f 01       	movw	r12, r30
     856:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
     85a:	d8 01       	movw	r26, r16
     85c:	6d 93       	st	X+, r22
     85e:	7d 93       	st	X+, r23
     860:	8d 93       	st	X+, r24
     862:	9d 93       	st	X+, r25
     864:	8d 01       	movw	r16, r26
*/
bool isFullErrorExists(float* _amperage, float* _voltage) {
	float divAmperage[3] = {0, 0, 0};
	byte sign = 100;
	
	for(byte i = 0; i < 3; i++) {
     866:	e6 14       	cp	r14, r6
     868:	f7 04       	cpc	r15, r7
     86a:	d9 f6       	brne	.-74     	; 0x822 <_Z17isFullErrorExistsPfS_+0x6a>
	}

	if (sign == -97) {
		return false;
	}
	float _error = abs(divAmperage[0] - divAmperage[1]) + abs(divAmperage[1] - divAmperage[2]) + abs(divAmperage[2] - divAmperage[0]);
     86c:	49 80       	ldd	r4, Y+1	; 0x01
     86e:	5a 80       	ldd	r5, Y+2	; 0x02
     870:	6b 80       	ldd	r6, Y+3	; 0x03
     872:	7c 80       	ldd	r7, Y+4	; 0x04
     874:	8d 80       	ldd	r8, Y+5	; 0x05
     876:	9e 80       	ldd	r9, Y+6	; 0x06
     878:	af 80       	ldd	r10, Y+7	; 0x07
     87a:	b8 84       	ldd	r11, Y+8	; 0x08
     87c:	a5 01       	movw	r20, r10
     87e:	94 01       	movw	r18, r8
     880:	c3 01       	movw	r24, r6
     882:	b2 01       	movw	r22, r4
     884:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
     888:	6b 01       	movw	r12, r22
     88a:	7c 01       	movw	r14, r24
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	a9 01       	movw	r20, r18
     892:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
     896:	18 16       	cp	r1, r24
     898:	24 f0       	brlt	.+8      	; 0x8a2 <_Z17isFullErrorExistsPfS_+0xea>
     89a:	f7 fa       	bst	r15, 7
     89c:	f0 94       	com	r15
     89e:	f7 f8       	bld	r15, 7
     8a0:	f0 94       	com	r15
     8a2:	89 85       	ldd	r24, Y+9	; 0x09
     8a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a6:	ab 85       	ldd	r26, Y+11	; 0x0b
     8a8:	bc 85       	ldd	r27, Y+12	; 0x0c
     8aa:	8d 87       	std	Y+13, r24	; 0x0d
     8ac:	9e 87       	std	Y+14, r25	; 0x0e
     8ae:	af 87       	std	Y+15, r26	; 0x0f
     8b0:	b8 8b       	std	Y+16, r27	; 0x10
     8b2:	9c 01       	movw	r18, r24
     8b4:	ad 01       	movw	r20, r26
     8b6:	c5 01       	movw	r24, r10
     8b8:	b4 01       	movw	r22, r8
     8ba:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
     8be:	4b 01       	movw	r8, r22
     8c0:	5c 01       	movw	r10, r24
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	a9 01       	movw	r20, r18
     8c8:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	24 f0       	brlt	.+8      	; 0x8d8 <_Z17isFullErrorExistsPfS_+0x120>
     8d0:	b7 fa       	bst	r11, 7
     8d2:	b0 94       	com	r11
     8d4:	b7 f8       	bld	r11, 7
     8d6:	b0 94       	com	r11
     8d8:	a5 01       	movw	r20, r10
     8da:	94 01       	movw	r18, r8
     8dc:	c7 01       	movw	r24, r14
     8de:	b6 01       	movw	r22, r12
     8e0:	0e 94 87 18 	call	0x310e	; 0x310e <__addsf3>
     8e4:	6b 01       	movw	r12, r22
     8e6:	7c 01       	movw	r14, r24
     8e8:	a3 01       	movw	r20, r6
     8ea:	92 01       	movw	r18, r4
     8ec:	6d 85       	ldd	r22, Y+13	; 0x0d
     8ee:	7e 85       	ldd	r23, Y+14	; 0x0e
     8f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8f2:	98 89       	ldd	r25, Y+16	; 0x10
     8f4:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
     8f8:	4b 01       	movw	r8, r22
     8fa:	5c 01       	movw	r10, r24
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	a9 01       	movw	r20, r18
     902:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
     906:	18 16       	cp	r1, r24
     908:	24 f0       	brlt	.+8      	; 0x912 <__stack+0x13>
     90a:	b7 fa       	bst	r11, 7
     90c:	b0 94       	com	r11
     90e:	b7 f8       	bld	r11, 7
     910:	b0 94       	com	r11
     912:	a7 01       	movw	r20, r14
     914:	96 01       	movw	r18, r12
     916:	c5 01       	movw	r24, r10
     918:	b4 01       	movw	r22, r8
     91a:	0e 94 87 18 	call	0x310e	; 0x310e <__addsf3>
     91e:	6b 01       	movw	r12, r22
     920:	7c 01       	movw	r14, r24
     922:	2a e9       	ldi	r18, 0x9A	; 154
     924:	39 e9       	ldi	r19, 0x99	; 153
     926:	49 e9       	ldi	r20, 0x99	; 153
     928:	5f e3       	ldi	r21, 0x3F	; 63
     92a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	11 e0       	ldi	r17, 0x01	; 1
     934:	c7 01       	movw	r24, r14
     936:	b6 01       	movw	r22, r12
     938:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     93c:	18 16       	cp	r1, r24
     93e:	0c f4       	brge	.+2      	; 0x942 <__stack+0x43>
     940:	10 e0       	ldi	r17, 0x00	; 0

	// пока дадим 20% допуска отклонения общей величины
	return !(_error <= _error * 1.20);
}
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	81 27       	eor	r24, r17
     946:	60 96       	adiw	r28, 0x10	; 16
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	8f 90       	pop	r8
     96a:	7f 90       	pop	r7
     96c:	6f 90       	pop	r6
     96e:	5f 90       	pop	r5
     970:	4f 90       	pop	r4
     972:	08 95       	ret

00000974 <_Z12getAdsParamsv>:
}

/**
 * Получение параметров с АЦП
 */
void getAdsParams() {
     974:	2f 92       	push	r2
     976:	3f 92       	push	r3
     978:	4f 92       	push	r4
     97a:	5f 92       	push	r5
     97c:	6f 92       	push	r6
     97e:	7f 92       	push	r7
     980:	8f 92       	push	r8
     982:	9f 92       	push	r9
     984:	af 92       	push	r10
     986:	bf 92       	push	r11
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	a5 97       	sbiw	r28, 0x25	; 37
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
	float measuredVoltage[3] = {0, 0, 0};
     9a8:	1d 86       	std	Y+13, r1	; 0x0d
     9aa:	1e 86       	std	Y+14, r1	; 0x0e
     9ac:	1f 86       	std	Y+15, r1	; 0x0f
     9ae:	18 8a       	std	Y+16, r1	; 0x10
     9b0:	19 8a       	std	Y+17, r1	; 0x11
     9b2:	1a 8a       	std	Y+18, r1	; 0x12
     9b4:	1b 8a       	std	Y+19, r1	; 0x13
     9b6:	1c 8a       	std	Y+20, r1	; 0x14
     9b8:	1d 8a       	std	Y+21, r1	; 0x15
     9ba:	1e 8a       	std	Y+22, r1	; 0x16
     9bc:	1f 8a       	std	Y+23, r1	; 0x17
     9be:	18 8e       	std	Y+24, r1	; 0x18
	float measuredAmperage[3] = {0, 0, 0};
     9c0:	19 82       	std	Y+1, r1	; 0x01
     9c2:	1a 82       	std	Y+2, r1	; 0x02
     9c4:	1b 82       	std	Y+3, r1	; 0x03
     9c6:	1c 82       	std	Y+4, r1	; 0x04
     9c8:	1d 82       	std	Y+5, r1	; 0x05
     9ca:	1e 82       	std	Y+6, r1	; 0x06
     9cc:	1f 82       	std	Y+7, r1	; 0x07
     9ce:	18 86       	std	Y+8, r1	; 0x08
     9d0:	19 86       	std	Y+9, r1	; 0x09
     9d2:	1a 86       	std	Y+10, r1	; 0x0a
     9d4:	1b 86       	std	Y+11, r1	; 0x0b
     9d6:	1c 86       	std	Y+12, r1	; 0x0c
     9d8:	6e 01       	movw	r12, r28
     9da:	2d e0       	ldi	r18, 0x0D	; 13
     9dc:	c2 0e       	add	r12, r18
     9de:	d1 1c       	adc	r13, r1
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	7c 01       	movw	r14, r24
     9e6:	4c 01       	movw	r8, r24
     9e8:	36 01       	movw	r6, r12
	float perfectAmperage[3] = {0, 0, 0};
		
	for (byte i = 0; i < 3; i++) {
     9ea:	10 e0       	ldi	r17, 0x00	; 0
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
     9ec:	61 2f       	mov	r22, r17
     9ee:	8b e5       	ldi	r24, 0x5B	; 91
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	0e 94 6d 12 	call	0x24da	; 0x24da <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     9f6:	bc 01       	movw	r22, r24
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatunsisf>
     a00:	d3 01       	movw	r26, r6
     a02:	6d 93       	st	X+, r22
     a04:	7d 93       	st	X+, r23
     a06:	8d 93       	st	X+, r24
     a08:	9d 93       	st	X+, r25
     a0a:	3d 01       	movw	r6, r26
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
     a0c:	61 2f       	mov	r22, r17
     a0e:	86 e5       	ldi	r24, 0x56	; 86
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 6d 12 	call	0x24da	; 0x24da <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     a16:	bc 01       	movw	r22, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatunsisf>
     a20:	f4 01       	movw	r30, r8
     a22:	61 93       	st	Z+, r22
     a24:	71 93       	st	Z+, r23
     a26:	81 93       	st	Z+, r24
     a28:	91 93       	st	Z+, r25
     a2a:	4f 01       	movw	r8, r30
void getAdsParams() {
	float measuredVoltage[3] = {0, 0, 0};
	float measuredAmperage[3] = {0, 0, 0};
	float perfectAmperage[3] = {0, 0, 0};
		
	for (byte i = 0; i < 3; i++) {
     a2c:	1f 5f       	subi	r17, 0xFF	; 255
     a2e:	13 30       	cpi	r17, 0x03	; 3
     a30:	e9 f6       	brne	.-70     	; 0x9ec <_Z12getAdsParamsv+0x78>
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}
	for (byte i = 0; i < 3; i++) {
		adsChars.sumVoltage[i] += measuredVoltage[i];
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierAmperage[i];
     a32:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_start+0x18>
     a36:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_start+0x19>
     a3a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_start+0x1a>
     a3e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_start+0x1b>
     a42:	8e 8f       	std	Y+30, r24	; 0x1e
     a44:	9f 8f       	std	Y+31, r25	; 0x1f
     a46:	a8 a3       	std	Y+32, r26	; 0x20
     a48:	b9 a3       	std	Y+33, r27	; 0x21
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierVoltage[i];
     a4a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_start+0x1c>
     a4e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_start+0x1d>
     a52:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <__data_start+0x1e>
     a56:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <__data_start+0x1f>
     a5a:	8a a3       	std	Y+34, r24	; 0x22
     a5c:	9b a3       	std	Y+35, r25	; 0x23
     a5e:	ac a3       	std	Y+36, r26	; 0x24
     a60:	bd a3       	std	Y+37, r27	; 0x25
     a62:	00 e2       	ldi	r16, 0x20	; 32
     a64:	11 e0       	ldi	r17, 0x01	; 1
     a66:	a7 ee       	ldi	r26, 0xE7	; 231
     a68:	b1 e0       	ldi	r27, 0x01	; 1
     a6a:	ba 8f       	std	Y+26, r27	; 0x1a
     a6c:	a9 8f       	std	Y+25, r26	; 0x19
     a6e:	dd 8e       	std	Y+29, r13	; 0x1d
     a70:	cc 8e       	std	Y+28, r12	; 0x1c
     a72:	17 01       	movw	r2, r14
     a74:	b3 e0       	ldi	r27, 0x03	; 3
     a76:	bb 8f       	std	Y+27, r27	; 0x1b
	for (byte i = 0; i < 3; i++) {
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}
	for (byte i = 0; i < 3; i++) {
		adsChars.sumVoltage[i] += measuredVoltage[i];
     a78:	f6 01       	movw	r30, r12
     a7a:	81 90       	ld	r8, Z+
     a7c:	91 90       	ld	r9, Z+
     a7e:	a1 90       	ld	r10, Z+
     a80:	b1 90       	ld	r11, Z+
     a82:	6f 01       	movw	r12, r30
     a84:	a5 01       	movw	r20, r10
     a86:	94 01       	movw	r18, r8
     a88:	d8 01       	movw	r26, r16
     a8a:	94 96       	adiw	r26, 0x24	; 36
     a8c:	6d 91       	ld	r22, X+
     a8e:	7d 91       	ld	r23, X+
     a90:	8d 91       	ld	r24, X+
     a92:	9c 91       	ld	r25, X
     a94:	97 97       	sbiw	r26, 0x27	; 39
     a96:	0e 94 87 18 	call	0x310e	; 0x310e <__addsf3>
     a9a:	f8 01       	movw	r30, r16
     a9c:	64 a3       	std	Z+36, r22	; 0x24
     a9e:	75 a3       	std	Z+37, r23	; 0x25
     aa0:	86 a3       	std	Z+38, r24	; 0x26
     aa2:	97 a3       	std	Z+39, r25	; 0x27
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
     aa4:	d1 01       	movw	r26, r2
     aa6:	4d 90       	ld	r4, X+
     aa8:	5d 90       	ld	r5, X+
     aaa:	6d 90       	ld	r6, X+
     aac:	7c 90       	ld	r7, X
     aae:	a3 01       	movw	r20, r6
     ab0:	92 01       	movw	r18, r4
     ab2:	60 a9       	ldd	r22, Z+48	; 0x30
     ab4:	71 a9       	ldd	r23, Z+49	; 0x31
     ab6:	82 a9       	ldd	r24, Z+50	; 0x32
     ab8:	93 a9       	ldd	r25, Z+51	; 0x33
     aba:	0e 94 87 18 	call	0x310e	; 0x310e <__addsf3>
     abe:	f8 01       	movw	r30, r16
     ac0:	60 ab       	std	Z+48, r22	; 0x30
     ac2:	71 ab       	std	Z+49, r23	; 0x31
     ac4:	82 ab       	std	Z+50, r24	; 0x32
     ac6:	93 ab       	std	Z+51, r25	; 0x33
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierAmperage[i];
     ac8:	a9 8d       	ldd	r26, Y+25	; 0x19
     aca:	ba 8d       	ldd	r27, Y+26	; 0x1a
     acc:	91 96       	adiw	r26, 0x21	; 33
     ace:	2d 91       	ld	r18, X+
     ad0:	3d 91       	ld	r19, X+
     ad2:	4d 91       	ld	r20, X+
     ad4:	5c 91       	ld	r21, X
     ad6:	94 97       	sbiw	r26, 0x24	; 36
     ad8:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ada:	7f 8d       	ldd	r23, Y+31	; 0x1f
     adc:	88 a1       	ldd	r24, Y+32	; 0x20
     ade:	99 a1       	ldd	r25, Y+33	; 0x21
     ae0:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
     ae4:	a5 01       	movw	r20, r10
     ae6:	94 01       	movw	r18, r8
     ae8:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
     aec:	ec 8d       	ldd	r30, Y+28	; 0x1c
     aee:	fd 8d       	ldd	r31, Y+29	; 0x1d
     af0:	61 93       	st	Z+, r22
     af2:	71 93       	st	Z+, r23
     af4:	81 93       	st	Z+, r24
     af6:	91 93       	st	Z+, r25
     af8:	fd 8f       	std	Y+29, r31	; 0x1d
     afa:	ec 8f       	std	Y+28, r30	; 0x1c
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierVoltage[i];
     afc:	a9 8d       	ldd	r26, Y+25	; 0x19
     afe:	ba 8d       	ldd	r27, Y+26	; 0x1a
     b00:	55 96       	adiw	r26, 0x15	; 21
     b02:	2d 91       	ld	r18, X+
     b04:	3d 91       	ld	r19, X+
     b06:	4d 91       	ld	r20, X+
     b08:	5c 91       	ld	r21, X
     b0a:	58 97       	sbiw	r26, 0x18	; 24
     b0c:	6a a1       	ldd	r22, Y+34	; 0x22
     b0e:	7b a1       	ldd	r23, Y+35	; 0x23
     b10:	8c a1       	ldd	r24, Y+36	; 0x24
     b12:	9d a1       	ldd	r25, Y+37	; 0x25
     b14:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
     b18:	a3 01       	movw	r20, r6
     b1a:	92 01       	movw	r18, r4
     b1c:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
     b20:	f1 01       	movw	r30, r2
     b22:	61 93       	st	Z+, r22
     b24:	71 93       	st	Z+, r23
     b26:	81 93       	st	Z+, r24
     b28:	91 93       	st	Z+, r25
     b2a:	1f 01       	movw	r2, r30
     b2c:	fb 8d       	ldd	r31, Y+27	; 0x1b
     b2e:	f1 50       	subi	r31, 0x01	; 1
     b30:	fb 8f       	std	Y+27, r31	; 0x1b
     b32:	0c 5f       	subi	r16, 0xFC	; 252
     b34:	1f 4f       	sbci	r17, 0xFF	; 255
     b36:	89 8d       	ldd	r24, Y+25	; 0x19
     b38:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b3a:	04 96       	adiw	r24, 0x04	; 4
     b3c:	9a 8f       	std	Y+26, r25	; 0x1a
     b3e:	89 8f       	std	Y+25, r24	; 0x19
		
	for (byte i = 0; i < 3; i++) {
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}
	for (byte i = 0; i < 3; i++) {
     b40:	f1 11       	cpse	r31, r1
     b42:	9a cf       	rjmp	.-204    	; 0xa78 <_Z12getAdsParamsv+0x104>
     b44:	0d ec       	ldi	r16, 0xCD	; 205
     b46:	11 e0       	ldi	r17, 0x01	; 1
     b48:	d1 2c       	mov	r13, r1
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierAmperage[i];
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierVoltage[i];
	}
	
	for (byte i = 0; i < 3; i++) {
		if (isFullErrorExists(measuredAmperage, measuredVoltage)) {
     b4a:	be 01       	movw	r22, r28
     b4c:	63 5f       	subi	r22, 0xF3	; 243
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_Z17isFullErrorExistsPfS_>
     b58:	88 23       	and	r24, r24
     b5a:	d9 f0       	breq	.+54     	; 0xb92 <_Z12getAdsParamsv+0x21e>
			if (getICLevelByWinding(measuredAmperage[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
     b5c:	d7 01       	movw	r26, r14
     b5e:	6d 91       	ld	r22, X+
     b60:	7d 91       	ld	r23, X+
     b62:	8d 91       	ld	r24, X+
     b64:	9c 91       	ld	r25, X
     b66:	4d 2d       	mov	r20, r13
     b68:	0e 94 84 03 	call	0x708	; 0x708 <_Z19getICLevelByWindingfh>
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 ea       	ldi	r20, 0xA0	; 160
     b72:	51 e4       	ldi	r21, 0x41	; 65
     b74:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
     b78:	87 fd       	sbrc	r24, 7
     b7a:	0b c0       	rjmp	.+22     	; 0xb92 <_Z12getAdsParamsv+0x21e>
     b7c:	f8 01       	movw	r30, r16
     b7e:	84 85       	ldd	r24, Z+12	; 0x0c
     b80:	95 85       	ldd	r25, Z+13	; 0x0d
     b82:	a6 85       	ldd	r26, Z+14	; 0x0e
     b84:	b7 85       	ldd	r27, Z+15	; 0x0f
     b86:	88 3e       	cpi	r24, 0xE8	; 232
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	9f 07       	cpc	r25, r31
     b8c:	a1 05       	cpc	r26, r1
     b8e:	b1 05       	cpc	r27, r1
     b90:	10 f1       	brcs	.+68     	; 0xbd6 <_Z12getAdsParamsv+0x262>
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierAmperage[i];
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierVoltage[i];
	}
	
	for (byte i = 0; i < 3; i++) {
     b92:	d3 94       	inc	r13
     b94:	24 e0       	ldi	r18, 0x04	; 4
     b96:	e2 0e       	add	r14, r18
     b98:	f1 1c       	adc	r15, r1
     b9a:	0c 5f       	subi	r16, 0xFC	; 252
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	d8 12       	cpse	r13, r24
     ba2:	d3 cf       	rjmp	.-90     	; 0xb4a <_Z12getAdsParamsv+0x1d6>
			if (getICLevelByWinding(measuredAmperage[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
				icError.criticalLvlCount[i]++;
			}
		}
	}
}
     ba4:	a5 96       	adiw	r28, 0x25	; 37
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	bf 90       	pop	r11
     bc2:	af 90       	pop	r10
     bc4:	9f 90       	pop	r9
     bc6:	8f 90       	pop	r8
     bc8:	7f 90       	pop	r7
     bca:	6f 90       	pop	r6
     bcc:	5f 90       	pop	r5
     bce:	4f 90       	pop	r4
     bd0:	3f 90       	pop	r3
     bd2:	2f 90       	pop	r2
     bd4:	08 95       	ret
	}
	
	for (byte i = 0; i < 3; i++) {
		if (isFullErrorExists(measuredAmperage, measuredVoltage)) {
			if (getICLevelByWinding(measuredAmperage[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
				icError.criticalLvlCount[i]++;
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	a1 1d       	adc	r26, r1
     bda:	b1 1d       	adc	r27, r1
     bdc:	f8 01       	movw	r30, r16
     bde:	84 87       	std	Z+12, r24	; 0x0c
     be0:	95 87       	std	Z+13, r25	; 0x0d
     be2:	a6 87       	std	Z+14, r26	; 0x0e
     be4:	b7 87       	std	Z+15, r27	; 0x0f
     be6:	d5 cf       	rjmp	.-86     	; 0xb92 <_Z12getAdsParamsv+0x21e>

00000be8 <_Z27lcdPrinRoundedCurErrorLevelh>:
			showWindingCharsValues(2);
			break;
	}
}

void lcdPrinRoundedCurErrorLevel(byte _num) {
     be8:	cf 92       	push	r12
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
	if (icError.curLvl[_num] < 1000) {
     bf0:	24 e0       	ldi	r18, 0x04	; 4
     bf2:	82 9f       	mul	r24, r18
     bf4:	c0 01       	movw	r24, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	fc 01       	movw	r30, r24
     bfa:	e3 53       	subi	r30, 0x33	; 51
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	c0 80       	ld	r12, Z
     c00:	d1 80       	ldd	r13, Z+1	; 0x01
     c02:	e2 80       	ldd	r14, Z+2	; 0x02
     c04:	f3 80       	ldd	r15, Z+3	; 0x03
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	4a e7       	ldi	r20, 0x7A	; 122
     c0c:	54 e4       	ldi	r21, 0x44	; 68
     c0e:	c7 01       	movw	r24, r14
     c10:	b6 01       	movw	r22, r12
     c12:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     c16:	87 ff       	sbrs	r24, 7
     c18:	24 c0       	rjmp	.+72     	; 0xc62 <_Z27lcdPrinRoundedCurErrorLevelh+0x7a>
		lcd.print(round(icError.curLvl[_num]));
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	a9 01       	movw	r20, r18
     c20:	c7 01       	movw	r24, r14
     c22:	b6 01       	movw	r22, r12
     c24:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	5f e3       	ldi	r21, 0x3F	; 63
     c30:	87 fd       	sbrc	r24, 7
     c32:	05 c0       	rjmp	.+10     	; 0xc3e <_Z27lcdPrinRoundedCurErrorLevelh+0x56>
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	0e 94 87 18 	call	0x310e	; 0x310e <__addsf3>
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <_Z27lcdPrinRoundedCurErrorLevelh+0x5e>
     c3e:	c7 01       	movw	r24, r14
     c40:	b6 01       	movw	r22, r12
     c42:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
     c46:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixsfsi>
     c4a:	2a e0       	ldi	r18, 0x0A	; 10
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	ab 01       	movw	r20, r22
     c50:	bc 01       	movw	r22, r24
     c52:	89 eb       	ldi	r24, 0xB9	; 185
     c54:	91 e0       	ldi	r25, 0x01	; 1
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
	}
}

void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
     c5e:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <_ZN5Print5printEli>
	} else {
		lcd.print(999);
     c62:	4a e0       	ldi	r20, 0x0A	; 10
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	67 ee       	ldi	r22, 0xE7	; 231
     c68:	73 e0       	ldi	r23, 0x03	; 3
     c6a:	89 eb       	ldi	r24, 0xB9	; 185
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <_ZN5Print5printEii>
		lcd.print(F("+"));
     c72:	6e ef       	ldi	r22, 0xFE	; 254
     c74:	71 e0       	ldi	r23, 0x01	; 1
     c76:	89 eb       	ldi	r24, 0xB9	; 185
     c78:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
	} else {
		lcd.print(999);
		lcd.print(F("+"));
     c82:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>

00000c86 <_Z19lcdPrintCriticalLvlh>:
	}
}

void lcdPrintCriticalLvl(byte _num) {
	if (icError.criticalLvlCount[_num] < 1000) {
     c86:	24 e0       	ldi	r18, 0x04	; 4
     c88:	82 9f       	mul	r24, r18
     c8a:	c0 01       	movw	r24, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	fc 01       	movw	r30, r24
     c90:	e7 52       	subi	r30, 0x27	; 39
     c92:	fe 4f       	sbci	r31, 0xFE	; 254
     c94:	40 81       	ld	r20, Z
     c96:	51 81       	ldd	r21, Z+1	; 0x01
     c98:	62 81       	ldd	r22, Z+2	; 0x02
     c9a:	73 81       	ldd	r23, Z+3	; 0x03
     c9c:	48 3e       	cpi	r20, 0xE8	; 232
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	58 07       	cpc	r21, r24
     ca2:	61 05       	cpc	r22, r1
     ca4:	71 05       	cpc	r23, r1
     ca6:	30 f4       	brcc	.+12     	; 0xcb4 <_Z19lcdPrintCriticalLvlh+0x2e>
		lcd.print(icError.criticalLvlCount[_num]);
     ca8:	2a e0       	ldi	r18, 0x0A	; 10
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	89 eb       	ldi	r24, 0xB9	; 185
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <_ZN5Print5printEmi>
	} else {
		lcd.print(999);
     cb4:	4a e0       	ldi	r20, 0x0A	; 10
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	67 ee       	ldi	r22, 0xE7	; 231
     cba:	73 e0       	ldi	r23, 0x03	; 3
     cbc:	89 eb       	ldi	r24, 0xB9	; 185
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <_ZN5Print5printEii>
		lcd.print(F("+"));
     cc4:	6c ef       	ldi	r22, 0xFC	; 252
     cc6:	71 e0       	ldi	r23, 0x01	; 1
     cc8:	89 eb       	ldi	r24, 0xB9	; 185
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>

00000cd0 <_Z18showStaticAmperagev>:
	}
}


void showStaticAmperage() {
	lcd.setCursor(3, 0);
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	63 e0       	ldi	r22, 0x03	; 3
     cd4:	89 eb       	ldi	r24, 0xB9	; 185
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("P"));
     cdc:	6a e2       	ldi	r22, 0x2A	; 42
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	89 eb       	ldi	r24, 0xB9	; 185
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	89 eb       	ldi	r24, 0xB9	; 185
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("M"));
     cf4:	68 e2       	ldi	r22, 0x28	; 40
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	89 eb       	ldi	r24, 0xB9	; 185
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>

00000d00 <_Z22showStaticWindingCharsv>:
}


// CR measured|perfect
void showStaticWindingChars() {
	lcd.setCursor(4, 0);
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	64 e0       	ldi	r22, 0x04	; 4
     d04:	89 eb       	ldi	r24, 0xB9	; 185
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("I="));
     d0c:	61 e2       	ldi	r22, 0x21	; 33
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	89 eb       	ldi	r24, 0xB9	; 185
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	89 eb       	ldi	r24, 0xB9	; 185
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("V="));
     d24:	6e e1       	ldi	r22, 0x1E	; 30
     d26:	71 e0       	ldi	r23, 0x01	; 1
     d28:	89 eb       	ldi	r24, 0xB9	; 185
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(8, 1);
     d30:	41 e0       	ldi	r20, 0x01	; 1
     d32:	68 e0       	ldi	r22, 0x08	; 8
     d34:	89 eb       	ldi	r24, 0xB9	; 185
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("E="));
     d3c:	6b e1       	ldi	r22, 0x1B	; 27
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	89 eb       	ldi	r24, 0xB9	; 185
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>

00000d48 <_Z19displayStaticAsModev>:
		lcd.print(F("+"));
	}
}

void displayStaticAsMode() {
	lcd.clear();
     d48:	89 eb       	ldi	r24, 0xB9	; 185
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 0d 13 	call	0x261a	; 0x261a <_ZN17LiquidCrystal_I2C5clearEv>
	switch(modeWork.current) {
     d50:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <modeWork>
     d54:	8e 2f       	mov	r24, r30
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	86 31       	cpi	r24, 0x16	; 22
     d5a:	91 05       	cpc	r25, r1
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <_Z19displayStaticAsModev+0x18>
     d5e:	b4 c0       	rjmp	.+360    	; 0xec8 <_Z19displayStaticAsModev+0x180>
     d60:	fc 01       	movw	r30, r24
     d62:	ec 5c       	subi	r30, 0xCC	; 204
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcd.print(F("Connection type"));
     d6a:	6c ee       	ldi	r22, 0xEC	; 236
     d6c:	71 e0       	ldi	r23, 0x01	; 1
     d6e:	a8 c0       	rjmp	.+336    	; 0xec0 <_Z19displayStaticAsModev+0x178>
		break;
		case MW_SETUP_GAIN_AMPERAGE:
			lcd.print(F("A gain maxV/step"));
     d70:	6b ed       	ldi	r22, 0xDB	; 219
     d72:	71 e0       	ldi	r23, 0x01	; 1
     d74:	a5 c0       	rjmp	.+330    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			lcd.print(F("V gain maxV/step"));
     d76:	6a ec       	ldi	r22, 0xCA	; 202
     d78:	71 e0       	ldi	r23, 0x01	; 1
     d7a:	a2 c0       	rjmp	.+324    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_IMPEDANCE_AB:
			lcd.print(F("R1 AB"));
     d7c:	64 ec       	ldi	r22, 0xC4	; 196
     d7e:	71 e0       	ldi	r23, 0x01	; 1
     d80:	9f c0       	rjmp	.+318    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			lcd.print(F("R2 BC"));
     d82:	6e eb       	ldi	r22, 0xBE	; 190
     d84:	71 e0       	ldi	r23, 0x01	; 1
     d86:	9c c0       	rjmp	.+312    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			lcd.print(F("R3 AC"));
     d88:	68 eb       	ldi	r22, 0xB8	; 184
     d8a:	71 e0       	ldi	r23, 0x01	; 1
     d8c:	99 c0       	rjmp	.+306    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			lcd.print(F("Vm AB"));
     d8e:	62 eb       	ldi	r22, 0xB2	; 178
     d90:	71 e0       	ldi	r23, 0x01	; 1
     d92:	96 c0       	rjmp	.+300    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			lcd.print(F("Vm BC"));
     d94:	6c ea       	ldi	r22, 0xAC	; 172
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	93 c0       	rjmp	.+294    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			lcd.print(F("Vm AC"));
     d9a:	66 ea       	ldi	r22, 0xA6	; 166
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	90 c0       	rjmp	.+288    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			lcd.print(F("Am AB"));
     da0:	60 ea       	ldi	r22, 0xA0	; 160
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	8d c0       	rjmp	.+282    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			lcd.print(F("Am BC"));
     da6:	6a e9       	ldi	r22, 0x9A	; 154
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	8a c0       	rjmp	.+276    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcd.print(F("Am AC"));
     dac:	64 e9       	ldi	r22, 0x94	; 148
     dae:	71 e0       	ldi	r23, 0x01	; 1
     db0:	87 c0       	rjmp	.+270    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcd.print(F("ECount"));
     db2:	6d e8       	ldi	r22, 0x8D	; 141
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	89 eb       	ldi	r24, 0xB9	; 185
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	68 e0       	ldi	r22, 0x08	; 8
     dc2:	89 eb       	ldi	r24, 0xB9	; 185
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AB="));
     dca:	69 e8       	ldi	r22, 0x89	; 137
     dcc:	71 e0       	ldi	r23, 0x01	; 1
     dce:	89 eb       	ldi	r24, 0xB9	; 185
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	89 eb       	ldi	r24, 0xB9	; 185
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("BC="));
     de2:	65 e8       	ldi	r22, 0x85	; 133
     de4:	71 e0       	ldi	r23, 0x01	; 1
     de6:	89 eb       	ldi	r24, 0xB9	; 185
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 1);
     dee:	41 e0       	ldi	r20, 0x01	; 1
     df0:	68 e0       	ldi	r22, 0x08	; 8
     df2:	89 eb       	ldi	r24, 0xB9	; 185
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AC="));
     dfa:	61 e8       	ldi	r22, 0x81	; 129
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	60 c0       	rjmp	.+192    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SHOW_ERRORS:
			lcd.print(F("I1="));
     e00:	6d e7       	ldi	r22, 0x7D	; 125
     e02:	71 e0       	ldi	r23, 0x01	; 1
     e04:	89 eb       	ldi	r24, 0xB9	; 185
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	68 e0       	ldi	r22, 0x08	; 8
     e10:	89 eb       	ldi	r24, 0xB9	; 185
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I2="));
     e18:	69 e7       	ldi	r22, 0x79	; 121
     e1a:	71 e0       	ldi	r23, 0x01	; 1
     e1c:	89 eb       	ldi	r24, 0xB9	; 185
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	89 eb       	ldi	r24, 0xB9	; 185
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I3="));
     e30:	65 e7       	ldi	r22, 0x75	; 117
     e32:	71 e0       	ldi	r23, 0x01	; 1
     e34:	89 eb       	ldi	r24, 0xB9	; 185
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(14, 1);
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	6e e0       	ldi	r22, 0x0E	; 14
     e40:	89 eb       	ldi	r24, 0xB9	; 185
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("e%"));
     e48:	62 e7       	ldi	r22, 0x72	; 114
     e4a:	71 e0       	ldi	r23, 0x01	; 1
     e4c:	39 c0       	rjmp	.+114    	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_SHOW_AMPERAGE_AB:
			lcd.print(F("AB"));
     e4e:	6f e6       	ldi	r22, 0x6F	; 111
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <_Z19displayStaticAsModev+0x116>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_BC:
			lcd.print(F("BC"));
     e54:	6c e6       	ldi	r22, 0x6C	; 108
     e56:	71 e0       	ldi	r23, 0x01	; 1
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <_Z19displayStaticAsModev+0x116>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_AC:
			lcd.print(F("AC"));
     e5a:	69 e6       	ldi	r22, 0x69	; 105
     e5c:	71 e0       	ldi	r23, 0x01	; 1
     e5e:	89 eb       	ldi	r24, 0xB9	; 185
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticAmperage();
     e66:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <_Z18showStaticAmperagev>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			lcd.print(F("AB"));
     e6a:	66 e6       	ldi	r22, 0x66	; 102
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <_Z19displayStaticAsModev+0x132>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			lcd.print(F("BC"));
     e70:	63 e6       	ldi	r22, 0x63	; 99
     e72:	71 e0       	ldi	r23, 0x01	; 1
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <_Z19displayStaticAsModev+0x132>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			lcd.print(F("AC"));
     e76:	60 e6       	ldi	r22, 0x60	; 96
     e78:	71 e0       	ldi	r23, 0x01	; 1
     e7a:	89 eb       	ldi	r24, 0xB9	; 185
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticWindingChars();
     e82:	0c 94 80 06 	jmp	0xd00	; 0xd00 <_Z22showStaticWindingCharsv>
			break;
		case MW_CONTROLL_MEASUREMENT:
			lcd.print(F("Measurement"));
     e86:	64 e5       	ldi	r22, 0x54	; 84
     e88:	71 e0       	ldi	r23, 0x01	; 1
     e8a:	89 eb       	ldi	r24, 0xB9	; 185
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     e92:	41 e0       	ldi	r20, 0x01	; 1
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	89 eb       	ldi	r24, 0xB9	; 185
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("B1=work; B2=stop"));
     e9e:	63 e4       	ldi	r22, 0x43	; 67
     ea0:	71 e0       	ldi	r23, 0x01	; 1
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <_Z19displayStaticAsModev+0x178>
			break;
		case MW_NEED_SETUP:
			lcd.print(F("Oooops!"));
     ea4:	6b e3       	ldi	r22, 0x3B	; 59
     ea6:	71 e0       	ldi	r23, 0x01	; 1
     ea8:	89 eb       	ldi	r24, 0xB9	; 185
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     eb0:	41 e0       	ldi	r20, 0x01	; 1
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	89 eb       	ldi	r24, 0xB9	; 185
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("Setup required"));
     ebc:	6c e2       	ldi	r22, 0x2C	; 44
     ebe:	71 e0       	ldi	r23, 0x01	; 1
     ec0:	89 eb       	ldi	r24, 0xB9	; 185
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
     ec8:	08 95       	ret

00000eca <_Z12lcdClearCellhhh>:
	lcd.print(F("E="));
}

//
// очистка поля значения от старых данных
void lcdClearCell(byte col, byte row, byte rowLength) {                
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	d8 2f       	mov	r29, r24
     ed4:	16 2f       	mov	r17, r22
     ed6:	04 2f       	mov	r16, r20
	lcd.setCursor(col, row);                                        
     ed8:	46 2f       	mov	r20, r22
     eda:	68 2f       	mov	r22, r24
     edc:	89 eb       	ldi	r24, 0xB9	; 185
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	for (byte i = 0; i < rowLength; i++) {                             
     ee4:	c0 e0       	ldi	r28, 0x00	; 0
     ee6:	c0 17       	cp	r28, r16
     ee8:	41 f0       	breq	.+16     	; 0xefa <_Z12lcdClearCellhhh+0x30>
		lcd.print(F(" "));
     eea:	69 e1       	ldi	r22, 0x19	; 25
     eec:	71 e0       	ldi	r23, 0x01	; 1
     eee:	89 eb       	ldi	r24, 0xB9	; 185
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>

//
// очистка поля значения от старых данных
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
     ef6:	cf 5f       	subi	r28, 0xFF	; 255
     ef8:	f6 cf       	rjmp	.-20     	; 0xee6 <_Z12lcdClearCellhhh+0x1c>
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     efa:	41 2f       	mov	r20, r17
     efc:	6d 2f       	mov	r22, r29
     efe:	89 eb       	ldi	r24, 0xB9	; 185
     f00:	91 e0       	ldi	r25, 0x01	; 1
}
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     f0a:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <_ZN17LiquidCrystal_I2C9setCursorEhh>

00000f0e <_Z12showGainInfov>:
	// пока дадим 20% допуска отклонения общей величины
	return !(_error <= _error * 1.20);
}

void showGainInfo() {
	lcdClearCell(0, 1, 16);
     f0e:	40 e1       	ldi	r20, 0x10	; 16
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
	switch((int)setDigit.value) {
     f18:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
     f1c:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
     f20:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
     f24:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
     f28:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixsfsi>
     f2c:	62 30       	cpi	r22, 0x02	; 2
     f2e:	71 05       	cpc	r23, r1
     f30:	b1 f0       	breq	.+44     	; 0xf5e <_Z12showGainInfov+0x50>
     f32:	3c f4       	brge	.+14     	; 0xf42 <_Z12showGainInfov+0x34>
     f34:	61 15       	cp	r22, r1
     f36:	71 05       	cpc	r23, r1
     f38:	61 f0       	breq	.+24     	; 0xf52 <_Z12showGainInfov+0x44>
     f3a:	61 30       	cpi	r22, 0x01	; 1
     f3c:	71 05       	cpc	r23, r1
     f3e:	61 f0       	breq	.+24     	; 0xf58 <_Z12showGainInfov+0x4a>
     f40:	08 95       	ret
     f42:	64 30       	cpi	r22, 0x04	; 4
     f44:	71 05       	cpc	r23, r1
     f46:	89 f0       	breq	.+34     	; 0xf6a <_Z12showGainInfov+0x5c>
     f48:	6c f0       	brlt	.+26     	; 0xf64 <_Z12showGainInfov+0x56>
     f4a:	65 30       	cpi	r22, 0x05	; 5
     f4c:	71 05       	cpc	r23, r1
     f4e:	81 f0       	breq	.+32     	; 0xf70 <_Z12showGainInfov+0x62>
     f50:	08 95       	ret
		case 0:
			lcd.print(F("6.144 0.1875"));
     f52:	66 e5       	ldi	r22, 0x56	; 86
     f54:	72 e0       	ldi	r23, 0x02	; 2
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <_Z12showGainInfov+0x66>
			break;
		case 1:
			lcd.print(F("4.096 0.125"));
     f58:	6a e4       	ldi	r22, 0x4A	; 74
     f5a:	72 e0       	ldi	r23, 0x02	; 2
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <_Z12showGainInfov+0x66>
			break;
		case 2:
			lcd.print(F("2.048 0.0625"));
     f5e:	6d e3       	ldi	r22, 0x3D	; 61
     f60:	72 e0       	ldi	r23, 0x02	; 2
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <_Z12showGainInfov+0x66>
			break;
		case 3:
			lcd.print(F("1.024 0.03125"));
     f64:	6f e2       	ldi	r22, 0x2F	; 47
     f66:	72 e0       	ldi	r23, 0x02	; 2
     f68:	05 c0       	rjmp	.+10     	; 0xf74 <_Z12showGainInfov+0x66>
			break;
		case 4:
			lcd.print(F("0.512 0.015625"));
     f6a:	60 e2       	ldi	r22, 0x20	; 32
     f6c:	72 e0       	ldi	r23, 0x02	; 2
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <_Z12showGainInfov+0x66>
			break;
		case 5:
			lcd.print(F("0.256 0.0078125"));
     f70:	60 e1       	ldi	r22, 0x10	; 16
     f72:	72 e0       	ldi	r23, 0x02	; 2
     f74:	89 eb       	ldi	r24, 0xB9	; 185
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>

00000f7c <_Z17showAmperageCharsh>:
			lcd.print(F("Setup required"));
			break;
	}
}

void showAmperageChars(byte _num) {
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	c8 2f       	mov	r28, r24
	lcdClearCell(6, 0, 9);
     f8e:	49 e0       	ldi	r20, 0x09	; 9
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	86 e0       	ldi	r24, 0x06	; 6
     f94:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
     f98:	d0 e0       	ldi	r29, 0x00	; 0
     f9a:	8e 01       	movw	r16, r28
     f9c:	0d 5f       	subi	r16, 0xFD	; 253
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	f8 01       	movw	r30, r16
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	e0 5e       	subi	r30, 0xE0	; 224
     fac:	fe 4f       	sbci	r31, 0xFE	; 254
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e2       	ldi	r20, 0x20	; 32
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     fc2:	26 96       	adiw	r28, 0x06	; 6
     fc4:	87 fd       	sbrc	r24, 7
     fc6:	15 c0       	rjmp	.+42     	; 0xff2 <_Z17showAmperageCharsh+0x76>
		roundedSign = 9;
	} else if (adsChars.perfectAmperage[_num] < 100) {
     fc8:	fe 01       	movw	r30, r28
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	e0 5e       	subi	r30, 0xE0	; 224
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	48 ec       	ldi	r20, 0xC8	; 200
     fdc:	52 e4       	ldi	r21, 0x42	; 66
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
     fea:	87 fd       	sbrc	r24, 7
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <_Z17showAmperageCharsh+0x7a>
		roundedSign = 8;
	} else {
		roundedSign = 5;
     fee:	25 e0       	ldi	r18, 0x05	; 5
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <_Z17showAmperageCharsh+0x7c>

void showAmperageChars(byte _num) {
	lcdClearCell(6, 0, 9);
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 9;
     ff2:	29 e0       	ldi	r18, 0x09	; 9
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <_Z17showAmperageCharsh+0x7c>
	} else if (adsChars.perfectAmperage[_num] < 100) {
		roundedSign = 8;
     ff6:	28 e0       	ldi	r18, 0x08	; 8
	} else {
		roundedSign = 5;
	}
	lcd.print(adsChars.perfectAmperage[_num], roundedSign);
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	cc 0f       	add	r28, r28
     ffc:	dd 1f       	adc	r29, r29
     ffe:	cc 0f       	add	r28, r28
    1000:	dd 1f       	adc	r29, r29
    1002:	c0 5e       	subi	r28, 0xE0	; 224
    1004:	de 4f       	sbci	r29, 0xFE	; 254
    1006:	48 81       	ld	r20, Y
    1008:	59 81       	ldd	r21, Y+1	; 0x01
    100a:	6a 81       	ldd	r22, Y+2	; 0x02
    100c:	7b 81       	ldd	r23, Y+3	; 0x03
    100e:	89 eb       	ldi	r24, 0xB9	; 185
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEdi>
	
	
	lcdClearCell(5, 1, 9);
    1016:	49 e0       	ldi	r20, 0x09	; 9
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
	if (adsChars.measuredAmperage[_num] < 10) {
    1020:	00 0f       	add	r16, r16
    1022:	11 1f       	adc	r17, r17
    1024:	00 0f       	add	r16, r16
    1026:	11 1f       	adc	r17, r17
    1028:	f8 01       	movw	r30, r16
    102a:	e0 5e       	subi	r30, 0xE0	; 224
    102c:	fe 4f       	sbci	r31, 0xFE	; 254
    102e:	c0 80       	ld	r12, Z
    1030:	d1 80       	ldd	r13, Z+1	; 0x01
    1032:	e2 80       	ldd	r14, Z+2	; 0x02
    1034:	f3 80       	ldd	r15, Z+3	; 0x03
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e2       	ldi	r20, 0x20	; 32
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    1046:	87 fd       	sbrc	r24, 7
    1048:	0c c0       	rjmp	.+24     	; 0x1062 <_Z17showAmperageCharsh+0xe6>
		roundedSign = 9;
	} else if (adsChars.measuredAmperage[_num] < 100) {
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	48 ec       	ldi	r20, 0xC8	; 200
    1050:	52 e4       	ldi	r21, 0x42	; 66
    1052:	c7 01       	movw	r24, r14
    1054:	b6 01       	movw	r22, r12
    1056:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    105a:	87 fd       	sbrc	r24, 7
    105c:	04 c0       	rjmp	.+8      	; 0x1066 <_Z17showAmperageCharsh+0xea>
		roundedSign = 8;
	} else {
		roundedSign = 5;
    105e:	25 e0       	ldi	r18, 0x05	; 5
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <_Z17showAmperageCharsh+0xec>
	lcd.print(adsChars.perfectAmperage[_num], roundedSign);
	
	
	lcdClearCell(5, 1, 9);
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 9;
    1062:	29 e0       	ldi	r18, 0x09	; 9
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <_Z17showAmperageCharsh+0xec>
	} else if (adsChars.measuredAmperage[_num] < 100) {
		roundedSign = 8;
    1066:	28 e0       	ldi	r18, 0x08	; 8
	} else {
		roundedSign = 5;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.measuredAmperage[_num], roundedSign);
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	b7 01       	movw	r22, r14
    106c:	a6 01       	movw	r20, r12
    106e:	89 eb       	ldi	r24, 0xB9	; 185
    1070:	91 e0       	ldi	r25, 0x01	; 1
		} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
		roundedSign = 8;
	} else {
		roundedSign = 5;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.measuredAmperage[_num], roundedSign);
    1082:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <_ZN5Print5printEdi>

00001086 <_Z22showWindingCharsValuesh>:
	lcd.print(F("P"));
	lcd.setCursor(0, 1);
	lcd.print(F("M"));
}

void showWindingCharsValues(byte _num) {
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	c8 2f       	mov	r28, r24
	lcdClearCell(6, 0, 10);
    1094:	4a e0       	ldi	r20, 0x0A	; 10
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	86 e0       	ldi	r24, 0x06	; 6
    109a:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
    109e:	d0 e0       	ldi	r29, 0x00	; 0
    10a0:	fe 01       	movw	r30, r28
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	e4 5d       	subi	r30, 0xD4	; 212
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	c0 80       	ld	r12, Z
    10b0:	d1 80       	ldd	r13, Z+1	; 0x01
    10b2:	e2 80       	ldd	r14, Z+2	; 0x02
    10b4:	f3 80       	ldd	r15, Z+3	; 0x03
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e2       	ldi	r20, 0x20	; 32
    10bc:	51 e4       	ldi	r21, 0x41	; 65
    10be:	c7 01       	movw	r24, r14
    10c0:	b6 01       	movw	r22, r12
    10c2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    10c6:	87 fd       	sbrc	r24, 7
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <_Z22showWindingCharsValuesh+0x5c>
		roundedSign = 8;
	} else if (adsChars.measuredAmperage[_num] < 100) {
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	48 ec       	ldi	r20, 0xC8	; 200
    10d0:	52 e4       	ldi	r21, 0x42	; 66
    10d2:	c7 01       	movw	r24, r14
    10d4:	b6 01       	movw	r22, r12
    10d6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    10da:	87 fd       	sbrc	r24, 7
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <_Z22showWindingCharsValuesh+0x60>
		roundedSign = 7;
	} else {
		roundedSign = 4;
    10de:	24 e0       	ldi	r18, 0x04	; 4
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <_Z22showWindingCharsValuesh+0x62>

void showWindingCharsValues(byte _num) {
	lcdClearCell(6, 0, 10);
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 8;
    10e2:	28 e0       	ldi	r18, 0x08	; 8
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <_Z22showWindingCharsValuesh+0x62>
	} else if (adsChars.measuredAmperage[_num] < 100) {
		roundedSign = 7;
    10e6:	27 e0       	ldi	r18, 0x07	; 7
	} else {
		roundedSign = 4;
	}
	lcd.print(adsChars.measuredAmperage[_num], roundedSign);
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	b7 01       	movw	r22, r14
    10ec:	a6 01       	movw	r20, r12
    10ee:	89 eb       	ldi	r24, 0xB9	; 185
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEdi>
	
	
	lcdClearCell(2, 1, 8);
    10f6:	48 e0       	ldi	r20, 0x08	; 8
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
	if (adsChars.voltage[_num] < 100) {
    1100:	cc 0f       	add	r28, r28
    1102:	dd 1f       	adc	r29, r29
    1104:	cc 0f       	add	r28, r28
    1106:	dd 1f       	adc	r29, r29
    1108:	fe 01       	movw	r30, r28
    110a:	e0 5e       	subi	r30, 0xE0	; 224
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	c0 80       	ld	r12, Z
    1110:	d1 80       	ldd	r13, Z+1	; 0x01
    1112:	e2 80       	ldd	r14, Z+2	; 0x02
    1114:	f3 80       	ldd	r15, Z+3	; 0x03
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	48 ec       	ldi	r20, 0xC8	; 200
    111c:	52 e4       	ldi	r21, 0x42	; 66
    111e:	c7 01       	movw	r24, r14
    1120:	b6 01       	movw	r22, r12
    1122:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    1126:	87 fd       	sbrc	r24, 7
    1128:	0c c0       	rjmp	.+24     	; 0x1142 <_Z22showWindingCharsValuesh+0xbc>
		roundedSign = 2;
	} else if (adsChars.voltage[_num] < 1000) {
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	4a e7       	ldi	r20, 0x7A	; 122
    1130:	54 e4       	ldi	r21, 0x44	; 68
    1132:	c7 01       	movw	r24, r14
    1134:	b6 01       	movw	r22, r12
    1136:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    113a:	87 ff       	sbrs	r24, 7
    113c:	27 c0       	rjmp	.+78     	; 0x118c <_Z22showWindingCharsValuesh+0x106>
		roundedSign = 1;
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <_Z22showWindingCharsValuesh+0xbe>
	lcd.print(adsChars.measuredAmperage[_num], roundedSign);
	
	
	lcdClearCell(2, 1, 8);
	if (adsChars.voltage[_num] < 100) {
		roundedSign = 2;
    1142:	22 e0       	ldi	r18, 0x02	; 2
		roundedSign = 1;
	} else {
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	b7 01       	movw	r22, r14
    1148:	a6 01       	movw	r20, r12
    114a:	89 eb       	ldi	r24, 0xB9	; 185
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEdi>
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
    1152:	45 e0       	ldi	r20, 0x05	; 5
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	8a e0       	ldi	r24, 0x0A	; 10
    1158:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
	lcd.print(icError.curLvl[_num], 1);
    115c:	c3 53       	subi	r28, 0x33	; 51
    115e:	de 4f       	sbci	r29, 0xFE	; 254
    1160:	48 81       	ld	r20, Y
    1162:	59 81       	ldd	r21, Y+1	; 0x01
    1164:	6a 81       	ldd	r22, Y+2	; 0x02
    1166:	7b 81       	ldd	r23, Y+3	; 0x03
    1168:	21 e0       	ldi	r18, 0x01	; 1
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	89 eb       	ldi	r24, 0xB9	; 185
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEdi>
	lcd.print(F("%"));
    1174:	64 e2       	ldi	r22, 0x24	; 36
    1176:	71 e0       	ldi	r23, 0x01	; 1
    1178:	89 eb       	ldi	r24, 0xB9	; 185
    117a:	91 e0       	ldi	r25, 0x01	; 1
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	df 90       	pop	r13
    1186:	cf 90       	pop	r12
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
	lcd.print(icError.curLvl[_num], 1);
	lcd.print(F("%"));
    1188:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
	} else {
		lcd.print(999);
    118c:	4a e0       	ldi	r20, 0x0A	; 10
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	67 ee       	ldi	r22, 0xE7	; 231
    1192:	73 e0       	ldi	r23, 0x03	; 3
    1194:	89 eb       	ldi	r24, 0xB9	; 185
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <_ZN5Print5printEii>
		lcd.print(F("+"));
    119c:	66 e2       	ldi	r22, 0x26	; 38
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	89 eb       	ldi	r24, 0xB9	; 185
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    11a8:	d4 cf       	rjmp	.-88     	; 0x1152 <_Z22showWindingCharsValuesh+0xcc>

000011aa <_Z13displayAsModev>:
			break;
	}
}

void displayAsMode() {
	if (modeWork.current != modeWork.prev) {
    11aa:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    11ae:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <modeWork+0x1>
    11b2:	89 17       	cp	r24, r25
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <_Z13displayAsModev+0x1a>
		modeWork.prev = modeWork.current;
    11b6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <modeWork+0x1>
		lcdUpdateScreen = true;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
		displayStaticAsMode();
    11c0:	0e 94 a4 06 	call	0xd48	; 0xd48 <_Z19displayStaticAsModev>
	}
	if (!lcdUpdateScreen) {
    11c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <lcdUpdateScreen>
    11c8:	88 23       	and	r24, r24
    11ca:	09 f4       	brne	.+2      	; 0x11ce <_Z13displayAsModev+0x24>
    11cc:	99 c0       	rjmp	.+306    	; 0x1300 <_Z13displayAsModev+0x156>
		return;
	} 
	lcdUpdateScreen = false;
    11ce:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <lcdUpdateScreen>
	
	switch(modeWork.current) {
    11d2:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <modeWork>
    11d6:	8e 2f       	mov	r24, r30
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	fc 01       	movw	r30, r24
    11dc:	31 97       	sbiw	r30, 0x01	; 1
    11de:	e4 31       	cpi	r30, 0x14	; 20
    11e0:	f1 05       	cpc	r31, r1
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <_Z13displayAsModev+0x3c>
    11e4:	8d c0       	rjmp	.+282    	; 0x1300 <_Z13displayAsModev+0x156>
    11e6:	e6 5b       	subi	r30, 0xB6	; 182
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcdClearCell(0, 1, 8);
    11ee:	48 e0       	ldi	r20, 0x08	; 8
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			if (setDigit.value == CONNECTION_TYPE_STAR) {
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	a9 01       	movw	r20, r18
    11fe:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    1202:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    1206:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    120a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    120e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    1212:	81 11       	cpse	r24, r1
    1214:	03 c0       	rjmp	.+6      	; 0x121c <_Z13displayAsModev+0x72>
				lcd.print(F("Star"));
    1216:	6b e0       	ldi	r22, 0x0B	; 11
    1218:	72 e0       	ldi	r23, 0x02	; 2
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <_Z13displayAsModev+0x76>
			} else {
				lcd.print(F("Triangle"));
    121c:	62 e0       	ldi	r22, 0x02	; 2
    121e:	72 e0       	ldi	r23, 0x02	; 2
    1220:	89 eb       	ldi	r24, 0xB9	; 185
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			}
			break;
		case MW_SETUP_GAIN_AMPERAGE:
		case MW_SETUP_GAIN_VOLTAGE:
			showGainInfo();
    1228:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <_Z12showGainInfov>
		case MW_SETUP_MULT_VOLTAGE_BC:
		case MW_SETUP_MULT_VOLTAGE_AC:
		case MW_SETUP_MULT_AMPERAGE_AB:
		case MW_SETUP_MULT_AMPERAGE_BC:
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcdClearCell(7, 0, 8);
    122c:	48 e0       	ldi	r20, 0x08	; 8
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	87 e0       	ldi	r24, 0x07	; 7
    1232:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			lcd.print(F("x"));
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	72 e0       	ldi	r23, 0x02	; 2
    123a:	89 eb       	ldi	r24, 0xB9	; 185
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(setDigit.curMultiplier, 3);
    1242:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <setDigit+0x4>
    1246:	50 91 ca 01 	lds	r21, 0x01CA	; 0x8001ca <setDigit+0x5>
    124a:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <setDigit+0x6>
    124e:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <setDigit+0x7>
    1252:	23 e0       	ldi	r18, 0x03	; 3
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	89 eb       	ldi	r24, 0xB9	; 185
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEdi>
			lcdClearCell(0, 1, 16);
    125e:	40 e1       	ldi	r20, 0x10	; 16
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			lcd.print(setDigit.value, 3);
    1268:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    126c:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    1270:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    1274:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    1278:	23 e0       	ldi	r18, 0x03	; 3
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	89 eb       	ldi	r24, 0xB9	; 185
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <_ZN5Print5printEdi>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcdClearCell(11, 0, 4);
    1284:	44 e0       	ldi	r20, 0x04	; 4
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	8b e0       	ldi	r24, 0x0B	; 11
    128a:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(0);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	0e 94 43 06 	call	0xc86	; 0xc86 <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(3, 1, 4);
    1294:	44 e0       	ldi	r20, 0x04	; 4
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(1);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	0e 94 43 06 	call	0xc86	; 0xc86 <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(11, 1, 4);
    12a4:	44 e0       	ldi	r20, 0x04	; 4
    12a6:	61 e0       	ldi	r22, 0x01	; 1
    12a8:	8b e0       	ldi	r24, 0x0B	; 11
    12aa:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(2);
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	0c 94 43 06 	jmp	0xc86	; 0xc86 <_Z19lcdPrintCriticalLvlh>
			break;
		case MW_SHOW_ERRORS:
			lcdClearCell(3, 0, 5);
    12b4:	45 e0       	ldi	r20, 0x05	; 5
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(0);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(11, 0, 5);
    12c4:	45 e0       	ldi	r20, 0x05	; 5
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	8b e0       	ldi	r24, 0x0B	; 11
    12ca:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(1);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(3, 1, 5);
    12d4:	45 e0       	ldi	r20, 0x05	; 5
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	0e 94 65 07 	call	0xeca	; 0xeca <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(2);
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <_Z27lcdPrinRoundedCurErrorLevelh>
			break;
		case MW_SHOW_AMPERAGE_AB:
			showAmperageChars(0);
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <_Z13displayAsModev+0x140>
			break;
		case MW_SHOW_AMPERAGE_BC:
			showAmperageChars(1);
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <_Z17showAmperageCharsh>
			break;
		case MW_SHOW_AMPERAGE_AC:
			showAmperageChars(2);
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	fc cf       	rjmp	.-8      	; 0x12ea <_Z13displayAsModev+0x140>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			showWindingCharsValues(0);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <_Z13displayAsModev+0x152>
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			showWindingCharsValues(1);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <_Z13displayAsModev+0x152>
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			showWindingCharsValues(2);
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	0c 94 43 08 	jmp	0x1086	; 0x1086 <_Z22showWindingCharsValuesh>
    1300:	08 95       	ret

00001302 <loop>:
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
	}
}

void loop() {
    1302:	2f 92       	push	r2
    1304:	3f 92       	push	r3
    1306:	4f 92       	push	r4
    1308:	5f 92       	push	r5
    130a:	6f 92       	push	r6
    130c:	7f 92       	push	r7
    130e:	8f 92       	push	r8
    1310:	9f 92       	push	r9
    1312:	af 92       	push	r10
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	27 97       	sbiw	r28, 0x07	; 7
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
	button1Callback.tick();
    1336:	85 e3       	ldi	r24, 0x35	; 53
    1338:	92 e0       	ldi	r25, 0x02	; 2
    133a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN9OneButton4tickEv>
	button2Callback.tick();
    133e:	84 e1       	ldi	r24, 0x14	; 20
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN9OneButton4tickEv>
	displayAsMode();
    1346:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_Z13displayAsModev>
	if(settings.isReadyToWork == MM_WORK) {
    134a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <settings>
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <loop+0x52>
    1352:	71 c1       	rjmp	.+738    	; 0x1636 <loop+0x334>
		getAdsParams();
    1354:	0e 94 ba 04 	call	0x974	; 0x974 <_Z12getAdsParamsv>
		if (adsChars.currentMeasurement < adsChars.measurementsCount) {
    1358:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <adsChars+0x3d>
    135c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <adsChars+0x3c>
    1360:	89 17       	cp	r24, r25
    1362:	20 f4       	brcc	.+8      	; 0x136c <loop+0x6a>
			adsChars.currentMeasurement++;
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <adsChars+0x3d>
    136a:	65 c1       	rjmp	.+714    	; 0x1636 <loop+0x334>
		} else {
			lcdUpdateScreen = true;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
    1372:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <millis>
    1376:	00 91 b2 01 	lds	r16, 0x01B2	; 0x8001b2 <__data_end>
    137a:	10 91 b3 01 	lds	r17, 0x01B3	; 0x8001b3 <__data_end+0x1>
    137e:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <__data_end+0x2>
    1382:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <__data_end+0x3>
    1386:	2b 01       	movw	r4, r22
    1388:	3c 01       	movw	r6, r24
    138a:	40 1a       	sub	r4, r16
    138c:	51 0a       	sbc	r5, r17
    138e:	62 0a       	sbc	r6, r18
    1390:	73 0a       	sbc	r7, r19
    1392:	20 e2       	ldi	r18, 0x20	; 32
    1394:	31 e0       	ldi	r19, 0x01	; 1
    1396:	3f 83       	std	Y+7, r19	; 0x07
    1398:	2e 83       	std	Y+6, r18	; 0x06
    139a:	07 ee       	ldi	r16, 0xE7	; 231
    139c:	11 e0       	ldi	r17, 0x01	; 1
    139e:	8d ec       	ldi	r24, 0xCD	; 205
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	9d 83       	std	Y+5, r25	; 0x05
    13a4:	8c 83       	std	Y+4, r24	; 0x04
    13a6:	1c 01       	movw	r2, r24
    13a8:	e1 e0       	ldi	r30, 0x01	; 1
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	fb 83       	std	Y+3, r31	; 0x03
    13ae:	ea 83       	std	Y+2, r30	; 0x02
			for (byte i = 0; i < 3; i++) {
    13b0:	19 82       	std	Y+1, r1	; 0x01
				adsChars.voltage[i] = adsChars.sumVoltage[i] / adsChars.measurementsCount * ads.voltageStep * settings.multiplierVoltage[i];
    13b2:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <adsChars+0x3c>
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 a2 19 	call	0x3344	; 0x3344 <__floatsisf>
    13c0:	6b 01       	movw	r12, r22
    13c2:	7c 01       	movw	r14, r24
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	ee 81       	ldd	r30, Y+6	; 0x06
    13ca:	ff 81       	ldd	r31, Y+7	; 0x07
    13cc:	64 a1       	ldd	r22, Z+36	; 0x24
    13ce:	75 a1       	ldd	r23, Z+37	; 0x25
    13d0:	86 a1       	ldd	r24, Z+38	; 0x26
    13d2:	97 a1       	ldd	r25, Z+39	; 0x27
    13d4:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
    13d8:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_start+0x18>
    13dc:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_start+0x19>
    13e0:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <__data_start+0x1a>
    13e4:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <__data_start+0x1b>
    13e8:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    13ec:	f8 01       	movw	r30, r16
    13ee:	25 89       	ldd	r18, Z+21	; 0x15
    13f0:	36 89       	ldd	r19, Z+22	; 0x16
    13f2:	47 89       	ldd	r20, Z+23	; 0x17
    13f4:	50 8d       	ldd	r21, Z+24	; 0x18
    13f6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    13fa:	4b 01       	movw	r8, r22
    13fc:	5c 01       	movw	r10, r24
    13fe:	ee 81       	ldd	r30, Y+6	; 0x06
    1400:	ff 81       	ldd	r31, Y+7	; 0x07
    1402:	60 83       	st	Z, r22
    1404:	71 83       	std	Z+1, r23	; 0x01
    1406:	82 83       	std	Z+2, r24	; 0x02
    1408:	93 83       	std	Z+3, r25	; 0x03
				adsChars.measuredAmperage[i] = adsChars.sumMeasuredAmperage[i] / adsChars.measurementsCount * ads.amperageStep * settings.multiplierAmperage[i];
    140a:	a7 01       	movw	r20, r14
    140c:	96 01       	movw	r18, r12
    140e:	60 a9       	ldd	r22, Z+48	; 0x30
    1410:	71 a9       	ldd	r23, Z+49	; 0x31
    1412:	82 a9       	ldd	r24, Z+50	; 0x32
    1414:	93 a9       	ldd	r25, Z+51	; 0x33
    1416:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
    141a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_start+0x1c>
    141e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_start+0x1d>
    1422:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_start+0x1e>
    1426:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <__data_start+0x1f>
    142a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    142e:	f8 01       	movw	r30, r16
    1430:	21 a1       	ldd	r18, Z+33	; 0x21
    1432:	32 a1       	ldd	r19, Z+34	; 0x22
    1434:	43 a1       	ldd	r20, Z+35	; 0x23
    1436:	54 a1       	ldd	r21, Z+36	; 0x24
    1438:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    143c:	6b 01       	movw	r12, r22
    143e:	7c 01       	movw	r14, r24
    1440:	ee 81       	ldd	r30, Y+6	; 0x06
    1442:	ff 81       	ldd	r31, Y+7	; 0x07
    1444:	64 87       	std	Z+12, r22	; 0x0c
    1446:	75 87       	std	Z+13, r23	; 0x0d
    1448:	86 87       	std	Z+14, r24	; 0x0e
    144a:	97 87       	std	Z+15, r25	; 0x0f
				adsChars.perfectAmperage[i] = adsChars.voltage[i] / settings.impedance[i];
    144c:	f8 01       	movw	r30, r16
    144e:	26 81       	ldd	r18, Z+6	; 0x06
    1450:	37 81       	ldd	r19, Z+7	; 0x07
    1452:	40 85       	ldd	r20, Z+8	; 0x08
    1454:	51 85       	ldd	r21, Z+9	; 0x09
    1456:	c5 01       	movw	r24, r10
    1458:	b4 01       	movw	r22, r8
    145a:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
    145e:	ee 81       	ldd	r30, Y+6	; 0x06
    1460:	ff 81       	ldd	r31, Y+7	; 0x07
    1462:	60 8f       	std	Z+24, r22	; 0x18
    1464:	71 8f       	std	Z+25, r23	; 0x19
    1466:	82 8f       	std	Z+26, r24	; 0x1a
    1468:	93 8f       	std	Z+27, r25	; 0x1b
				icError.curLvl[i] = getICLevelByWinding(adsChars.measuredAmperage[i], i);
    146a:	49 81       	ldd	r20, Y+1	; 0x01
    146c:	c7 01       	movw	r24, r14
    146e:	b6 01       	movw	r22, r12
    1470:	0e 94 84 03 	call	0x708	; 0x708 <_Z19getICLevelByWindingfh>
    1474:	f1 01       	movw	r30, r2
    1476:	60 83       	st	Z, r22
    1478:	71 83       	std	Z+1, r23	; 0x01
    147a:	82 83       	std	Z+2, r24	; 0x02
    147c:	93 83       	std	Z+3, r25	; 0x03
				if (canSerial) {
    147e:	f9 ee       	ldi	r31, 0xE9	; 233
    1480:	4f 16       	cp	r4, r31
    1482:	f3 e0       	ldi	r31, 0x03	; 3
    1484:	5f 06       	cpc	r5, r31
    1486:	61 04       	cpc	r6, r1
    1488:	71 04       	cpc	r7, r1
    148a:	08 f4       	brcc	.+2      	; 0x148e <loop+0x18c>
    148c:	64 c0       	rjmp	.+200    	; 0x1556 <loop+0x254>
					Serial.print(F("Winding |")); Serial.print((i + 1)); Serial.println(F("|"));
    148e:	62 ee       	ldi	r22, 0xE2	; 226
    1490:	72 e0       	ldi	r23, 0x02	; 2
    1492:	84 e2       	ldi	r24, 0x24	; 36
    1494:	93 e0       	ldi	r25, 0x03	; 3
    1496:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    149a:	4a e0       	ldi	r20, 0x0A	; 10
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	6a 81       	ldd	r22, Y+2	; 0x02
    14a0:	7b 81       	ldd	r23, Y+3	; 0x03
    14a2:	84 e2       	ldi	r24, 0x24	; 36
    14a4:	93 e0       	ldi	r25, 0x03	; 3
    14a6:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <_ZN5Print5printEii>
    14aa:	60 ee       	ldi	r22, 0xE0	; 224
    14ac:	72 e0       	ldi	r23, 0x02	; 2
    14ae:	84 e2       	ldi	r24, 0x24	; 36
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F("measured voltage = "));  Serial.println(adsChars.voltage[i], 10);
    14b6:	6c ec       	ldi	r22, 0xCC	; 204
    14b8:	72 e0       	ldi	r23, 0x02	; 2
    14ba:	84 e2       	ldi	r24, 0x24	; 36
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    14c2:	ee 81       	ldd	r30, Y+6	; 0x06
    14c4:	ff 81       	ldd	r31, Y+7	; 0x07
    14c6:	40 81       	ld	r20, Z
    14c8:	51 81       	ldd	r21, Z+1	; 0x01
    14ca:	62 81       	ldd	r22, Z+2	; 0x02
    14cc:	73 81       	ldd	r23, Z+3	; 0x03
    14ce:	2a e0       	ldi	r18, 0x0A	; 10
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	84 e2       	ldi	r24, 0x24	; 36
    14d4:	93 e0       	ldi	r25, 0x03	; 3
    14d6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
					Serial.print(F("measured amperage = "));  Serial.println(adsChars.measuredAmperage[i], 10);
    14da:	67 eb       	ldi	r22, 0xB7	; 183
    14dc:	72 e0       	ldi	r23, 0x02	; 2
    14de:	84 e2       	ldi	r24, 0x24	; 36
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    14e6:	ee 81       	ldd	r30, Y+6	; 0x06
    14e8:	ff 81       	ldd	r31, Y+7	; 0x07
    14ea:	44 85       	ldd	r20, Z+12	; 0x0c
    14ec:	55 85       	ldd	r21, Z+13	; 0x0d
    14ee:	66 85       	ldd	r22, Z+14	; 0x0e
    14f0:	77 85       	ldd	r23, Z+15	; 0x0f
    14f2:	2a e0       	ldi	r18, 0x0A	; 10
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	84 e2       	ldi	r24, 0x24	; 36
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
					Serial.print(F("perfect amperage = ")); Serial.println(adsChars.perfectAmperage[i], 10);
    14fe:	63 ea       	ldi	r22, 0xA3	; 163
    1500:	72 e0       	ldi	r23, 0x02	; 2
    1502:	84 e2       	ldi	r24, 0x24	; 36
    1504:	93 e0       	ldi	r25, 0x03	; 3
    1506:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    150a:	ee 81       	ldd	r30, Y+6	; 0x06
    150c:	ff 81       	ldd	r31, Y+7	; 0x07
    150e:	40 8d       	ldd	r20, Z+24	; 0x18
    1510:	51 8d       	ldd	r21, Z+25	; 0x19
    1512:	62 8d       	ldd	r22, Z+26	; 0x1a
    1514:	73 8d       	ldd	r23, Z+27	; 0x1b
    1516:	2a e0       	ldi	r18, 0x0A	; 10
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	84 e2       	ldi	r24, 0x24	; 36
    151c:	93 e0       	ldi	r25, 0x03	; 3
    151e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
					Serial.print(F("error = ")); Serial.println(icError.curLvl[i]);
    1522:	6a e9       	ldi	r22, 0x9A	; 154
    1524:	72 e0       	ldi	r23, 0x02	; 2
    1526:	84 e2       	ldi	r24, 0x24	; 36
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    152e:	f1 01       	movw	r30, r2
    1530:	40 81       	ld	r20, Z
    1532:	51 81       	ldd	r21, Z+1	; 0x01
    1534:	62 81       	ldd	r22, Z+2	; 0x02
    1536:	73 81       	ldd	r23, Z+3	; 0x03
    1538:	22 e0       	ldi	r18, 0x02	; 2
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	84 e2       	ldi	r24, 0x24	; 36
    153e:	93 e0       	ldi	r25, 0x03	; 3
    1540:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
					if (i != 2) {
    1544:	f9 81       	ldd	r31, Y+1	; 0x01
    1546:	f2 30       	cpi	r31, 0x02	; 2
    1548:	31 f0       	breq	.+12     	; 0x1556 <loop+0x254>
						Serial.println(F("---"));
    154a:	66 e9       	ldi	r22, 0x96	; 150
    154c:	72 e0       	ldi	r23, 0x02	; 2
    154e:	84 e2       	ldi	r24, 0x24	; 36
    1550:	93 e0       	ldi	r25, 0x03	; 3
    1552:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (adsChars.currentMeasurement < adsChars.measurementsCount) {
			adsChars.currentMeasurement++;
		} else {
			lcdUpdateScreen = true;
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
			for (byte i = 0; i < 3; i++) {
    1556:	29 81       	ldd	r18, Y+1	; 0x01
    1558:	2f 5f       	subi	r18, 0xFF	; 255
    155a:	29 83       	std	Y+1, r18	; 0x01
    155c:	8e 81       	ldd	r24, Y+6	; 0x06
    155e:	9f 81       	ldd	r25, Y+7	; 0x07
    1560:	04 96       	adiw	r24, 0x04	; 4
    1562:	9f 83       	std	Y+7, r25	; 0x07
    1564:	8e 83       	std	Y+6, r24	; 0x06
    1566:	0c 5f       	subi	r16, 0xFC	; 252
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	94 e0       	ldi	r25, 0x04	; 4
    156c:	29 0e       	add	r2, r25
    156e:	31 1c       	adc	r3, r1
    1570:	ea 81       	ldd	r30, Y+2	; 0x02
    1572:	fb 81       	ldd	r31, Y+3	; 0x03
    1574:	31 96       	adiw	r30, 0x01	; 1
    1576:	fb 83       	std	Y+3, r31	; 0x03
    1578:	ea 83       	std	Y+2, r30	; 0x02
    157a:	23 30       	cpi	r18, 0x03	; 3
    157c:	09 f0       	breq	.+2      	; 0x1580 <loop+0x27e>
    157e:	19 cf       	rjmp	.-462    	; 0x13b2 <loop+0xb0>
					if (i != 2) {
						Serial.println(F("---"));
					}
				}
			}
			if (canSerial) {
    1580:	f9 ee       	ldi	r31, 0xE9	; 233
    1582:	4f 16       	cp	r4, r31
    1584:	f3 e0       	ldi	r31, 0x03	; 3
    1586:	5f 06       	cpc	r5, r31
    1588:	61 04       	cpc	r6, r1
    158a:	71 04       	cpc	r7, r1
    158c:	80 f0       	brcs	.+32     	; 0x15ae <loop+0x2ac>
				Serial.println(F("---end---"));
    158e:	6c e8       	ldi	r22, 0x8C	; 140
    1590:	72 e0       	ldi	r23, 0x02	; 2
    1592:	84 e2       	ldi	r24, 0x24	; 36
    1594:	93 e0       	ldi	r25, 0x03	; 3
    1596:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
				serialUpdateStamp = millis();
    159a:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <millis>
    159e:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <__data_end>
    15a2:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <__data_end+0x1>
    15a6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end+0x2>
    15aa:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <__data_end+0x3>
			}
			initAvgVars();
    15ae:	0e 94 c0 02 	call	0x580	; 0x580 <_Z11initAvgVarsv>
			
			bool isHasIC = false;
			for (byte i = 0; i < 3; i++) {
				if (icError.curLvl[i] > 100 - settings.connectionType) {
    15b2:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <settings+0x1>
    15b6:	64 e6       	ldi	r22, 0x64	; 100
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	68 1b       	sub	r22, r24
    15bc:	71 09       	sbc	r23, r1
    15be:	07 2e       	mov	r0, r23
    15c0:	00 0c       	add	r0, r0
    15c2:	88 0b       	sbc	r24, r24
    15c4:	99 0b       	sbc	r25, r25
    15c6:	0e 94 a2 19 	call	0x3344	; 0x3344 <__floatsisf>
    15ca:	6b 01       	movw	r12, r22
    15cc:	7c 01       	movw	r14, r24
    15ce:	ec 81       	ldd	r30, Y+4	; 0x04
    15d0:	fd 81       	ldd	r31, Y+5	; 0x05
    15d2:	61 91       	ld	r22, Z+
    15d4:	71 91       	ld	r23, Z+
    15d6:	81 91       	ld	r24, Z+
    15d8:	91 91       	ld	r25, Z+
    15da:	fd 83       	std	Y+5, r31	; 0x05
    15dc:	ec 83       	std	Y+4, r30	; 0x04
    15de:	a7 01       	movw	r20, r14
    15e0:	96 01       	movw	r18, r12
    15e2:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	4c f4       	brge	.+18     	; 0x15fc <loop+0x2fa>
					icError.hasAsymmetry = isFullErrorExists(adsChars.measuredAmperage, adsChars.voltage);
    15ea:	60 e2       	ldi	r22, 0x20	; 32
    15ec:	71 e0       	ldi	r23, 0x01	; 1
    15ee:	8c e2       	ldi	r24, 0x2C	; 44
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_Z17isFullErrorExistsPfS_>
    15f6:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <icError+0x18>
					isHasIC = true;
					break;
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <loop+0x308>
				serialUpdateStamp = millis();
			}
			initAvgVars();
			
			bool isHasIC = false;
			for (byte i = 0; i < 3; i++) {
    15fc:	29 ed       	ldi	r18, 0xD9	; 217
    15fe:	31 e0       	ldi	r19, 0x01	; 1
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	28 17       	cp	r18, r24
    1606:	39 07       	cpc	r19, r25
    1608:	11 f7       	brne	.-60     	; 0x15ce <loop+0x2cc>
					icError.hasAsymmetry = isFullErrorExists(adsChars.measuredAmperage, adsChars.voltage);
					isHasIC = true;
					break;
				}
			}
			if (!icError.hasAsymmetry) {
    160a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <icError+0x18>
    160e:	88 23       	and	r24, r24
    1610:	91 f0       	breq	.+36     	; 0x1636 <loop+0x334>
				isHasIC = false;
			} else {
				settings.isReadyToWork = MM_STOP;
    1612:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <settings>
				
				Serial.println(F("WARNING!!! Measurement Stoped IC EXISTS!"));
    1616:	63 e6       	ldi	r22, 0x63	; 99
    1618:	72 e0       	ldi	r23, 0x02	; 2
    161a:	84 e2       	ldi	r24, 0x24	; 36
    161c:	93 e0       	ldi	r25, 0x03	; 3
    161e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
				modeWork.current = MW_SHOW_ERRORS_COUNTERS;
    1622:	8d e0       	ldi	r24, 0x0D	; 13
    1624:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
				digitalWrite(BEEPER, HIGH);
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	80 e1       	ldi	r24, 0x10	; 16
    162c:	0e 94 4b 20 	call	0x4096	; 0x4096 <digitalWrite>
				icError.hasIC = true;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <icError+0x19>
			}
		}
	} 
}
    1636:	27 96       	adiw	r28, 0x07	; 7
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	bf 90       	pop	r11
    1654:	af 90       	pop	r10
    1656:	9f 90       	pop	r9
    1658:	8f 90       	pop	r8
    165a:	7f 90       	pop	r7
    165c:	6f 90       	pop	r6
    165e:	5f 90       	pop	r5
    1660:	4f 90       	pop	r4
    1662:	3f 90       	pop	r3
    1664:	2f 90       	pop	r2
    1666:	08 95       	ret

00001668 <_Z31getCurrentWindingImpedanceValuev>:
	}
	lcd.setCursor(col, row);                                          
}


float getCurrentWindingImpedanceValue() {
    1668:	4f 92       	push	r4
    166a:	5f 92       	push	r5
    166c:	6f 92       	push	r6
    166e:	7f 92       	push	r7
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	00 d0       	rcall	.+0      	; 0x1688 <_Z31getCurrentWindingImpedanceValuev+0x20>
    1688:	00 d0       	rcall	.+0      	; 0x168a <_Z31getCurrentWindingImpedanceValuev+0x22>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	byte _windingIndex = 0;
	float _voltage = 0;
	float _amperage = 0;
	
	switch(modeWork.current){
    168e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    1692:	8b 30       	cpi	r24, 0x0B	; 11
    1694:	21 f0       	breq	.+8      	; 0x169e <_Z31getCurrentWindingImpedanceValuev+0x36>
    1696:	8c 30       	cpi	r24, 0x0C	; 12
    1698:	21 f4       	brne	.+8      	; 0x16a2 <_Z31getCurrentWindingImpedanceValuev+0x3a>
		break;
		case MW_SETUP_IMPEDANCE_BC:
		_windingIndex = 1;
		break;
		case MW_SETUP_IMPEDANCE_AC:
		_windingIndex = 2;
    169a:	12 e0       	ldi	r17, 0x02	; 2
		break;
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <_Z31getCurrentWindingImpedanceValuev+0x3c>
	switch(modeWork.current){
		case MW_SETUP_IMPEDANCE_AB:
		_windingIndex = 0;
		break;
		case MW_SETUP_IMPEDANCE_BC:
		_windingIndex = 1;
    169e:	11 e0       	ldi	r17, 0x01	; 1
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <_Z31getCurrentWindingImpedanceValuev+0x3c>
	lcd.setCursor(col, row);                                          
}


float getCurrentWindingImpedanceValue() {
	byte _windingIndex = 0;
    16a2:	10 e0       	ldi	r17, 0x00	; 0
		case MW_SETUP_IMPEDANCE_AC:
		_windingIndex = 2;
		break;
	}

	_voltage = adsVoltage.readADC_SingleEnded(_windingIndex);
    16a4:	61 2f       	mov	r22, r17
    16a6:	8b e5       	ldi	r24, 0x5B	; 91
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	0e 94 6d 12 	call	0x24da	; 0x24da <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
	_amperage = adsAmperage.readADC_SingleEnded(_windingIndex);
    16b2:	61 2f       	mov	r22, r17
    16b4:	86 e5       	ldi	r24, 0x56	; 86
    16b6:	92 e0       	ldi	r25, 0x02	; 2
    16b8:	0e 94 6d 12 	call	0x24da	; 0x24da <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    16bc:	bc 01       	movw	r22, r24
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatunsisf>
    16c6:	6b 01       	movw	r12, r22
    16c8:	7c 01       	movw	r14, r24

	_voltage *= ads.voltageStep * settings.multiplierVoltage[_windingIndex];
    16ca:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <__data_start+0x18>
    16ce:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <__data_start+0x19>
    16d2:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <__data_start+0x1a>
    16d6:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <__data_start+0x1b>
    16da:	24 e0       	ldi	r18, 0x04	; 4
    16dc:	12 9f       	mul	r17, r18
    16de:	f0 01       	movw	r30, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	e9 51       	subi	r30, 0x19	; 25
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	45 88       	ldd	r4, Z+21	; 0x15
    16e8:	56 88       	ldd	r5, Z+22	; 0x16
    16ea:	67 88       	ldd	r6, Z+23	; 0x17
    16ec:	70 8c       	ldd	r7, Z+24	; 0x18
	_amperage *= ads.amperageStep * settings.multiplierAmperage[_windingIndex];;
    16ee:	21 a1       	ldd	r18, Z+33	; 0x21
    16f0:	32 a1       	ldd	r19, Z+34	; 0x22
    16f2:	43 a1       	ldd	r20, Z+35	; 0x23
    16f4:	54 a1       	ldd	r21, Z+36	; 0x24
    16f6:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <__data_start+0x1c>
    16fa:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <__data_start+0x1d>
    16fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_start+0x1e>
    1702:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_start+0x1f>
    1706:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    170a:	a7 01       	movw	r20, r14
    170c:	96 01       	movw	r18, r12
    170e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    1712:	6b 01       	movw	r12, r22
    1714:	7c 01       	movw	r14, r24
	
	return _amperage == 0? 0: _voltage / _amperage;
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    1720:	88 23       	and	r24, r24
    1722:	e1 f0       	breq	.+56     	; 0x175c <_Z31getCurrentWindingImpedanceValuev+0xf4>
		case MW_SETUP_IMPEDANCE_AC:
		_windingIndex = 2;
		break;
	}

	_voltage = adsVoltage.readADC_SingleEnded(_windingIndex);
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	3a 81       	ldd	r19, Y+2	; 0x02
    1728:	b9 01       	movw	r22, r18
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatunsisf>
    1732:	69 83       	std	Y+1, r22	; 0x01
    1734:	7a 83       	std	Y+2, r23	; 0x02
    1736:	8b 83       	std	Y+3, r24	; 0x03
    1738:	9c 83       	std	Y+4, r25	; 0x04
	_amperage = adsAmperage.readADC_SingleEnded(_windingIndex);

	_voltage *= ads.voltageStep * settings.multiplierVoltage[_windingIndex];
	_amperage *= ads.amperageStep * settings.multiplierAmperage[_windingIndex];;
	
	return _amperage == 0? 0: _voltage / _amperage;
    173a:	a3 01       	movw	r20, r6
    173c:	92 01       	movw	r18, r4
    173e:	c5 01       	movw	r24, r10
    1740:	b4 01       	movw	r22, r8
    1742:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    1746:	29 81       	ldd	r18, Y+1	; 0x01
    1748:	3a 81       	ldd	r19, Y+2	; 0x02
    174a:	4b 81       	ldd	r20, Y+3	; 0x03
    174c:	5c 81       	ldd	r21, Y+4	; 0x04
    174e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    1752:	a7 01       	movw	r20, r14
    1754:	96 01       	movw	r18, r12
    1756:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <_Z31getCurrentWindingImpedanceValuev+0xfa>
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	cb 01       	movw	r24, r22
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	bf 90       	pop	r11
    177a:	af 90       	pop	r10
    177c:	9f 90       	pop	r9
    177e:	8f 90       	pop	r8
    1780:	7f 90       	pop	r7
    1782:	6f 90       	pop	r6
    1784:	5f 90       	pop	r5
    1786:	4f 90       	pop	r4
    1788:	08 95       	ret

0000178a <_Z21button1LongPressStartv>:
		settings.isReadyToWork = MM_STOP;
		return;
	}
}

void button1LongPressStart() {
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
    1792:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    1796:	9c ef       	ldi	r25, 0xFC	; 252
    1798:	98 0f       	add	r25, r24
    179a:	96 30       	cpi	r25, 0x06	; 6
    179c:	40 f5       	brcc	.+80     	; 0x17ee <_Z21button1LongPressStartv+0x64>
		// выбор множителя x1x10x100x0.1x0.01x0.001
		setDigit.curMultiplier = setDigit.curMultiplier >= 100.0f? 0.001f: setDigit.curMultiplier * 10.0f;
    179e:	c0 90 c9 01 	lds	r12, 0x01C9	; 0x8001c9 <setDigit+0x4>
    17a2:	d0 90 ca 01 	lds	r13, 0x01CA	; 0x8001ca <setDigit+0x5>
    17a6:	e0 90 cb 01 	lds	r14, 0x01CB	; 0x8001cb <setDigit+0x6>
    17aa:	f0 90 cc 01 	lds	r15, 0x01CC	; 0x8001cc <setDigit+0x7>
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	48 ec       	ldi	r20, 0xC8	; 200
    17b4:	52 e4       	ldi	r21, 0x42	; 66
    17b6:	c7 01       	movw	r24, r14
    17b8:	b6 01       	movw	r22, r12
    17ba:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
    17be:	87 ff       	sbrs	r24, 7
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <_Z21button1LongPressStartv+0x4a>
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e2       	ldi	r20, 0x20	; 32
    17c8:	51 e4       	ldi	r21, 0x41	; 65
    17ca:	c7 01       	movw	r24, r14
    17cc:	b6 01       	movw	r22, r12
    17ce:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <_Z21button1LongPressStartv+0x52>
    17d4:	6f e6       	ldi	r22, 0x6F	; 111
    17d6:	72 e1       	ldi	r23, 0x12	; 18
    17d8:	83 e8       	ldi	r24, 0x83	; 131
    17da:	9a e3       	ldi	r25, 0x3A	; 58
    17dc:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <setDigit+0x4>
    17e0:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <setDigit+0x5>
    17e4:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <setDigit+0x6>
    17e8:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <setDigit+0x7>
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <_Z21button1LongPressStartv+0x80>
		lcdUpdateScreen = true;
		return;
	}
	
	if (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC) {
    17ee:	96 ef       	ldi	r25, 0xF6	; 246
    17f0:	98 0f       	add	r25, r24
    17f2:	93 30       	cpi	r25, 0x03	; 3
    17f4:	70 f4       	brcc	.+28     	; 0x1812 <_Z21button1LongPressStartv+0x88>
		setDigit.value = getCurrentWindingImpedanceValue();
    17f6:	0e 94 34 0b 	call	0x1668	; 0x1668 <_Z31getCurrentWindingImpedanceValuev>
    17fa:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <setDigit>
    17fe:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <setDigit+0x1>
    1802:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <setDigit+0x2>
    1806:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <setDigit+0x3>
		lcdUpdateScreen = true;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
    1810:	0b c0       	rjmp	.+22     	; 0x1828 <_Z21button1LongPressStartv+0x9e>
		return;
	}
	
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1812:	93 ef       	ldi	r25, 0xF3	; 243
    1814:	98 0f       	add	r25, r24
    1816:	98 30       	cpi	r25, 0x08	; 8
    1818:	10 f4       	brcc	.+4      	; 0x181e <_Z21button1LongPressStartv+0x94>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
    181a:	85 e1       	ldi	r24, 0x15	; 21
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <_Z21button1LongPressStartv+0x9a>
		return;
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    181e:	85 31       	cpi	r24, 0x15	; 21
    1820:	19 f4       	brne	.+6      	; 0x1828 <_Z21button1LongPressStartv+0x9e>
		modeWork.current = MW_SHOWING_START;
    1822:	8d e0       	ldi	r24, 0x0D	; 13
    1824:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
	}
}
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	08 95       	ret

00001832 <_Z12setEditValuev>:
		settings.isSetupMode = true;
	}
}

void setEditValue() {
	lcdUpdateScreen = true;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
	switch(modeWork.current) {
    1838:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <modeWork>
    183c:	8e 2f       	mov	r24, r30
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	fc 01       	movw	r30, r24
    1842:	31 97       	sbiw	r30, 0x01	; 1
    1844:	ec 30       	cpi	r30, 0x0C	; 12
    1846:	f1 05       	cpc	r31, r1
    1848:	08 f0       	brcs	.+2      	; 0x184c <_Z12setEditValuev+0x1a>
    184a:	72 c0       	rjmp	.+228    	; 0x1930 <_Z12setEditValuev+0xfe>
    184c:	e2 5a       	subi	r30, 0xA2	; 162
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			setDigit.value = settings.connectionType;
    1854:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <settings+0x1>
    1858:	02 c0       	rjmp	.+4      	; 0x185e <_Z12setEditValuev+0x2c>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			setDigit.value = settings.currentAmperageGain;
    185a:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <settings+0x13>
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatunsisf>
    1868:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <setDigit>
    186c:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <setDigit+0x1>
    1870:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <setDigit+0x2>
    1874:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <setDigit+0x3>
			break;
    1878:	5b c0       	rjmp	.+182    	; 0x1930 <_Z12setEditValuev+0xfe>
		case MW_SETUP_GAIN_VOLTAGE:
			setDigit.value = settings.currentVoltageGain;
    187a:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x14>
    187e:	ef cf       	rjmp	.-34     	; 0x185e <_Z12setEditValuev+0x2c>
			break;			
		case MW_SETUP_IMPEDANCE_AB:
			setDigit.value = settings.impedance[0];
    1880:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <settings+0x6>
    1884:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <settings+0x7>
    1888:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <settings+0x8>
    188c:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <settings+0x9>
    1890:	47 c0       	rjmp	.+142    	; 0x1920 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			setDigit.value = settings.impedance[1];
    1892:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <settings+0xa>
    1896:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <settings+0xb>
    189a:	a0 91 f3 01 	lds	r26, 0x01F3	; 0x8001f3 <settings+0xc>
    189e:	b0 91 f4 01 	lds	r27, 0x01F4	; 0x8001f4 <settings+0xd>
    18a2:	3e c0       	rjmp	.+124    	; 0x1920 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			setDigit.value = settings.impedance[2];
    18a4:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <settings+0xe>
    18a8:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <settings+0xf>
    18ac:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <settings+0x10>
    18b0:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <settings+0x11>
    18b4:	35 c0       	rjmp	.+106    	; 0x1920 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			setDigit.value = settings.multiplierVoltage[0];
    18b6:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <settings+0x15>
    18ba:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <settings+0x16>
    18be:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <settings+0x17>
    18c2:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <settings+0x18>
    18c6:	2c c0       	rjmp	.+88     	; 0x1920 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			setDigit.value = settings.multiplierVoltage[1];
    18c8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <settings+0x19>
    18cc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <settings+0x1a>
    18d0:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <settings+0x1b>
    18d4:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <settings+0x1c>
    18d8:	23 c0       	rjmp	.+70     	; 0x1920 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			setDigit.value = settings.multiplierVoltage[2];
    18da:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <settings+0x1d>
    18de:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <settings+0x1e>
    18e2:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <settings+0x1f>
    18e6:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <settings+0x20>
    18ea:	1a c0       	rjmp	.+52     	; 0x1920 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			setDigit.value = settings.multiplierAmperage[0];
    18ec:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <settings+0x21>
    18f0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <settings+0x22>
    18f4:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <settings+0x23>
    18f8:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <settings+0x24>
    18fc:	11 c0       	rjmp	.+34     	; 0x1920 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			setDigit.value = settings.multiplierAmperage[1];
    18fe:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <settings+0x25>
    1902:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <settings+0x26>
    1906:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <settings+0x27>
    190a:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <settings+0x28>
    190e:	08 c0       	rjmp	.+16     	; 0x1920 <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			setDigit.value = settings.multiplierAmperage[2];
    1910:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <settings+0x29>
    1914:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <settings+0x2a>
    1918:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <settings+0x2b>
    191c:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <settings+0x2c>
    1920:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <setDigit>
    1924:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <setDigit+0x1>
    1928:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <setDigit+0x2>
    192c:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <setDigit+0x3>
			break;
	}
	setDigit.curMultiplier = 1.0f;
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e8       	ldi	r26, 0x80	; 128
    1936:	bf e3       	ldi	r27, 0x3F	; 63
    1938:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <setDigit+0x4>
    193c:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <setDigit+0x5>
    1940:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <setDigit+0x6>
    1944:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <setDigit+0x7>
    1948:	08 95       	ret

0000194a <_Z12button2Clickv>:
		initAvgVars();
		return;
	}
}

void button2Click() {
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	cf 93       	push	r28
	if (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC) {
    1954:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    1958:	96 ef       	ldi	r25, 0xF6	; 246
    195a:	98 0f       	add	r25, r24
    195c:	93 30       	cpi	r25, 0x03	; 3
    195e:	60 f4       	brcc	.+24     	; 0x1978 <_Z12button2Clickv+0x2e>
		setDigit.value = 0;
    1960:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <setDigit>
    1964:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <setDigit+0x1>
    1968:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <setDigit+0x2>
    196c:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <setDigit+0x3>
		lcdUpdateScreen = true;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
		return;
    1976:	9a c0       	rjmp	.+308    	; 0x1aac <_Z12button2Clickv+0x162>
	}
	if (modeWork.current == MW_NEED_SETUP) {
    1978:	81 11       	cpse	r24, r1
    197a:	0a c0       	rjmp	.+20     	; 0x1990 <_Z12button2Clickv+0x46>
		lcdUpdateScreen = true;
    197c:	c1 e0       	ldi	r28, 0x01	; 1
    197e:	c0 93 b6 01 	sts	0x01B6, r28	; 0x8001b6 <lcdUpdateScreen>
		modeWork.current = MW_SETUP_START;
    1982:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <modeWork>
		setEditValue();
    1986:	0e 94 19 0c 	call	0x1832	; 0x1832 <_Z12setEditValuev>
		settings.isSetupMode = true;
    198a:	c0 93 f9 01 	sts	0x01F9, r28	; 0x8001f9 <settings+0x12>
		return;
    198e:	8e c0       	rjmp	.+284    	; 0x1aac <_Z12button2Clickv+0x162>
	}
		
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
    1990:	9f ef       	ldi	r25, 0xFF	; 255
    1992:	98 0f       	add	r25, r24
    1994:	9c 30       	cpi	r25, 0x0C	; 12
    1996:	08 f0       	brcs	.+2      	; 0x199a <_Z12button2Clickv+0x50>
    1998:	78 c0       	rjmp	.+240    	; 0x1a8a <_Z12button2Clickv+0x140>
		lcdUpdateScreen = true;
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	c1 f4       	brne	.+48     	; 0x19d4 <_Z12button2Clickv+0x8a>
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	a9 01       	movw	r20, r18
    19aa:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    19ae:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    19b2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    19b6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    19ba:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    19be:	88 23       	and	r24, r24
    19c0:	21 f0       	breq	.+8      	; 0x19ca <_Z12button2Clickv+0x80>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	dc 01       	movw	r26, r24
    19c8:	57 c0       	rjmp	.+174    	; 0x1a78 <_Z12button2Clickv+0x12e>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e8       	ldi	r26, 0x80	; 128
    19d0:	bf e3       	ldi	r27, 0x3F	; 63
    19d2:	52 c0       	rjmp	.+164    	; 0x1a78 <_Z12button2Clickv+0x12e>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
    19d4:	82 50       	subi	r24, 0x02	; 2
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	38 f5       	brcc	.+78     	; 0x1a28 <_Z12button2Clickv+0xde>
			setDigit.value = setDigit.value == 0? 5: setDigit.value - 1;
    19da:	c0 90 c5 01 	lds	r12, 0x01C5	; 0x8001c5 <setDigit>
    19de:	d0 90 c6 01 	lds	r13, 0x01C6	; 0x8001c6 <setDigit+0x1>
    19e2:	e0 90 c7 01 	lds	r14, 0x01C7	; 0x8001c7 <setDigit+0x2>
    19e6:	f0 90 c8 01 	lds	r15, 0x01C8	; 0x8001c8 <setDigit+0x3>
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	c7 01       	movw	r24, r14
    19f2:	b6 01       	movw	r22, r12
    19f4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	49 f0       	breq	.+18     	; 0x1a0e <_Z12button2Clickv+0xc4>
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	c7 01       	movw	r24, r14
    1a06:	b6 01       	movw	r22, r12
    1a08:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <_Z12button2Clickv+0xcc>
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	80 ea       	ldi	r24, 0xA0	; 160
    1a14:	90 e4       	ldi	r25, 0x40	; 64
    1a16:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <setDigit>
    1a1a:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <setDigit+0x1>
    1a1e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <setDigit+0x2>
    1a22:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <setDigit+0x3>
    1a26:	42 c0       	rjmp	.+132    	; 0x1aac <_Z12button2Clickv+0x162>
		}else {
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    1a28:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <setDigit+0x4>
    1a2c:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <setDigit+0x5>
    1a30:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <setDigit+0x6>
    1a34:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <setDigit+0x7>
    1a38:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    1a3c:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    1a40:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    1a44:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    1a48:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
    1a4c:	6b 01       	movw	r12, r22
    1a4e:	7c 01       	movw	r14, r24
			if (setDigit.value < 0) {
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	a9 01       	movw	r20, r18
    1a56:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    1a5a:	87 fd       	sbrc	r24, 7
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <_Z12button2Clickv+0x126>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			setDigit.value = setDigit.value == 0? 5: setDigit.value - 1;
		}else {
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    1a5e:	c0 92 c5 01 	sts	0x01C5, r12	; 0x8001c5 <setDigit>
    1a62:	d0 92 c6 01 	sts	0x01C6, r13	; 0x8001c6 <setDigit+0x1>
    1a66:	e0 92 c7 01 	sts	0x01C7, r14	; 0x8001c7 <setDigit+0x2>
    1a6a:	f0 92 c8 01 	sts	0x01C8, r15	; 0x8001c8 <setDigit+0x3>
    1a6e:	1e c0       	rjmp	.+60     	; 0x1aac <_Z12button2Clickv+0x162>
			if (setDigit.value < 0) {
				setDigit.value = 999.999f;
    1a70:	80 ef       	ldi	r24, 0xF0	; 240
    1a72:	9f ef       	ldi	r25, 0xFF	; 255
    1a74:	a9 e7       	ldi	r26, 0x79	; 121
    1a76:	b4 e4       	ldi	r27, 0x44	; 68
    1a78:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <setDigit>
    1a7c:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <setDigit+0x1>
    1a80:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <setDigit+0x2>
    1a84:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <setDigit+0x3>
    1a88:	11 c0       	rjmp	.+34     	; 0x1aac <_Z12button2Clickv+0x162>
			}
		}
		return;
	}
	
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1a8a:	23 ef       	ldi	r18, 0xF3	; 243
    1a8c:	28 0f       	add	r18, r24
    1a8e:	28 30       	cpi	r18, 0x08	; 8
    1a90:	30 f4       	brcc	.+12     	; 0x1a9e <_Z12button2Clickv+0x154>
		modeWork.current = modeWork.current == MW_SHOWING_START? MW_SHOWING_STOP: modeWork.current - 1;
    1a92:	8d 30       	cpi	r24, 0x0D	; 13
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <_Z12button2Clickv+0x14e>
    1a96:	94 e1       	ldi	r25, 0x14	; 20
    1a98:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <modeWork>
		return;
    1a9c:	07 c0       	rjmp	.+14     	; 0x1aac <_Z12button2Clickv+0x162>
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1a9e:	85 31       	cpi	r24, 0x15	; 21
    1aa0:	29 f4       	brne	.+10     	; 0x1aac <_Z12button2Clickv+0x162>
		modeWork.current = MW_SHOWING_START;
    1aa2:	8d e0       	ldi	r24, 0x0D	; 13
    1aa4:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
		settings.isReadyToWork = MM_STOP;
    1aa8:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <settings>
		return;
	}
}
    1aac:	cf 91       	pop	r28
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	08 95       	ret

00001ab8 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>:
	}
	
}

void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	switch(_index) {
    1ab8:	63 30       	cpi	r22, 0x03	; 3
    1aba:	91 f0       	breq	.+36     	; 0x1ae0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x28>
    1abc:	38 f4       	brcc	.+14     	; 0x1acc <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x14>
    1abe:	61 30       	cpi	r22, 0x01	; 1
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x22>
    1ac2:	62 30       	cpi	r22, 0x02	; 2
    1ac4:	99 f4       	brne	.+38     	; 0x1aec <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x34>
		case 1:
			_ads->setGain(GAIN_ONE);
			break;
		case 2:
			_ads->setGain(GAIN_TWO);
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	74 e0       	ldi	r23, 0x04	; 4
    1aca:	12 c0       	rjmp	.+36     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x38>
	}
	
}

void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	switch(_index) {
    1acc:	64 30       	cpi	r22, 0x04	; 4
    1ace:	59 f0       	breq	.+22     	; 0x1ae6 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x2e>
    1ad0:	65 30       	cpi	r22, 0x05	; 5
    1ad2:	61 f4       	brne	.+24     	; 0x1aec <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x34>
			break;
		case 4:
			_ads->setGain(GAIN_EIGHT);
			break;
		case 5:
			_ads->setGain(GAIN_SIXTEEN);
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	7a e0       	ldi	r23, 0x0A	; 10
    1ad8:	0b c0       	rjmp	.+22     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x38>
}

void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	switch(_index) {
		case 1:
			_ads->setGain(GAIN_ONE);
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	72 e0       	ldi	r23, 0x02	; 2
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x38>
			break;
		case 2:
			_ads->setGain(GAIN_TWO);
			break;
		case 3:
			_ads->setGain(GAIN_FOUR);
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	76 e0       	ldi	r23, 0x06	; 6
    1ae4:	05 c0       	rjmp	.+10     	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x38>
			break;
		case 4:
			_ads->setGain(GAIN_EIGHT);
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	78 e0       	ldi	r23, 0x08	; 8
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x38>
			break;
		case 5:
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			_ads->setGain(GAIN_TWOTHIRDS);
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	0c 94 1e 12 	jmp	0x243c	; 0x243c <_ZN16Adafruit_ADS10157setGainE9adsGain_t>

00001af4 <_Z18initAdsVoltageGainv>:
			break;
	}
}


void initAdsVoltageGain() {
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
	setAdsGainByIndex(&adsVoltage, settings.currentVoltageGain);
    1af8:	c7 ee       	ldi	r28, 0xE7	; 231
    1afa:	d1 e0       	ldi	r29, 0x01	; 1
    1afc:	6c 89       	ldd	r22, Y+20	; 0x14
    1afe:	8b e5       	ldi	r24, 0x5B	; 91
    1b00:	92 e0       	ldi	r25, 0x02	; 2
    1b02:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.voltageStep = ads.gainStep[settings.currentVoltageGain] / 1000.0;
    1b06:	ec 89       	ldd	r30, Y+20	; 0x14
    1b08:	84 e0       	ldi	r24, 0x04	; 4
    1b0a:	e8 9f       	mul	r30, r24
    1b0c:	f0 01       	movw	r30, r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	e0 50       	subi	r30, 0x00	; 0
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a e7       	ldi	r20, 0x7A	; 122
    1b1a:	54 e4       	ldi	r21, 0x44	; 68
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
    1b28:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_start+0x18>
    1b2c:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_start+0x19>
    1b30:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_start+0x1a>
    1b34:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_start+0x1b>
}
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <_Z19initAdsAmperageGainv>:

void initAdsAmperageGain() {
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
    1b42:	c7 ee       	ldi	r28, 0xE7	; 231
    1b44:	d1 e0       	ldi	r29, 0x01	; 1
    1b46:	6b 89       	ldd	r22, Y+19	; 0x13
    1b48:	86 e5       	ldi	r24, 0x56	; 86
    1b4a:	92 e0       	ldi	r25, 0x02	; 2
    1b4c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    1b50:	eb 89       	ldd	r30, Y+19	; 0x13
    1b52:	84 e0       	ldi	r24, 0x04	; 4
    1b54:	e8 9f       	mul	r30, r24
    1b56:	f0 01       	movw	r30, r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	e0 50       	subi	r30, 0x00	; 0
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a e7       	ldi	r20, 0x7A	; 122
    1b64:	54 e4       	ldi	r21, 0x44	; 68
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
    1b72:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <__data_start+0x1c>
    1b76:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <__data_start+0x1d>
    1b7a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_start+0x1e>
    1b7e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_start+0x1f>
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1b88:	26 e0       	ldi	r18, 0x06	; 6
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	55 e2       	ldi	r21, 0x25	; 37
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	84 e2       	ldi	r24, 0x24	; 36
    1b94:	93 e0       	ldi	r25, 0x03	; 3
    1b96:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN14HardwareSerial5beginEmh>
void lcdClearCell(byte col, byte row, byte rowLength);


void setup() {
	Serial.begin(9600);
	Serial.println(F("Initialization..."));
    1b9a:	6a e3       	ldi	r22, 0x3A	; 58
    1b9c:	74 e0       	ldi	r23, 0x04	; 4
    1b9e:	84 e2       	ldi	r24, 0x24	; 36
    1ba0:	93 e0       	ldi	r25, 0x03	; 3
    1ba2:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	adsVoltage.setGain(GAIN_TWOTHIRDS);
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	8b e5       	ldi	r24, 0x5B	; 91
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsAmperage.setGain(GAIN_TWOTHIRDS);
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	86 e5       	ldi	r24, 0x56	; 86
    1bb8:	92 e0       	ldi	r25, 0x02	; 2
    1bba:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	
	adsVoltage.begin();
    1bbe:	8b e5       	ldi	r24, 0x5B	; 91
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
    1bc2:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN16Adafruit_ADS10155beginEv>
	adsAmperage.begin();
    1bc6:	86 e5       	ldi	r24, 0x56	; 86
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN16Adafruit_ADS10155beginEv>
	
	lcd.init();
    1bce:	89 eb       	ldi	r24, 0xB9	; 185
    1bd0:	91 e0       	ldi	r25, 0x01	; 1
    1bd2:	0e 94 bb 13 	call	0x2776	; 0x2776 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    1bd6:	89 eb       	ldi	r24, 0xB9	; 185
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    1bde:	89 eb       	ldi	r24, 0xB9	; 185
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	0e 94 0d 13 	call	0x261a	; 0x261a <_ZN17LiquidCrystal_I2C5clearEv>
	Serial.println(F("LCD inited!"));
    1be6:	6e e2       	ldi	r22, 0x2E	; 46
    1be8:	74 e0       	ldi	r23, 0x04	; 4
    1bea:	84 e2       	ldi	r24, 0x24	; 36
    1bec:	93 e0       	ldi	r25, 0x03	; 3
    1bee:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	button1Callback.attachClick(button1Click);
    1bf2:	62 ed       	ldi	r22, 0xD2	; 210
    1bf4:	72 e0       	ldi	r23, 0x02	; 2
    1bf6:	85 e3       	ldi	r24, 0x35	; 53
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <_ZN9OneButton11attachClickEPFvvE>
	button1Callback.attachLongPressStart(button1LongPressStart);
    1bfe:	65 ec       	ldi	r22, 0xC5	; 197
    1c00:	7b e0       	ldi	r23, 0x0B	; 11
    1c02:	85 e3       	ldi	r24, 0x35	; 53
    1c04:	92 e0       	ldi	r25, 0x02	; 2
    1c06:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN9OneButton20attachLongPressStartEPFvvE>
	button1Callback.setDebounceTicks(30);
    1c0a:	6e e1       	ldi	r22, 0x1E	; 30
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	85 e3       	ldi	r24, 0x35	; 53
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN9OneButton16setDebounceTicksEi>
	button1Callback.setClickTicks(200);
    1c16:	68 ec       	ldi	r22, 0xC8	; 200
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	85 e3       	ldi	r24, 0x35	; 53
    1c1c:	92 e0       	ldi	r25, 0x02	; 2
    1c1e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN9OneButton13setClickTicksEi>
	button1Callback.setPressTicks(1000);
    1c22:	68 ee       	ldi	r22, 0xE8	; 232
    1c24:	73 e0       	ldi	r23, 0x03	; 3
    1c26:	85 e3       	ldi	r24, 0x35	; 53
    1c28:	92 e0       	ldi	r25, 0x02	; 2
    1c2a:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 1 inited!"));
    1c2e:	6d e1       	ldi	r22, 0x1D	; 29
    1c30:	74 e0       	ldi	r23, 0x04	; 4
    1c32:	84 e2       	ldi	r24, 0x24	; 36
    1c34:	93 e0       	ldi	r25, 0x03	; 3
    1c36:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	button2Callback.attachClick(button2Click);
    1c3a:	65 ea       	ldi	r22, 0xA5	; 165
    1c3c:	7c e0       	ldi	r23, 0x0C	; 12
    1c3e:	84 e1       	ldi	r24, 0x14	; 20
    1c40:	92 e0       	ldi	r25, 0x02	; 2
    1c42:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <_ZN9OneButton11attachClickEPFvvE>
	button2Callback.attachLongPressStart(button2LongPressStart);
    1c46:	6a e6       	ldi	r22, 0x6A	; 106
    1c48:	71 e1       	ldi	r23, 0x11	; 17
    1c4a:	84 e1       	ldi	r24, 0x14	; 20
    1c4c:	92 e0       	ldi	r25, 0x02	; 2
    1c4e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN9OneButton20attachLongPressStartEPFvvE>
	button2Callback.setDebounceTicks(30);
    1c52:	6e e1       	ldi	r22, 0x1E	; 30
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	84 e1       	ldi	r24, 0x14	; 20
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <_ZN9OneButton16setDebounceTicksEi>
	button2Callback.setClickTicks(200);
    1c5e:	68 ec       	ldi	r22, 0xC8	; 200
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	84 e1       	ldi	r24, 0x14	; 20
    1c64:	92 e0       	ldi	r25, 0x02	; 2
    1c66:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN9OneButton13setClickTicksEi>
	button2Callback.setPressTicks(1000);
    1c6a:	68 ee       	ldi	r22, 0xE8	; 232
    1c6c:	73 e0       	ldi	r23, 0x03	; 3
    1c6e:	84 e1       	ldi	r24, 0x14	; 20
    1c70:	92 e0       	ldi	r25, 0x02	; 2
    1c72:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 2 inited!"));
    1c76:	6c e0       	ldi	r22, 0x0C	; 12
    1c78:	74 e0       	ldi	r23, 0x04	; 4
    1c7a:	84 e2       	ldi	r24, 0x24	; 36
    1c7c:	93 e0       	ldi	r25, 0x03	; 3
    1c7e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (eeprom_read_byte(&eeprom_first_start) != 103) {
    1c82:	87 e2       	ldi	r24, 0x27	; 39
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <eeprom_read_byte>
    1c8a:	87 36       	cpi	r24, 0x67	; 103
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <setup+0x108>
    1c8e:	59 c0       	rjmp	.+178    	; 0x1d42 <setup+0x1ba>
		eeprom_update_byte(&eeprom_connection_type, CONNECTION_TYPE_STAR);
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	86 e2       	ldi	r24, 0x26	; 38
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 df 20 	call	0x41be	; 0x41be <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_amperage, 0);
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	85 e2       	ldi	r24, 0x25	; 37
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 df 20 	call	0x41be	; 0x41be <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_voltage, 0);
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	84 e2       	ldi	r24, 0x24	; 36
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 df 20 	call	0x41be	; 0x41be <eeprom_update_byte>
		eeprom_update_float(&eeprom_impedance_ab, 0);
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	ba 01       	movw	r22, r20
    1cb4:	80 e2       	ldi	r24, 0x20	; 32
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_bc, 0);
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	ba 01       	movw	r22, r20
    1cc2:	8c e1       	ldi	r24, 0x1C	; 28
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_ac, 0);
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	ba 01       	movw	r22, r20
    1cd0:	88 e1       	ldi	r24, 0x18	; 24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ab, 0);
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	ba 01       	movw	r22, r20
    1cde:	84 e1       	ldi	r24, 0x14	; 20
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_bc, 0);
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	ba 01       	movw	r22, r20
    1cec:	80 e1       	ldi	r24, 0x10	; 16
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ac, 0);
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	ba 01       	movw	r22, r20
    1cfa:	8c e0       	ldi	r24, 0x0C	; 12
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ab, 0);
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	ba 01       	movw	r22, r20
    1d08:	88 e0       	ldi	r24, 0x08	; 8
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_bc, 0);
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	ba 01       	movw	r22, r20
    1d16:	84 e0       	ldi	r24, 0x04	; 4
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ac, 0);
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	ba 01       	movw	r22, r20
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <eeprom_update_dword>
		eeprom_update_byte(&eeprom_first_start, 103);
    1d2c:	67 e6       	ldi	r22, 0x67	; 103
    1d2e:	87 e2       	ldi	r24, 0x27	; 39
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 df 20 	call	0x41be	; 0x41be <eeprom_update_byte>
		Serial.println(F("EEPROM first start writed!"));
    1d36:	61 ef       	ldi	r22, 0xF1	; 241
    1d38:	73 e0       	ldi	r23, 0x03	; 3
    1d3a:	84 e2       	ldi	r24, 0x24	; 36
    1d3c:	93 e0       	ldi	r25, 0x03	; 3
    1d3e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	settings.currentAmperageGain = eeprom_read_byte(&eeprom_gain_amperage);
    1d42:	85 e2       	ldi	r24, 0x25	; 37
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <eeprom_read_byte>
    1d4a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <settings+0x13>
	settings.currentVoltageGain = eeprom_read_byte(&eeprom_gain_voltage);
    1d4e:	84 e2       	ldi	r24, 0x24	; 36
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <eeprom_read_byte>
    1d56:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <settings+0x14>
	settings.connectionType = eeprom_read_byte(&eeprom_connection_type);
    1d5a:	86 e2       	ldi	r24, 0x26	; 38
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <eeprom_read_byte>
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	81 11       	cpse	r24, r1
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <setup+0x1e2>
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <settings+0x1>
	settings.impedance[0] = eeprom_read_float(&eeprom_impedance_ab);
    1d6e:	80 e2       	ldi	r24, 0x20	; 32
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1d76:	60 93 ed 01 	sts	0x01ED, r22	; 0x8001ed <settings+0x6>
    1d7a:	70 93 ee 01 	sts	0x01EE, r23	; 0x8001ee <settings+0x7>
    1d7e:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <settings+0x8>
    1d82:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <settings+0x9>
	settings.impedance[1] = eeprom_read_float(&eeprom_impedance_bc);
    1d86:	8c e1       	ldi	r24, 0x1C	; 28
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1d8e:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <settings+0xa>
    1d92:	70 93 f2 01 	sts	0x01F2, r23	; 0x8001f2 <settings+0xb>
    1d96:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <settings+0xc>
    1d9a:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <settings+0xd>
	settings.impedance[2] = eeprom_read_float(&eeprom_impedance_ac);
    1d9e:	88 e1       	ldi	r24, 0x18	; 24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1da6:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <settings+0xe>
    1daa:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <settings+0xf>
    1dae:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <settings+0x10>
    1db2:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <settings+0x11>
	settings.multiplierVoltage[0] = eeprom_read_float(&eeprom_voltage_mult_ab);
    1db6:	84 e1       	ldi	r24, 0x14	; 20
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1dbe:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <settings+0x15>
    1dc2:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <settings+0x16>
    1dc6:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <settings+0x17>
    1dca:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <settings+0x18>
	settings.multiplierVoltage[1] = eeprom_read_float(&eeprom_voltage_mult_bc);
    1dce:	80 e1       	ldi	r24, 0x10	; 16
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1dd6:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <settings+0x19>
    1dda:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <settings+0x1a>
    1dde:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <settings+0x1b>
    1de2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <settings+0x1c>
	settings.multiplierVoltage[2] = eeprom_read_float(&eeprom_voltage_mult_ac);
    1de6:	8c e0       	ldi	r24, 0x0C	; 12
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1dee:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <settings+0x1d>
    1df2:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <settings+0x1e>
    1df6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <settings+0x1f>
    1dfa:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <settings+0x20>
	settings.multiplierAmperage[0] = eeprom_read_float(&eeprom_amperage_mult_ab);
    1dfe:	88 e0       	ldi	r24, 0x08	; 8
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1e06:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <settings+0x21>
    1e0a:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <settings+0x22>
    1e0e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <settings+0x23>
    1e12:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <settings+0x24>
	settings.multiplierAmperage[1] = eeprom_read_float(&eeprom_amperage_mult_bc);
    1e16:	84 e0       	ldi	r24, 0x04	; 4
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1e1e:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <settings+0x25>
    1e22:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <settings+0x26>
    1e26:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <settings+0x27>
    1e2a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <settings+0x28>
	settings.multiplierAmperage[2] = eeprom_read_float(&eeprom_amperage_mult_ac);
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeprom_read_dword>
    1e36:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <settings+0x29>
    1e3a:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <settings+0x2a>
    1e3e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <settings+0x2b>
    1e42:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <settings+0x2c>
	Serial.println(F("EEPROM values:"));
    1e46:	62 ee       	ldi	r22, 0xE2	; 226
    1e48:	73 e0       	ldi	r23, 0x03	; 3
    1e4a:	84 e2       	ldi	r24, 0x24	; 36
    1e4c:	93 e0       	ldi	r25, 0x03	; 3
    1e4e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("gain_amperage: ")); Serial.println(settings.currentAmperageGain);
    1e52:	62 ed       	ldi	r22, 0xD2	; 210
    1e54:	73 e0       	ldi	r23, 0x03	; 3
    1e56:	84 e2       	ldi	r24, 0x24	; 36
    1e58:	93 e0       	ldi	r25, 0x03	; 3
    1e5a:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1e5e:	4a e0       	ldi	r20, 0x0A	; 10
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <settings+0x13>
    1e66:	84 e2       	ldi	r24, 0x24	; 36
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <_ZN5Print7printlnEhi>
	Serial.print(F("gain_voltage: ")); Serial.println(settings.currentVoltageGain);
    1e6e:	63 ec       	ldi	r22, 0xC3	; 195
    1e70:	73 e0       	ldi	r23, 0x03	; 3
    1e72:	84 e2       	ldi	r24, 0x24	; 36
    1e74:	93 e0       	ldi	r25, 0x03	; 3
    1e76:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1e7a:	4a e0       	ldi	r20, 0x0A	; 10
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x14>
    1e82:	84 e2       	ldi	r24, 0x24	; 36
    1e84:	93 e0       	ldi	r25, 0x03	; 3
    1e86:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <_ZN5Print7printlnEhi>
	Serial.print(F("connection_type: ")); Serial.println(settings.connectionType);
    1e8a:	61 eb       	ldi	r22, 0xB1	; 177
    1e8c:	73 e0       	ldi	r23, 0x03	; 3
    1e8e:	84 e2       	ldi	r24, 0x24	; 36
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1e96:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <settings+0x1>
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	4a e0       	ldi	r20, 0x0A	; 10
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	84 e2       	ldi	r24, 0x24	; 36
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <_ZN5Print7printlnEii>
	Serial.print(F("impedance_ab: ")); Serial.println(settings.impedance[0], 10);
    1ea8:	62 ea       	ldi	r22, 0xA2	; 162
    1eaa:	73 e0       	ldi	r23, 0x03	; 3
    1eac:	84 e2       	ldi	r24, 0x24	; 36
    1eae:	93 e0       	ldi	r25, 0x03	; 3
    1eb0:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1eb4:	40 91 ed 01 	lds	r20, 0x01ED	; 0x8001ed <settings+0x6>
    1eb8:	50 91 ee 01 	lds	r21, 0x01EE	; 0x8001ee <settings+0x7>
    1ebc:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <settings+0x8>
    1ec0:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <settings+0x9>
    1ec4:	2a e0       	ldi	r18, 0x0A	; 10
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	84 e2       	ldi	r24, 0x24	; 36
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	Serial.print(F("impedance_bc: ")); Serial.println(settings.impedance[1], 10);
    1ed0:	63 e9       	ldi	r22, 0x93	; 147
    1ed2:	73 e0       	ldi	r23, 0x03	; 3
    1ed4:	84 e2       	ldi	r24, 0x24	; 36
    1ed6:	93 e0       	ldi	r25, 0x03	; 3
    1ed8:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1edc:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <settings+0xa>
    1ee0:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <settings+0xb>
    1ee4:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <settings+0xc>
    1ee8:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <settings+0xd>
    1eec:	2a e0       	ldi	r18, 0x0A	; 10
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	84 e2       	ldi	r24, 0x24	; 36
    1ef2:	93 e0       	ldi	r25, 0x03	; 3
    1ef4:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	Serial.print(F("impedance_ac: ")); Serial.println(settings.impedance[2], 10);
    1ef8:	64 e8       	ldi	r22, 0x84	; 132
    1efa:	73 e0       	ldi	r23, 0x03	; 3
    1efc:	84 e2       	ldi	r24, 0x24	; 36
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    1f00:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1f04:	40 91 f5 01 	lds	r20, 0x01F5	; 0x8001f5 <settings+0xe>
    1f08:	50 91 f6 01 	lds	r21, 0x01F6	; 0x8001f6 <settings+0xf>
    1f0c:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <settings+0x10>
    1f10:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <settings+0x11>
    1f14:	2a e0       	ldi	r18, 0x0A	; 10
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	84 e2       	ldi	r24, 0x24	; 36
    1f1a:	93 e0       	ldi	r25, 0x03	; 3
    1f1c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_ab: ")); Serial.println(settings.multiplierVoltage[0], 3);
    1f20:	62 e7       	ldi	r22, 0x72	; 114
    1f22:	73 e0       	ldi	r23, 0x03	; 3
    1f24:	84 e2       	ldi	r24, 0x24	; 36
    1f26:	93 e0       	ldi	r25, 0x03	; 3
    1f28:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1f2c:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <settings+0x15>
    1f30:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <settings+0x16>
    1f34:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <settings+0x17>
    1f38:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <settings+0x18>
    1f3c:	23 e0       	ldi	r18, 0x03	; 3
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	84 e2       	ldi	r24, 0x24	; 36
    1f42:	93 e0       	ldi	r25, 0x03	; 3
    1f44:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_bc: ")); Serial.println(settings.multiplierVoltage[1], 3);
    1f48:	60 e6       	ldi	r22, 0x60	; 96
    1f4a:	73 e0       	ldi	r23, 0x03	; 3
    1f4c:	84 e2       	ldi	r24, 0x24	; 36
    1f4e:	93 e0       	ldi	r25, 0x03	; 3
    1f50:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1f54:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <settings+0x19>
    1f58:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <settings+0x1a>
    1f5c:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <settings+0x1b>
    1f60:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <settings+0x1c>
    1f64:	23 e0       	ldi	r18, 0x03	; 3
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	84 e2       	ldi	r24, 0x24	; 36
    1f6a:	93 e0       	ldi	r25, 0x03	; 3
    1f6c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_ac: ")); Serial.println(settings.multiplierVoltage[2], 3);
    1f70:	6e e4       	ldi	r22, 0x4E	; 78
    1f72:	73 e0       	ldi	r23, 0x03	; 3
    1f74:	84 e2       	ldi	r24, 0x24	; 36
    1f76:	93 e0       	ldi	r25, 0x03	; 3
    1f78:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1f7c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <settings+0x1d>
    1f80:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <settings+0x1e>
    1f84:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <settings+0x1f>
    1f88:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <settings+0x20>
    1f8c:	23 e0       	ldi	r18, 0x03	; 3
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	84 e2       	ldi	r24, 0x24	; 36
    1f92:	93 e0       	ldi	r25, 0x03	; 3
    1f94:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_ab: ")); Serial.println(settings.multiplierAmperage[0], 3);
    1f98:	6b e3       	ldi	r22, 0x3B	; 59
    1f9a:	73 e0       	ldi	r23, 0x03	; 3
    1f9c:	84 e2       	ldi	r24, 0x24	; 36
    1f9e:	93 e0       	ldi	r25, 0x03	; 3
    1fa0:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1fa4:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <settings+0x21>
    1fa8:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <settings+0x22>
    1fac:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <settings+0x23>
    1fb0:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <settings+0x24>
    1fb4:	23 e0       	ldi	r18, 0x03	; 3
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	84 e2       	ldi	r24, 0x24	; 36
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_bc: ")); Serial.println(settings.multiplierAmperage[1], 3);
    1fc0:	68 e2       	ldi	r22, 0x28	; 40
    1fc2:	73 e0       	ldi	r23, 0x03	; 3
    1fc4:	84 e2       	ldi	r24, 0x24	; 36
    1fc6:	93 e0       	ldi	r25, 0x03	; 3
    1fc8:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1fcc:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <settings+0x25>
    1fd0:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <settings+0x26>
    1fd4:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <settings+0x27>
    1fd8:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <settings+0x28>
    1fdc:	23 e0       	ldi	r18, 0x03	; 3
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	84 e2       	ldi	r24, 0x24	; 36
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_ac: ")); Serial.println(settings.multiplierAmperage[2], 3);
    1fe8:	65 e1       	ldi	r22, 0x15	; 21
    1fea:	73 e0       	ldi	r23, 0x03	; 3
    1fec:	84 e2       	ldi	r24, 0x24	; 36
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    1ff4:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <settings+0x29>
    1ff8:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <settings+0x2a>
    1ffc:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <settings+0x2b>
    2000:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <settings+0x2c>
    2004:	23 e0       	ldi	r18, 0x03	; 3
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	84 e2       	ldi	r24, 0x24	; 36
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN5Print7printlnEdi>
	
	initAdsVoltageGain();
    2010:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_Z18initAdsVoltageGainv>
	initAdsAmperageGain();
    2014:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_Z19initAdsAmperageGainv>
	
	settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    2018:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <settings+0x1>
    201c:	88 23       	and	r24, r24
    201e:	29 f0       	breq	.+10     	; 0x202a <setup+0x4a2>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 ea       	ldi	r26, 0xA0	; 160
    2026:	b0 e4       	ldi	r27, 0x40	; 64
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <setup+0x4aa>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e2       	ldi	r26, 0x20	; 32
    2030:	b0 e4       	ldi	r27, 0x40	; 64
    2032:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <settings+0x2>
    2036:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <settings+0x3>
    203a:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <settings+0x4>
    203e:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <settings+0x5>

	checkIsReadyToWork();
    2042:	0e 94 80 02 	call	0x500	; 0x500 <_Z18checkIsReadyToWorkv>
	
	pinMode(BEEPER, OUTPUT);
    2046:	61 e0       	ldi	r22, 0x01	; 1
    2048:	80 e1       	ldi	r24, 0x10	; 16
    204a:	0e 94 0f 20 	call	0x401e	; 0x401e <pinMode>
	digitalWrite(BEEPER, LOW);
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	80 e1       	ldi	r24, 0x10	; 16
    2052:	0e 94 4b 20 	call	0x4096	; 0x4096 <digitalWrite>
	
	modeWork.prev = modeWork.current;
    2056:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    205a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <modeWork+0x1>
	initAvgVars();
    205e:	0e 94 c0 02 	call	0x580	; 0x580 <_Z11initAvgVarsv>
	Serial.println(F("Completed!"));
    2062:	6a e0       	ldi	r22, 0x0A	; 10
    2064:	73 e0       	ldi	r23, 0x03	; 3
    2066:	84 e2       	ldi	r24, 0x24	; 36
    2068:	93 e0       	ldi	r25, 0x03	; 3
    206a:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Stand by..."));
    206e:	6e ef       	ldi	r22, 0xFE	; 254
    2070:	72 e0       	ldi	r23, 0x02	; 2
    2072:	84 e2       	ldi	r24, 0x24	; 36
    2074:	93 e0       	ldi	r25, 0x03	; 3
    2076:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
	displayStaticAsMode();
    207a:	0e 94 a4 06 	call	0xd48	; 0xd48 <_Z19displayStaticAsModev>
	displayAsMode();
    207e:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <_Z13displayAsModev>

00002082 <_Z12saveSettingsv>:
	}
	setDigit.curMultiplier = 1.0f;
}


void saveSettings() {
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	cf 93       	push	r28
	switch(modeWork.current) {
    208c:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <modeWork>
    2090:	8e 2f       	mov	r24, r30
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	fc 01       	movw	r30, r24
    2096:	31 97       	sbiw	r30, 0x01	; 1
    2098:	ec 30       	cpi	r30, 0x0C	; 12
    209a:	f1 05       	cpc	r31, r1
    209c:	08 f0       	brcs	.+2      	; 0x20a0 <_Z12saveSettingsv+0x1e>
    209e:	14 c1       	rjmp	.+552    	; 0x22c8 <_Z12saveSettingsv+0x246>
    20a0:	e6 59       	subi	r30, 0x96	; 150
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			settings.connectionType = setDigit.value;
    20a8:	c0 90 c5 01 	lds	r12, 0x01C5	; 0x8001c5 <setDigit>
    20ac:	d0 90 c6 01 	lds	r13, 0x01C6	; 0x8001c6 <setDigit+0x1>
    20b0:	e0 90 c7 01 	lds	r14, 0x01C7	; 0x8001c7 <setDigit+0x2>
    20b4:	f0 90 c8 01 	lds	r15, 0x01C8	; 0x8001c8 <setDigit+0x3>
    20b8:	c1 e0       	ldi	r28, 0x01	; 1
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	a9 01       	movw	r20, r18
    20c0:	c7 01       	movw	r24, r14
    20c2:	b6 01       	movw	r22, r12
    20c4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    20c8:	81 11       	cpse	r24, r1
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <_Z12saveSettingsv+0x4c>
    20cc:	c0 e0       	ldi	r28, 0x00	; 0
    20ce:	c0 93 e8 01 	sts	0x01E8, r28	; 0x8001e8 <settings+0x1>
			settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	c7 01       	movw	r24, r14
    20da:	b6 01       	movw	r22, r12
    20dc:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    20e0:	81 11       	cpse	r24, r1
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <_Z12saveSettingsv+0x6c>
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	a0 e2       	ldi	r26, 0x20	; 32
    20ea:	b0 e4       	ldi	r27, 0x40	; 64
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <_Z12saveSettingsv+0x74>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a0 ea       	ldi	r26, 0xA0	; 160
    20f4:	b0 e4       	ldi	r27, 0x40	; 64
    20f6:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <settings+0x2>
    20fa:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <settings+0x3>
    20fe:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <settings+0x4>
    2102:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <settings+0x5>
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
    2106:	6c 2f       	mov	r22, r28
    2108:	86 e2       	ldi	r24, 0x26	; 38
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	12 c0       	rjmp	.+36     	; 0x2132 <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
    210e:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    2112:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2116:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    211a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    211e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fixunssfsi>
    2122:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <settings+0x13>
			initAdsAmperageGain();
    2126:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_Z19initAdsAmperageGainv>
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    212a:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <settings+0x13>
    212e:	85 e2       	ldi	r24, 0x25	; 37
    2130:	90 e0       	ldi	r25, 0x00	; 0
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
			break;
	}
	
}
    2132:	cf 91       	pop	r28
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	df 90       	pop	r13
    213a:	cf 90       	pop	r12
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
			initAdsAmperageGain();
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    213c:	0c 94 df 20 	jmp	0x41be	; 0x41be <eeprom_update_byte>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			settings.currentVoltageGain = setDigit.value;
    2140:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <setDigit>
    2144:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2148:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <setDigit+0x2>
    214c:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2150:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fixunssfsi>
    2154:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <settings+0x14>
			initAdsVoltageGain();
    2158:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_Z18initAdsVoltageGainv>
			eeprom_update_byte(&eeprom_gain_voltage, settings.currentVoltageGain);
    215c:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <settings+0x14>
    2160:	84 e2       	ldi	r24, 0x24	; 36
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	e6 cf       	rjmp	.-52     	; 0x2132 <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_IMPEDANCE_AB:
			settings.impedance[0] = setDigit.value;
    2166:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    216a:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    216e:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2172:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2176:	40 93 ed 01 	sts	0x01ED, r20	; 0x8001ed <settings+0x6>
    217a:	50 93 ee 01 	sts	0x01EE, r21	; 0x8001ee <settings+0x7>
    217e:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <settings+0x8>
    2182:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <settings+0x9>
			eeprom_update_float(&eeprom_impedance_ab, settings.impedance[0]);
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	97 c0       	rjmp	.+302    	; 0x22ba <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			settings.impedance[1] = setDigit.value;
    218c:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    2190:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2194:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2198:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    219c:	40 93 f1 01 	sts	0x01F1, r20	; 0x8001f1 <settings+0xa>
    21a0:	50 93 f2 01 	sts	0x01F2, r21	; 0x8001f2 <settings+0xb>
    21a4:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <settings+0xc>
    21a8:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <settings+0xd>
			eeprom_update_float(&eeprom_impedance_bc, settings.impedance[1]);
    21ac:	8c e1       	ldi	r24, 0x1C	; 28
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	84 c0       	rjmp	.+264    	; 0x22ba <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			settings.impedance[2] = setDigit.value;
    21b2:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    21b6:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    21ba:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    21be:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    21c2:	40 93 f5 01 	sts	0x01F5, r20	; 0x8001f5 <settings+0xe>
    21c6:	50 93 f6 01 	sts	0x01F6, r21	; 0x8001f6 <settings+0xf>
    21ca:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <settings+0x10>
    21ce:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <settings+0x11>
			eeprom_update_float(&eeprom_impedance_ac, settings.impedance[2]);
    21d2:	88 e1       	ldi	r24, 0x18	; 24
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	71 c0       	rjmp	.+226    	; 0x22ba <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			settings.multiplierVoltage[0] = setDigit.value;
    21d8:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    21dc:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    21e0:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    21e4:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    21e8:	40 93 fc 01 	sts	0x01FC, r20	; 0x8001fc <settings+0x15>
    21ec:	50 93 fd 01 	sts	0x01FD, r21	; 0x8001fd <settings+0x16>
    21f0:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <settings+0x17>
    21f4:	70 93 ff 01 	sts	0x01FF, r23	; 0x8001ff <settings+0x18>
			eeprom_update_float(&eeprom_voltage_mult_ab, settings.multiplierVoltage[0]);
    21f8:	84 e1       	ldi	r24, 0x14	; 20
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	5e c0       	rjmp	.+188    	; 0x22ba <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			settings.multiplierVoltage[1] = setDigit.value;
    21fe:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    2202:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2206:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    220a:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    220e:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <settings+0x19>
    2212:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <settings+0x1a>
    2216:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <settings+0x1b>
    221a:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <settings+0x1c>
			eeprom_update_float(&eeprom_voltage_mult_bc, settings.multiplierVoltage[1]);
    221e:	80 e1       	ldi	r24, 0x10	; 16
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	4b c0       	rjmp	.+150    	; 0x22ba <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			settings.multiplierVoltage[2] = setDigit.value;
    2224:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    2228:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    222c:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2230:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2234:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <settings+0x1d>
    2238:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <settings+0x1e>
    223c:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <settings+0x1f>
    2240:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <settings+0x20>
			eeprom_update_float(&eeprom_voltage_mult_ac, settings.multiplierVoltage[2]);
    2244:	8c e0       	ldi	r24, 0x0C	; 12
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	38 c0       	rjmp	.+112    	; 0x22ba <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			settings.multiplierAmperage[0] = setDigit.value;
    224a:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    224e:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2252:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    2256:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    225a:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <settings+0x21>
    225e:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <settings+0x22>
    2262:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <settings+0x23>
    2266:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <settings+0x24>
			eeprom_update_float(&eeprom_amperage_mult_ab, settings.multiplierAmperage[0]);
    226a:	88 e0       	ldi	r24, 0x08	; 8
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	25 c0       	rjmp	.+74     	; 0x22ba <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			settings.multiplierAmperage[1] = setDigit.value;
    2270:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    2274:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    2278:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    227c:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    2280:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <settings+0x25>
    2284:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <settings+0x26>
    2288:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <settings+0x27>
    228c:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <settings+0x28>
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
    2290:	84 e0       	ldi	r24, 0x04	; 4
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	12 c0       	rjmp	.+36     	; 0x22ba <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
    2296:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <setDigit>
    229a:	50 91 c6 01 	lds	r21, 0x01C6	; 0x8001c6 <setDigit+0x1>
    229e:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <setDigit+0x2>
    22a2:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <setDigit+0x3>
    22a6:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <settings+0x29>
    22aa:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <settings+0x2a>
    22ae:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <settings+0x2b>
    22b2:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <settings+0x2c>
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	
}
    22ba:	cf 91       	pop	r28
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	df 90       	pop	r13
    22c2:	cf 90       	pop	r12
			settings.multiplierAmperage[1] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    22c4:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <eeprom_update_dword>
			break;
	}
	
}
    22c8:	cf 91       	pop	r28
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	df 90       	pop	r13
    22d0:	cf 90       	pop	r12
    22d2:	08 95       	ret

000022d4 <_Z21button2LongPressStartv>:
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
		modeWork.current = MW_SHOWING_START;
	}
}

void button2LongPressStart() {
    22d4:	cf 93       	push	r28
	if (icError.hasIC) {
    22d6:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <icError+0x19>
    22da:	88 23       	and	r24, r24
    22dc:	39 f0       	breq	.+14     	; 0x22ec <_Z21button2LongPressStartv+0x18>
		digitalWrite(BEEPER, LOW);
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	80 e1       	ldi	r24, 0x10	; 16
    22e2:	0e 94 4b 20 	call	0x4096	; 0x4096 <digitalWrite>
		icError.hasIC = false;
    22e6:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <icError+0x19>
		return;
    22ea:	4b c0       	rjmp	.+150    	; 0x2382 <_Z21button2LongPressStartv+0xae>
	}
	if (modeWork.current == MW_NEED_SETUP) {
    22ec:	c0 91 b7 01 	lds	r28, 0x01B7	; 0x8001b7 <modeWork>
    22f0:	cc 23       	and	r28, r28
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <_Z21button2LongPressStartv+0x22>
    22f4:	46 c0       	rjmp	.+140    	; 0x2382 <_Z21button2LongPressStartv+0xae>
		return;
	}
	if (modeWork.current == MW_SHOW_ERRORS_COUNTERS) {
    22f6:	cd 30       	cpi	r28, 0x0D	; 13
    22f8:	01 f5       	brne	.+64     	; 0x233a <_Z21button2LongPressStartv+0x66>
		for(byte i = 0; i < 3; i++) {
			icError.criticalLvlCount[i] = 0;
    22fa:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <icError+0xc>
    22fe:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <icError+0xd>
    2302:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <icError+0xe>
    2306:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <icError+0xf>
    230a:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <icError+0x10>
    230e:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <icError+0x11>
    2312:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <icError+0x12>
    2316:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <icError+0x13>
    231a:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <icError+0x14>
    231e:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <icError+0x15>
    2322:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <icError+0x16>
    2326:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <icError+0x17>
		}
		initAvgVars();
    232a:	0e 94 c0 02 	call	0x580	; 0x580 <_Z11initAvgVarsv>
		modeWork.current = MW_SHOWING_START;
    232e:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <modeWork>
		lcdUpdateScreen = true;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lcdUpdateScreen>
		return;
    2338:	24 c0       	rjmp	.+72     	; 0x2382 <_Z21button2LongPressStartv+0xae>
	}
	
	
	if (settings.isSetupMode) {
    233a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <settings+0x12>
    233e:	88 23       	and	r24, r24
    2340:	89 f0       	breq	.+34     	; 0x2364 <_Z21button2LongPressStartv+0x90>
		if (modeWork.current == MW_SETUP_STOP) {
    2342:	cc 30       	cpi	r28, 0x0C	; 12
    2344:	29 f4       	brne	.+10     	; 0x2350 <_Z21button2LongPressStartv+0x7c>
			saveSettings();
    2346:	0e 94 41 10 	call	0x2082	; 0x2082 <_Z12saveSettingsv>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    234a:	cf 91       	pop	r28
	
	
	if (settings.isSetupMode) {
		if (modeWork.current == MW_SETUP_STOP) {
			saveSettings();
			checkIsReadyToWork();
    234c:	0c 94 80 02 	jmp	0x500	; 0x500 <_Z18checkIsReadyToWorkv>
		} else {
			saveSettings();
    2350:	0e 94 41 10 	call	0x2082	; 0x2082 <_Z12saveSettingsv>
			modeWork.current++;
    2354:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <modeWork>
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <modeWork>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    235e:	cf 91       	pop	r28
			saveSettings();
			checkIsReadyToWork();
		} else {
			saveSettings();
			modeWork.current++;
			setEditValue();
    2360:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <_Z12setEditValuev>
		}
	} else {
		Serial.println(F("**Measurement Stoped!"));
    2364:	6c ee       	ldi	r22, 0xEC	; 236
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	84 e2       	ldi	r24, 0x24	; 36
    236a:	93 e0       	ldi	r25, 0x03	; 3
    236c:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN5Print7printlnEPK19__FlashStringHelper>
		settings.isReadyToWork = MM_STOP;
    2370:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <settings>
		modeWork.current = MW_SETUP_START;
    2374:	c1 e0       	ldi	r28, 0x01	; 1
    2376:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <modeWork>
		setEditValue();
    237a:	0e 94 19 0c 	call	0x1832	; 0x1832 <_Z12setEditValuev>
		settings.isSetupMode = true;
    237e:	c0 93 f9 01 	sts	0x01F9, r28	; 0x8001f9 <settings+0x12>
	}
}
    2382:	cf 91       	pop	r28
    2384:	08 95       	ret

00002386 <_GLOBAL__sub_I_eeprom_first_start>:
	| GAIN_SIXTEEN   | x16  |    0.256    | 0.0078125	 |
	------------------------------------------------------
*/


Adafruit_ADS1115 adsVoltage(0x48);
    2386:	68 e4       	ldi	r22, 0x48	; 72
    2388:	8b e5       	ldi	r24, 0x5B	; 91
    238a:	92 e0       	ldi	r25, 0x02	; 2
    238c:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 adsAmperage(0x49);
    2390:	69 e4       	ldi	r22, 0x49	; 73
    2392:	86 e5       	ldi	r24, 0x56	; 86
    2394:	92 e0       	ldi	r25, 0x02	; 2
    2396:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN16Adafruit_ADS1115C1Eh>
		В режиме измерения смена режима показа назад
	Динное нажатие:
		В режиме измерения в меню критических величин сбрасывает счетчик
		Переход в режим настроек/отображения измерений кроме режима критических величин
*/
OneButton button1Callback(BUTTON_1, false);
    239a:	21 e0       	ldi	r18, 0x01	; 1
    239c:	40 e0       	ldi	r20, 0x00	; 0
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	6e e0       	ldi	r22, 0x0E	; 14
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	85 e3       	ldi	r24, 0x35	; 53
    23a6:	92 e0       	ldi	r25, 0x02	; 2
    23a8:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN9OneButtonC1Eiib>
OneButton button2Callback(BUTTON_2, false);
    23ac:	21 e0       	ldi	r18, 0x01	; 1
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	6f e0       	ldi	r22, 0x0F	; 15
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	84 e1       	ldi	r24, 0x14	; 20
    23b8:	92 e0       	ldi	r25, 0x02	; 2
    23ba:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN9OneButtonC1Eiib>
	float sumMeasuredAmperage[3] = {0, 0, 0};
	byte measurementsCount = 50;
	byte currentMeasurement = 1;
};	

struct Settings {
    23be:	e7 ee       	ldi	r30, 0xE7	; 231
    23c0:	f1 e0       	ldi	r31, 0x01	; 1
    23c2:	10 82       	st	Z, r1
    23c4:	11 82       	std	Z+1, r1	; 0x01
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	a0 e2       	ldi	r26, 0x20	; 32
    23cc:	b0 e4       	ldi	r27, 0x40	; 64
    23ce:	82 83       	std	Z+2, r24	; 0x02
    23d0:	93 83       	std	Z+3, r25	; 0x03
    23d2:	a4 83       	std	Z+4, r26	; 0x04
    23d4:	b5 83       	std	Z+5, r27	; 0x05
    23d6:	16 82       	std	Z+6, r1	; 0x06
    23d8:	17 82       	std	Z+7, r1	; 0x07
    23da:	10 86       	std	Z+8, r1	; 0x08
    23dc:	11 86       	std	Z+9, r1	; 0x09
    23de:	12 86       	std	Z+10, r1	; 0x0a
    23e0:	13 86       	std	Z+11, r1	; 0x0b
    23e2:	14 86       	std	Z+12, r1	; 0x0c
    23e4:	15 86       	std	Z+13, r1	; 0x0d
    23e6:	16 86       	std	Z+14, r1	; 0x0e
    23e8:	17 86       	std	Z+15, r1	; 0x0f
    23ea:	10 8a       	std	Z+16, r1	; 0x10
    23ec:	11 8a       	std	Z+17, r1	; 0x11
    23ee:	13 8a       	std	Z+19, r1	; 0x13
    23f0:	14 8a       	std	Z+20, r1	; 0x14
    23f2:	8c e0       	ldi	r24, 0x0C	; 12
    23f4:	ee e5       	ldi	r30, 0x5E	; 94
    23f6:	f1 e0       	ldi	r31, 0x01	; 1
    23f8:	ac ef       	ldi	r26, 0xFC	; 252
    23fa:	b1 e0       	ldi	r27, 0x01	; 1
    23fc:	01 90       	ld	r0, Z+
    23fe:	0d 92       	st	X+, r0
    2400:	8a 95       	dec	r24
    2402:	e1 f7       	brne	.-8      	; 0x23fc <_GLOBAL__sub_I_eeprom_first_start+0x76>
    2404:	8c e0       	ldi	r24, 0x0C	; 12
    2406:	ee e5       	ldi	r30, 0x5E	; 94
    2408:	f1 e0       	ldi	r31, 0x01	; 1
    240a:	a8 e0       	ldi	r26, 0x08	; 8
    240c:	b2 e0       	ldi	r27, 0x02	; 2
    240e:	01 90       	ld	r0, Z+
    2410:	0d 92       	st	X+, r0
    2412:	8a 95       	dec	r24
    2414:	e1 f7       	brne	.-8      	; 0x240e <_GLOBAL__sub_I_eeprom_first_start+0x88>
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    2416:	22 e0       	ldi	r18, 0x02	; 2
    2418:	40 e1       	ldi	r20, 0x10	; 16
    241a:	67 e2       	ldi	r22, 0x27	; 39
    241c:	89 eb       	ldi	r24, 0xB9	; 185
    241e:	91 e0       	ldi	r25, 0x01	; 1
    2420:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <_ZN17LiquidCrystal_I2CC1Ehhh>

00002424 <_ZN16Adafruit_ADS1115C1Eh>:
  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH, threshold << m_bitShift);

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    2424:	fc 01       	movw	r30, r24
    2426:	14 82       	std	Z+4, r1	; 0x04
    2428:	13 82       	std	Z+3, r1	; 0x03
    242a:	60 83       	st	Z, r22
    242c:	88 e0       	ldi	r24, 0x08	; 8
    242e:	81 83       	std	Z+1, r24	; 0x01
    2430:	12 82       	std	Z+2, r1	; 0x02
    2432:	08 95       	ret

00002434 <_ZN16Adafruit_ADS10155beginEv>:
    2434:	8e ec       	ldi	r24, 0xCE	; 206
    2436:	92 e0       	ldi	r25, 0x02	; 2
    2438:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <_ZN7TwoWire5beginEv>

0000243c <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    243c:	fc 01       	movw	r30, r24
    243e:	74 83       	std	Z+4, r23	; 0x04
    2440:	63 83       	std	Z+3, r22	; 0x03
    2442:	08 95       	ret

00002444 <_ZL13writeRegisterhhj>:
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	16 2f       	mov	r17, r22
    244c:	ea 01       	movw	r28, r20
    244e:	68 2f       	mov	r22, r24
    2450:	8e ec       	ldi	r24, 0xCE	; 206
    2452:	92 e0       	ldi	r25, 0x02	; 2
    2454:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <_ZN7TwoWire17beginTransmissionEh>
    2458:	61 2f       	mov	r22, r17
    245a:	8e ec       	ldi	r24, 0xCE	; 206
    245c:	92 e0       	ldi	r25, 0x02	; 2
    245e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZN7TwoWire5writeEh>
    2462:	6d 2f       	mov	r22, r29
    2464:	8e ec       	ldi	r24, 0xCE	; 206
    2466:	92 e0       	ldi	r25, 0x02	; 2
    2468:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZN7TwoWire5writeEh>
    246c:	6c 2f       	mov	r22, r28
    246e:	8e ec       	ldi	r24, 0xCE	; 206
    2470:	92 e0       	ldi	r25, 0x02	; 2
    2472:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZN7TwoWire5writeEh>
    2476:	8e ec       	ldi	r24, 0xCE	; 206
    2478:	92 e0       	ldi	r25, 0x02	; 2
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <_ZN7TwoWire15endTransmissionEv>

00002484 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	18 2f       	mov	r17, r24
  Wire.beginTransmission(i2cAddress);
    248c:	68 2f       	mov	r22, r24
    248e:	8e ec       	ldi	r24, 0xCE	; 206
    2490:	92 e0       	ldi	r25, 0x02	; 2
    2492:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <_ZN7TwoWire17beginTransmissionEh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	8e ec       	ldi	r24, 0xCE	; 206
    249a:	92 e0       	ldi	r25, 0x02	; 2
    249c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZN7TwoWire5writeEh>
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
    24a0:	8e ec       	ldi	r24, 0xCE	; 206
    24a2:	92 e0       	ldi	r25, 0x02	; 2
    24a4:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
    24a8:	42 e0       	ldi	r20, 0x02	; 2
    24aa:	61 2f       	mov	r22, r17
    24ac:	8e ec       	ldi	r24, 0xCE	; 206
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN7TwoWire11requestFromEhh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
  #if ARDUINO >= 100
  return Wire.read();
    24b4:	8e ec       	ldi	r24, 0xCE	; 206
    24b6:	92 e0       	ldi	r25, 0x02	; 2
    24b8:	0e 94 23 17 	call	0x2e46	; 0x2e46 <_ZN7TwoWire4readEv>
    24bc:	18 2f       	mov	r17, r24
    24be:	8e ec       	ldi	r24, 0xCE	; 206
    24c0:	92 e0       	ldi	r25, 0x02	; 2
    24c2:	0e 94 23 17 	call	0x2e46	; 0x2e46 <_ZN7TwoWire4readEv>
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
  Wire.requestFrom(i2cAddress, (uint8_t)2);
  return ((i2cread() << 8) | i2cread());  
    24c6:	d1 2f       	mov	r29, r17
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	c2 2f       	mov	r28, r18
}
    24cc:	9e 01       	movw	r18, r28
    24ce:	28 2b       	or	r18, r24
    24d0:	c9 01       	movw	r24, r18
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	1f 91       	pop	r17
    24d8:	08 95       	ret

000024da <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
  if (channel > 3)
    24de:	64 30       	cpi	r22, 0x04	; 4
    24e0:	50 f5       	brcc	.+84     	; 0x2536 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x5c>
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
    24e2:	fc 01       	movw	r30, r24
    24e4:	43 81       	ldd	r20, Z+3	; 0x03
    24e6:	54 81       	ldd	r21, Z+4	; 0x04

  // Set single-ended input channel
  switch (channel)
    24e8:	62 30       	cpi	r22, 0x02	; 2
    24ea:	51 f0       	breq	.+20     	; 0x2500 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
    24ec:	63 30       	cpi	r22, 0x03	; 3
    24ee:	59 f0       	breq	.+22     	; 0x2506 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2c>
    24f0:	61 30       	cpi	r22, 0x01	; 1
    24f2:	19 f0       	breq	.+6      	; 0x24fa <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    24f4:	43 68       	ori	r20, 0x83	; 131
    24f6:	51 64       	ori	r21, 0x41	; 65
      break;
    24f8:	08 c0       	rjmp	.+16     	; 0x250a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    24fa:	43 68       	ori	r20, 0x83	; 131
    24fc:	51 65       	ori	r21, 0x51	; 81
      break;
    24fe:	05 c0       	rjmp	.+10     	; 0x250a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    2500:	43 68       	ori	r20, 0x83	; 131
    2502:	51 66       	ori	r21, 0x61	; 97
      break;
    2504:	02 c0       	rjmp	.+4      	; 0x250a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    2506:	43 68       	ori	r20, 0x83	; 131
    2508:	51 67       	ori	r21, 0x71	; 113
    250a:	ec 01       	movw	r28, r24

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    250c:	50 68       	ori	r21, 0x80	; 128
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	88 81       	ld	r24, Y
    2512:	0e 94 22 12 	call	0x2444	; 0x2444 <_ZL13writeRegisterhhj>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
    2516:	69 81       	ldd	r22, Y+1	; 0x01
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
    2522:	88 81       	ld	r24, Y
    2524:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZL12readRegisterhh.isra.0>
    2528:	0a 80       	ldd	r0, Y+2	; 0x02
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x56>
    252c:	96 95       	lsr	r25
    252e:	87 95       	ror	r24
    2530:	0a 94       	dec	r0
    2532:	e2 f7       	brpl	.-8      	; 0x252c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x52>
    2534:	02 c0       	rjmp	.+4      	; 0x253a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x60>
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	08 95       	ret

00002540 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	08 95       	ret

00002546 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2546:	08 95       	ret

00002548 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    2548:	fc 01       	movw	r30, r24
    254a:	13 82       	std	Z+3, r1	; 0x03
    254c:	12 82       	std	Z+2, r1	; 0x02
    254e:	86 e7       	ldi	r24, 0x76	; 118
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    2556:	64 83       	std	Z+4, r22	; 0x04
    2558:	41 87       	std	Z+9, r20	; 0x09
    255a:	22 87       	std	Z+10, r18	; 0x0a
    255c:	13 86       	std	Z+11, r1	; 0x0b
    255e:	08 95       	ret

00002560 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	ec 01       	movw	r28, r24
    2568:	16 2f       	mov	r17, r22
    256a:	6c 81       	ldd	r22, Y+4	; 0x04
    256c:	8e ec       	ldi	r24, 0xCE	; 206
    256e:	92 e0       	ldi	r25, 0x02	; 2
    2570:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <_ZN7TwoWire17beginTransmissionEh>
    2574:	6b 85       	ldd	r22, Y+11	; 0x0b
    2576:	61 2b       	or	r22, r17
    2578:	8e ec       	ldi	r24, 0xCE	; 206
    257a:	92 e0       	ldi	r25, 0x02	; 2
    257c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <_ZN7TwoWire5writeEh>
    2580:	8e ec       	ldi	r24, 0xCE	; 206
    2582:	92 e0       	ldi	r25, 0x02	; 2
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <_ZN7TwoWire15endTransmissionEv>

0000258e <_ZN17LiquidCrystal_I2C9backlightEv>:
    258e:	28 e0       	ldi	r18, 0x08	; 8
    2590:	fc 01       	movw	r30, r24
    2592:	23 87       	std	Z+11, r18	; 0x0b
    2594:	60 e0       	ldi	r22, 0x00	; 0
    2596:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

0000259a <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	8c 01       	movw	r16, r24
    25a2:	c6 2f       	mov	r28, r22
    25a4:	64 60       	ori	r22, 0x04	; 4
    25a6:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <delayMicroseconds>
    25b2:	6c 2f       	mov	r22, r28
    25b4:	6b 7f       	andi	r22, 0xFB	; 251
    25b6:	c8 01       	movw	r24, r16
    25b8:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25bc:	82 e3       	ldi	r24, 0x32	; 50
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	cf 91       	pop	r28
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <delayMicroseconds>

000025ca <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	ec 01       	movw	r28, r24
    25d2:	16 2f       	mov	r17, r22
    25d4:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    25d8:	61 2f       	mov	r22, r17
    25da:	ce 01       	movw	r24, r28
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0c 94 cd 12 	jmp	0x259a	; 0x259a <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000025e6 <_ZN17LiquidCrystal_I2C4sendEhh>:
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	8c 01       	movw	r16, r24
    25f0:	c6 2f       	mov	r28, r22
    25f2:	d4 2f       	mov	r29, r20
    25f4:	60 7f       	andi	r22, 0xF0	; 240
    25f6:	64 2b       	or	r22, r20
    25f8:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN17LiquidCrystal_I2C10write4bitsEh>
    25fc:	80 e1       	ldi	r24, 0x10	; 16
    25fe:	c8 9f       	mul	r28, r24
    2600:	b0 01       	movw	r22, r0
    2602:	11 24       	eor	r1, r1
    2604:	6d 2b       	or	r22, r29
    2606:	c8 01       	movw	r24, r16
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	1f 91       	pop	r17
    260e:	0f 91       	pop	r16
    2610:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002614 <_ZN17LiquidCrystal_I2C7commandEh>:
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <_ZN17LiquidCrystal_I2C4sendEhh>

0000261a <_ZN17LiquidCrystal_I2C5clearEv>:
    261a:	61 e0       	ldi	r22, 0x01	; 1
    261c:	0e 94 0a 13 	call	0x2614	; 0x2614 <_ZN17LiquidCrystal_I2C7commandEh>
    2620:	80 ed       	ldi	r24, 0xD0	; 208
    2622:	97 e0       	ldi	r25, 0x07	; 7
    2624:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <delayMicroseconds>

00002628 <_ZN17LiquidCrystal_I2C4homeEv>:
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	0e 94 0a 13 	call	0x2614	; 0x2614 <_ZN17LiquidCrystal_I2C7commandEh>
    262e:	80 ed       	ldi	r24, 0xD0	; 208
    2630:	97 e0       	ldi	r25, 0x07	; 7
    2632:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <delayMicroseconds>

00002636 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	28 97       	sbiw	r28, 0x08	; 8
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	9c 01       	movw	r18, r24
    264c:	88 e0       	ldi	r24, 0x08	; 8
    264e:	ea e6       	ldi	r30, 0x6A	; 106
    2650:	f1 e0       	ldi	r31, 0x01	; 1
    2652:	de 01       	movw	r26, r28
    2654:	11 96       	adiw	r26, 0x01	; 1
    2656:	01 90       	ld	r0, Z+
    2658:	0d 92       	st	X+, r0
    265a:	8a 95       	dec	r24
    265c:	e1 f7       	brne	.-8      	; 0x2656 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    265e:	f9 01       	movw	r30, r18
    2660:	80 85       	ldd	r24, Z+8	; 0x08
    2662:	84 17       	cp	r24, r20
    2664:	10 f4       	brcc	.+4      	; 0x266a <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2666:	4f ef       	ldi	r20, 0xFF	; 255
    2668:	48 0f       	add	r20, r24
    266a:	fe 01       	movw	r30, r28
    266c:	31 96       	adiw	r30, 0x01	; 1
    266e:	e4 0f       	add	r30, r20
    2670:	f1 1d       	adc	r31, r1
    2672:	e4 0f       	add	r30, r20
    2674:	f1 1d       	adc	r31, r1
    2676:	90 81       	ld	r25, Z
    2678:	69 0f       	add	r22, r25
    267a:	60 68       	ori	r22, 0x80	; 128
    267c:	c9 01       	movw	r24, r18
    267e:	28 96       	adiw	r28, 0x08	; 8
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <_ZN17LiquidCrystal_I2C7commandEh>

00002692 <_ZN17LiquidCrystal_I2C7displayEv>:
    2692:	fc 01       	movw	r30, r24
    2694:	66 81       	ldd	r22, Z+6	; 0x06
    2696:	26 2f       	mov	r18, r22
    2698:	24 60       	ori	r18, 0x04	; 4
    269a:	26 83       	std	Z+6, r18	; 0x06
    269c:	6c 60       	ori	r22, 0x0C	; 12
    269e:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <_ZN17LiquidCrystal_I2C7commandEh>

000026a2 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	08 95       	ret

000026ae <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	ec 01       	movw	r28, r24
	if (lines > 1) {
    26b4:	42 30       	cpi	r20, 0x02	; 2
    26b6:	18 f0       	brcs	.+6      	; 0x26be <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	88 60       	ori	r24, 0x08	; 8
    26bc:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    26be:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    26c0:	22 23       	and	r18, r18
    26c2:	29 f0       	breq	.+10     	; 0x26ce <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    26c4:	41 30       	cpi	r20, 0x01	; 1
    26c6:	19 f4       	brne	.+6      	; 0x26ce <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	84 60       	ori	r24, 0x04	; 4
    26cc:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    26ce:	62 e3       	ldi	r22, 0x32	; 50
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    26da:	6b 85       	ldd	r22, Y+11	; 0x0b
    26dc:	ce 01       	movw	r24, r28
    26de:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    26e2:	68 ee       	ldi	r22, 0xE8	; 232
    26e4:	73 e0       	ldi	r23, 0x03	; 3
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    26ee:	60 e3       	ldi	r22, 0x30	; 48
    26f0:	ce 01       	movw	r24, r28
    26f2:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    26f6:	84 e9       	ldi	r24, 0x94	; 148
    26f8:	91 e1       	ldi	r25, 0x11	; 17
    26fa:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    26fe:	60 e3       	ldi	r22, 0x30	; 48
    2700:	ce 01       	movw	r24, r28
    2702:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2706:	84 e9       	ldi	r24, 0x94	; 148
    2708:	91 e1       	ldi	r25, 0x11	; 17
    270a:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    270e:	60 e3       	ldi	r22, 0x30	; 48
    2710:	ce 01       	movw	r24, r28
    2712:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2716:	86 e9       	ldi	r24, 0x96	; 150
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    271e:	60 e2       	ldi	r22, 0x20	; 32
    2720:	ce 01       	movw	r24, r28
    2722:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2726:	6d 81       	ldd	r22, Y+5	; 0x05
    2728:	60 62       	ori	r22, 0x20	; 32
    272a:	ce 01       	movw	r24, r28
    272c:	0e 94 0a 13 	call	0x2614	; 0x2614 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2730:	84 e0       	ldi	r24, 0x04	; 4
    2732:	8e 83       	std	Y+6, r24	; 0x06
	display();
    2734:	ce 01       	movw	r24, r28
    2736:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    273a:	ce 01       	movw	r24, r28
    273c:	0e 94 0d 13 	call	0x261a	; 0x261a <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2744:	66 e0       	ldi	r22, 0x06	; 6
    2746:	ce 01       	movw	r24, r28
    2748:	0e 94 0a 13 	call	0x2614	; 0x2614 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    274c:	ce 01       	movw	r24, r28
  
}
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2752:	0c 94 14 13 	jmp	0x2628	; 0x2628 <_ZN17LiquidCrystal_I2C4homeEv>

00002756 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	ec 01       	movw	r28, r24
	Wire.begin();
    275c:	8e ec       	ldi	r24, 0xCE	; 206
    275e:	92 e0       	ldi	r25, 0x02	; 2
    2760:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2764:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	4a 85       	ldd	r20, Y+10	; 0x0a
    276a:	69 85       	ldd	r22, Y+9	; 0x09
    276c:	ce 01       	movw	r24, r28
}
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2772:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <_ZN17LiquidCrystal_I2C5beginEhhh>

00002776 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2776:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <_ZN17LiquidCrystal_I2C9init_privEv>

0000277a <_ZN9OneButtonC1Eiib>:

void OneButton::reset(void){
  _state = 0; // restart.
  _startTime = 0;
  _stopTime = 0;
  _isLongPressed = false;
    277a:	fc 01       	movw	r30, r24
    277c:	86 2f       	mov	r24, r22
    277e:	a2 e3       	ldi	r26, 0x32	; 50
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	b3 83       	std	Z+3, r27	; 0x03
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	a8 e5       	ldi	r26, 0x58	; 88
    2788:	b2 e0       	ldi	r27, 0x02	; 2
    278a:	b5 83       	std	Z+5, r27	; 0x05
    278c:	a4 83       	std	Z+4, r26	; 0x04
    278e:	a8 ee       	ldi	r26, 0xE8	; 232
    2790:	b3 e0       	ldi	r27, 0x03	; 3
    2792:	b7 83       	std	Z+7, r27	; 0x07
    2794:	a6 83       	std	Z+6, r26	; 0x06
    2796:	12 86       	std	Z+10, r1	; 0x0a
    2798:	14 86       	std	Z+12, r1	; 0x0c
    279a:	13 86       	std	Z+11, r1	; 0x0b
    279c:	16 86       	std	Z+14, r1	; 0x0e
    279e:	15 86       	std	Z+13, r1	; 0x0d
    27a0:	10 8a       	std	Z+16, r1	; 0x10
    27a2:	17 86       	std	Z+15, r1	; 0x0f
    27a4:	12 8a       	std	Z+18, r1	; 0x12
    27a6:	11 8a       	std	Z+17, r1	; 0x11
    27a8:	14 8a       	std	Z+20, r1	; 0x14
    27aa:	13 8a       	std	Z+19, r1	; 0x13
    27ac:	16 8a       	std	Z+22, r1	; 0x16
    27ae:	15 8a       	std	Z+21, r1	; 0x15
    27b0:	10 8e       	std	Z+24, r1	; 0x18
    27b2:	17 8a       	std	Z+23, r1	; 0x17
    27b4:	60 83       	st	Z, r22
    27b6:	71 83       	std	Z+1, r23	; 0x01
    27b8:	45 2b       	or	r20, r21
    27ba:	19 f0       	breq	.+6      	; 0x27c2 <_ZN9OneButtonC1Eiib+0x48>
    27bc:	11 86       	std	Z+9, r1	; 0x09
    27be:	10 86       	std	Z+8, r1	; 0x08
    27c0:	04 c0       	rjmp	.+8      	; 0x27ca <_ZN9OneButtonC1Eiib+0x50>
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	50 e0       	ldi	r21, 0x00	; 0
    27c6:	51 87       	std	Z+9, r21	; 0x09
    27c8:	40 87       	std	Z+8, r20	; 0x08
    27ca:	22 23       	and	r18, r18
    27cc:	11 f0       	breq	.+4      	; 0x27d2 <_ZN9OneButtonC1Eiib+0x58>
    27ce:	62 e0       	ldi	r22, 0x02	; 2
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <_ZN9OneButtonC1Eiib+0x5a>
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	0c 94 0f 20 	jmp	0x401e	; 0x401e <pinMode>

000027d8 <_ZN9OneButton16setDebounceTicksEi>:
    27d8:	fc 01       	movw	r30, r24
    27da:	73 83       	std	Z+3, r23	; 0x03
    27dc:	62 83       	std	Z+2, r22	; 0x02
    27de:	08 95       	ret

000027e0 <_ZN9OneButton13setClickTicksEi>:
    27e0:	fc 01       	movw	r30, r24
    27e2:	75 83       	std	Z+5, r23	; 0x05
    27e4:	64 83       	std	Z+4, r22	; 0x04
    27e6:	08 95       	ret

000027e8 <_ZN9OneButton13setPressTicksEi>:
    27e8:	fc 01       	movw	r30, r24
    27ea:	77 83       	std	Z+7, r23	; 0x07
    27ec:	66 83       	std	Z+6, r22	; 0x06
    27ee:	08 95       	ret

000027f0 <_ZN9OneButton11attachClickEPFvvE>:
    27f0:	fc 01       	movw	r30, r24
    27f2:	74 87       	std	Z+12, r23	; 0x0c
    27f4:	63 87       	std	Z+11, r22	; 0x0b
    27f6:	08 95       	ret

000027f8 <_ZN9OneButton20attachLongPressStartEPFvvE>:
    27f8:	fc 01       	movw	r30, r24
    27fa:	72 8b       	std	Z+18, r23	; 0x12
    27fc:	61 8b       	std	Z+17, r22	; 0x11
    27fe:	08 95       	ret

00002800 <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
    2800:	cf 92       	push	r12
    2802:	df 92       	push	r13
    2804:	ef 92       	push	r14
    2806:	ff 92       	push	r15
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	ec 01       	movw	r28, r24
    2810:	16 2f       	mov	r17, r22
  unsigned long now = millis(); // current (relative) time in msecs.
    2812:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <millis>
    2816:	6b 01       	movw	r12, r22
    2818:	7c 01       	movw	r14, r24

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
    281a:	8f 89       	ldd	r24, Y+23	; 0x17
    281c:	98 8d       	ldd	r25, Y+24	; 0x18
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	31 f4       	brne	.+12     	; 0x282e <_ZN9OneButton4tickEb+0x2e>
    if (activeLevel) {
    2822:	11 23       	and	r17, r17
    2824:	09 f4       	brne	.+2      	; 0x2828 <_ZN9OneButton4tickEb+0x28>
    2826:	bc c0       	rjmp	.+376    	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
      _state = 1; // step to state 1
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	78 c0       	rjmp	.+240    	; 0x291e <_ZN9OneButton4tickEb+0x11e>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    282e:	81 30       	cpi	r24, 0x01	; 1
    2830:	91 05       	cpc	r25, r1
    2832:	d9 f5       	brne	.+118    	; 0x28aa <_ZN9OneButton4tickEb+0xaa>
    2834:	89 8d       	ldd	r24, Y+25	; 0x19
    2836:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2838:	ab 8d       	ldd	r26, Y+27	; 0x1b
    283a:	bc 8d       	ldd	r27, Y+28	; 0x1c

    if ((!activeLevel) &&
    283c:	b7 01       	movw	r22, r14
    283e:	a6 01       	movw	r20, r12
    2840:	48 1b       	sub	r20, r24
    2842:	59 0b       	sbc	r21, r25
    2844:	6a 0b       	sbc	r22, r26
    2846:	7b 0b       	sbc	r23, r27
    2848:	11 11       	cpse	r17, r1
    284a:	0f c0       	rjmp	.+30     	; 0x286a <_ZN9OneButton4tickEb+0x6a>
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	9b 81       	ldd	r25, Y+3	; 0x03
    2850:	a0 e0       	ldi	r26, 0x00	; 0
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	48 17       	cp	r20, r24
    2856:	59 07       	cpc	r21, r25
    2858:	6a 07       	cpc	r22, r26
    285a:	7b 07       	cpc	r23, r27
    285c:	18 f4       	brcc	.+6      	; 0x2864 <_ZN9OneButton4tickEb+0x64>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
    285e:	18 8e       	std	Y+24, r1	; 0x18
    2860:	1f 8a       	std	Y+23, r1	; 0x17
    2862:	9e c0       	rjmp	.+316    	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	1d c0       	rjmp	.+58     	; 0x28a4 <_ZN9OneButton4tickEb+0xa4>
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
    286a:	8e 81       	ldd	r24, Y+6	; 0x06
    286c:	9f 81       	ldd	r25, Y+7	; 0x07
    286e:	a0 e0       	ldi	r26, 0x00	; 0
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	84 17       	cp	r24, r20
    2874:	95 07       	cpc	r25, r21
    2876:	a6 07       	cpc	r26, r22
    2878:	b7 07       	cpc	r27, r23
    287a:	08 f0       	brcs	.+2      	; 0x287e <_ZN9OneButton4tickEb+0x7e>
    287c:	91 c0       	rjmp	.+290    	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true; // Keep track of long press state
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	8a 87       	std	Y+10, r24	; 0x0a
      if (_pressFunc)
    2882:	ef 85       	ldd	r30, Y+15	; 0x0f
    2884:	f8 89       	ldd	r31, Y+16	; 0x10
    2886:	30 97       	sbiw	r30, 0x00	; 0
    2888:	09 f0       	breq	.+2      	; 0x288c <_ZN9OneButton4tickEb+0x8c>
        _pressFunc();
    288a:	09 95       	icall
      if (_longPressStartFunc)
    288c:	e9 89       	ldd	r30, Y+17	; 0x11
    288e:	fa 89       	ldd	r31, Y+18	; 0x12
    2890:	30 97       	sbiw	r30, 0x00	; 0
    2892:	09 f0       	breq	.+2      	; 0x2896 <_ZN9OneButton4tickEb+0x96>
        _longPressStartFunc();
    2894:	09 95       	icall
      if (_duringLongPressFunc)
    2896:	ed 89       	ldd	r30, Y+21	; 0x15
    2898:	fe 89       	ldd	r31, Y+22	; 0x16
    289a:	30 97       	sbiw	r30, 0x00	; 0
    289c:	09 f0       	breq	.+2      	; 0x28a0 <_ZN9OneButton4tickEb+0xa0>
        _duringLongPressFunc();
    289e:	09 95       	icall
      _state = 6; // step to state 6
    28a0:	86 e0       	ldi	r24, 0x06	; 6
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	98 8f       	std	Y+24, r25	; 0x18
    28a6:	8f 8b       	std	Y+23, r24	; 0x17
    28a8:	68 c0       	rjmp	.+208    	; 0x297a <_ZN9OneButton4tickEb+0x17a>
      _stopTime = now; // remember stopping time
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) {
    28aa:	82 30       	cpi	r24, 0x02	; 2
    28ac:	91 05       	cpc	r25, r1
    28ae:	f1 f5       	brne	.+124    	; 0x292c <_ZN9OneButton4tickEb+0x12c>
    // waiting for menu pin being pressed the second time or timeout.
    if (_doubleClickFunc == NULL ||
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b4:	89 2b       	or	r24, r25
    28b6:	99 f0       	breq	.+38     	; 0x28de <_ZN9OneButton4tickEb+0xde>
    28b8:	89 8d       	ldd	r24, Y+25	; 0x19
    28ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28bc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    28be:	bc 8d       	ldd	r27, Y+28	; 0x1c
    28c0:	b7 01       	movw	r22, r14
    28c2:	a6 01       	movw	r20, r12
    28c4:	48 1b       	sub	r20, r24
    28c6:	59 0b       	sbc	r21, r25
    28c8:	6a 0b       	sbc	r22, r26
    28ca:	7b 0b       	sbc	r23, r27
    28cc:	8c 81       	ldd	r24, Y+4	; 0x04
    28ce:	9d 81       	ldd	r25, Y+5	; 0x05
    28d0:	a0 e0       	ldi	r26, 0x00	; 0
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	84 17       	cp	r24, r20
    28d6:	95 07       	cpc	r25, r21
    28d8:	a6 07       	cpc	r26, r22
    28da:	b7 07       	cpc	r27, r23
    28dc:	38 f4       	brcc	.+14     	; 0x28ec <_ZN9OneButton4tickEb+0xec>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
    28de:	eb 85       	ldd	r30, Y+11	; 0x0b
    28e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    28e2:	30 97       	sbiw	r30, 0x00	; 0
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <_ZN9OneButton4tickEb+0xe8>
    28e6:	bb cf       	rjmp	.-138    	; 0x285e <_ZN9OneButton4tickEb+0x5e>
        _clickFunc();
    28e8:	09 95       	icall
    28ea:	b9 cf       	rjmp	.-142    	; 0x285e <_ZN9OneButton4tickEb+0x5e>
      _state = 0; // restart.

    } else if ((activeLevel) &&
    28ec:	11 23       	and	r17, r17
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <_ZN9OneButton4tickEb+0xf2>
    28f0:	57 c0       	rjmp	.+174    	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
    28f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28f6:	af 8d       	ldd	r26, Y+31	; 0x1f
    28f8:	b8 a1       	ldd	r27, Y+32	; 0x20
    28fa:	b7 01       	movw	r22, r14
    28fc:	a6 01       	movw	r20, r12
    28fe:	48 1b       	sub	r20, r24
    2900:	59 0b       	sbc	r21, r25
    2902:	6a 0b       	sbc	r22, r26
    2904:	7b 0b       	sbc	r23, r27
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	9b 81       	ldd	r25, Y+3	; 0x03
    290a:	a0 e0       	ldi	r26, 0x00	; 0
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	84 17       	cp	r24, r20
    2910:	95 07       	cpc	r25, r21
    2912:	a6 07       	cpc	r26, r22
    2914:	b7 07       	cpc	r27, r23
    2916:	08 f0       	brcs	.+2      	; 0x291a <_ZN9OneButton4tickEb+0x11a>
    2918:	43 c0       	rjmp	.+134    	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	98 8f       	std	Y+24, r25	; 0x18
    2920:	8f 8b       	std	Y+23, r24	; 0x17
      _startTime = now; // remember starting time
    2922:	c9 8e       	std	Y+25, r12	; 0x19
    2924:	da 8e       	std	Y+26, r13	; 0x1a
    2926:	eb 8e       	std	Y+27, r14	; 0x1b
    2928:	fc 8e       	std	Y+28, r15	; 0x1c
    292a:	3a c0       	rjmp	.+116    	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    292c:	83 30       	cpi	r24, 0x03	; 3
    292e:	91 05       	cpc	r25, r1
    2930:	c1 f4       	brne	.+48     	; 0x2962 <_ZN9OneButton4tickEb+0x162>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
    2932:	11 11       	cpse	r17, r1
    2934:	35 c0       	rjmp	.+106    	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
    2936:	89 8d       	ldd	r24, Y+25	; 0x19
    2938:	9a 8d       	ldd	r25, Y+26	; 0x1a
    293a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    293c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    293e:	b7 01       	movw	r22, r14
    2940:	a6 01       	movw	r20, r12
    2942:	48 1b       	sub	r20, r24
    2944:	59 0b       	sbc	r21, r25
    2946:	6a 0b       	sbc	r22, r26
    2948:	7b 0b       	sbc	r23, r27
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	9b 81       	ldd	r25, Y+3	; 0x03
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	84 17       	cp	r24, r20
    2954:	95 07       	cpc	r25, r21
    2956:	a6 07       	cpc	r26, r22
    2958:	b7 07       	cpc	r27, r23
    295a:	10 f5       	brcc	.+68     	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      // this was a 2 click sequence.
      if (_doubleClickFunc)
    295c:	ed 85       	ldd	r30, Y+13	; 0x0d
    295e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2960:	07 c0       	rjmp	.+14     	; 0x2970 <_ZN9OneButton4tickEb+0x170>
        _doubleClickFunc();
      _state = 0; // restart.
      _stopTime = now; // remember stopping time
    } // if

  } else if (_state == 6) {
    2962:	06 97       	sbiw	r24, 0x06	; 6
    2964:	e9 f4       	brne	.+58     	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
    2966:	11 11       	cpse	r17, r1
    2968:	0d c0       	rjmp	.+26     	; 0x2984 <_ZN9OneButton4tickEb+0x184>
      _isLongPressed = false; // Keep track of long press state
    296a:	1a 86       	std	Y+10, r1	; 0x0a
      if (_longPressStopFunc)
    296c:	eb 89       	ldd	r30, Y+19	; 0x13
    296e:	fc 89       	ldd	r31, Y+20	; 0x14
    2970:	30 97       	sbiw	r30, 0x00	; 0
    2972:	09 f0       	breq	.+2      	; 0x2976 <_ZN9OneButton4tickEb+0x176>
        _longPressStopFunc();
    2974:	09 95       	icall
      _state = 0; // restart.
    2976:	18 8e       	std	Y+24, r1	; 0x18
    2978:	1f 8a       	std	Y+23, r1	; 0x17
      _stopTime = now; // remember stopping time
    297a:	cd 8e       	std	Y+29, r12	; 0x1d
    297c:	de 8e       	std	Y+30, r13	; 0x1e
    297e:	ef 8e       	std	Y+31, r14	; 0x1f
    2980:	f8 a2       	std	Y+32, r15	; 0x20
    2982:	0e c0       	rjmp	.+28     	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	8a 87       	std	Y+10, r24	; 0x0a
      if (_duringLongPressFunc)
    2988:	ed 89       	ldd	r30, Y+21	; 0x15
    298a:	fe 89       	ldd	r31, Y+22	; 0x16
    298c:	30 97       	sbiw	r30, 0x00	; 0
    298e:	41 f0       	breq	.+16     	; 0x29a0 <_ZN9OneButton4tickEb+0x1a0>
        _duringLongPressFunc();
    } // if

  } // if
} // OneButton.tick()
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
      _stopTime = now; // remember stopping time
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
    299e:	09 94       	ijmp
    } // if

  } // if
} // OneButton.tick()
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	df 90       	pop	r13
    29ac:	cf 90       	pop	r12
    29ae:	08 95       	ret

000029b0 <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	ec 01       	movw	r28, r24
  if (_pin >= 0) {
    29b6:	88 81       	ld	r24, Y
    29b8:	99 81       	ldd	r25, Y+1	; 0x01
    29ba:	97 fd       	sbrc	r25, 7
    29bc:	0e c0       	rjmp	.+28     	; 0x29da <_ZN9OneButton4tickEv+0x2a>
    tick(digitalRead(_pin) == _buttonPressed);
    29be:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <digitalRead>
    29c2:	61 e0       	ldi	r22, 0x01	; 1
    29c4:	28 85       	ldd	r18, Y+8	; 0x08
    29c6:	39 85       	ldd	r19, Y+9	; 0x09
    29c8:	28 17       	cp	r18, r24
    29ca:	39 07       	cpc	r19, r25
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <_ZN9OneButton4tickEv+0x20>
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	ce 01       	movw	r24, r28
  }
}
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
    29d6:	0c 94 00 14 	jmp	0x2800	; 0x2800 <_ZN9OneButton4tickEb>
  }
}
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    29e0:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_state>
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <twi_sendStop>
    29ea:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_inRepStart>
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	82 e1       	ldi	r24, 0x12	; 18
    29f2:	0e 94 4b 20 	call	0x4096	; 0x4096 <digitalWrite>
    29f6:	61 e0       	ldi	r22, 0x01	; 1
    29f8:	83 e1       	ldi	r24, 0x13	; 19
    29fa:	0e 94 4b 20 	call	0x4096	; 0x4096 <digitalWrite>
    29fe:	e9 eb       	ldi	r30, 0xB9	; 185
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	8e 7f       	andi	r24, 0xFE	; 254
    2a06:	80 83       	st	Z, r24
    2a08:	80 81       	ld	r24, Z
    2a0a:	8d 7f       	andi	r24, 0xFD	; 253
    2a0c:	80 83       	st	Z, r24
    2a0e:	88 e4       	ldi	r24, 0x48	; 72
    2a10:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2a14:	85 e4       	ldi	r24, 0x45	; 69
    2a16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a1a:	08 95       	ret

00002a1c <twi_readFrom>:
    2a1c:	41 32       	cpi	r20, 0x21	; 33
    2a1e:	08 f0       	brcs	.+2      	; 0x2a22 <twi_readFrom+0x6>
    2a20:	43 c0       	rjmp	.+134    	; 0x2aa8 <twi_readFrom+0x8c>
    2a22:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <twi_state>
    2a26:	91 11       	cpse	r25, r1
    2a28:	fc cf       	rjmp	.-8      	; 0x2a22 <twi_readFrom+0x6>
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <twi_state>
    2a30:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <twi_sendStop>
    2a34:	2f ef       	ldi	r18, 0xFF	; 255
    2a36:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <twi_error>
    2a3a:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_masterBufferIndex>
    2a3e:	24 0f       	add	r18, r20
    2a40:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <twi_masterBufferLength>
    2a44:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <twi_slarw>
    2a48:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <twi_slarw>
    2a4c:	88 0f       	add	r24, r24
    2a4e:	89 2b       	or	r24, r25
    2a50:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <twi_slarw>
    2a54:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_inRepStart>
    2a58:	81 30       	cpi	r24, 0x01	; 1
    2a5a:	61 f4       	brne	.+24     	; 0x2a74 <twi_readFrom+0x58>
    2a5c:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_inRepStart>
    2a60:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_slarw>
    2a64:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2a68:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a6c:	83 fd       	sbrc	r24, 3
    2a6e:	f8 cf       	rjmp	.-16     	; 0x2a60 <twi_readFrom+0x44>
    2a70:	85 ec       	ldi	r24, 0xC5	; 197
    2a72:	01 c0       	rjmp	.+2      	; 0x2a76 <twi_readFrom+0x5a>
    2a74:	85 ee       	ldi	r24, 0xE5	; 229
    2a76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a7a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <twi_state>
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	e1 f3       	breq	.-8      	; 0x2a7a <twi_readFrom+0x5e>
    2a82:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2a86:	84 17       	cp	r24, r20
    2a88:	10 f4       	brcc	.+4      	; 0x2a8e <twi_readFrom+0x72>
    2a8a:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2a8e:	a6 ea       	ldi	r26, 0xA6	; 166
    2a90:	b2 e0       	ldi	r27, 0x02	; 2
    2a92:	96 2f       	mov	r25, r22
    2a94:	fb 01       	movw	r30, r22
    2a96:	8e 2f       	mov	r24, r30
    2a98:	89 1b       	sub	r24, r25
    2a9a:	84 17       	cp	r24, r20
    2a9c:	18 f4       	brcc	.+6      	; 0x2aa4 <twi_readFrom+0x88>
    2a9e:	8d 91       	ld	r24, X+
    2aa0:	81 93       	st	Z+, r24
    2aa2:	f9 cf       	rjmp	.-14     	; 0x2a96 <twi_readFrom+0x7a>
    2aa4:	84 2f       	mov	r24, r20
    2aa6:	08 95       	ret
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	08 95       	ret

00002aac <twi_writeTo>:
    2aac:	0f 93       	push	r16
    2aae:	41 32       	cpi	r20, 0x21	; 33
    2ab0:	08 f0       	brcs	.+2      	; 0x2ab4 <twi_writeTo+0x8>
    2ab2:	4a c0       	rjmp	.+148    	; 0x2b48 <twi_writeTo+0x9c>
    2ab4:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <twi_state>
    2ab8:	91 11       	cpse	r25, r1
    2aba:	fc cf       	rjmp	.-8      	; 0x2ab4 <twi_writeTo+0x8>
    2abc:	32 e0       	ldi	r19, 0x02	; 2
    2abe:	30 93 cd 02 	sts	0x02CD, r19	; 0x8002cd <twi_state>
    2ac2:	00 93 cb 02 	sts	0x02CB, r16	; 0x8002cb <twi_sendStop>
    2ac6:	3f ef       	ldi	r19, 0xFF	; 255
    2ac8:	30 93 60 02 	sts	0x0260, r19	; 0x800260 <twi_error>
    2acc:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_masterBufferIndex>
    2ad0:	40 93 a4 02 	sts	0x02A4, r20	; 0x8002a4 <twi_masterBufferLength>
    2ad4:	56 2f       	mov	r21, r22
    2ad6:	a6 ea       	ldi	r26, 0xA6	; 166
    2ad8:	b2 e0       	ldi	r27, 0x02	; 2
    2ada:	fb 01       	movw	r30, r22
    2adc:	3e 2f       	mov	r19, r30
    2ade:	35 1b       	sub	r19, r21
    2ae0:	34 17       	cp	r19, r20
    2ae2:	18 f4       	brcc	.+6      	; 0x2aea <twi_writeTo+0x3e>
    2ae4:	31 91       	ld	r19, Z+
    2ae6:	3d 93       	st	X+, r19
    2ae8:	f9 cf       	rjmp	.-14     	; 0x2adc <twi_writeTo+0x30>
    2aea:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <twi_slarw>
    2aee:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <twi_slarw>
    2af2:	88 0f       	add	r24, r24
    2af4:	83 2b       	or	r24, r19
    2af6:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <twi_slarw>
    2afa:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <twi_inRepStart>
    2afe:	81 30       	cpi	r24, 0x01	; 1
    2b00:	61 f4       	brne	.+24     	; 0x2b1a <twi_writeTo+0x6e>
    2b02:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <twi_inRepStart>
    2b06:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_slarw>
    2b0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b0e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b12:	83 fd       	sbrc	r24, 3
    2b14:	f8 cf       	rjmp	.-16     	; 0x2b06 <twi_writeTo+0x5a>
    2b16:	85 ec       	ldi	r24, 0xC5	; 197
    2b18:	01 c0       	rjmp	.+2      	; 0x2b1c <twi_writeTo+0x70>
    2b1a:	85 ee       	ldi	r24, 0xE5	; 229
    2b1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b20:	22 23       	and	r18, r18
    2b22:	21 f0       	breq	.+8      	; 0x2b2c <twi_writeTo+0x80>
    2b24:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <twi_state>
    2b28:	82 30       	cpi	r24, 0x02	; 2
    2b2a:	d1 f3       	breq	.-12     	; 0x2b20 <twi_writeTo+0x74>
    2b2c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_error>
    2b30:	8f 3f       	cpi	r24, 0xFF	; 255
    2b32:	79 f0       	breq	.+30     	; 0x2b52 <twi_writeTo+0xa6>
    2b34:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_error>
    2b38:	80 32       	cpi	r24, 0x20	; 32
    2b3a:	41 f0       	breq	.+16     	; 0x2b4c <twi_writeTo+0xa0>
    2b3c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi_error>
    2b40:	80 33       	cpi	r24, 0x30	; 48
    2b42:	31 f0       	breq	.+12     	; 0x2b50 <twi_writeTo+0xa4>
    2b44:	94 e0       	ldi	r25, 0x04	; 4
    2b46:	05 c0       	rjmp	.+10     	; 0x2b52 <twi_writeTo+0xa6>
    2b48:	91 e0       	ldi	r25, 0x01	; 1
    2b4a:	03 c0       	rjmp	.+6      	; 0x2b52 <twi_writeTo+0xa6>
    2b4c:	92 e0       	ldi	r25, 0x02	; 2
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <twi_writeTo+0xa6>
    2b50:	93 e0       	ldi	r25, 0x03	; 3
    2b52:	89 2f       	mov	r24, r25
    2b54:	0f 91       	pop	r16
    2b56:	08 95       	ret

00002b58 <twi_transmit>:
    2b58:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <twi_txBufferLength>
    2b5c:	26 2f       	mov	r18, r22
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	24 0f       	add	r18, r20
    2b62:	31 1d       	adc	r19, r1
    2b64:	21 32       	cpi	r18, 0x21	; 33
    2b66:	31 05       	cpc	r19, r1
    2b68:	dc f4       	brge	.+54     	; 0x2ba0 <twi_transmit+0x48>
    2b6a:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <twi_state>
    2b6e:	24 30       	cpi	r18, 0x04	; 4
    2b70:	c9 f4       	brne	.+50     	; 0x2ba4 <twi_transmit+0x4c>
    2b72:	fc 01       	movw	r30, r24
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	86 17       	cp	r24, r22
    2b7a:	58 f4       	brcc	.+22     	; 0x2b92 <twi_transmit+0x3a>
    2b7c:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <twi_txBufferLength>
    2b80:	21 91       	ld	r18, Z+
    2b82:	dc 01       	movw	r26, r24
    2b84:	ac 57       	subi	r26, 0x7C	; 124
    2b86:	bd 4f       	sbci	r27, 0xFD	; 253
    2b88:	a3 0f       	add	r26, r19
    2b8a:	b1 1d       	adc	r27, r1
    2b8c:	2c 93       	st	X, r18
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	f3 cf       	rjmp	.-26     	; 0x2b78 <twi_transmit+0x20>
    2b92:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    2b96:	68 0f       	add	r22, r24
    2b98:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <twi_txBufferLength>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	08 95       	ret
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	08 95       	ret
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	08 95       	ret

00002ba8 <twi_attachSlaveRxEvent>:
    2ba8:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <twi_onSlaveReceive+0x1>
    2bac:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <twi_onSlaveReceive>
    2bb0:	08 95       	ret

00002bb2 <twi_attachSlaveTxEvent>:
    2bb2:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <twi_onSlaveTransmit+0x1>
    2bb6:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <twi_onSlaveTransmit>
    2bba:	08 95       	ret

00002bbc <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2bbc:	85 ed       	ldi	r24, 0xD5	; 213
    2bbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2bc2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2bc6:	84 fd       	sbrc	r24, 4
    2bc8:	fc cf       	rjmp	.-8      	; 0x2bc2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2bca:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_state>
    2bce:	08 95       	ret

00002bd0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2bd0:	85 ec       	ldi	r24, 0xC5	; 197
    2bd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2bd6:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_state>
    2bda:	08 95       	ret

00002bdc <__vector_24>:
}

ISR(TWI_vect)
{
    2bdc:	1f 92       	push	r1
    2bde:	0f 92       	push	r0
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	0f 92       	push	r0
    2be4:	11 24       	eor	r1, r1
    2be6:	2f 93       	push	r18
    2be8:	3f 93       	push	r19
    2bea:	4f 93       	push	r20
    2bec:	5f 93       	push	r21
    2bee:	6f 93       	push	r22
    2bf0:	7f 93       	push	r23
    2bf2:	8f 93       	push	r24
    2bf4:	9f 93       	push	r25
    2bf6:	af 93       	push	r26
    2bf8:	bf 93       	push	r27
    2bfa:	ef 93       	push	r30
    2bfc:	ff 93       	push	r31
  switch(TW_STATUS){
    2bfe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2c02:	88 7f       	andi	r24, 0xF8	; 248
    2c04:	80 36       	cpi	r24, 0x60	; 96
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <__vector_24+0x2e>
    2c08:	9e c0       	rjmp	.+316    	; 0x2d46 <__vector_24+0x16a>
    2c0a:	78 f5       	brcc	.+94     	; 0x2c6a <__vector_24+0x8e>
    2c0c:	88 32       	cpi	r24, 0x28	; 40
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <__vector_24+0x36>
    2c10:	5d c0       	rjmp	.+186    	; 0x2ccc <__vector_24+0xf0>
    2c12:	90 f4       	brcc	.+36     	; 0x2c38 <__vector_24+0x5c>
    2c14:	80 31       	cpi	r24, 0x10	; 16
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <__vector_24+0x3e>
    2c18:	56 c0       	rjmp	.+172    	; 0x2cc6 <__vector_24+0xea>
    2c1a:	38 f4       	brcc	.+14     	; 0x2c2a <__vector_24+0x4e>
    2c1c:	88 23       	and	r24, r24
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <__vector_24+0x46>
    2c20:	f5 c0       	rjmp	.+490    	; 0x2e0c <__vector_24+0x230>
    2c22:	88 30       	cpi	r24, 0x08	; 8
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <__vector_24+0x4c>
    2c26:	4f c0       	rjmp	.+158    	; 0x2cc6 <__vector_24+0xea>
    2c28:	f5 c0       	rjmp	.+490    	; 0x2e14 <__vector_24+0x238>
    2c2a:	88 31       	cpi	r24, 0x18	; 24
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <__vector_24+0x54>
    2c2e:	4e c0       	rjmp	.+156    	; 0x2ccc <__vector_24+0xf0>
    2c30:	80 32       	cpi	r24, 0x20	; 32
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <__vector_24+0x5a>
    2c34:	5f c0       	rjmp	.+190    	; 0x2cf4 <__vector_24+0x118>
    2c36:	ee c0       	rjmp	.+476    	; 0x2e14 <__vector_24+0x238>
    2c38:	80 34       	cpi	r24, 0x40	; 64
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <__vector_24+0x62>
    2c3c:	6a c0       	rjmp	.+212    	; 0x2d12 <__vector_24+0x136>
    2c3e:	58 f4       	brcc	.+22     	; 0x2c56 <__vector_24+0x7a>
    2c40:	80 33       	cpi	r24, 0x30	; 48
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <__vector_24+0x6a>
    2c44:	57 c0       	rjmp	.+174    	; 0x2cf4 <__vector_24+0x118>
    2c46:	88 33       	cpi	r24, 0x38	; 56
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <__vector_24+0x70>
    2c4a:	e4 c0       	rjmp	.+456    	; 0x2e14 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2c4c:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <twi_error>
      twi_releaseBus();
    2c50:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <twi_releaseBus>
      break;
    2c54:	df c0       	rjmp	.+446    	; 0x2e14 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2c56:	80 35       	cpi	r24, 0x50	; 80
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <__vector_24+0x80>
    2c5a:	4f c0       	rjmp	.+158    	; 0x2cfa <__vector_24+0x11e>
    2c5c:	88 35       	cpi	r24, 0x58	; 88
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <__vector_24+0x86>
    2c60:	5d c0       	rjmp	.+186    	; 0x2d1c <__vector_24+0x140>
    2c62:	88 34       	cpi	r24, 0x48	; 72
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <__vector_24+0x8c>
    2c66:	d6 c0       	rjmp	.+428    	; 0x2e14 <__vector_24+0x238>
    2c68:	d3 c0       	rjmp	.+422    	; 0x2e10 <__vector_24+0x234>
    2c6a:	88 39       	cpi	r24, 0x98	; 152
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <__vector_24+0x94>
    2c6e:	c4 c0       	rjmp	.+392    	; 0x2df8 <__vector_24+0x21c>
    2c70:	a8 f4       	brcc	.+42     	; 0x2c9c <__vector_24+0xc0>
    2c72:	88 37       	cpi	r24, 0x78	; 120
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <__vector_24+0x9c>
    2c76:	67 c0       	rjmp	.+206    	; 0x2d46 <__vector_24+0x16a>
    2c78:	38 f4       	brcc	.+14     	; 0x2c88 <__vector_24+0xac>
    2c7a:	88 36       	cpi	r24, 0x68	; 104
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <__vector_24+0xa4>
    2c7e:	63 c0       	rjmp	.+198    	; 0x2d46 <__vector_24+0x16a>
    2c80:	80 37       	cpi	r24, 0x70	; 112
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <__vector_24+0xaa>
    2c84:	60 c0       	rjmp	.+192    	; 0x2d46 <__vector_24+0x16a>
    2c86:	c6 c0       	rjmp	.+396    	; 0x2e14 <__vector_24+0x238>
    2c88:	88 38       	cpi	r24, 0x88	; 136
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <__vector_24+0xb2>
    2c8c:	b5 c0       	rjmp	.+362    	; 0x2df8 <__vector_24+0x21c>
    2c8e:	80 39       	cpi	r24, 0x90	; 144
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <__vector_24+0xb8>
    2c92:	5f c0       	rjmp	.+190    	; 0x2d52 <__vector_24+0x176>
    2c94:	80 38       	cpi	r24, 0x80	; 128
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <__vector_24+0xbe>
    2c98:	bd c0       	rjmp	.+378    	; 0x2e14 <__vector_24+0x238>
    2c9a:	5b c0       	rjmp	.+182    	; 0x2d52 <__vector_24+0x176>
    2c9c:	80 3b       	cpi	r24, 0xB0	; 176
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <__vector_24+0xc6>
    2ca0:	83 c0       	rjmp	.+262    	; 0x2da8 <__vector_24+0x1cc>
    2ca2:	38 f4       	brcc	.+14     	; 0x2cb2 <__vector_24+0xd6>
    2ca4:	80 3a       	cpi	r24, 0xA0	; 160
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <__vector_24+0xce>
    2ca8:	66 c0       	rjmp	.+204    	; 0x2d76 <__vector_24+0x19a>
    2caa:	88 3a       	cpi	r24, 0xA8	; 168
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <__vector_24+0xd4>
    2cae:	7c c0       	rjmp	.+248    	; 0x2da8 <__vector_24+0x1cc>
    2cb0:	b1 c0       	rjmp	.+354    	; 0x2e14 <__vector_24+0x238>
    2cb2:	80 3c       	cpi	r24, 0xC0	; 192
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <__vector_24+0xdc>
    2cb6:	a4 c0       	rjmp	.+328    	; 0x2e00 <__vector_24+0x224>
    2cb8:	88 3c       	cpi	r24, 0xC8	; 200
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <__vector_24+0xe2>
    2cbc:	a1 c0       	rjmp	.+322    	; 0x2e00 <__vector_24+0x224>
    2cbe:	88 3b       	cpi	r24, 0xB8	; 184
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <__vector_24+0xe8>
    2cc2:	87 c0       	rjmp	.+270    	; 0x2dd2 <__vector_24+0x1f6>
    2cc4:	a7 c0       	rjmp	.+334    	; 0x2e14 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2cc6:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <twi_slarw>
    2cca:	10 c0       	rjmp	.+32     	; 0x2cec <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ccc:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2cd0:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_masterBufferLength>
    2cd4:	98 17       	cp	r25, r24
    2cd6:	70 f5       	brcc	.+92     	; 0x2d34 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2cd8:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	8e 0f       	add	r24, r30
    2ce0:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_masterBufferIndex>
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	ea 55       	subi	r30, 0x5A	; 90
    2ce8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cea:	80 81       	ld	r24, Z
    2cec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2cf0:	85 ec       	ldi	r24, 0xC5	; 197
    2cf2:	83 c0       	rjmp	.+262    	; 0x2dfa <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2cf4:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <twi_error>
    2cf8:	8b c0       	rjmp	.+278    	; 0x2e10 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2cfa:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	8e 0f       	add	r24, r30
    2d02:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_masterBufferIndex>
    2d06:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	ea 55       	subi	r30, 0x5A	; 90
    2d0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d10:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2d12:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2d16:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_masterBufferLength>
    2d1a:	6b c0       	rjmp	.+214    	; 0x2df2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2d1c:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <twi_masterBufferIndex>
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	8e 0f       	add	r24, r30
    2d24:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_masterBufferIndex>
    2d28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	ea 55       	subi	r30, 0x5A	; 90
    2d30:	fd 4f       	sbci	r31, 0xFD	; 253
    2d32:	80 83       	st	Z, r24
	if (twi_sendStop)
    2d34:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <twi_sendStop>
    2d38:	81 11       	cpse	r24, r1
    2d3a:	6a c0       	rjmp	.+212    	; 0x2e10 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2d42:	84 ea       	ldi	r24, 0xA4	; 164
    2d44:	5e c0       	rjmp	.+188    	; 0x2e02 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2d4c:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_rxBufferIndex>
    2d50:	cf cf       	rjmp	.-98     	; 0x2cf0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2d52:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d56:	80 32       	cpi	r24, 0x20	; 32
    2d58:	08 f0       	brcs	.+2      	; 0x2d5c <__vector_24+0x180>
    2d5a:	4e c0       	rjmp	.+156    	; 0x2df8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2d5c:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	8e 0f       	add	r24, r30
    2d64:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi_rxBufferIndex>
    2d68:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	ee 59       	subi	r30, 0x9E	; 158
    2d70:	fd 4f       	sbci	r31, 0xFD	; 253
    2d72:	80 83       	st	Z, r24
    2d74:	bd cf       	rjmp	.-134    	; 0x2cf0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2d76:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2d7a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d7e:	80 32       	cpi	r24, 0x20	; 32
    2d80:	30 f4       	brcc	.+12     	; 0x2d8e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2d82:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	ee 59       	subi	r30, 0x9E	; 158
    2d8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d8c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2d8e:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <twi_rxBufferIndex>
    2d92:	70 e0       	ldi	r23, 0x00	; 0
    2d94:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <twi_onSlaveReceive>
    2d98:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <twi_onSlaveReceive+0x1>
    2d9c:	82 e6       	ldi	r24, 0x62	; 98
    2d9e:	92 e0       	ldi	r25, 0x02	; 2
    2da0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2da2:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi_rxBufferIndex>
      break;
    2da6:	36 c0       	rjmp	.+108    	; 0x2e14 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2da8:	84 e0       	ldi	r24, 0x04	; 4
    2daa:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2dae:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2db2:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2db6:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <twi_onSlaveTransmit>
    2dba:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <twi_onSlaveTransmit+0x1>
    2dbe:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2dc0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    2dc4:	81 11       	cpse	r24, r1
    2dc6:	05 c0       	rjmp	.+10     	; 0x2dd2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2dce:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2dd2:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_txBufferIndex>
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	8e 0f       	add	r24, r30
    2dda:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_txBufferIndex>
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	ec 57       	subi	r30, 0x7C	; 124
    2de2:	fd 4f       	sbci	r31, 0xFD	; 253
    2de4:	80 81       	ld	r24, Z
    2de6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2dea:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <twi_txBufferIndex>
    2dee:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_txBufferLength>
    2df2:	98 17       	cp	r25, r24
    2df4:	08 f4       	brcc	.+2      	; 0x2df8 <__vector_24+0x21c>
    2df6:	7c cf       	rjmp	.-264    	; 0x2cf0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2df8:	85 e8       	ldi	r24, 0x85	; 133
    2dfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dfe:	0a c0       	rjmp	.+20     	; 0x2e14 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2e00:	85 ec       	ldi	r24, 0xC5	; 197
    2e02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2e06:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <twi_state>
      break;
    2e0a:	04 c0       	rjmp	.+8      	; 0x2e14 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2e0c:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <twi_error>
      twi_stop();
    2e10:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <twi_stop>
      break;
  }
}
    2e14:	ff 91       	pop	r31
    2e16:	ef 91       	pop	r30
    2e18:	bf 91       	pop	r27
    2e1a:	af 91       	pop	r26
    2e1c:	9f 91       	pop	r25
    2e1e:	8f 91       	pop	r24
    2e20:	7f 91       	pop	r23
    2e22:	6f 91       	pop	r22
    2e24:	5f 91       	pop	r21
    2e26:	4f 91       	pop	r20
    2e28:	3f 91       	pop	r19
    2e2a:	2f 91       	pop	r18
    2e2c:	0f 90       	pop	r0
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	0f 90       	pop	r0
    2e32:	1f 90       	pop	r1
    2e34:	18 95       	reti

00002e36 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2e36:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2e40:	82 1b       	sub	r24, r18
    2e42:	91 09       	sbc	r25, r1
    2e44:	08 95       	ret

00002e46 <_ZN7TwoWire4readEv>:
    2e46:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2e4a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2e4e:	98 17       	cp	r25, r24
    2e50:	50 f4       	brcc	.+20     	; 0x2e66 <_ZN7TwoWire4readEv+0x20>
    2e52:	e9 2f       	mov	r30, r25
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	ec 5f       	subi	r30, 0xFC	; 252
    2e58:	fc 4f       	sbci	r31, 0xFC	; 252
    2e5a:	20 81       	ld	r18, Z
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	9f 5f       	subi	r25, 0xFF	; 255
    2e60:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <_ZN7TwoWire4readEv+0x24>
    2e66:	2f ef       	ldi	r18, 0xFF	; 255
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	c9 01       	movw	r24, r18
    2e6c:	08 95       	ret

00002e6e <_ZN7TwoWire4peekEv>:
    2e6e:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2e72:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2e76:	e8 17       	cp	r30, r24
    2e78:	30 f4       	brcc	.+12     	; 0x2e86 <_ZN7TwoWire4peekEv+0x18>
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	ec 5f       	subi	r30, 0xFC	; 252
    2e7e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e80:	80 81       	ld	r24, Z
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	08 95       	ret
    2e86:	8f ef       	ldi	r24, 0xFF	; 255
    2e88:	9f ef       	ldi	r25, 0xFF	; 255
    2e8a:	08 95       	ret

00002e8c <_ZN7TwoWire5flushEv>:
    2e8c:	08 95       	ret

00002e8e <_ZN7TwoWire16onReceiveServiceEPhi>:
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	ec 01       	movw	r28, r24
    2e94:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <_ZN7TwoWire14user_onReceiveE>
    2e98:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <_ZN7TwoWire14user_onReceiveE+0x1>
    2e9c:	30 97       	sbiw	r30, 0x00	; 0
    2e9e:	f1 f0       	breq	.+60     	; 0x2edc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2ea0:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2ea4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2ea8:	98 17       	cp	r25, r24
    2eaa:	c0 f0       	brcs	.+48     	; 0x2edc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	29 2f       	mov	r18, r25
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	26 17       	cp	r18, r22
    2eb4:	37 07       	cpc	r19, r23
    2eb6:	54 f4       	brge	.+20     	; 0x2ecc <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2eb8:	de 01       	movw	r26, r28
    2eba:	a2 0f       	add	r26, r18
    2ebc:	b3 1f       	adc	r27, r19
    2ebe:	4c 91       	ld	r20, X
    2ec0:	d9 01       	movw	r26, r18
    2ec2:	ac 5f       	subi	r26, 0xFC	; 252
    2ec4:	bc 4f       	sbci	r27, 0xFC	; 252
    2ec6:	4c 93       	st	X, r20
    2ec8:	9f 5f       	subi	r25, 0xFF	; 255
    2eca:	f1 cf       	rjmp	.-30     	; 0x2eae <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2ecc:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2ed0:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	09 94       	ijmp
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	08 95       	ret

00002ee2 <_ZN7TwoWire16onRequestServiceEv>:
    2ee2:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <_ZN7TwoWire14user_onRequestE>
    2ee6:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <_ZN7TwoWire14user_onRequestE+0x1>
    2eea:	30 97       	sbiw	r30, 0x00	; 0
    2eec:	29 f0       	breq	.+10     	; 0x2ef8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2eee:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    2ef2:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    2ef6:	09 94       	ijmp
    2ef8:	08 95       	ret

00002efa <_ZN7TwoWire5writeEPKhj>:
    2efa:	cf 92       	push	r12
    2efc:	df 92       	push	r13
    2efe:	ef 92       	push	r14
    2f00:	ff 92       	push	r15
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	7c 01       	movw	r14, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	8a 01       	movw	r16, r20
    2f10:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <_ZN7TwoWire12transmittingE>
    2f14:	22 23       	and	r18, r18
    2f16:	89 f0       	breq	.+34     	; 0x2f3a <_ZN7TwoWire5writeEPKhj+0x40>
    2f18:	eb 01       	movw	r28, r22
    2f1a:	6b 01       	movw	r12, r22
    2f1c:	c4 0e       	add	r12, r20
    2f1e:	d5 1e       	adc	r13, r21
    2f20:	cc 15       	cp	r28, r12
    2f22:	dd 05       	cpc	r29, r13
    2f24:	69 f0       	breq	.+26     	; 0x2f40 <_ZN7TwoWire5writeEPKhj+0x46>
    2f26:	69 91       	ld	r22, Y+
    2f28:	d7 01       	movw	r26, r14
    2f2a:	ed 91       	ld	r30, X+
    2f2c:	fc 91       	ld	r31, X
    2f2e:	01 90       	ld	r0, Z+
    2f30:	f0 81       	ld	r31, Z
    2f32:	e0 2d       	mov	r30, r0
    2f34:	c7 01       	movw	r24, r14
    2f36:	09 95       	icall
    2f38:	f3 cf       	rjmp	.-26     	; 0x2f20 <_ZN7TwoWire5writeEPKhj+0x26>
    2f3a:	64 2f       	mov	r22, r20
    2f3c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_transmit>
    2f40:	c8 01       	movw	r24, r16
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	ff 90       	pop	r15
    2f4c:	ef 90       	pop	r14
    2f4e:	df 90       	pop	r13
    2f50:	cf 90       	pop	r12
    2f52:	08 95       	ret

00002f54 <_ZN7TwoWire5writeEh>:
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	1f 92       	push	r1
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	69 83       	std	Y+1, r22	; 0x01
    2f60:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <_ZN7TwoWire12transmittingE>
    2f64:	22 23       	and	r18, r18
    2f66:	d1 f0       	breq	.+52     	; 0x2f9c <_ZN7TwoWire5writeEh+0x48>
    2f68:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    2f6c:	20 32       	cpi	r18, 0x20	; 32
    2f6e:	40 f0       	brcs	.+16     	; 0x2f80 <_ZN7TwoWire5writeEh+0x2c>
    2f70:	21 e0       	ldi	r18, 0x01	; 1
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	fc 01       	movw	r30, r24
    2f76:	33 83       	std	Z+3, r19	; 0x03
    2f78:	22 83       	std	Z+2, r18	; 0x02
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	15 c0       	rjmp	.+42     	; 0x2faa <_ZN7TwoWire5writeEh+0x56>
    2f80:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    2f84:	e8 2f       	mov	r30, r24
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	ef 51       	subi	r30, 0x1F	; 31
    2f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f8c:	99 81       	ldd	r25, Y+1	; 0x01
    2f8e:	90 83       	st	Z, r25
    2f90:	8f 5f       	subi	r24, 0xFF	; 255
    2f92:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    2f96:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    2f9a:	05 c0       	rjmp	.+10     	; 0x2fa6 <_ZN7TwoWire5writeEh+0x52>
    2f9c:	61 e0       	ldi	r22, 0x01	; 1
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <twi_transmit>
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	0f 90       	pop	r0
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	08 95       	ret

00002fb2 <_ZN7TwoWireC1Ev>:
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	13 82       	std	Z+3, r1	; 0x03
    2fb6:	12 82       	std	Z+2, r1	; 0x02
    2fb8:	88 ee       	ldi	r24, 0xE8	; 232
    2fba:	93 e0       	ldi	r25, 0x03	; 3
    2fbc:	a0 e0       	ldi	r26, 0x00	; 0
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	84 83       	std	Z+4, r24	; 0x04
    2fc2:	95 83       	std	Z+5, r25	; 0x05
    2fc4:	a6 83       	std	Z+6, r26	; 0x06
    2fc6:	b7 83       	std	Z+7, r27	; 0x07
    2fc8:	82 e8       	ldi	r24, 0x82	; 130
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
    2fd0:	08 95       	ret

00002fd2 <_ZN7TwoWire5beginEv>:
    2fd2:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    2fd6:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    2fda:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    2fde:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    2fe2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <twi_init>
    2fe6:	81 e7       	ldi	r24, 0x71	; 113
    2fe8:	97 e1       	ldi	r25, 0x17	; 23
    2fea:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <twi_attachSlaveTxEvent>
    2fee:	87 e4       	ldi	r24, 0x47	; 71
    2ff0:	97 e1       	ldi	r25, 0x17	; 23
    2ff2:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <twi_attachSlaveRxEvent>

00002ff6 <_ZN7TwoWire17beginTransmissionEh>:
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_ZN7TwoWire12transmittingE>
    2ffc:	60 93 01 03 	sts	0x0301, r22	; 0x800301 <_ZN7TwoWire9txAddressE>
    3000:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    3004:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    3008:	08 95       	ret

0000300a <_ZN7TwoWire15endTransmissionEh>:
    300a:	0f 93       	push	r16
    300c:	06 2f       	mov	r16, r22
    300e:	21 e0       	ldi	r18, 0x01	; 1
    3010:	40 91 df 02 	lds	r20, 0x02DF	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    3014:	61 ee       	ldi	r22, 0xE1	; 225
    3016:	72 e0       	ldi	r23, 0x02	; 2
    3018:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZN7TwoWire9txAddressE>
    301c:	0e 94 56 15 	call	0x2aac	; 0x2aac <twi_writeTo>
    3020:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <_ZN7TwoWire13txBufferIndexE>
    3024:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <_ZN7TwoWire14txBufferLengthE>
    3028:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_ZN7TwoWire12transmittingE>
    302c:	0f 91       	pop	r16
    302e:	08 95       	ret

00003030 <_ZN7TwoWire11requestFromEhhmhh>:
    3030:	4f 92       	push	r4
    3032:	5f 92       	push	r5
    3034:	6f 92       	push	r6
    3036:	7f 92       	push	r7
    3038:	af 92       	push	r10
    303a:	bf 92       	push	r11
    303c:	cf 92       	push	r12
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	5c 01       	movw	r10, r24
    304c:	f6 2e       	mov	r15, r22
    304e:	d4 2f       	mov	r29, r20
    3050:	28 01       	movw	r4, r16
    3052:	39 01       	movw	r6, r18
    3054:	ee 20       	and	r14, r14
    3056:	21 f1       	breq	.+72     	; 0x30a0 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3058:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <_ZN7TwoWire17beginTransmissionEh>
    305c:	ce 2d       	mov	r28, r14
    305e:	c4 30       	cpi	r28, 0x04	; 4
    3060:	08 f0       	brcs	.+2      	; 0x3064 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3062:	c3 e0       	ldi	r28, 0x03	; 3
    3064:	c1 50       	subi	r28, 0x01	; 1
    3066:	c0 f0       	brcs	.+48     	; 0x3098 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3068:	28 e0       	ldi	r18, 0x08	; 8
    306a:	c2 9f       	mul	r28, r18
    306c:	c0 01       	movw	r24, r0
    306e:	11 24       	eor	r1, r1
    3070:	a3 01       	movw	r20, r6
    3072:	92 01       	movw	r18, r4
    3074:	04 c0       	rjmp	.+8      	; 0x307e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    3076:	56 95       	lsr	r21
    3078:	47 95       	ror	r20
    307a:	37 95       	ror	r19
    307c:	27 95       	ror	r18
    307e:	8a 95       	dec	r24
    3080:	d2 f7       	brpl	.-12     	; 0x3076 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3082:	ca 01       	movw	r24, r20
    3084:	b9 01       	movw	r22, r18
    3086:	d5 01       	movw	r26, r10
    3088:	ed 91       	ld	r30, X+
    308a:	fc 91       	ld	r31, X
    308c:	01 90       	ld	r0, Z+
    308e:	f0 81       	ld	r31, Z
    3090:	e0 2d       	mov	r30, r0
    3092:	c5 01       	movw	r24, r10
    3094:	09 95       	icall
    3096:	e6 cf       	rjmp	.-52     	; 0x3064 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	c5 01       	movw	r24, r10
    309c:	0e 94 05 18 	call	0x300a	; 0x300a <_ZN7TwoWire15endTransmissionEh>
    30a0:	4d 2f       	mov	r20, r29
    30a2:	d1 32       	cpi	r29, 0x21	; 33
    30a4:	08 f0       	brcs	.+2      	; 0x30a8 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    30a6:	40 e2       	ldi	r20, 0x20	; 32
    30a8:	2c 2d       	mov	r18, r12
    30aa:	64 e0       	ldi	r22, 0x04	; 4
    30ac:	73 e0       	ldi	r23, 0x03	; 3
    30ae:	8f 2d       	mov	r24, r15
    30b0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <twi_readFrom>
    30b4:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <_ZN7TwoWire13rxBufferIndexE>
    30b8:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZN7TwoWire14rxBufferLengthE>
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	ff 90       	pop	r15
    30c6:	ef 90       	pop	r14
    30c8:	cf 90       	pop	r12
    30ca:	bf 90       	pop	r11
    30cc:	af 90       	pop	r10
    30ce:	7f 90       	pop	r7
    30d0:	6f 90       	pop	r6
    30d2:	5f 90       	pop	r5
    30d4:	4f 90       	pop	r4
    30d6:	08 95       	ret

000030d8 <_ZN7TwoWire11requestFromEhhh>:
    30d8:	cf 92       	push	r12
    30da:	ef 92       	push	r14
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	c2 2e       	mov	r12, r18
    30e2:	e1 2c       	mov	r14, r1
    30e4:	00 e0       	ldi	r16, 0x00	; 0
    30e6:	10 e0       	ldi	r17, 0x00	; 0
    30e8:	98 01       	movw	r18, r16
    30ea:	0e 94 18 18 	call	0x3030	; 0x3030 <_ZN7TwoWire11requestFromEhhmhh>
    30ee:	1f 91       	pop	r17
    30f0:	0f 91       	pop	r16
    30f2:	ef 90       	pop	r14
    30f4:	cf 90       	pop	r12
    30f6:	08 95       	ret

000030f8 <_ZN7TwoWire11requestFromEhh>:
    30f8:	21 e0       	ldi	r18, 0x01	; 1
    30fa:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <_ZN7TwoWire11requestFromEhhh>

000030fe <_ZN7TwoWire15endTransmissionEv>:
    30fe:	61 e0       	ldi	r22, 0x01	; 1
    3100:	0c 94 05 18 	jmp	0x300a	; 0x300a <_ZN7TwoWire15endTransmissionEh>

00003104 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3104:	8e ec       	ldi	r24, 0xCE	; 206
    3106:	92 e0       	ldi	r25, 0x02	; 2
    3108:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <_ZN7TwoWireC1Ev>

0000310c <__subsf3>:
    310c:	50 58       	subi	r21, 0x80	; 128

0000310e <__addsf3>:
    310e:	bb 27       	eor	r27, r27
    3110:	aa 27       	eor	r26, r26
    3112:	0e 94 9e 18 	call	0x313c	; 0x313c <__addsf3x>
    3116:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__fp_round>
    311a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscA>
    311e:	38 f0       	brcs	.+14     	; 0x312e <__addsf3+0x20>
    3120:	0e 94 11 1a 	call	0x3422	; 0x3422 <__fp_pscB>
    3124:	20 f0       	brcs	.+8      	; 0x312e <__addsf3+0x20>
    3126:	39 f4       	brne	.+14     	; 0x3136 <__addsf3+0x28>
    3128:	9f 3f       	cpi	r25, 0xFF	; 255
    312a:	19 f4       	brne	.+6      	; 0x3132 <__addsf3+0x24>
    312c:	26 f4       	brtc	.+8      	; 0x3136 <__addsf3+0x28>
    312e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_nan>
    3132:	0e f4       	brtc	.+2      	; 0x3136 <__addsf3+0x28>
    3134:	e0 95       	com	r30
    3136:	e7 fb       	bst	r30, 7
    3138:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>

0000313c <__addsf3x>:
    313c:	e9 2f       	mov	r30, r25
    313e:	0e 94 29 1a 	call	0x3452	; 0x3452 <__fp_split3>
    3142:	58 f3       	brcs	.-42     	; 0x311a <__addsf3+0xc>
    3144:	ba 17       	cp	r27, r26
    3146:	62 07       	cpc	r22, r18
    3148:	73 07       	cpc	r23, r19
    314a:	84 07       	cpc	r24, r20
    314c:	95 07       	cpc	r25, r21
    314e:	20 f0       	brcs	.+8      	; 0x3158 <__addsf3x+0x1c>
    3150:	79 f4       	brne	.+30     	; 0x3170 <__addsf3x+0x34>
    3152:	a6 f5       	brtc	.+104    	; 0x31bc <__addsf3x+0x80>
    3154:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__fp_zero>
    3158:	0e f4       	brtc	.+2      	; 0x315c <__addsf3x+0x20>
    315a:	e0 95       	com	r30
    315c:	0b 2e       	mov	r0, r27
    315e:	ba 2f       	mov	r27, r26
    3160:	a0 2d       	mov	r26, r0
    3162:	0b 01       	movw	r0, r22
    3164:	b9 01       	movw	r22, r18
    3166:	90 01       	movw	r18, r0
    3168:	0c 01       	movw	r0, r24
    316a:	ca 01       	movw	r24, r20
    316c:	a0 01       	movw	r20, r0
    316e:	11 24       	eor	r1, r1
    3170:	ff 27       	eor	r31, r31
    3172:	59 1b       	sub	r21, r25
    3174:	99 f0       	breq	.+38     	; 0x319c <__addsf3x+0x60>
    3176:	59 3f       	cpi	r21, 0xF9	; 249
    3178:	50 f4       	brcc	.+20     	; 0x318e <__addsf3x+0x52>
    317a:	50 3e       	cpi	r21, 0xE0	; 224
    317c:	68 f1       	brcs	.+90     	; 0x31d8 <__addsf3x+0x9c>
    317e:	1a 16       	cp	r1, r26
    3180:	f0 40       	sbci	r31, 0x00	; 0
    3182:	a2 2f       	mov	r26, r18
    3184:	23 2f       	mov	r18, r19
    3186:	34 2f       	mov	r19, r20
    3188:	44 27       	eor	r20, r20
    318a:	58 5f       	subi	r21, 0xF8	; 248
    318c:	f3 cf       	rjmp	.-26     	; 0x3174 <__addsf3x+0x38>
    318e:	46 95       	lsr	r20
    3190:	37 95       	ror	r19
    3192:	27 95       	ror	r18
    3194:	a7 95       	ror	r26
    3196:	f0 40       	sbci	r31, 0x00	; 0
    3198:	53 95       	inc	r21
    319a:	c9 f7       	brne	.-14     	; 0x318e <__addsf3x+0x52>
    319c:	7e f4       	brtc	.+30     	; 0x31bc <__addsf3x+0x80>
    319e:	1f 16       	cp	r1, r31
    31a0:	ba 0b       	sbc	r27, r26
    31a2:	62 0b       	sbc	r22, r18
    31a4:	73 0b       	sbc	r23, r19
    31a6:	84 0b       	sbc	r24, r20
    31a8:	ba f0       	brmi	.+46     	; 0x31d8 <__addsf3x+0x9c>
    31aa:	91 50       	subi	r25, 0x01	; 1
    31ac:	a1 f0       	breq	.+40     	; 0x31d6 <__addsf3x+0x9a>
    31ae:	ff 0f       	add	r31, r31
    31b0:	bb 1f       	adc	r27, r27
    31b2:	66 1f       	adc	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	88 1f       	adc	r24, r24
    31b8:	c2 f7       	brpl	.-16     	; 0x31aa <__addsf3x+0x6e>
    31ba:	0e c0       	rjmp	.+28     	; 0x31d8 <__addsf3x+0x9c>
    31bc:	ba 0f       	add	r27, r26
    31be:	62 1f       	adc	r22, r18
    31c0:	73 1f       	adc	r23, r19
    31c2:	84 1f       	adc	r24, r20
    31c4:	48 f4       	brcc	.+18     	; 0x31d8 <__addsf3x+0x9c>
    31c6:	87 95       	ror	r24
    31c8:	77 95       	ror	r23
    31ca:	67 95       	ror	r22
    31cc:	b7 95       	ror	r27
    31ce:	f7 95       	ror	r31
    31d0:	9e 3f       	cpi	r25, 0xFE	; 254
    31d2:	08 f0       	brcs	.+2      	; 0x31d6 <__addsf3x+0x9a>
    31d4:	b0 cf       	rjmp	.-160    	; 0x3136 <__addsf3+0x28>
    31d6:	93 95       	inc	r25
    31d8:	88 0f       	add	r24, r24
    31da:	08 f0       	brcs	.+2      	; 0x31de <__addsf3x+0xa2>
    31dc:	99 27       	eor	r25, r25
    31de:	ee 0f       	add	r30, r30
    31e0:	97 95       	ror	r25
    31e2:	87 95       	ror	r24
    31e4:	08 95       	ret

000031e6 <__cmpsf2>:
    31e6:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fp_cmp>
    31ea:	08 f4       	brcc	.+2      	; 0x31ee <__cmpsf2+0x8>
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	08 95       	ret

000031f0 <__divsf3>:
    31f0:	0e 94 0c 19 	call	0x3218	; 0x3218 <__divsf3x>
    31f4:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__fp_round>
    31f8:	0e 94 11 1a 	call	0x3422	; 0x3422 <__fp_pscB>
    31fc:	58 f0       	brcs	.+22     	; 0x3214 <__divsf3+0x24>
    31fe:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscA>
    3202:	40 f0       	brcs	.+16     	; 0x3214 <__divsf3+0x24>
    3204:	29 f4       	brne	.+10     	; 0x3210 <__divsf3+0x20>
    3206:	5f 3f       	cpi	r21, 0xFF	; 255
    3208:	29 f0       	breq	.+10     	; 0x3214 <__divsf3+0x24>
    320a:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>
    320e:	51 11       	cpse	r21, r1
    3210:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>
    3214:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_nan>

00003218 <__divsf3x>:
    3218:	0e 94 29 1a 	call	0x3452	; 0x3452 <__fp_split3>
    321c:	68 f3       	brcs	.-38     	; 0x31f8 <__divsf3+0x8>

0000321e <__divsf3_pse>:
    321e:	99 23       	and	r25, r25
    3220:	b1 f3       	breq	.-20     	; 0x320e <__divsf3+0x1e>
    3222:	55 23       	and	r21, r21
    3224:	91 f3       	breq	.-28     	; 0x320a <__divsf3+0x1a>
    3226:	95 1b       	sub	r25, r21
    3228:	55 0b       	sbc	r21, r21
    322a:	bb 27       	eor	r27, r27
    322c:	aa 27       	eor	r26, r26
    322e:	62 17       	cp	r22, r18
    3230:	73 07       	cpc	r23, r19
    3232:	84 07       	cpc	r24, r20
    3234:	38 f0       	brcs	.+14     	; 0x3244 <__divsf3_pse+0x26>
    3236:	9f 5f       	subi	r25, 0xFF	; 255
    3238:	5f 4f       	sbci	r21, 0xFF	; 255
    323a:	22 0f       	add	r18, r18
    323c:	33 1f       	adc	r19, r19
    323e:	44 1f       	adc	r20, r20
    3240:	aa 1f       	adc	r26, r26
    3242:	a9 f3       	breq	.-22     	; 0x322e <__divsf3_pse+0x10>
    3244:	35 d0       	rcall	.+106    	; 0x32b0 <__divsf3_pse+0x92>
    3246:	0e 2e       	mov	r0, r30
    3248:	3a f0       	brmi	.+14     	; 0x3258 <__divsf3_pse+0x3a>
    324a:	e0 e8       	ldi	r30, 0x80	; 128
    324c:	32 d0       	rcall	.+100    	; 0x32b2 <__divsf3_pse+0x94>
    324e:	91 50       	subi	r25, 0x01	; 1
    3250:	50 40       	sbci	r21, 0x00	; 0
    3252:	e6 95       	lsr	r30
    3254:	00 1c       	adc	r0, r0
    3256:	ca f7       	brpl	.-14     	; 0x324a <__divsf3_pse+0x2c>
    3258:	2b d0       	rcall	.+86     	; 0x32b0 <__divsf3_pse+0x92>
    325a:	fe 2f       	mov	r31, r30
    325c:	29 d0       	rcall	.+82     	; 0x32b0 <__divsf3_pse+0x92>
    325e:	66 0f       	add	r22, r22
    3260:	77 1f       	adc	r23, r23
    3262:	88 1f       	adc	r24, r24
    3264:	bb 1f       	adc	r27, r27
    3266:	26 17       	cp	r18, r22
    3268:	37 07       	cpc	r19, r23
    326a:	48 07       	cpc	r20, r24
    326c:	ab 07       	cpc	r26, r27
    326e:	b0 e8       	ldi	r27, 0x80	; 128
    3270:	09 f0       	breq	.+2      	; 0x3274 <__divsf3_pse+0x56>
    3272:	bb 0b       	sbc	r27, r27
    3274:	80 2d       	mov	r24, r0
    3276:	bf 01       	movw	r22, r30
    3278:	ff 27       	eor	r31, r31
    327a:	93 58       	subi	r25, 0x83	; 131
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	3a f0       	brmi	.+14     	; 0x328e <__divsf3_pse+0x70>
    3280:	9e 3f       	cpi	r25, 0xFE	; 254
    3282:	51 05       	cpc	r21, r1
    3284:	78 f0       	brcs	.+30     	; 0x32a4 <__divsf3_pse+0x86>
    3286:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>
    328a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>
    328e:	5f 3f       	cpi	r21, 0xFF	; 255
    3290:	e4 f3       	brlt	.-8      	; 0x328a <__divsf3_pse+0x6c>
    3292:	98 3e       	cpi	r25, 0xE8	; 232
    3294:	d4 f3       	brlt	.-12     	; 0x328a <__divsf3_pse+0x6c>
    3296:	86 95       	lsr	r24
    3298:	77 95       	ror	r23
    329a:	67 95       	ror	r22
    329c:	b7 95       	ror	r27
    329e:	f7 95       	ror	r31
    32a0:	9f 5f       	subi	r25, 0xFF	; 255
    32a2:	c9 f7       	brne	.-14     	; 0x3296 <__divsf3_pse+0x78>
    32a4:	88 0f       	add	r24, r24
    32a6:	91 1d       	adc	r25, r1
    32a8:	96 95       	lsr	r25
    32aa:	87 95       	ror	r24
    32ac:	97 f9       	bld	r25, 7
    32ae:	08 95       	ret
    32b0:	e1 e0       	ldi	r30, 0x01	; 1
    32b2:	66 0f       	add	r22, r22
    32b4:	77 1f       	adc	r23, r23
    32b6:	88 1f       	adc	r24, r24
    32b8:	bb 1f       	adc	r27, r27
    32ba:	62 17       	cp	r22, r18
    32bc:	73 07       	cpc	r23, r19
    32be:	84 07       	cpc	r24, r20
    32c0:	ba 07       	cpc	r27, r26
    32c2:	20 f0       	brcs	.+8      	; 0x32cc <__divsf3_pse+0xae>
    32c4:	62 1b       	sub	r22, r18
    32c6:	73 0b       	sbc	r23, r19
    32c8:	84 0b       	sbc	r24, r20
    32ca:	ba 0b       	sbc	r27, r26
    32cc:	ee 1f       	adc	r30, r30
    32ce:	88 f7       	brcc	.-30     	; 0x32b2 <__divsf3_pse+0x94>
    32d0:	e0 95       	com	r30
    32d2:	08 95       	ret

000032d4 <__fixsfsi>:
    32d4:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fixunssfsi>
    32d8:	68 94       	set
    32da:	b1 11       	cpse	r27, r1
    32dc:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>
    32e0:	08 95       	ret

000032e2 <__fixunssfsi>:
    32e2:	0e 94 31 1a 	call	0x3462	; 0x3462 <__fp_splitA>
    32e6:	88 f0       	brcs	.+34     	; 0x330a <__fixunssfsi+0x28>
    32e8:	9f 57       	subi	r25, 0x7F	; 127
    32ea:	98 f0       	brcs	.+38     	; 0x3312 <__fixunssfsi+0x30>
    32ec:	b9 2f       	mov	r27, r25
    32ee:	99 27       	eor	r25, r25
    32f0:	b7 51       	subi	r27, 0x17	; 23
    32f2:	b0 f0       	brcs	.+44     	; 0x3320 <__fixunssfsi+0x3e>
    32f4:	e1 f0       	breq	.+56     	; 0x332e <__fixunssfsi+0x4c>
    32f6:	66 0f       	add	r22, r22
    32f8:	77 1f       	adc	r23, r23
    32fa:	88 1f       	adc	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	1a f0       	brmi	.+6      	; 0x3306 <__fixunssfsi+0x24>
    3300:	ba 95       	dec	r27
    3302:	c9 f7       	brne	.-14     	; 0x32f6 <__fixunssfsi+0x14>
    3304:	14 c0       	rjmp	.+40     	; 0x332e <__fixunssfsi+0x4c>
    3306:	b1 30       	cpi	r27, 0x01	; 1
    3308:	91 f0       	breq	.+36     	; 0x332e <__fixunssfsi+0x4c>
    330a:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__fp_zero>
    330e:	b1 e0       	ldi	r27, 0x01	; 1
    3310:	08 95       	ret
    3312:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <__fp_zero>
    3316:	67 2f       	mov	r22, r23
    3318:	78 2f       	mov	r23, r24
    331a:	88 27       	eor	r24, r24
    331c:	b8 5f       	subi	r27, 0xF8	; 248
    331e:	39 f0       	breq	.+14     	; 0x332e <__fixunssfsi+0x4c>
    3320:	b9 3f       	cpi	r27, 0xF9	; 249
    3322:	cc f3       	brlt	.-14     	; 0x3316 <__fixunssfsi+0x34>
    3324:	86 95       	lsr	r24
    3326:	77 95       	ror	r23
    3328:	67 95       	ror	r22
    332a:	b3 95       	inc	r27
    332c:	d9 f7       	brne	.-10     	; 0x3324 <__fixunssfsi+0x42>
    332e:	3e f4       	brtc	.+14     	; 0x333e <__fixunssfsi+0x5c>
    3330:	90 95       	com	r25
    3332:	80 95       	com	r24
    3334:	70 95       	com	r23
    3336:	61 95       	neg	r22
    3338:	7f 4f       	sbci	r23, 0xFF	; 255
    333a:	8f 4f       	sbci	r24, 0xFF	; 255
    333c:	9f 4f       	sbci	r25, 0xFF	; 255
    333e:	08 95       	ret

00003340 <__floatunsisf>:
    3340:	e8 94       	clt
    3342:	09 c0       	rjmp	.+18     	; 0x3356 <__floatsisf+0x12>

00003344 <__floatsisf>:
    3344:	97 fb       	bst	r25, 7
    3346:	3e f4       	brtc	.+14     	; 0x3356 <__floatsisf+0x12>
    3348:	90 95       	com	r25
    334a:	80 95       	com	r24
    334c:	70 95       	com	r23
    334e:	61 95       	neg	r22
    3350:	7f 4f       	sbci	r23, 0xFF	; 255
    3352:	8f 4f       	sbci	r24, 0xFF	; 255
    3354:	9f 4f       	sbci	r25, 0xFF	; 255
    3356:	99 23       	and	r25, r25
    3358:	a9 f0       	breq	.+42     	; 0x3384 <__floatsisf+0x40>
    335a:	f9 2f       	mov	r31, r25
    335c:	96 e9       	ldi	r25, 0x96	; 150
    335e:	bb 27       	eor	r27, r27
    3360:	93 95       	inc	r25
    3362:	f6 95       	lsr	r31
    3364:	87 95       	ror	r24
    3366:	77 95       	ror	r23
    3368:	67 95       	ror	r22
    336a:	b7 95       	ror	r27
    336c:	f1 11       	cpse	r31, r1
    336e:	f8 cf       	rjmp	.-16     	; 0x3360 <__floatsisf+0x1c>
    3370:	fa f4       	brpl	.+62     	; 0x33b0 <__floatsisf+0x6c>
    3372:	bb 0f       	add	r27, r27
    3374:	11 f4       	brne	.+4      	; 0x337a <__floatsisf+0x36>
    3376:	60 ff       	sbrs	r22, 0
    3378:	1b c0       	rjmp	.+54     	; 0x33b0 <__floatsisf+0x6c>
    337a:	6f 5f       	subi	r22, 0xFF	; 255
    337c:	7f 4f       	sbci	r23, 0xFF	; 255
    337e:	8f 4f       	sbci	r24, 0xFF	; 255
    3380:	9f 4f       	sbci	r25, 0xFF	; 255
    3382:	16 c0       	rjmp	.+44     	; 0x33b0 <__floatsisf+0x6c>
    3384:	88 23       	and	r24, r24
    3386:	11 f0       	breq	.+4      	; 0x338c <__floatsisf+0x48>
    3388:	96 e9       	ldi	r25, 0x96	; 150
    338a:	11 c0       	rjmp	.+34     	; 0x33ae <__floatsisf+0x6a>
    338c:	77 23       	and	r23, r23
    338e:	21 f0       	breq	.+8      	; 0x3398 <__floatsisf+0x54>
    3390:	9e e8       	ldi	r25, 0x8E	; 142
    3392:	87 2f       	mov	r24, r23
    3394:	76 2f       	mov	r23, r22
    3396:	05 c0       	rjmp	.+10     	; 0x33a2 <__floatsisf+0x5e>
    3398:	66 23       	and	r22, r22
    339a:	71 f0       	breq	.+28     	; 0x33b8 <__floatsisf+0x74>
    339c:	96 e8       	ldi	r25, 0x86	; 134
    339e:	86 2f       	mov	r24, r22
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	2a f0       	brmi	.+10     	; 0x33b0 <__floatsisf+0x6c>
    33a6:	9a 95       	dec	r25
    33a8:	66 0f       	add	r22, r22
    33aa:	77 1f       	adc	r23, r23
    33ac:	88 1f       	adc	r24, r24
    33ae:	da f7       	brpl	.-10     	; 0x33a6 <__floatsisf+0x62>
    33b0:	88 0f       	add	r24, r24
    33b2:	96 95       	lsr	r25
    33b4:	87 95       	ror	r24
    33b6:	97 f9       	bld	r25, 7
    33b8:	08 95       	ret

000033ba <__fp_cmp>:
    33ba:	99 0f       	add	r25, r25
    33bc:	00 08       	sbc	r0, r0
    33be:	55 0f       	add	r21, r21
    33c0:	aa 0b       	sbc	r26, r26
    33c2:	e0 e8       	ldi	r30, 0x80	; 128
    33c4:	fe ef       	ldi	r31, 0xFE	; 254
    33c6:	16 16       	cp	r1, r22
    33c8:	17 06       	cpc	r1, r23
    33ca:	e8 07       	cpc	r30, r24
    33cc:	f9 07       	cpc	r31, r25
    33ce:	c0 f0       	brcs	.+48     	; 0x3400 <__fp_cmp+0x46>
    33d0:	12 16       	cp	r1, r18
    33d2:	13 06       	cpc	r1, r19
    33d4:	e4 07       	cpc	r30, r20
    33d6:	f5 07       	cpc	r31, r21
    33d8:	98 f0       	brcs	.+38     	; 0x3400 <__fp_cmp+0x46>
    33da:	62 1b       	sub	r22, r18
    33dc:	73 0b       	sbc	r23, r19
    33de:	84 0b       	sbc	r24, r20
    33e0:	95 0b       	sbc	r25, r21
    33e2:	39 f4       	brne	.+14     	; 0x33f2 <__fp_cmp+0x38>
    33e4:	0a 26       	eor	r0, r26
    33e6:	61 f0       	breq	.+24     	; 0x3400 <__fp_cmp+0x46>
    33e8:	23 2b       	or	r18, r19
    33ea:	24 2b       	or	r18, r20
    33ec:	25 2b       	or	r18, r21
    33ee:	21 f4       	brne	.+8      	; 0x33f8 <__fp_cmp+0x3e>
    33f0:	08 95       	ret
    33f2:	0a 26       	eor	r0, r26
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <__fp_cmp+0x3e>
    33f6:	a1 40       	sbci	r26, 0x01	; 1
    33f8:	a6 95       	lsr	r26
    33fa:	8f ef       	ldi	r24, 0xFF	; 255
    33fc:	81 1d       	adc	r24, r1
    33fe:	81 1d       	adc	r24, r1
    3400:	08 95       	ret

00003402 <__fp_inf>:
    3402:	97 f9       	bld	r25, 7
    3404:	9f 67       	ori	r25, 0x7F	; 127
    3406:	80 e8       	ldi	r24, 0x80	; 128
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	60 e0       	ldi	r22, 0x00	; 0
    340c:	08 95       	ret

0000340e <__fp_nan>:
    340e:	9f ef       	ldi	r25, 0xFF	; 255
    3410:	80 ec       	ldi	r24, 0xC0	; 192
    3412:	08 95       	ret

00003414 <__fp_pscA>:
    3414:	00 24       	eor	r0, r0
    3416:	0a 94       	dec	r0
    3418:	16 16       	cp	r1, r22
    341a:	17 06       	cpc	r1, r23
    341c:	18 06       	cpc	r1, r24
    341e:	09 06       	cpc	r0, r25
    3420:	08 95       	ret

00003422 <__fp_pscB>:
    3422:	00 24       	eor	r0, r0
    3424:	0a 94       	dec	r0
    3426:	12 16       	cp	r1, r18
    3428:	13 06       	cpc	r1, r19
    342a:	14 06       	cpc	r1, r20
    342c:	05 06       	cpc	r0, r21
    342e:	08 95       	ret

00003430 <__fp_round>:
    3430:	09 2e       	mov	r0, r25
    3432:	03 94       	inc	r0
    3434:	00 0c       	add	r0, r0
    3436:	11 f4       	brne	.+4      	; 0x343c <__fp_round+0xc>
    3438:	88 23       	and	r24, r24
    343a:	52 f0       	brmi	.+20     	; 0x3450 <__fp_round+0x20>
    343c:	bb 0f       	add	r27, r27
    343e:	40 f4       	brcc	.+16     	; 0x3450 <__fp_round+0x20>
    3440:	bf 2b       	or	r27, r31
    3442:	11 f4       	brne	.+4      	; 0x3448 <__fp_round+0x18>
    3444:	60 ff       	sbrs	r22, 0
    3446:	04 c0       	rjmp	.+8      	; 0x3450 <__fp_round+0x20>
    3448:	6f 5f       	subi	r22, 0xFF	; 255
    344a:	7f 4f       	sbci	r23, 0xFF	; 255
    344c:	8f 4f       	sbci	r24, 0xFF	; 255
    344e:	9f 4f       	sbci	r25, 0xFF	; 255
    3450:	08 95       	ret

00003452 <__fp_split3>:
    3452:	57 fd       	sbrc	r21, 7
    3454:	90 58       	subi	r25, 0x80	; 128
    3456:	44 0f       	add	r20, r20
    3458:	55 1f       	adc	r21, r21
    345a:	59 f0       	breq	.+22     	; 0x3472 <__fp_splitA+0x10>
    345c:	5f 3f       	cpi	r21, 0xFF	; 255
    345e:	71 f0       	breq	.+28     	; 0x347c <__fp_splitA+0x1a>
    3460:	47 95       	ror	r20

00003462 <__fp_splitA>:
    3462:	88 0f       	add	r24, r24
    3464:	97 fb       	bst	r25, 7
    3466:	99 1f       	adc	r25, r25
    3468:	61 f0       	breq	.+24     	; 0x3482 <__fp_splitA+0x20>
    346a:	9f 3f       	cpi	r25, 0xFF	; 255
    346c:	79 f0       	breq	.+30     	; 0x348c <__fp_splitA+0x2a>
    346e:	87 95       	ror	r24
    3470:	08 95       	ret
    3472:	12 16       	cp	r1, r18
    3474:	13 06       	cpc	r1, r19
    3476:	14 06       	cpc	r1, r20
    3478:	55 1f       	adc	r21, r21
    347a:	f2 cf       	rjmp	.-28     	; 0x3460 <__fp_split3+0xe>
    347c:	46 95       	lsr	r20
    347e:	f1 df       	rcall	.-30     	; 0x3462 <__fp_splitA>
    3480:	08 c0       	rjmp	.+16     	; 0x3492 <__fp_splitA+0x30>
    3482:	16 16       	cp	r1, r22
    3484:	17 06       	cpc	r1, r23
    3486:	18 06       	cpc	r1, r24
    3488:	99 1f       	adc	r25, r25
    348a:	f1 cf       	rjmp	.-30     	; 0x346e <__fp_splitA+0xc>
    348c:	86 95       	lsr	r24
    348e:	71 05       	cpc	r23, r1
    3490:	61 05       	cpc	r22, r1
    3492:	08 94       	sec
    3494:	08 95       	ret

00003496 <__fp_zero>:
    3496:	e8 94       	clt

00003498 <__fp_szero>:
    3498:	bb 27       	eor	r27, r27
    349a:	66 27       	eor	r22, r22
    349c:	77 27       	eor	r23, r23
    349e:	cb 01       	movw	r24, r22
    34a0:	97 f9       	bld	r25, 7
    34a2:	08 95       	ret

000034a4 <__gesf2>:
    34a4:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fp_cmp>
    34a8:	08 f4       	brcc	.+2      	; 0x34ac <__gesf2+0x8>
    34aa:	8f ef       	ldi	r24, 0xFF	; 255
    34ac:	08 95       	ret

000034ae <__mulsf3>:
    34ae:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__mulsf3x>
    34b2:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__fp_round>
    34b6:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscA>
    34ba:	38 f0       	brcs	.+14     	; 0x34ca <__mulsf3+0x1c>
    34bc:	0e 94 11 1a 	call	0x3422	; 0x3422 <__fp_pscB>
    34c0:	20 f0       	brcs	.+8      	; 0x34ca <__mulsf3+0x1c>
    34c2:	95 23       	and	r25, r21
    34c4:	11 f0       	breq	.+4      	; 0x34ca <__mulsf3+0x1c>
    34c6:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>
    34ca:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_nan>
    34ce:	11 24       	eor	r1, r1
    34d0:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>

000034d4 <__mulsf3x>:
    34d4:	0e 94 29 1a 	call	0x3452	; 0x3452 <__fp_split3>
    34d8:	70 f3       	brcs	.-36     	; 0x34b6 <__mulsf3+0x8>

000034da <__mulsf3_pse>:
    34da:	95 9f       	mul	r25, r21
    34dc:	c1 f3       	breq	.-16     	; 0x34ce <__mulsf3+0x20>
    34de:	95 0f       	add	r25, r21
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	55 1f       	adc	r21, r21
    34e4:	62 9f       	mul	r22, r18
    34e6:	f0 01       	movw	r30, r0
    34e8:	72 9f       	mul	r23, r18
    34ea:	bb 27       	eor	r27, r27
    34ec:	f0 0d       	add	r31, r0
    34ee:	b1 1d       	adc	r27, r1
    34f0:	63 9f       	mul	r22, r19
    34f2:	aa 27       	eor	r26, r26
    34f4:	f0 0d       	add	r31, r0
    34f6:	b1 1d       	adc	r27, r1
    34f8:	aa 1f       	adc	r26, r26
    34fa:	64 9f       	mul	r22, r20
    34fc:	66 27       	eor	r22, r22
    34fe:	b0 0d       	add	r27, r0
    3500:	a1 1d       	adc	r26, r1
    3502:	66 1f       	adc	r22, r22
    3504:	82 9f       	mul	r24, r18
    3506:	22 27       	eor	r18, r18
    3508:	b0 0d       	add	r27, r0
    350a:	a1 1d       	adc	r26, r1
    350c:	62 1f       	adc	r22, r18
    350e:	73 9f       	mul	r23, r19
    3510:	b0 0d       	add	r27, r0
    3512:	a1 1d       	adc	r26, r1
    3514:	62 1f       	adc	r22, r18
    3516:	83 9f       	mul	r24, r19
    3518:	a0 0d       	add	r26, r0
    351a:	61 1d       	adc	r22, r1
    351c:	22 1f       	adc	r18, r18
    351e:	74 9f       	mul	r23, r20
    3520:	33 27       	eor	r19, r19
    3522:	a0 0d       	add	r26, r0
    3524:	61 1d       	adc	r22, r1
    3526:	23 1f       	adc	r18, r19
    3528:	84 9f       	mul	r24, r20
    352a:	60 0d       	add	r22, r0
    352c:	21 1d       	adc	r18, r1
    352e:	82 2f       	mov	r24, r18
    3530:	76 2f       	mov	r23, r22
    3532:	6a 2f       	mov	r22, r26
    3534:	11 24       	eor	r1, r1
    3536:	9f 57       	subi	r25, 0x7F	; 127
    3538:	50 40       	sbci	r21, 0x00	; 0
    353a:	9a f0       	brmi	.+38     	; 0x3562 <__mulsf3_pse+0x88>
    353c:	f1 f0       	breq	.+60     	; 0x357a <__mulsf3_pse+0xa0>
    353e:	88 23       	and	r24, r24
    3540:	4a f0       	brmi	.+18     	; 0x3554 <__mulsf3_pse+0x7a>
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	bb 1f       	adc	r27, r27
    3548:	66 1f       	adc	r22, r22
    354a:	77 1f       	adc	r23, r23
    354c:	88 1f       	adc	r24, r24
    354e:	91 50       	subi	r25, 0x01	; 1
    3550:	50 40       	sbci	r21, 0x00	; 0
    3552:	a9 f7       	brne	.-22     	; 0x353e <__mulsf3_pse+0x64>
    3554:	9e 3f       	cpi	r25, 0xFE	; 254
    3556:	51 05       	cpc	r21, r1
    3558:	80 f0       	brcs	.+32     	; 0x357a <__mulsf3_pse+0xa0>
    355a:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__fp_inf>
    355e:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_szero>
    3562:	5f 3f       	cpi	r21, 0xFF	; 255
    3564:	e4 f3       	brlt	.-8      	; 0x355e <__mulsf3_pse+0x84>
    3566:	98 3e       	cpi	r25, 0xE8	; 232
    3568:	d4 f3       	brlt	.-12     	; 0x355e <__mulsf3_pse+0x84>
    356a:	86 95       	lsr	r24
    356c:	77 95       	ror	r23
    356e:	67 95       	ror	r22
    3570:	b7 95       	ror	r27
    3572:	f7 95       	ror	r31
    3574:	e7 95       	ror	r30
    3576:	9f 5f       	subi	r25, 0xFF	; 255
    3578:	c1 f7       	brne	.-16     	; 0x356a <__mulsf3_pse+0x90>
    357a:	fe 2b       	or	r31, r30
    357c:	88 0f       	add	r24, r24
    357e:	91 1d       	adc	r25, r1
    3580:	96 95       	lsr	r25
    3582:	87 95       	ror	r24
    3584:	97 f9       	bld	r25, 7
    3586:	08 95       	ret

00003588 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3588:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    358a:	91 8d       	ldd	r25, Z+25	; 0x19
    358c:	22 8d       	ldd	r18, Z+26	; 0x1a
    358e:	89 2f       	mov	r24, r25
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	80 5c       	subi	r24, 0xC0	; 192
    3594:	9f 4f       	sbci	r25, 0xFF	; 255
    3596:	82 1b       	sub	r24, r18
    3598:	91 09       	sbc	r25, r1
}
    359a:	8f 73       	andi	r24, 0x3F	; 63
    359c:	99 27       	eor	r25, r25
    359e:	08 95       	ret

000035a0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    35a0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    35a2:	91 8d       	ldd	r25, Z+25	; 0x19
    35a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    35a6:	98 17       	cp	r25, r24
    35a8:	31 f0       	breq	.+12     	; 0x35b6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    35aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ac:	e8 0f       	add	r30, r24
    35ae:	f1 1d       	adc	r31, r1
    35b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    35b6:	8f ef       	ldi	r24, 0xFF	; 255
    35b8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    35ba:	08 95       	ret

000035bc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    35bc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    35be:	91 8d       	ldd	r25, Z+25	; 0x19
    35c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    35c2:	98 17       	cp	r25, r24
    35c4:	61 f0       	breq	.+24     	; 0x35de <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    35c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    35c8:	df 01       	movw	r26, r30
    35ca:	a8 0f       	add	r26, r24
    35cc:	b1 1d       	adc	r27, r1
    35ce:	5d 96       	adiw	r26, 0x1d	; 29
    35d0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    35d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    35d4:	9f 5f       	subi	r25, 0xFF	; 255
    35d6:	9f 73       	andi	r25, 0x3F	; 63
    35d8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    35de:	8f ef       	ldi	r24, 0xFF	; 255
    35e0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    35e2:	08 95       	ret

000035e4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    35e4:	fc 01       	movw	r30, r24
    35e6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    35e8:	44 8d       	ldd	r20, Z+28	; 0x1c
    35ea:	25 2f       	mov	r18, r21
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	84 2f       	mov	r24, r20
    35f0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    35f2:	82 1b       	sub	r24, r18
    35f4:	93 0b       	sbc	r25, r19
    35f6:	54 17       	cp	r21, r20
    35f8:	10 f0       	brcs	.+4      	; 0x35fe <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    35fa:	cf 96       	adiw	r24, 0x3f	; 63
    35fc:	08 95       	ret
  return tail - head - 1;
    35fe:	01 97       	sbiw	r24, 0x01	; 1
}
    3600:	08 95       	ret

00003602 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3602:	8d e5       	ldi	r24, 0x5D	; 93
    3604:	9c e1       	ldi	r25, 0x1C	; 28
    3606:	89 2b       	or	r24, r25
    3608:	49 f0       	breq	.+18     	; 0x361c <_Z14serialEventRunv+0x1a>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	89 2b       	or	r24, r25
    3610:	29 f0       	breq	.+10     	; 0x361c <_Z14serialEventRunv+0x1a>
    3612:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <_Z17Serial0_availablev>
    3616:	81 11       	cpse	r24, r1
    3618:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    361c:	08 95       	ret

0000361e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    361e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3620:	84 8d       	ldd	r24, Z+28	; 0x1c
    3622:	df 01       	movw	r26, r30
    3624:	a8 0f       	add	r26, r24
    3626:	b1 1d       	adc	r27, r1
    3628:	a3 5a       	subi	r26, 0xA3	; 163
    362a:	bf 4f       	sbci	r27, 0xFF	; 255
    362c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    362e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	01 96       	adiw	r24, 0x01	; 1
    3634:	8f 73       	andi	r24, 0x3F	; 63
    3636:	99 27       	eor	r25, r25
    3638:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    363a:	a6 89       	ldd	r26, Z+22	; 0x16
    363c:	b7 89       	ldd	r27, Z+23	; 0x17
    363e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3640:	a0 89       	ldd	r26, Z+16	; 0x10
    3642:	b1 89       	ldd	r27, Z+17	; 0x11
    3644:	8c 91       	ld	r24, X
    3646:	83 70       	andi	r24, 0x03	; 3
    3648:	80 64       	ori	r24, 0x40	; 64
    364a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    364c:	93 8d       	ldd	r25, Z+27	; 0x1b
    364e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3650:	98 13       	cpse	r25, r24
    3652:	06 c0       	rjmp	.+12     	; 0x3660 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3654:	02 88       	ldd	r0, Z+18	; 0x12
    3656:	f3 89       	ldd	r31, Z+19	; 0x13
    3658:	e0 2d       	mov	r30, r0
    365a:	80 81       	ld	r24, Z
    365c:	8f 7d       	andi	r24, 0xDF	; 223
    365e:	80 83       	st	Z, r24
    3660:	08 95       	ret

00003662 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3662:	ef 92       	push	r14
    3664:	ff 92       	push	r15
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    366a:	cf 93       	push	r28
    366c:	df 93       	push	r29
    366e:	ec 01       	movw	r28, r24
  _written = true;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3674:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3676:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3678:	98 13       	cpse	r25, r24
    367a:	05 c0       	rjmp	.+10     	; 0x3686 <_ZN14HardwareSerial5writeEh+0x24>
    367c:	e8 89       	ldd	r30, Y+16	; 0x10
    367e:	f9 89       	ldd	r31, Y+17	; 0x11
    3680:	80 81       	ld	r24, Z
    3682:	85 fd       	sbrc	r24, 5
    3684:	26 c0       	rjmp	.+76     	; 0x36d2 <_ZN14HardwareSerial5writeEh+0x70>
    3686:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3688:	0b 8d       	ldd	r16, Y+27	; 0x1b
    368a:	10 e0       	ldi	r17, 0x00	; 0
    368c:	0f 5f       	subi	r16, 0xFF	; 255
    368e:	1f 4f       	sbci	r17, 0xFF	; 255
    3690:	0f 73       	andi	r16, 0x3F	; 63
    3692:	11 27       	eor	r17, r17
    3694:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3696:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3698:	e8 12       	cpse	r14, r24
    369a:	0c c0       	rjmp	.+24     	; 0x36b4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	07 fc       	sbrc	r0, 7
    36a0:	fa cf       	rjmp	.-12     	; 0x3696 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    36a2:	e8 89       	ldd	r30, Y+16	; 0x10
    36a4:	f9 89       	ldd	r31, Y+17	; 0x11
    36a6:	80 81       	ld	r24, Z
    36a8:	85 ff       	sbrs	r24, 5
    36aa:	f5 cf       	rjmp	.-22     	; 0x3696 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    36ac:	ce 01       	movw	r24, r28
    36ae:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    36b2:	f1 cf       	rjmp	.-30     	; 0x3696 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    36b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36b6:	fe 01       	movw	r30, r28
    36b8:	e8 0f       	add	r30, r24
    36ba:	f1 1d       	adc	r31, r1
    36bc:	e3 5a       	subi	r30, 0xA3	; 163
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    36c2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    36c4:	f8 94       	cli
    _tx_buffer_head = i;
    36c6:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    36c8:	ea 89       	ldd	r30, Y+18	; 0x12
    36ca:	fb 89       	ldd	r31, Y+19	; 0x13
    36cc:	80 81       	ld	r24, Z
    36ce:	80 62       	ori	r24, 0x20	; 32
    36d0:	0a c0       	rjmp	.+20     	; 0x36e6 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    36d2:	9f b7       	in	r25, 0x3f	; 63
    36d4:	f8 94       	cli
      *_udr = c;
    36d6:	ee 89       	ldd	r30, Y+22	; 0x16
    36d8:	ff 89       	ldd	r31, Y+23	; 0x17
    36da:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    36dc:	e8 89       	ldd	r30, Y+16	; 0x10
    36de:	f9 89       	ldd	r31, Y+17	; 0x11
    36e0:	80 81       	ld	r24, Z
    36e2:	83 70       	andi	r24, 0x03	; 3
    36e4:	80 64       	ori	r24, 0x40	; 64
    36e6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    36e8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	0f 91       	pop	r16
    36f6:	ff 90       	pop	r15
    36f8:	ef 90       	pop	r14
    36fa:	08 95       	ret

000036fc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    36fc:	cf 93       	push	r28
    36fe:	df 93       	push	r29
    3700:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3702:	88 8d       	ldd	r24, Y+24	; 0x18
    3704:	88 23       	and	r24, r24
    3706:	c9 f0       	breq	.+50     	; 0x373a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3708:	ea 89       	ldd	r30, Y+18	; 0x12
    370a:	fb 89       	ldd	r31, Y+19	; 0x13
    370c:	80 81       	ld	r24, Z
    370e:	85 fd       	sbrc	r24, 5
    3710:	05 c0       	rjmp	.+10     	; 0x371c <_ZN14HardwareSerial5flushEv+0x20>
    3712:	a8 89       	ldd	r26, Y+16	; 0x10
    3714:	b9 89       	ldd	r27, Y+17	; 0x11
    3716:	8c 91       	ld	r24, X
    3718:	86 fd       	sbrc	r24, 6
    371a:	0f c0       	rjmp	.+30     	; 0x373a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	07 fc       	sbrc	r0, 7
    3720:	f5 cf       	rjmp	.-22     	; 0x370c <_ZN14HardwareSerial5flushEv+0x10>
    3722:	80 81       	ld	r24, Z
    3724:	85 ff       	sbrs	r24, 5
    3726:	f2 cf       	rjmp	.-28     	; 0x370c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3728:	a8 89       	ldd	r26, Y+16	; 0x10
    372a:	b9 89       	ldd	r27, Y+17	; 0x11
    372c:	8c 91       	ld	r24, X
    372e:	85 ff       	sbrs	r24, 5
    3730:	ed cf       	rjmp	.-38     	; 0x370c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3732:	ce 01       	movw	r24, r28
    3734:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3738:	e7 cf       	rjmp	.-50     	; 0x3708 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	08 95       	ret

00003740 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3740:	cf 92       	push	r12
    3742:	df 92       	push	r13
    3744:	ef 92       	push	r14
    3746:	ff 92       	push	r15
    3748:	1f 93       	push	r17
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	ec 01       	movw	r28, r24
    3750:	6a 01       	movw	r12, r20
    3752:	7b 01       	movw	r14, r22
    3754:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3756:	e8 89       	ldd	r30, Y+16	; 0x10
    3758:	f9 89       	ldd	r31, Y+17	; 0x11
    375a:	82 e0       	ldi	r24, 0x02	; 2
    375c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    375e:	41 15       	cp	r20, r1
    3760:	51 4e       	sbci	r21, 0xE1	; 225
    3762:	61 05       	cpc	r22, r1
    3764:	71 05       	cpc	r23, r1
    3766:	b1 f0       	breq	.+44     	; 0x3794 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	79 e0       	ldi	r23, 0x09	; 9
    376c:	8d e3       	ldi	r24, 0x3D	; 61
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	a7 01       	movw	r20, r14
    3772:	96 01       	movw	r18, r12
    3774:	0e 94 a9 20 	call	0x4152	; 0x4152 <__udivmodsi4>
    3778:	da 01       	movw	r26, r20
    377a:	c9 01       	movw	r24, r18
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	a1 09       	sbc	r26, r1
    3780:	b1 09       	sbc	r27, r1
    3782:	b6 95       	lsr	r27
    3784:	a7 95       	ror	r26
    3786:	97 95       	ror	r25
    3788:	87 95       	ror	r24
    378a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    378c:	21 15       	cp	r18, r1
    378e:	80 e1       	ldi	r24, 0x10	; 16
    3790:	38 07       	cpc	r19, r24
    3792:	a8 f0       	brcs	.+42     	; 0x37be <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3794:	e8 89       	ldd	r30, Y+16	; 0x10
    3796:	f9 89       	ldd	r31, Y+17	; 0x11
    3798:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    379a:	60 e8       	ldi	r22, 0x80	; 128
    379c:	74 e8       	ldi	r23, 0x84	; 132
    379e:	8e e1       	ldi	r24, 0x1E	; 30
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	a7 01       	movw	r20, r14
    37a4:	96 01       	movw	r18, r12
    37a6:	0e 94 a9 20 	call	0x4152	; 0x4152 <__udivmodsi4>
    37aa:	da 01       	movw	r26, r20
    37ac:	c9 01       	movw	r24, r18
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	a1 09       	sbc	r26, r1
    37b2:	b1 09       	sbc	r27, r1
    37b4:	b6 95       	lsr	r27
    37b6:	a7 95       	ror	r26
    37b8:	97 95       	ror	r25
    37ba:	87 95       	ror	r24
    37bc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    37be:	ec 85       	ldd	r30, Y+12	; 0x0c
    37c0:	fd 85       	ldd	r31, Y+13	; 0x0d
    37c2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    37c4:	ee 85       	ldd	r30, Y+14	; 0x0e
    37c6:	ff 85       	ldd	r31, Y+15	; 0x0f
    37c8:	20 83       	st	Z, r18

  _written = false;
    37ca:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    37cc:	ec 89       	ldd	r30, Y+20	; 0x14
    37ce:	fd 89       	ldd	r31, Y+21	; 0x15
    37d0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    37d2:	ea 89       	ldd	r30, Y+18	; 0x12
    37d4:	fb 89       	ldd	r31, Y+19	; 0x13
    37d6:	80 81       	ld	r24, Z
    37d8:	80 61       	ori	r24, 0x10	; 16
    37da:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    37dc:	ea 89       	ldd	r30, Y+18	; 0x12
    37de:	fb 89       	ldd	r31, Y+19	; 0x13
    37e0:	80 81       	ld	r24, Z
    37e2:	88 60       	ori	r24, 0x08	; 8
    37e4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    37e6:	ea 89       	ldd	r30, Y+18	; 0x12
    37e8:	fb 89       	ldd	r31, Y+19	; 0x13
    37ea:	80 81       	ld	r24, Z
    37ec:	80 68       	ori	r24, 0x80	; 128
    37ee:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    37f0:	ea 89       	ldd	r30, Y+18	; 0x12
    37f2:	fb 89       	ldd	r31, Y+19	; 0x13
    37f4:	80 81       	ld	r24, Z
    37f6:	8f 7d       	andi	r24, 0xDF	; 223
    37f8:	80 83       	st	Z, r24
}
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	ff 90       	pop	r15
    3802:	ef 90       	pop	r14
    3804:	df 90       	pop	r13
    3806:	cf 90       	pop	r12
    3808:	08 95       	ret

0000380a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    380a:	1f 92       	push	r1
    380c:	0f 92       	push	r0
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	0f 92       	push	r0
    3812:	11 24       	eor	r1, r1
    3814:	2f 93       	push	r18
    3816:	8f 93       	push	r24
    3818:	9f 93       	push	r25
    381a:	ef 93       	push	r30
    381c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    381e:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <Serial+0x10>
    3822:	f0 91 35 03 	lds	r31, 0x0335	; 0x800335 <Serial+0x11>
    3826:	80 81       	ld	r24, Z
    3828:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <Serial+0x16>
    382c:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <Serial+0x17>
    3830:	82 fd       	sbrc	r24, 2
    3832:	12 c0       	rjmp	.+36     	; 0x3858 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3834:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3836:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <Serial+0x19>
    383a:	8f 5f       	subi	r24, 0xFF	; 255
    383c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    383e:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <Serial+0x1a>
    3842:	82 17       	cp	r24, r18
    3844:	51 f0       	breq	.+20     	; 0x385a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3846:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <Serial+0x19>
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	ec 5d       	subi	r30, 0xDC	; 220
    384e:	fc 4f       	sbci	r31, 0xFC	; 252
    3850:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3852:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <Serial+0x19>
    3856:	01 c0       	rjmp	.+2      	; 0x385a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3858:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    385a:	ff 91       	pop	r31
    385c:	ef 91       	pop	r30
    385e:	9f 91       	pop	r25
    3860:	8f 91       	pop	r24
    3862:	2f 91       	pop	r18
    3864:	0f 90       	pop	r0
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	0f 90       	pop	r0
    386a:	1f 90       	pop	r1
    386c:	18 95       	reti

0000386e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    386e:	1f 92       	push	r1
    3870:	0f 92       	push	r0
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	0f 92       	push	r0
    3876:	11 24       	eor	r1, r1
    3878:	2f 93       	push	r18
    387a:	3f 93       	push	r19
    387c:	4f 93       	push	r20
    387e:	5f 93       	push	r21
    3880:	6f 93       	push	r22
    3882:	7f 93       	push	r23
    3884:	8f 93       	push	r24
    3886:	9f 93       	push	r25
    3888:	af 93       	push	r26
    388a:	bf 93       	push	r27
    388c:	ef 93       	push	r30
    388e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3890:	84 e2       	ldi	r24, 0x24	; 36
    3892:	93 e0       	ldi	r25, 0x03	; 3
    3894:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3898:	ff 91       	pop	r31
    389a:	ef 91       	pop	r30
    389c:	bf 91       	pop	r27
    389e:	af 91       	pop	r26
    38a0:	9f 91       	pop	r25
    38a2:	8f 91       	pop	r24
    38a4:	7f 91       	pop	r23
    38a6:	6f 91       	pop	r22
    38a8:	5f 91       	pop	r21
    38aa:	4f 91       	pop	r20
    38ac:	3f 91       	pop	r19
    38ae:	2f 91       	pop	r18
    38b0:	0f 90       	pop	r0
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	0f 90       	pop	r0
    38b6:	1f 90       	pop	r1
    38b8:	18 95       	reti

000038ba <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    38ba:	84 e2       	ldi	r24, 0x24	; 36
    38bc:	93 e0       	ldi	r25, 0x03	; 3
    38be:	0e 94 c4 1a 	call	0x3588	; 0x3588 <_ZN14HardwareSerial9availableEv>
    38c2:	21 e0       	ldi	r18, 0x01	; 1
    38c4:	89 2b       	or	r24, r25
    38c6:	09 f4       	brne	.+2      	; 0x38ca <_Z17Serial0_availablev+0x10>
    38c8:	20 e0       	ldi	r18, 0x00	; 0
}
    38ca:	82 2f       	mov	r24, r18
    38cc:	08 95       	ret

000038ce <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    38ce:	e4 e2       	ldi	r30, 0x24	; 36
    38d0:	f3 e0       	ldi	r31, 0x03	; 3
    38d2:	13 82       	std	Z+3, r1	; 0x03
    38d4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    38d6:	88 ee       	ldi	r24, 0xE8	; 232
    38d8:	93 e0       	ldi	r25, 0x03	; 3
    38da:	a0 e0       	ldi	r26, 0x00	; 0
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	84 83       	std	Z+4, r24	; 0x04
    38e0:	95 83       	std	Z+5, r25	; 0x05
    38e2:	a6 83       	std	Z+6, r26	; 0x06
    38e4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    38e6:	84 e9       	ldi	r24, 0x94	; 148
    38e8:	91 e0       	ldi	r25, 0x01	; 1
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	80 83       	st	Z, r24
    38ee:	85 ec       	ldi	r24, 0xC5	; 197
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	95 87       	std	Z+13, r25	; 0x0d
    38f4:	84 87       	std	Z+12, r24	; 0x0c
    38f6:	84 ec       	ldi	r24, 0xC4	; 196
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	97 87       	std	Z+15, r25	; 0x0f
    38fc:	86 87       	std	Z+14, r24	; 0x0e
    38fe:	80 ec       	ldi	r24, 0xC0	; 192
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	91 8b       	std	Z+17, r25	; 0x11
    3904:	80 8b       	std	Z+16, r24	; 0x10
    3906:	81 ec       	ldi	r24, 0xC1	; 193
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	93 8b       	std	Z+19, r25	; 0x13
    390c:	82 8b       	std	Z+18, r24	; 0x12
    390e:	82 ec       	ldi	r24, 0xC2	; 194
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	95 8b       	std	Z+21, r25	; 0x15
    3914:	84 8b       	std	Z+20, r24	; 0x14
    3916:	86 ec       	ldi	r24, 0xC6	; 198
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	97 8b       	std	Z+23, r25	; 0x17
    391c:	86 8b       	std	Z+22, r24	; 0x16
    391e:	11 8e       	std	Z+25, r1	; 0x19
    3920:	12 8e       	std	Z+26, r1	; 0x1a
    3922:	13 8e       	std	Z+27, r1	; 0x1b
    3924:	14 8e       	std	Z+28, r1	; 0x1c
    3926:	08 95       	ret

00003928 <initVariant>:
    3928:	08 95       	ret

0000392a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    392a:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <init>

	initVariant();
    392e:	0e 94 94 1c 	call	0x3928	; 0x3928 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3932:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3936:	c1 e0       	ldi	r28, 0x01	; 1
    3938:	db e1       	ldi	r29, 0x1B	; 27
#endif
	
	setup();
    
	for (;;) {
		loop();
    393a:	0e 94 81 09 	call	0x1302	; 0x1302 <loop>
		if (serialEventRun) serialEventRun();
    393e:	20 97       	sbiw	r28, 0x00	; 0
    3940:	e1 f3       	breq	.-8      	; 0x393a <main+0x10>
    3942:	0e 94 01 1b 	call	0x3602	; 0x3602 <_Z14serialEventRunv>
    3946:	f9 cf       	rjmp	.-14     	; 0x393a <main+0x10>

00003948 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3948:	cf 92       	push	r12
    394a:	df 92       	push	r13
    394c:	ef 92       	push	r14
    394e:	ff 92       	push	r15
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	6c 01       	movw	r12, r24
    395a:	7a 01       	movw	r14, r20
    395c:	8b 01       	movw	r16, r22
    395e:	c0 e0       	ldi	r28, 0x00	; 0
    3960:	d0 e0       	ldi	r29, 0x00	; 0
    3962:	ce 15       	cp	r28, r14
    3964:	df 05       	cpc	r29, r15
    3966:	81 f0       	breq	.+32     	; 0x3988 <_ZN5Print5writeEPKhj+0x40>
    3968:	d8 01       	movw	r26, r16
    396a:	6d 91       	ld	r22, X+
    396c:	8d 01       	movw	r16, r26
    396e:	d6 01       	movw	r26, r12
    3970:	ed 91       	ld	r30, X+
    3972:	fc 91       	ld	r31, X
    3974:	01 90       	ld	r0, Z+
    3976:	f0 81       	ld	r31, Z
    3978:	e0 2d       	mov	r30, r0
    397a:	c6 01       	movw	r24, r12
    397c:	09 95       	icall
    397e:	89 2b       	or	r24, r25
    3980:	11 f0       	breq	.+4      	; 0x3986 <_ZN5Print5writeEPKhj+0x3e>
    3982:	21 96       	adiw	r28, 0x01	; 1
    3984:	ee cf       	rjmp	.-36     	; 0x3962 <_ZN5Print5writeEPKhj+0x1a>
    3986:	7e 01       	movw	r14, r28
    3988:	c7 01       	movw	r24, r14
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	ff 90       	pop	r15
    3994:	ef 90       	pop	r14
    3996:	df 90       	pop	r13
    3998:	cf 90       	pop	r12
    399a:	08 95       	ret

0000399c <_ZN5Print5writeEPKc>:
    399c:	61 15       	cp	r22, r1
    399e:	71 05       	cpc	r23, r1
    39a0:	79 f0       	breq	.+30     	; 0x39c0 <_ZN5Print5writeEPKc+0x24>
    39a2:	fb 01       	movw	r30, r22
    39a4:	01 90       	ld	r0, Z+
    39a6:	00 20       	and	r0, r0
    39a8:	e9 f7       	brne	.-6      	; 0x39a4 <_ZN5Print5writeEPKc+0x8>
    39aa:	31 97       	sbiw	r30, 0x01	; 1
    39ac:	af 01       	movw	r20, r30
    39ae:	46 1b       	sub	r20, r22
    39b0:	57 0b       	sbc	r21, r23
    39b2:	dc 01       	movw	r26, r24
    39b4:	ed 91       	ld	r30, X+
    39b6:	fc 91       	ld	r31, X
    39b8:	02 80       	ldd	r0, Z+2	; 0x02
    39ba:	f3 81       	ldd	r31, Z+3	; 0x03
    39bc:	e0 2d       	mov	r30, r0
    39be:	09 94       	ijmp
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	08 95       	ret

000039c6 <_ZN5Print5printEPK19__FlashStringHelper>:
    39c6:	ef 92       	push	r14
    39c8:	ff 92       	push	r15
    39ca:	0f 93       	push	r16
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	8c 01       	movw	r16, r24
    39d4:	7b 01       	movw	r14, r22
    39d6:	c0 e0       	ldi	r28, 0x00	; 0
    39d8:	d0 e0       	ldi	r29, 0x00	; 0
    39da:	f7 01       	movw	r30, r14
    39dc:	ec 0f       	add	r30, r28
    39de:	fd 1f       	adc	r31, r29
    39e0:	64 91       	lpm	r22, Z
    39e2:	66 23       	and	r22, r22
    39e4:	61 f0       	breq	.+24     	; 0x39fe <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    39e6:	d8 01       	movw	r26, r16
    39e8:	ed 91       	ld	r30, X+
    39ea:	fc 91       	ld	r31, X
    39ec:	01 90       	ld	r0, Z+
    39ee:	f0 81       	ld	r31, Z
    39f0:	e0 2d       	mov	r30, r0
    39f2:	c8 01       	movw	r24, r16
    39f4:	09 95       	icall
    39f6:	89 2b       	or	r24, r25
    39f8:	11 f0       	breq	.+4      	; 0x39fe <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    39fa:	21 96       	adiw	r28, 0x01	; 1
    39fc:	ee cf       	rjmp	.-36     	; 0x39da <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    39fe:	ce 01       	movw	r24, r28
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	08 95       	ret

00003a0e <_ZN5Print5printEc>:
    3a0e:	dc 01       	movw	r26, r24
    3a10:	ed 91       	ld	r30, X+
    3a12:	fc 91       	ld	r31, X
    3a14:	01 90       	ld	r0, Z+
    3a16:	f0 81       	ld	r31, Z
    3a18:	e0 2d       	mov	r30, r0
    3a1a:	09 94       	ijmp

00003a1c <_ZN5Print7printlnEv>:
    3a1c:	62 ea       	ldi	r22, 0xA2	; 162
    3a1e:	71 e0       	ldi	r23, 0x01	; 1
    3a20:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <_ZN5Print5writeEPKc>

00003a24 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	ec 01       	movw	r28, r24
    3a2e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_ZN5Print5printEPK19__FlashStringHelper>
    3a32:	8c 01       	movw	r16, r24
    3a34:	ce 01       	movw	r24, r28
    3a36:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <_ZN5Print7printlnEv>
    3a3a:	80 0f       	add	r24, r16
    3a3c:	91 1f       	adc	r25, r17
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	08 95       	ret

00003a48 <_ZN5Print11printNumberEmh>:
    3a48:	8f 92       	push	r8
    3a4a:	9f 92       	push	r9
    3a4c:	af 92       	push	r10
    3a4e:	bf 92       	push	r11
    3a50:	ef 92       	push	r14
    3a52:	ff 92       	push	r15
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    3a60:	a1 97       	sbiw	r28, 0x21	; 33
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	cd bf       	out	0x3d, r28	; 61
    3a6c:	7c 01       	movw	r14, r24
    3a6e:	fa 01       	movw	r30, r20
    3a70:	cb 01       	movw	r24, r22
    3a72:	19 a2       	std	Y+33, r1	; 0x21
    3a74:	22 30       	cpi	r18, 0x02	; 2
    3a76:	08 f4       	brcc	.+2      	; 0x3a7a <_ZN5Print11printNumberEmh+0x32>
    3a78:	2a e0       	ldi	r18, 0x0A	; 10
    3a7a:	8e 01       	movw	r16, r28
    3a7c:	0f 5d       	subi	r16, 0xDF	; 223
    3a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a80:	82 2e       	mov	r8, r18
    3a82:	91 2c       	mov	r9, r1
    3a84:	a1 2c       	mov	r10, r1
    3a86:	b1 2c       	mov	r11, r1
    3a88:	bf 01       	movw	r22, r30
    3a8a:	a5 01       	movw	r20, r10
    3a8c:	94 01       	movw	r18, r8
    3a8e:	0e 94 a9 20 	call	0x4152	; 0x4152 <__udivmodsi4>
    3a92:	f9 01       	movw	r30, r18
    3a94:	ca 01       	movw	r24, r20
    3a96:	01 50       	subi	r16, 0x01	; 1
    3a98:	11 09       	sbc	r17, r1
    3a9a:	6a 30       	cpi	r22, 0x0A	; 10
    3a9c:	10 f4       	brcc	.+4      	; 0x3aa2 <_ZN5Print11printNumberEmh+0x5a>
    3a9e:	60 5d       	subi	r22, 0xD0	; 208
    3aa0:	01 c0       	rjmp	.+2      	; 0x3aa4 <_ZN5Print11printNumberEmh+0x5c>
    3aa2:	69 5c       	subi	r22, 0xC9	; 201
    3aa4:	d8 01       	movw	r26, r16
    3aa6:	6c 93       	st	X, r22
    3aa8:	23 2b       	or	r18, r19
    3aaa:	24 2b       	or	r18, r20
    3aac:	25 2b       	or	r18, r21
    3aae:	61 f7       	brne	.-40     	; 0x3a88 <_ZN5Print11printNumberEmh+0x40>
    3ab0:	b8 01       	movw	r22, r16
    3ab2:	c7 01       	movw	r24, r14
    3ab4:	0e 94 ce 1c 	call	0x399c	; 0x399c <_ZN5Print5writeEPKc>
    3ab8:	a1 96       	adiw	r28, 0x21	; 33
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	1f 91       	pop	r17
    3aca:	0f 91       	pop	r16
    3acc:	ff 90       	pop	r15
    3ace:	ef 90       	pop	r14
    3ad0:	bf 90       	pop	r11
    3ad2:	af 90       	pop	r10
    3ad4:	9f 90       	pop	r9
    3ad6:	8f 90       	pop	r8
    3ad8:	08 95       	ret

00003ada <_ZN5Print5printEmi>:
    3ada:	21 15       	cp	r18, r1
    3adc:	31 05       	cpc	r19, r1
    3ade:	41 f4       	brne	.+16     	; 0x3af0 <_ZN5Print5printEmi+0x16>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	ed 91       	ld	r30, X+
    3ae4:	fc 91       	ld	r31, X
    3ae6:	01 90       	ld	r0, Z+
    3ae8:	f0 81       	ld	r31, Z
    3aea:	e0 2d       	mov	r30, r0
    3aec:	64 2f       	mov	r22, r20
    3aee:	09 94       	ijmp
    3af0:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <_ZN5Print11printNumberEmh>

00003af4 <_ZN5Print5printEhi>:
    3af4:	9a 01       	movw	r18, r20
    3af6:	46 2f       	mov	r20, r22
    3af8:	50 e0       	ldi	r21, 0x00	; 0
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <_ZN5Print5printEmi>

00003b02 <_ZN5Print7printlnEhi>:
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	ec 01       	movw	r28, r24
    3b0c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN5Print5printEhi>
    3b10:	8c 01       	movw	r16, r24
    3b12:	ce 01       	movw	r24, r28
    3b14:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <_ZN5Print7printlnEv>
    3b18:	80 0f       	add	r24, r16
    3b1a:	91 1f       	adc	r25, r17
    3b1c:	df 91       	pop	r29
    3b1e:	cf 91       	pop	r28
    3b20:	1f 91       	pop	r17
    3b22:	0f 91       	pop	r16
    3b24:	08 95       	ret

00003b26 <_ZN5Print5printEji>:
    3b26:	9a 01       	movw	r18, r20
    3b28:	ab 01       	movw	r20, r22
    3b2a:	60 e0       	ldi	r22, 0x00	; 0
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <_ZN5Print5printEmi>

00003b32 <_ZN5Print5printEli>:
    3b32:	cf 92       	push	r12
    3b34:	df 92       	push	r13
    3b36:	ef 92       	push	r14
    3b38:	ff 92       	push	r15
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	21 15       	cp	r18, r1
    3b44:	31 05       	cpc	r19, r1
    3b46:	81 f4       	brne	.+32     	; 0x3b68 <_ZN5Print5printEli+0x36>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	ed 91       	ld	r30, X+
    3b4c:	fc 91       	ld	r31, X
    3b4e:	01 90       	ld	r0, Z+
    3b50:	f0 81       	ld	r31, Z
    3b52:	e0 2d       	mov	r30, r0
    3b54:	64 2f       	mov	r22, r20
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	ff 90       	pop	r15
    3b60:	ef 90       	pop	r14
    3b62:	df 90       	pop	r13
    3b64:	cf 90       	pop	r12
    3b66:	09 94       	ijmp
    3b68:	2a 30       	cpi	r18, 0x0A	; 10
    3b6a:	31 05       	cpc	r19, r1
    3b6c:	01 f5       	brne	.+64     	; 0x3bae <_ZN5Print5printEli+0x7c>
    3b6e:	77 ff       	sbrs	r23, 7
    3b70:	1d c0       	rjmp	.+58     	; 0x3bac <_ZN5Print5printEli+0x7a>
    3b72:	6a 01       	movw	r12, r20
    3b74:	7b 01       	movw	r14, r22
    3b76:	ec 01       	movw	r28, r24
    3b78:	6d e2       	ldi	r22, 0x2D	; 45
    3b7a:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN5Print5printEc>
    3b7e:	8c 01       	movw	r16, r24
    3b80:	44 27       	eor	r20, r20
    3b82:	55 27       	eor	r21, r21
    3b84:	ba 01       	movw	r22, r20
    3b86:	4c 19       	sub	r20, r12
    3b88:	5d 09       	sbc	r21, r13
    3b8a:	6e 09       	sbc	r22, r14
    3b8c:	7f 09       	sbc	r23, r15
    3b8e:	2a e0       	ldi	r18, 0x0A	; 10
    3b90:	ce 01       	movw	r24, r28
    3b92:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN5Print11printNumberEmh>
    3b96:	80 0f       	add	r24, r16
    3b98:	91 1f       	adc	r25, r17
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	08 95       	ret
    3bac:	2a e0       	ldi	r18, 0x0A	; 10
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	1f 91       	pop	r17
    3bb4:	0f 91       	pop	r16
    3bb6:	ff 90       	pop	r15
    3bb8:	ef 90       	pop	r14
    3bba:	df 90       	pop	r13
    3bbc:	cf 90       	pop	r12
    3bbe:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <_ZN5Print11printNumberEmh>

00003bc2 <_ZN5Print5printEii>:
    3bc2:	9a 01       	movw	r18, r20
    3bc4:	ab 01       	movw	r20, r22
    3bc6:	77 0f       	add	r23, r23
    3bc8:	66 0b       	sbc	r22, r22
    3bca:	77 0b       	sbc	r23, r23
    3bcc:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <_ZN5Print5printEli>

00003bd0 <_ZN5Print7printlnEii>:
    3bd0:	0f 93       	push	r16
    3bd2:	1f 93       	push	r17
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	ec 01       	movw	r28, r24
    3bda:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <_ZN5Print5printEii>
    3bde:	8c 01       	movw	r16, r24
    3be0:	ce 01       	movw	r24, r28
    3be2:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <_ZN5Print7printlnEv>
    3be6:	80 0f       	add	r24, r16
    3be8:	91 1f       	adc	r25, r17
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	08 95       	ret

00003bf4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3bf4:	7f 92       	push	r7
    3bf6:	8f 92       	push	r8
    3bf8:	9f 92       	push	r9
    3bfa:	af 92       	push	r10
    3bfc:	bf 92       	push	r11
    3bfe:	cf 92       	push	r12
    3c00:	df 92       	push	r13
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	8c 01       	movw	r16, r24
    3c10:	6a 01       	movw	r12, r20
    3c12:	7b 01       	movw	r14, r22
    3c14:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3c16:	9a 01       	movw	r18, r20
    3c18:	ab 01       	movw	r20, r22
    3c1a:	c7 01       	movw	r24, r14
    3c1c:	b6 01       	movw	r22, r12
    3c1e:	0e 94 a4 20 	call	0x4148	; 0x4148 <__unordsf2>
    3c22:	88 23       	and	r24, r24
    3c24:	19 f0       	breq	.+6      	; 0x3c2c <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3c26:	65 ea       	ldi	r22, 0xA5	; 165
    3c28:	71 e0       	ldi	r23, 0x01	; 1
    3c2a:	27 c0       	rjmp	.+78     	; 0x3c7a <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3c2c:	46 01       	movw	r8, r12
    3c2e:	57 01       	movw	r10, r14
    3c30:	e8 94       	clt
    3c32:	b7 f8       	bld	r11, 7
    3c34:	2f ef       	ldi	r18, 0xFF	; 255
    3c36:	3f ef       	ldi	r19, 0xFF	; 255
    3c38:	4f e7       	ldi	r20, 0x7F	; 127
    3c3a:	5f e7       	ldi	r21, 0x7F	; 127
    3c3c:	c5 01       	movw	r24, r10
    3c3e:	b4 01       	movw	r22, r8
    3c40:	0e 94 a4 20 	call	0x4148	; 0x4148 <__unordsf2>
    3c44:	81 11       	cpse	r24, r1
    3c46:	0d c0       	rjmp	.+26     	; 0x3c62 <_ZN5Print10printFloatEdh+0x6e>
    3c48:	2f ef       	ldi	r18, 0xFF	; 255
    3c4a:	3f ef       	ldi	r19, 0xFF	; 255
    3c4c:	4f e7       	ldi	r20, 0x7F	; 127
    3c4e:	5f e7       	ldi	r21, 0x7F	; 127
    3c50:	c5 01       	movw	r24, r10
    3c52:	b4 01       	movw	r22, r8
    3c54:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    3c58:	18 16       	cp	r1, r24
    3c5a:	1c f4       	brge	.+6      	; 0x3c62 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3c5c:	69 ea       	ldi	r22, 0xA9	; 169
    3c5e:	71 e0       	ldi	r23, 0x01	; 1
    3c60:	0c c0       	rjmp	.+24     	; 0x3c7a <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3c62:	2f ef       	ldi	r18, 0xFF	; 255
    3c64:	3f ef       	ldi	r19, 0xFF	; 255
    3c66:	4f e7       	ldi	r20, 0x7F	; 127
    3c68:	5f e4       	ldi	r21, 0x4F	; 79
    3c6a:	c7 01       	movw	r24, r14
    3c6c:	b6 01       	movw	r22, r12
    3c6e:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__gesf2>
    3c72:	18 16       	cp	r1, r24
    3c74:	94 f4       	brge	.+36     	; 0x3c9a <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3c76:	6d ea       	ldi	r22, 0xAD	; 173
    3c78:	71 e0       	ldi	r23, 0x01	; 1
    3c7a:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	ff 90       	pop	r15
    3c86:	ef 90       	pop	r14
    3c88:	df 90       	pop	r13
    3c8a:	cf 90       	pop	r12
    3c8c:	bf 90       	pop	r11
    3c8e:	af 90       	pop	r10
    3c90:	9f 90       	pop	r9
    3c92:	8f 90       	pop	r8
    3c94:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3c96:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3c9a:	2f ef       	ldi	r18, 0xFF	; 255
    3c9c:	3f ef       	ldi	r19, 0xFF	; 255
    3c9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ca0:	5f ec       	ldi	r21, 0xCF	; 207
    3ca2:	c7 01       	movw	r24, r14
    3ca4:	b6 01       	movw	r22, r12
    3ca6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    3caa:	87 fd       	sbrc	r24, 7
    3cac:	e4 cf       	rjmp	.-56     	; 0x3c76 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	a9 01       	movw	r20, r18
    3cb4:	c7 01       	movw	r24, r14
    3cb6:	b6 01       	movw	r22, r12
    3cb8:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__cmpsf2>
    3cbc:	87 ff       	sbrs	r24, 7
    3cbe:	0a c0       	rjmp	.+20     	; 0x3cd4 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    3cc0:	6d e2       	ldi	r22, 0x2D	; 45
    3cc2:	c8 01       	movw	r24, r16
    3cc4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN5Print5printEc>
    3cc8:	ec 01       	movw	r28, r24
     number = -number;
    3cca:	f7 fa       	bst	r15, 7
    3ccc:	f0 94       	com	r15
    3cce:	f7 f8       	bld	r15, 7
    3cd0:	f0 94       	com	r15
    3cd2:	02 c0       	rjmp	.+4      	; 0x3cd8 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3cd4:	c0 e0       	ldi	r28, 0x00	; 0
    3cd6:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3cd8:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	70 e0       	ldi	r23, 0x00	; 0
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    3ce2:	7b 14       	cp	r7, r11
    3ce4:	41 f0       	breq	.+16     	; 0x3cf6 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e2       	ldi	r20, 0x20	; 32
    3cec:	51 e4       	ldi	r21, 0x41	; 65
    3cee:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3cf2:	b3 94       	inc	r11
    3cf4:	f6 cf       	rjmp	.-20     	; 0x3ce2 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    3cf6:	a7 01       	movw	r20, r14
    3cf8:	96 01       	movw	r18, r12
    3cfa:	0e 94 87 18 	call	0x310e	; 0x310e <__addsf3>
    3cfe:	6b 01       	movw	r12, r22
    3d00:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3d02:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fixunssfsi>
    3d06:	4b 01       	movw	r8, r22
    3d08:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3d0a:	2a e0       	ldi	r18, 0x0A	; 10
    3d0c:	ab 01       	movw	r20, r22
    3d0e:	bc 01       	movw	r22, r24
    3d10:	c8 01       	movw	r24, r16
    3d12:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3d16:	c8 0f       	add	r28, r24
    3d18:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    3d1a:	77 20       	and	r7, r7
    3d1c:	b9 f1       	breq	.+110    	; 0x3d8c <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3d1e:	c5 01       	movw	r24, r10
    3d20:	b4 01       	movw	r22, r8
    3d22:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatunsisf>
    3d26:	9b 01       	movw	r18, r22
    3d28:	ac 01       	movw	r20, r24
    3d2a:	c7 01       	movw	r24, r14
    3d2c:	b6 01       	movw	r22, r12
    3d2e:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
    3d32:	6b 01       	movw	r12, r22
    3d34:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    3d36:	6e e2       	ldi	r22, 0x2E	; 46
    3d38:	c8 01       	movw	r24, r16
    3d3a:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_ZN5Print5printEc>
    3d3e:	c8 0f       	add	r28, r24
    3d40:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e2       	ldi	r20, 0x20	; 32
    3d48:	51 e4       	ldi	r21, 0x41	; 65
    3d4a:	c7 01       	movw	r24, r14
    3d4c:	b6 01       	movw	r22, r12
    3d4e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsf3>
    3d52:	4b 01       	movw	r8, r22
    3d54:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    3d56:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__fixunssfsi>
    3d5a:	6b 01       	movw	r12, r22
    3d5c:	7c 01       	movw	r14, r24
    n += print(toPrint);
    3d5e:	4a e0       	ldi	r20, 0x0A	; 10
    3d60:	50 e0       	ldi	r21, 0x00	; 0
    3d62:	c8 01       	movw	r24, r16
    3d64:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <_ZN5Print5printEji>
    3d68:	c8 0f       	add	r28, r24
    3d6a:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    3d6c:	b6 01       	movw	r22, r12
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatunsisf>
    3d76:	9b 01       	movw	r18, r22
    3d78:	ac 01       	movw	r20, r24
    3d7a:	c5 01       	movw	r24, r10
    3d7c:	b4 01       	movw	r22, r8
    3d7e:	0e 94 86 18 	call	0x310c	; 0x310c <__subsf3>
    3d82:	6b 01       	movw	r12, r22
    3d84:	7c 01       	movw	r14, r24
    3d86:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3d88:	71 10       	cpse	r7, r1
    3d8a:	db cf       	rjmp	.-74     	; 0x3d42 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3d8c:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3d8e:	df 91       	pop	r29
    3d90:	cf 91       	pop	r28
    3d92:	1f 91       	pop	r17
    3d94:	0f 91       	pop	r16
    3d96:	ff 90       	pop	r15
    3d98:	ef 90       	pop	r14
    3d9a:	df 90       	pop	r13
    3d9c:	cf 90       	pop	r12
    3d9e:	bf 90       	pop	r11
    3da0:	af 90       	pop	r10
    3da2:	9f 90       	pop	r9
    3da4:	8f 90       	pop	r8
    3da6:	7f 90       	pop	r7
    3da8:	08 95       	ret

00003daa <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3daa:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <_ZN5Print10printFloatEdh>

00003dae <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3db8:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <_ZN5Print10printFloatEdh>
    3dbc:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3dbe:	ce 01       	movw	r24, r28
    3dc0:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <_ZN5Print7printlnEv>
  return n;
}
    3dc4:	80 0f       	add	r24, r16
    3dc6:	91 1f       	adc	r25, r17
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	08 95       	ret

00003dd2 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3dd2:	1f 92       	push	r1
    3dd4:	0f 92       	push	r0
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	0f 92       	push	r0
    3dda:	11 24       	eor	r1, r1
    3ddc:	2f 93       	push	r18
    3dde:	3f 93       	push	r19
    3de0:	8f 93       	push	r24
    3de2:	9f 93       	push	r25
    3de4:	af 93       	push	r26
    3de6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3de8:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <timer0_millis>
    3dec:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <timer0_millis+0x1>
    3df0:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <timer0_millis+0x2>
    3df4:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3df8:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3dfc:	23 e0       	ldi	r18, 0x03	; 3
    3dfe:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3e00:	2d 37       	cpi	r18, 0x7D	; 125
    3e02:	20 f4       	brcc	.+8      	; 0x3e0c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3e04:	01 96       	adiw	r24, 0x01	; 1
    3e06:	a1 1d       	adc	r26, r1
    3e08:	b1 1d       	adc	r27, r1
    3e0a:	05 c0       	rjmp	.+10     	; 0x3e16 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3e0c:	26 e8       	ldi	r18, 0x86	; 134
    3e0e:	23 0f       	add	r18, r19
		m += 1;
    3e10:	02 96       	adiw	r24, 0x02	; 2
    3e12:	a1 1d       	adc	r26, r1
    3e14:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3e16:	20 93 c1 03 	sts	0x03C1, r18	; 0x8003c1 <timer0_fract>
	timer0_millis = m;
    3e1a:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <timer0_millis>
    3e1e:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <timer0_millis+0x1>
    3e22:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <timer0_millis+0x2>
    3e26:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <timer0_millis+0x3>
	timer0_overflow_count++;
    3e2a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <timer0_overflow_count>
    3e2e:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <timer0_overflow_count+0x1>
    3e32:	a0 91 c8 03 	lds	r26, 0x03C8	; 0x8003c8 <timer0_overflow_count+0x2>
    3e36:	b0 91 c9 03 	lds	r27, 0x03C9	; 0x8003c9 <timer0_overflow_count+0x3>
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	a1 1d       	adc	r26, r1
    3e3e:	b1 1d       	adc	r27, r1
    3e40:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <timer0_overflow_count>
    3e44:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <timer0_overflow_count+0x1>
    3e48:	a0 93 c8 03 	sts	0x03C8, r26	; 0x8003c8 <timer0_overflow_count+0x2>
    3e4c:	b0 93 c9 03 	sts	0x03C9, r27	; 0x8003c9 <timer0_overflow_count+0x3>
}
    3e50:	bf 91       	pop	r27
    3e52:	af 91       	pop	r26
    3e54:	9f 91       	pop	r25
    3e56:	8f 91       	pop	r24
    3e58:	3f 91       	pop	r19
    3e5a:	2f 91       	pop	r18
    3e5c:	0f 90       	pop	r0
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	0f 90       	pop	r0
    3e62:	1f 90       	pop	r1
    3e64:	18 95       	reti

00003e66 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    3e66:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    3e68:	f8 94       	cli
	m = timer0_millis;
    3e6a:	60 91 c2 03 	lds	r22, 0x03C2	; 0x8003c2 <timer0_millis>
    3e6e:	70 91 c3 03 	lds	r23, 0x03C3	; 0x8003c3 <timer0_millis+0x1>
    3e72:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <timer0_millis+0x2>
    3e76:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <timer0_millis+0x3>
	SREG = oldSREG;
    3e7a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3e7c:	08 95       	ret

00003e7e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3e7e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3e80:	f8 94       	cli
	m = timer0_overflow_count;
    3e82:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <timer0_overflow_count>
    3e86:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <timer0_overflow_count+0x1>
    3e8a:	a0 91 c8 03 	lds	r26, 0x03C8	; 0x8003c8 <timer0_overflow_count+0x2>
    3e8e:	b0 91 c9 03 	lds	r27, 0x03C9	; 0x8003c9 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    3e92:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3e94:	a8 9b       	sbis	0x15, 0	; 21
    3e96:	05 c0       	rjmp	.+10     	; 0x3ea2 <micros+0x24>
    3e98:	2f 3f       	cpi	r18, 0xFF	; 255
    3e9a:	19 f0       	breq	.+6      	; 0x3ea2 <micros+0x24>
		m++;
    3e9c:	01 96       	adiw	r24, 0x01	; 1
    3e9e:	a1 1d       	adc	r26, r1
    3ea0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3ea2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3ea4:	ba 2f       	mov	r27, r26
    3ea6:	a9 2f       	mov	r26, r25
    3ea8:	98 2f       	mov	r25, r24
    3eaa:	88 27       	eor	r24, r24
    3eac:	82 0f       	add	r24, r18
    3eae:	91 1d       	adc	r25, r1
    3eb0:	a1 1d       	adc	r26, r1
    3eb2:	b1 1d       	adc	r27, r1
    3eb4:	bc 01       	movw	r22, r24
    3eb6:	cd 01       	movw	r24, r26
    3eb8:	42 e0       	ldi	r20, 0x02	; 2
    3eba:	66 0f       	add	r22, r22
    3ebc:	77 1f       	adc	r23, r23
    3ebe:	88 1f       	adc	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	4a 95       	dec	r20
    3ec4:	d1 f7       	brne	.-12     	; 0x3eba <micros+0x3c>
}
    3ec6:	08 95       	ret

00003ec8 <delay>:

void delay(unsigned long ms)
{
    3ec8:	8f 92       	push	r8
    3eca:	9f 92       	push	r9
    3ecc:	af 92       	push	r10
    3ece:	bf 92       	push	r11
    3ed0:	cf 92       	push	r12
    3ed2:	df 92       	push	r13
    3ed4:	ef 92       	push	r14
    3ed6:	ff 92       	push	r15
    3ed8:	6b 01       	movw	r12, r22
    3eda:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3edc:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <micros>
    3ee0:	4b 01       	movw	r8, r22
    3ee2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3ee4:	c1 14       	cp	r12, r1
    3ee6:	d1 04       	cpc	r13, r1
    3ee8:	e1 04       	cpc	r14, r1
    3eea:	f1 04       	cpc	r15, r1
    3eec:	01 f1       	breq	.+64     	; 0x3f2e <delay+0x66>
		yield();
    3eee:	0e 94 a3 20 	call	0x4146	; 0x4146 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3ef2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <micros>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	88 19       	sub	r24, r8
    3efc:	99 09       	sbc	r25, r9
    3efe:	aa 09       	sbc	r26, r10
    3f00:	bb 09       	sbc	r27, r11
    3f02:	88 3e       	cpi	r24, 0xE8	; 232
    3f04:	93 40       	sbci	r25, 0x03	; 3
    3f06:	a1 05       	cpc	r26, r1
    3f08:	b1 05       	cpc	r27, r1
    3f0a:	60 f3       	brcs	.-40     	; 0x3ee4 <delay+0x1c>
			ms--;
    3f0c:	21 e0       	ldi	r18, 0x01	; 1
    3f0e:	c2 1a       	sub	r12, r18
    3f10:	d1 08       	sbc	r13, r1
    3f12:	e1 08       	sbc	r14, r1
    3f14:	f1 08       	sbc	r15, r1
			start += 1000;
    3f16:	88 ee       	ldi	r24, 0xE8	; 232
    3f18:	88 0e       	add	r8, r24
    3f1a:	83 e0       	ldi	r24, 0x03	; 3
    3f1c:	98 1e       	adc	r9, r24
    3f1e:	a1 1c       	adc	r10, r1
    3f20:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3f22:	c1 14       	cp	r12, r1
    3f24:	d1 04       	cpc	r13, r1
    3f26:	e1 04       	cpc	r14, r1
    3f28:	f1 04       	cpc	r15, r1
    3f2a:	19 f7       	brne	.-58     	; 0x3ef2 <delay+0x2a>
    3f2c:	db cf       	rjmp	.-74     	; 0x3ee4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3f2e:	ff 90       	pop	r15
    3f30:	ef 90       	pop	r14
    3f32:	df 90       	pop	r13
    3f34:	cf 90       	pop	r12
    3f36:	bf 90       	pop	r11
    3f38:	af 90       	pop	r10
    3f3a:	9f 90       	pop	r9
    3f3c:	8f 90       	pop	r8
    3f3e:	08 95       	ret

00003f40 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3f40:	82 30       	cpi	r24, 0x02	; 2
    3f42:	91 05       	cpc	r25, r1
    3f44:	38 f0       	brcs	.+14     	; 0x3f54 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3f46:	88 0f       	add	r24, r24
    3f48:	99 1f       	adc	r25, r25
    3f4a:	88 0f       	add	r24, r24
    3f4c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3f4e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	f1 f7       	brne	.-4      	; 0x3f50 <delayMicroseconds+0x10>
    3f54:	08 95       	ret

00003f56 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3f56:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3f58:	84 b5       	in	r24, 0x24	; 36
    3f5a:	82 60       	ori	r24, 0x02	; 2
    3f5c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3f5e:	84 b5       	in	r24, 0x24	; 36
    3f60:	81 60       	ori	r24, 0x01	; 1
    3f62:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3f64:	85 b5       	in	r24, 0x25	; 37
    3f66:	82 60       	ori	r24, 0x02	; 2
    3f68:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3f6a:	85 b5       	in	r24, 0x25	; 37
    3f6c:	81 60       	ori	r24, 0x01	; 1
    3f6e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3f70:	ee e6       	ldi	r30, 0x6E	; 110
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	80 81       	ld	r24, Z
    3f76:	81 60       	ori	r24, 0x01	; 1
    3f78:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3f7a:	e1 e8       	ldi	r30, 0x81	; 129
    3f7c:	f0 e0       	ldi	r31, 0x00	; 0
    3f7e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3f80:	80 81       	ld	r24, Z
    3f82:	82 60       	ori	r24, 0x02	; 2
    3f84:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3f86:	80 81       	ld	r24, Z
    3f88:	81 60       	ori	r24, 0x01	; 1
    3f8a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3f8c:	e0 e8       	ldi	r30, 0x80	; 128
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	80 81       	ld	r24, Z
    3f92:	81 60       	ori	r24, 0x01	; 1
    3f94:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3f96:	e1 eb       	ldi	r30, 0xB1	; 177
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	80 81       	ld	r24, Z
    3f9c:	84 60       	ori	r24, 0x04	; 4
    3f9e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3fa0:	e0 eb       	ldi	r30, 0xB0	; 176
    3fa2:	f0 e0       	ldi	r31, 0x00	; 0
    3fa4:	80 81       	ld	r24, Z
    3fa6:	81 60       	ori	r24, 0x01	; 1
    3fa8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3faa:	ea e7       	ldi	r30, 0x7A	; 122
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	80 81       	ld	r24, Z
    3fb0:	84 60       	ori	r24, 0x04	; 4
    3fb2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3fb4:	80 81       	ld	r24, Z
    3fb6:	82 60       	ori	r24, 0x02	; 2
    3fb8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3fba:	80 81       	ld	r24, Z
    3fbc:	81 60       	ori	r24, 0x01	; 1
    3fbe:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3fc0:	80 81       	ld	r24, Z
    3fc2:	80 68       	ori	r24, 0x80	; 128
    3fc4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3fc6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3fca:	08 95       	ret

00003fcc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3fcc:	83 30       	cpi	r24, 0x03	; 3
    3fce:	81 f0       	breq	.+32     	; 0x3ff0 <turnOffPWM+0x24>
    3fd0:	28 f4       	brcc	.+10     	; 0x3fdc <turnOffPWM+0x10>
    3fd2:	81 30       	cpi	r24, 0x01	; 1
    3fd4:	99 f0       	breq	.+38     	; 0x3ffc <turnOffPWM+0x30>
    3fd6:	82 30       	cpi	r24, 0x02	; 2
    3fd8:	a1 f0       	breq	.+40     	; 0x4002 <turnOffPWM+0x36>
    3fda:	08 95       	ret
    3fdc:	87 30       	cpi	r24, 0x07	; 7
    3fde:	a9 f0       	breq	.+42     	; 0x400a <turnOffPWM+0x3e>
    3fe0:	88 30       	cpi	r24, 0x08	; 8
    3fe2:	b9 f0       	breq	.+46     	; 0x4012 <turnOffPWM+0x46>
    3fe4:	84 30       	cpi	r24, 0x04	; 4
    3fe6:	d1 f4       	brne	.+52     	; 0x401c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3fe8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3fec:	8f 7d       	andi	r24, 0xDF	; 223
    3fee:	03 c0       	rjmp	.+6      	; 0x3ff6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3ff0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3ff4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3ff6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3ffa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3ffc:	84 b5       	in	r24, 0x24	; 36
    3ffe:	8f 77       	andi	r24, 0x7F	; 127
    4000:	02 c0       	rjmp	.+4      	; 0x4006 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4002:	84 b5       	in	r24, 0x24	; 36
    4004:	8f 7d       	andi	r24, 0xDF	; 223
    4006:	84 bd       	out	0x24, r24	; 36
    4008:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    400a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    400e:	8f 77       	andi	r24, 0x7F	; 127
    4010:	03 c0       	rjmp	.+6      	; 0x4018 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4012:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4016:	8f 7d       	andi	r24, 0xDF	; 223
    4018:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    401c:	08 95       	ret

0000401e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	fc 01       	movw	r30, r24
    4026:	e0 5a       	subi	r30, 0xA0	; 160
    4028:	fb 4f       	sbci	r31, 0xFB	; 251
    402a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    402c:	fc 01       	movw	r30, r24
    402e:	ec 58       	subi	r30, 0x8C	; 140
    4030:	fb 4f       	sbci	r31, 0xFB	; 251
    4032:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4034:	88 23       	and	r24, r24
    4036:	61 f1       	breq	.+88     	; 0x4090 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	88 0f       	add	r24, r24
    403c:	99 1f       	adc	r25, r25
    403e:	fc 01       	movw	r30, r24
    4040:	e4 56       	subi	r30, 0x64	; 100
    4042:	fb 4f       	sbci	r31, 0xFB	; 251
    4044:	c5 91       	lpm	r28, Z+
    4046:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4048:	fc 01       	movw	r30, r24
    404a:	ee 56       	subi	r30, 0x6E	; 110
    404c:	fb 4f       	sbci	r31, 0xFB	; 251
    404e:	a5 91       	lpm	r26, Z+
    4050:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4052:	61 11       	cpse	r22, r1
    4054:	09 c0       	rjmp	.+18     	; 0x4068 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4056:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4058:	f8 94       	cli
		*reg &= ~bit;
    405a:	88 81       	ld	r24, Y
    405c:	20 95       	com	r18
    405e:	82 23       	and	r24, r18
    4060:	88 83       	st	Y, r24
		*out &= ~bit;
    4062:	ec 91       	ld	r30, X
    4064:	2e 23       	and	r18, r30
    4066:	0b c0       	rjmp	.+22     	; 0x407e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4068:	62 30       	cpi	r22, 0x02	; 2
    406a:	61 f4       	brne	.+24     	; 0x4084 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    406c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    406e:	f8 94       	cli
		*reg &= ~bit;
    4070:	88 81       	ld	r24, Y
    4072:	32 2f       	mov	r19, r18
    4074:	30 95       	com	r19
    4076:	83 23       	and	r24, r19
    4078:	88 83       	st	Y, r24
		*out |= bit;
    407a:	ec 91       	ld	r30, X
    407c:	2e 2b       	or	r18, r30
    407e:	2c 93       	st	X, r18
		SREG = oldSREG;
    4080:	9f bf       	out	0x3f, r25	; 63
    4082:	06 c0       	rjmp	.+12     	; 0x4090 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4084:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4086:	f8 94       	cli
		*reg |= bit;
    4088:	e8 81       	ld	r30, Y
    408a:	2e 2b       	or	r18, r30
    408c:	28 83       	st	Y, r18
		SREG = oldSREG;
    408e:	8f bf       	out	0x3f, r24	; 63
	}
}
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	08 95       	ret

00004096 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4096:	1f 93       	push	r17
    4098:	cf 93       	push	r28
    409a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    409c:	28 2f       	mov	r18, r24
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	f9 01       	movw	r30, r18
    40a2:	e4 5b       	subi	r30, 0xB4	; 180
    40a4:	fb 4f       	sbci	r31, 0xFB	; 251
    40a6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    40a8:	f9 01       	movw	r30, r18
    40aa:	e0 5a       	subi	r30, 0xA0	; 160
    40ac:	fb 4f       	sbci	r31, 0xFB	; 251
    40ae:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    40b0:	f9 01       	movw	r30, r18
    40b2:	ec 58       	subi	r30, 0x8C	; 140
    40b4:	fb 4f       	sbci	r31, 0xFB	; 251
    40b6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    40b8:	cc 23       	and	r28, r28
    40ba:	c1 f0       	breq	.+48     	; 0x40ec <digitalWrite+0x56>
    40bc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    40be:	81 11       	cpse	r24, r1
    40c0:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <turnOffPWM>

	out = portOutputRegister(port);
    40c4:	ec 2f       	mov	r30, r28
    40c6:	f0 e0       	ldi	r31, 0x00	; 0
    40c8:	ee 0f       	add	r30, r30
    40ca:	ff 1f       	adc	r31, r31
    40cc:	ee 56       	subi	r30, 0x6E	; 110
    40ce:	fb 4f       	sbci	r31, 0xFB	; 251
    40d0:	a5 91       	lpm	r26, Z+
    40d2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    40d4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    40d6:	f8 94       	cli

	if (val == LOW) {
    40d8:	11 11       	cpse	r17, r1
    40da:	04 c0       	rjmp	.+8      	; 0x40e4 <digitalWrite+0x4e>
		*out &= ~bit;
    40dc:	8c 91       	ld	r24, X
    40de:	d0 95       	com	r29
    40e0:	d8 23       	and	r29, r24
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    40e4:	ec 91       	ld	r30, X
    40e6:	de 2b       	or	r29, r30
    40e8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    40ea:	9f bf       	out	0x3f, r25	; 63
}
    40ec:	df 91       	pop	r29
    40ee:	cf 91       	pop	r28
    40f0:	1f 91       	pop	r17
    40f2:	08 95       	ret

000040f4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    40f8:	28 2f       	mov	r18, r24
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	f9 01       	movw	r30, r18
    40fe:	e4 5b       	subi	r30, 0xB4	; 180
    4100:	fb 4f       	sbci	r31, 0xFB	; 251
    4102:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4104:	f9 01       	movw	r30, r18
    4106:	e0 5a       	subi	r30, 0xA0	; 160
    4108:	fb 4f       	sbci	r31, 0xFB	; 251
    410a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    410c:	f9 01       	movw	r30, r18
    410e:	ec 58       	subi	r30, 0x8C	; 140
    4110:	fb 4f       	sbci	r31, 0xFB	; 251
    4112:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    4114:	cc 23       	and	r28, r28
    4116:	91 f0       	breq	.+36     	; 0x413c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4118:	81 11       	cpse	r24, r1
    411a:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    411e:	ec 2f       	mov	r30, r28
    4120:	f0 e0       	ldi	r31, 0x00	; 0
    4122:	ee 0f       	add	r30, r30
    4124:	ff 1f       	adc	r31, r31
    4126:	e8 57       	subi	r30, 0x78	; 120
    4128:	fb 4f       	sbci	r31, 0xFB	; 251
    412a:	a5 91       	lpm	r26, Z+
    412c:	b4 91       	lpm	r27, Z
    412e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4130:	ed 23       	and	r30, r29
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	21 f4       	brne	.+8      	; 0x4140 <digitalRead+0x4c>
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	02 c0       	rjmp	.+4      	; 0x4140 <digitalRead+0x4c>
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4140:	df 91       	pop	r29
    4142:	cf 91       	pop	r28
    4144:	08 95       	ret

00004146 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4146:	08 95       	ret

00004148 <__unordsf2>:
    4148:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fp_cmp>
    414c:	88 0b       	sbc	r24, r24
    414e:	99 0b       	sbc	r25, r25
    4150:	08 95       	ret

00004152 <__udivmodsi4>:
    4152:	a1 e2       	ldi	r26, 0x21	; 33
    4154:	1a 2e       	mov	r1, r26
    4156:	aa 1b       	sub	r26, r26
    4158:	bb 1b       	sub	r27, r27
    415a:	fd 01       	movw	r30, r26
    415c:	0d c0       	rjmp	.+26     	; 0x4178 <__udivmodsi4_ep>

0000415e <__udivmodsi4_loop>:
    415e:	aa 1f       	adc	r26, r26
    4160:	bb 1f       	adc	r27, r27
    4162:	ee 1f       	adc	r30, r30
    4164:	ff 1f       	adc	r31, r31
    4166:	a2 17       	cp	r26, r18
    4168:	b3 07       	cpc	r27, r19
    416a:	e4 07       	cpc	r30, r20
    416c:	f5 07       	cpc	r31, r21
    416e:	20 f0       	brcs	.+8      	; 0x4178 <__udivmodsi4_ep>
    4170:	a2 1b       	sub	r26, r18
    4172:	b3 0b       	sbc	r27, r19
    4174:	e4 0b       	sbc	r30, r20
    4176:	f5 0b       	sbc	r31, r21

00004178 <__udivmodsi4_ep>:
    4178:	66 1f       	adc	r22, r22
    417a:	77 1f       	adc	r23, r23
    417c:	88 1f       	adc	r24, r24
    417e:	99 1f       	adc	r25, r25
    4180:	1a 94       	dec	r1
    4182:	69 f7       	brne	.-38     	; 0x415e <__udivmodsi4_loop>
    4184:	60 95       	com	r22
    4186:	70 95       	com	r23
    4188:	80 95       	com	r24
    418a:	90 95       	com	r25
    418c:	9b 01       	movw	r18, r22
    418e:	ac 01       	movw	r20, r24
    4190:	bd 01       	movw	r22, r26
    4192:	cf 01       	movw	r24, r30
    4194:	08 95       	ret

00004196 <__tablejump2__>:
    4196:	ee 0f       	add	r30, r30
    4198:	ff 1f       	adc	r31, r31
    419a:	05 90       	lpm	r0, Z+
    419c:	f4 91       	lpm	r31, Z
    419e:	e0 2d       	mov	r30, r0
    41a0:	09 94       	ijmp

000041a2 <eeprom_read_byte>:
    41a2:	f9 99       	sbic	0x1f, 1	; 31
    41a4:	fe cf       	rjmp	.-4      	; 0x41a2 <eeprom_read_byte>
    41a6:	92 bd       	out	0x22, r25	; 34
    41a8:	81 bd       	out	0x21, r24	; 33
    41aa:	f8 9a       	sbi	0x1f, 0	; 31
    41ac:	99 27       	eor	r25, r25
    41ae:	80 b5       	in	r24, 0x20	; 32
    41b0:	08 95       	ret

000041b2 <eeprom_read_dword>:
    41b2:	a6 e1       	ldi	r26, 0x16	; 22
    41b4:	b0 e0       	ldi	r27, 0x00	; 0
    41b6:	44 e0       	ldi	r20, 0x04	; 4
    41b8:	50 e0       	ldi	r21, 0x00	; 0
    41ba:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <eeprom_read_blraw>

000041be <eeprom_update_byte>:
    41be:	26 2f       	mov	r18, r22

000041c0 <eeprom_update_r18>:
    41c0:	f9 99       	sbic	0x1f, 1	; 31
    41c2:	fe cf       	rjmp	.-4      	; 0x41c0 <eeprom_update_r18>
    41c4:	92 bd       	out	0x22, r25	; 34
    41c6:	81 bd       	out	0x21, r24	; 33
    41c8:	f8 9a       	sbi	0x1f, 0	; 31
    41ca:	01 97       	sbiw	r24, 0x01	; 1
    41cc:	00 b4       	in	r0, 0x20	; 32
    41ce:	02 16       	cp	r0, r18
    41d0:	39 f0       	breq	.+14     	; 0x41e0 <eeprom_update_r18+0x20>
    41d2:	1f ba       	out	0x1f, r1	; 31
    41d4:	20 bd       	out	0x20, r18	; 32
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	f8 94       	cli
    41da:	fa 9a       	sbi	0x1f, 2	; 31
    41dc:	f9 9a       	sbi	0x1f, 1	; 31
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	08 95       	ret

000041e2 <eeprom_update_dword>:
    41e2:	03 96       	adiw	r24, 0x03	; 3
    41e4:	27 2f       	mov	r18, r23
    41e6:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <eeprom_update_r18>
    41ea:	0e 94 df 20 	call	0x41be	; 0x41be <eeprom_update_byte>
    41ee:	25 2f       	mov	r18, r21
    41f0:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <eeprom_update_r18>
    41f4:	24 2f       	mov	r18, r20
    41f6:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <eeprom_update_r18>

000041fa <eeprom_read_block>:
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22

000041fe <eeprom_read_blraw>:
    41fe:	fc 01       	movw	r30, r24
    4200:	f9 99       	sbic	0x1f, 1	; 31
    4202:	fe cf       	rjmp	.-4      	; 0x4200 <eeprom_read_blraw+0x2>
    4204:	06 c0       	rjmp	.+12     	; 0x4212 <eeprom_read_blraw+0x14>
    4206:	f2 bd       	out	0x22, r31	; 34
    4208:	e1 bd       	out	0x21, r30	; 33
    420a:	f8 9a       	sbi	0x1f, 0	; 31
    420c:	31 96       	adiw	r30, 0x01	; 1
    420e:	00 b4       	in	r0, 0x20	; 32
    4210:	0d 92       	st	X+, r0
    4212:	41 50       	subi	r20, 0x01	; 1
    4214:	50 40       	sbci	r21, 0x00	; 0
    4216:	b8 f7       	brcc	.-18     	; 0x4206 <eeprom_read_blraw+0x8>
    4218:	08 95       	ret

0000421a <_exit>:
    421a:	f8 94       	cli

0000421c <__stop_program>:
    421c:	ff cf       	rjmp	.-2      	; 0x421c <__stop_program>
