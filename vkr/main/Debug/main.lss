
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  0000326c  00003320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000326c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000181  00800194  00800194  000033b4  2**0
                  ALLOC
  3 .eeprom       00000026  00810000  00810000  000033b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000033da  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000738  00000000  00000000  00003450  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bcc1  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024cc  00000000  00000000  0000f849  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b64  00000000  00000000  00011d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000012fc  00000000  00000000  0001587c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003aad  00000000  00000000  00016b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000057a8  00000000  00000000  0001a625  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000678  00000000  00000000  0001fdcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      40:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__vector_16>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      60:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__vector_24>
      64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      68:	3a 06       	cpc	r3, r26
      6a:	b1 05       	cpc	r27, r1
      6c:	b4 05       	cpc	r27, r4
      6e:	b7 05       	cpc	r27, r7
      70:	ba 05       	cpc	r27, r10
      72:	bd 05       	cpc	r27, r13
      74:	c0 05       	cpc	r28, r0
      76:	c3 05       	cpc	r28, r3
      78:	c6 05       	cpc	r28, r6
      7a:	c9 05       	cpc	r28, r9
      7c:	cc 05       	cpc	r28, r12
      7e:	cf 05       	cpc	r28, r15
      80:	f6 05       	cpc	r31, r6
      82:	1d 06       	cpc	r1, r29
      84:	20 06       	cpc	r2, r16
      86:	23 06       	cpc	r2, r19
      88:	2b 06       	cpc	r2, r27
      8a:	3c 07       	cpc	r19, r28
      8c:	59 07       	cpc	r21, r25
      8e:	59 07       	cpc	r21, r25
      90:	59 07       	cpc	r21, r25
      92:	59 07       	cpc	r21, r25
      94:	59 07       	cpc	r21, r25
      96:	59 07       	cpc	r21, r25
      98:	59 07       	cpc	r21, r25
      9a:	59 07       	cpc	r21, r25
      9c:	59 07       	cpc	r21, r25
      9e:	85 07       	cpc	r24, r21
      a0:	9d 07       	cpc	r25, r29
      a2:	b5 07       	cpc	r27, r21
      a4:	b7 07       	cpc	r27, r23
      a6:	b9 07       	cpc	r27, r25
      a8:	0c 0a       	sbc	r0, r28
      aa:	1c 0a       	sbc	r1, r28
      ac:	25 0a       	sbc	r2, r21
      ae:	2e 0a       	sbc	r2, r30
      b0:	37 0a       	sbc	r3, r23
      b2:	40 0a       	sbc	r4, r16
      b4:	49 0a       	sbc	r4, r25
      b6:	52 0a       	sbc	r5, r18
      b8:	5b 0a       	sbc	r5, r27
      ba:	64 0a       	sbc	r6, r20
      bc:	19 0b       	sbc	r17, r25
      be:	49 0b       	sbc	r20, r25
      c0:	56 0b       	sbc	r21, r22
      c2:	63 0b       	sbc	r22, r19
      c4:	70 0b       	sbc	r23, r16
      c6:	7d 0b       	sbc	r23, r29
      c8:	8a 0b       	sbc	r24, r26
      ca:	97 0b       	sbc	r25, r23
      cc:	a4 0b       	sbc	r26, r20
      ce:	b1 0b       	sbc	r27, r17

000000d0 <__trampolines_end>:
      d0:	20 00       	.word	0x0020	; ????

000000d2 <_ZZ16showWindingCharsvE3__c_1>:
      d2:	41 3d 00                                            A=.

000000d5 <_ZZ16showWindingCharsvE3__c_0>:
      d5:	56 3d 00                                            V=.

000000d8 <_ZZ16showWindingCharsvE3__c>:
      d8:	52 3d 00                                            R=.

000000db <_ZZ22showWindingCharsValueshE3__c_1>:
      db:	2b 00                                               +.

000000dd <_ZZ22showWindingCharsValueshE3__c_0>:
      dd:	2b 00                                               +.

000000df <_ZZ22showWindingCharsValueshE3__c>:
      df:	25 00                                               %.

000000e1 <_ZZ19displayStaticAsModevE3__c_23>:
      e1:	53 65 74 75 70 20 72 65 71 75 69 72 65 64 00        Setup required.

000000f0 <_ZZ19displayStaticAsModevE3__c_22>:
      f0:	4f 6f 6f 6f 70 73 21 00                             Oooops!.

000000f8 <_ZZ19displayStaticAsModevE3__c_21>:
      f8:	42 31 3d 77 6f 72 6b 3b 20 42 32 3d 73 74 6f 70     B1=work; B2=stop
	...

00000109 <_ZZ19displayStaticAsModevE3__c_20>:
     109:	4d 65 61 73 75 72 65 6d 65 6e 74 00                 Measurement.

00000115 <_ZZ19displayStaticAsModevE3__c_19>:
     115:	41 43 00                                            AC.

00000118 <_ZZ19displayStaticAsModevE3__c_18>:
     118:	42 43 00                                            BC.

0000011b <_ZZ19displayStaticAsModevE3__c_17>:
     11b:	41 42 00                                            AB.

0000011e <_ZZ19displayStaticAsModevE3__c_16>:
     11e:	65 25 00                                            e%.

00000121 <_ZZ19displayStaticAsModevE3__c_15>:
     121:	52 33 3d 00                                         R3=.

00000125 <_ZZ19displayStaticAsModevE3__c_14>:
     125:	52 32 3d 00                                         R2=.

00000129 <_ZZ19displayStaticAsModevE3__c_13>:
     129:	52 31 3d 00                                         R1=.

0000012d <_ZZ19displayStaticAsModevE3__c_12>:
     12d:	41 43 3d 00                                         AC=.

00000131 <_ZZ19displayStaticAsModevE3__c_11>:
     131:	42 43 3d 00                                         BC=.

00000135 <_ZZ19displayStaticAsModevE3__c_10>:
     135:	41 42 3d 00                                         AB=.

00000139 <_ZZ19displayStaticAsModevE3__c_9>:
     139:	45 43 72 69 74 20 00                                ECrit .

00000140 <_ZZ19displayStaticAsModevE3__c_8>:
     140:	41 6d 20 41 43 00                                   Am AC.

00000146 <_ZZ19displayStaticAsModevE3__c_7>:
     146:	41 6d 20 42 43 00                                   Am BC.

0000014c <_ZZ19displayStaticAsModevE3__c_6>:
     14c:	41 6d 20 41 42 00                                   Am AB.

00000152 <_ZZ19displayStaticAsModevE3__c_5>:
     152:	56 6d 20 41 43 00                                   Vm AC.

00000158 <_ZZ19displayStaticAsModevE3__c_4>:
     158:	56 6d 20 42 43 00                                   Vm BC.

0000015e <_ZZ19displayStaticAsModevE3__c_3>:
     15e:	56 6d 20 41 42 00                                   Vm AB.

00000164 <_ZZ19displayStaticAsModevE3__c_2>:
     164:	52 33 20 41 43 00                                   R3 AC.

0000016a <_ZZ19displayStaticAsModevE3__c_1>:
     16a:	52 32 20 42 43 00                                   R2 BC.

00000170 <_ZZ19displayStaticAsModevE3__c_0>:
     170:	52 31 20 41 42 00                                   R1 AB.

00000176 <_ZZ19displayStaticAsModevE3__c>:
     176:	43 6f 6e 6e 65 63 74 69 6f 6e 20 74 79 70 65 00     Connection type.

00000186 <_ZZ19lcdPrintCriticalLvlhE3__c>:
     186:	2b 00                                               +.

00000188 <_ZZ27lcdPrinRoundedCurErrorLevelhE3__c>:
     188:	2b 00                                               +.

0000018a <_ZZ13displayAsModevE3__c_1>:
     18a:	78 00                                               x.

0000018c <_ZZ13displayAsModevE3__c_0>:
     18c:	54 72 69 61 6e 67 6c 65 00                          Triangle.

00000195 <_ZZ13displayAsModevE3__c>:
     195:	53 74 61 72 00                                      Star.

0000019a <digital_pin_to_timer_PGM>:
     19a:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     1aa:	00 00 00 00                                         ....

000001ae <digital_pin_to_bit_mask_PGM>:
     1ae:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1be:	04 08 10 20                                         ... 

000001c2 <digital_pin_to_port_PGM>:
     1c2:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1d2:	03 03 03 03                                         ....

000001d6 <port_to_input_PGM>:
     1d6:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001e0 <port_to_output_PGM>:
     1e0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001ea <port_to_mode_PGM>:
     1ea:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001f4 <__ctors_start>:
     1f4:	2d 0c       	add	r2, r13
     1f6:	cc 12       	cpse	r12, r28

000001f8 <__ctors_end>:
     1f8:	11 24       	eor	r1, r1
     1fa:	1f be       	out	0x3f, r1	; 63
     1fc:	cf ef       	ldi	r28, 0xFF	; 255
     1fe:	d8 e0       	ldi	r29, 0x08	; 8
     200:	de bf       	out	0x3e, r29	; 62
     202:	cd bf       	out	0x3d, r28	; 61

00000204 <__do_copy_data>:
     204:	11 e0       	ldi	r17, 0x01	; 1
     206:	a0 e0       	ldi	r26, 0x00	; 0
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	ec e6       	ldi	r30, 0x6C	; 108
     20c:	f2 e3       	ldi	r31, 0x32	; 50
     20e:	02 c0       	rjmp	.+4      	; 0x214 <__do_copy_data+0x10>
     210:	05 90       	lpm	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	a4 39       	cpi	r26, 0x94	; 148
     216:	b1 07       	cpc	r27, r17
     218:	d9 f7       	brne	.-10     	; 0x210 <__do_copy_data+0xc>

0000021a <__do_clear_bss>:
     21a:	23 e0       	ldi	r18, 0x03	; 3
     21c:	a4 e9       	ldi	r26, 0x94	; 148
     21e:	b1 e0       	ldi	r27, 0x01	; 1
     220:	01 c0       	rjmp	.+2      	; 0x224 <.do_clear_bss_start>

00000222 <.do_clear_bss_loop>:
     222:	1d 92       	st	X+, r1

00000224 <.do_clear_bss_start>:
     224:	a5 31       	cpi	r26, 0x15	; 21
     226:	b2 07       	cpc	r27, r18
     228:	e1 f7       	brne	.-8      	; 0x222 <.do_clear_bss_loop>

0000022a <__do_global_ctors>:
     22a:	10 e0       	ldi	r17, 0x00	; 0
     22c:	cc ef       	ldi	r28, 0xFC	; 252
     22e:	d0 e0       	ldi	r29, 0x00	; 0
     230:	04 c0       	rjmp	.+8      	; 0x23a <__do_global_ctors+0x10>
     232:	21 97       	sbiw	r28, 0x01	; 1
     234:	fe 01       	movw	r30, r28
     236:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__tablejump2__>
     23a:	ca 3f       	cpi	r28, 0xFA	; 250
     23c:	d1 07       	cpc	r29, r17
     23e:	c9 f7       	brne	.-14     	; 0x232 <__do_global_ctors+0x8>
     240:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <main>
     244:	0c 94 34 19 	jmp	0x3268	; 0x3268 <_exit>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <_Z21button1LongPressStartv>:
		return;
	}
}


void button1LongPressStart() {
     24c:	cf 92       	push	r12
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
     254:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <modeWork>
     258:	9f ef       	ldi	r25, 0xFF	; 255
     25a:	98 0f       	add	r25, r24
     25c:	9a 30       	cpi	r25, 0x0A	; 10
     25e:	58 f5       	brcc	.+86     	; 0x2b6 <_Z21button1LongPressStartv+0x6a>
		// выбор множителя x1x10x100x0.1x0.01x0.001
		setDigit.curMultiplier = setDigit.curMultiplier >= 100.0f? 0.001f: setDigit.curMultiplier * 10.0f;
     260:	c0 90 a7 01 	lds	r12, 0x01A7	; 0x8001a7 <setDigit+0x4>
     264:	d0 90 a8 01 	lds	r13, 0x01A8	; 0x8001a8 <setDigit+0x5>
     268:	e0 90 a9 01 	lds	r14, 0x01A9	; 0x8001a9 <setDigit+0x6>
     26c:	f0 90 aa 01 	lds	r15, 0x01AA	; 0x8001aa <setDigit+0x7>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	48 ec       	ldi	r20, 0xC8	; 200
     276:	52 e4       	ldi	r21, 0x42	; 66
     278:	c7 01       	movw	r24, r14
     27a:	b6 01       	movw	r22, r12
     27c:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
     280:	87 ff       	sbrs	r24, 7
     282:	09 c0       	rjmp	.+18     	; 0x296 <_Z21button1LongPressStartv+0x4a>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e2       	ldi	r20, 0x20	; 32
     28a:	51 e4       	ldi	r21, 0x41	; 65
     28c:	c7 01       	movw	r24, r14
     28e:	b6 01       	movw	r22, r12
     290:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
     294:	04 c0       	rjmp	.+8      	; 0x29e <_Z21button1LongPressStartv+0x52>
     296:	6f e6       	ldi	r22, 0x6F	; 111
     298:	72 e1       	ldi	r23, 0x12	; 18
     29a:	83 e8       	ldi	r24, 0x83	; 131
     29c:	9a e3       	ldi	r25, 0x3A	; 58
     29e:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <setDigit+0x4>
     2a2:	70 93 a8 01 	sts	0x01A8, r23	; 0x8001a8 <setDigit+0x5>
     2a6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <setDigit+0x6>
     2aa:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <setDigit+0x7>
		lcdUpdateScreen = true;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
     2b4:	0b c0       	rjmp	.+22     	; 0x2cc <_Z21button1LongPressStartv+0x80>
		return;
	}
	
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
     2b6:	95 ef       	ldi	r25, 0xF5	; 245
     2b8:	98 0f       	add	r25, r24
     2ba:	95 30       	cpi	r25, 0x05	; 5
     2bc:	10 f4       	brcc	.+4      	; 0x2c2 <_Z21button1LongPressStartv+0x76>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
     2be:	80 e1       	ldi	r24, 0x10	; 16
     2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <_Z21button1LongPressStartv+0x7c>
		return;
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
     2c2:	80 31       	cpi	r24, 0x10	; 16
     2c4:	19 f4       	brne	.+6      	; 0x2cc <_Z21button1LongPressStartv+0x80>
		modeWork.current = MW_SHOWING_START;
     2c6:	8b e0       	ldi	r24, 0x0B	; 11
     2c8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <modeWork>
	}
}
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <_Z26initImpedanceCriticalValuev>:
	initAvgVars();
	displayStaticAsMode();
	displayAsMode();
}

void initImpedanceCriticalValue() {
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
	for (byte i = 0; i < 3; i++) {
		impedance.criticalValue[i] = impedance.real[i] / 100.0f * settings.criticleError;
     2e2:	c0 90 c7 01 	lds	r12, 0x01C7	; 0x8001c7 <settings+0x2>
     2e6:	d0 90 c8 01 	lds	r13, 0x01C8	; 0x8001c8 <settings+0x3>
     2ea:	e0 90 c9 01 	lds	r14, 0x01C9	; 0x8001c9 <settings+0x4>
     2ee:	f0 90 ca 01 	lds	r15, 0x01CA	; 0x8001ca <settings+0x5>
     2f2:	cc ec       	ldi	r28, 0xCC	; 204
     2f4:	d1 e0       	ldi	r29, 0x01	; 1
     2f6:	69 91       	ld	r22, Y+
     2f8:	79 91       	ld	r23, Y+
     2fa:	89 91       	ld	r24, Y+
     2fc:	99 91       	ld	r25, Y+
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	48 ec       	ldi	r20, 0xC8	; 200
     304:	52 e4       	ldi	r21, 0x42	; 66
     306:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
     30a:	a7 01       	movw	r20, r14
     30c:	96 01       	movw	r18, r12
     30e:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
     312:	6c 8b       	std	Y+20, r22	; 0x14
     314:	7d 8b       	std	Y+21, r23	; 0x15
     316:	8e 8b       	std	Y+22, r24	; 0x16
     318:	9f 8b       	std	Y+23, r25	; 0x17
	displayStaticAsMode();
	displayAsMode();
}

void initImpedanceCriticalValue() {
	for (byte i = 0; i < 3; i++) {
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	c8 3d       	cpi	r28, 0xD8	; 216
     31e:	d8 07       	cpc	r29, r24
     320:	51 f7       	brne	.-44     	; 0x2f6 <_Z26initImpedanceCriticalValuev+0x20>
		impedance.criticalValue[i] = impedance.real[i] / 100.0f * settings.criticleError;
	}
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	08 95       	ret

00000330 <_Z18checkIsReadyToWorkv>:

void checkIsReadyToWork() {
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	cc ec       	ldi	r28, 0xCC	; 204
     33a:	d1 e0       	ldi	r29, 0x01	; 1
     33c:	08 e1       	ldi	r16, 0x18	; 24
     33e:	11 e0       	ldi	r17, 0x01	; 1
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
		if (impedance.real[i] == 0 || multiplier.coef[i] == 0) {
     340:	69 91       	ld	r22, Y+
     342:	79 91       	ld	r23, Y+
     344:	89 91       	ld	r24, Y+
     346:	99 91       	ld	r25, Y+
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	a9 01       	movw	r20, r18
     34e:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     352:	88 23       	and	r24, r24
     354:	99 f0       	breq	.+38     	; 0x37c <_Z18checkIsReadyToWorkv+0x4c>
     356:	f8 01       	movw	r30, r16
     358:	61 91       	ld	r22, Z+
     35a:	71 91       	ld	r23, Z+
     35c:	81 91       	ld	r24, Z+
     35e:	91 91       	ld	r25, Z+
     360:	8f 01       	movw	r16, r30
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	a9 01       	movw	r20, r18
     368:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     36c:	88 23       	and	r24, r24
     36e:	31 f0       	breq	.+12     	; 0x37c <_Z18checkIsReadyToWorkv+0x4c>
	}
}

void checkIsReadyToWork() {
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
     370:	f1 e0       	ldi	r31, 0x01	; 1
     372:	c8 3d       	cpi	r28, 0xD8	; 216
     374:	df 07       	cpc	r29, r31
     376:	21 f7       	brne	.-56     	; 0x340 <_Z18checkIsReadyToWorkv+0x10>
		impedance.criticalValue[i] = impedance.real[i] / 100.0f * settings.criticleError;
	}
}

void checkIsReadyToWork() {
	bool isReadyToWork = true;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	01 c0       	rjmp	.+2      	; 0x37e <_Z18checkIsReadyToWorkv+0x4e>
	for(byte i = 0; i < 3; i++) {
		if (impedance.real[i] == 0 || multiplier.coef[i] == 0) {
			isReadyToWork = false;
     37c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
		
	settings.isSetupMode = false;
     37e:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <settings+0x6>
	if (isReadyToWork) {
     382:	88 23       	and	r24, r24
     384:	21 f0       	breq	.+8      	; 0x38e <_Z18checkIsReadyToWorkv+0x5e>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
     386:	80 e1       	ldi	r24, 0x10	; 16
     388:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <modeWork>
     38c:	02 c0       	rjmp	.+4      	; 0x392 <_Z18checkIsReadyToWorkv+0x62>
	} else {
		modeWork.current = MW_NEED_SETUP;
     38e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <modeWork>
	}
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	08 95       	ret

0000039c <_Z11initAvgVarsv>:
			}
		}
	}
}

void initAvgVars() {
     39c:	e4 e4       	ldi	r30, 0x44	; 68
     39e:	f1 e0       	ldi	r31, 0x01	; 1
     3a0:	a0 ef       	ldi	r26, 0xF0	; 240
     3a2:	b1 e0       	ldi	r27, 0x01	; 1
	for (byte i = 0; i < 3; i++) {
		measuredParams.sumVoltage[i] = 0;
     3a4:	11 92       	st	Z+, r1
     3a6:	11 92       	st	Z+, r1
     3a8:	11 92       	st	Z+, r1
     3aa:	11 92       	st	Z+, r1
		measuredParams.sumAmperage[i] = 0;
     3ac:	10 86       	std	Z+8, r1	; 0x08
     3ae:	11 86       	std	Z+9, r1	; 0x09
     3b0:	12 86       	std	Z+10, r1	; 0x0a
     3b2:	13 86       	std	Z+11, r1	; 0x0b
		impedance.sumMeasured[i] = 0;
     3b4:	1d 92       	st	X+, r1
     3b6:	1d 92       	st	X+, r1
     3b8:	1d 92       	st	X+, r1
     3ba:	1d 92       	st	X+, r1
		}
	}
}

void initAvgVars() {
	for (byte i = 0; i < 3; i++) {
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	e0 35       	cpi	r30, 0x50	; 80
     3c0:	f8 07       	cpc	r31, r24
     3c2:	81 f7       	brne	.-32     	; 0x3a4 <_Z11initAvgVarsv+0x8>
		measuredParams.sumVoltage[i] = 0;
		measuredParams.sumAmperage[i] = 0;
		impedance.sumMeasured[i] = 0;
	}
	measuredParams.currentMeasurement = 1;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <measuredParams+0x31>
     3ca:	08 95       	ret

000003cc <_Z12button1Clickv>:
	}
	lcd.setCursor(col, row);                                          
}


void button1Click() {
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
     3d4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <modeWork>
     3d8:	9f ef       	ldi	r25, 0xFF	; 255
     3da:	98 0f       	add	r25, r24
     3dc:	9a 30       	cpi	r25, 0x0A	; 10
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <_Z12button1Clickv+0x16>
     3e0:	53 c0       	rjmp	.+166    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		lcdUpdateScreen = true;
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <__data_end>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	01 f5       	brne	.+64     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR;
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	a9 01       	movw	r20, r18
     3f2:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <setDigit>
     3f6:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <setDigit+0x1>
     3fa:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <setDigit+0x2>
     3fe:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <setDigit+0x3>
     402:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     406:	88 23       	and	r24, r24
     408:	21 f0       	breq	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	dc 01       	movw	r26, r24
     410:	04 c0       	rjmp	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	a0 e8       	ldi	r26, 0x80	; 128
     418:	bf e3       	ldi	r27, 0x3F	; 63
     41a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <setDigit>
     41e:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <setDigit+0x1>
     422:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <setDigit+0x2>
     426:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <setDigit+0x3>
     42a:	48 c0       	rjmp	.+144    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		} else {
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     42c:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <setDigit+0x4>
     430:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <setDigit+0x5>
     434:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <setDigit+0x6>
     438:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <setDigit+0x7>
     43c:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <setDigit>
     440:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <setDigit+0x1>
     444:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <setDigit+0x2>
     448:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <setDigit+0x3>
     44c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__addsf3>
     450:	6b 01       	movw	r12, r22
     452:	7c 01       	movw	r14, r24
			if (setDigit.value >= 1000) {
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	4a e7       	ldi	r20, 0x7A	; 122
     45a:	54 e4       	ldi	r21, 0x44	; 68
     45c:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
     460:	87 ff       	sbrs	r24, 7
     462:	09 c0       	rjmp	.+18     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
		lcdUpdateScreen = true;
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR;
		} else {
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     464:	c0 92 a3 01 	sts	0x01A3, r12	; 0x8001a3 <setDigit>
     468:	d0 92 a4 01 	sts	0x01A4, r13	; 0x8001a4 <setDigit+0x1>
     46c:	e0 92 a5 01 	sts	0x01A5, r14	; 0x8001a5 <setDigit+0x2>
     470:	f0 92 a6 01 	sts	0x01A6, r15	; 0x8001a6 <setDigit+0x3>
     474:	23 c0       	rjmp	.+70     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			if (setDigit.value >= 1000) {
				setDigit.value = 0;
     476:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <setDigit>
     47a:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <setDigit+0x1>
     47e:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <setDigit+0x2>
     482:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <setDigit+0x3>
     486:	1a c0       	rjmp	.+52     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			}
		}
		return;	
	}
	
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
     488:	95 ef       	ldi	r25, 0xF5	; 245
     48a:	98 0f       	add	r25, r24
     48c:	95 30       	cpi	r25, 0x05	; 5
     48e:	40 f4       	brcc	.+16     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		modeWork.current = modeWork.current == MW_SHOWING_STOP? MW_SHOWING_START: modeWork.current + 1;
     490:	8f 30       	cpi	r24, 0x0F	; 15
     492:	11 f0       	breq	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     494:	8f 5f       	subi	r24, 0xFF	; 255
     496:	01 c0       	rjmp	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     498:	8b e0       	ldi	r24, 0x0B	; 11
     49a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <modeWork>
		return;
     49e:	0e c0       	rjmp	.+28     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
     4a0:	80 31       	cpi	r24, 0x10	; 16
     4a2:	61 f4       	brne	.+24     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		modeWork.current = MW_SHOWING_START;
     4a4:	8b e0       	ldi	r24, 0x0B	; 11
     4a6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <modeWork>
		settings.isReadyToWork = MM_WORK;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <settings>
		initAvgVars();
		return;
	}
}
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	df 90       	pop	r13
     4b6:	cf 90       	pop	r12
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
		modeWork.current = MW_SHOWING_START;
		settings.isReadyToWork = MM_WORK;
		initAvgVars();
     4b8:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_Z11initAvgVarsv>
		return;
	}
}
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	cf 90       	pop	r12
     4c4:	08 95       	ret

000004c6 <_Z10getICLevelfh>:
		impedance.sumMeasured[i] = 0;
	}
	measuredParams.currentMeasurement = 1;
}

float getICLevel(float value, byte _num) {
     4c6:	8f 92       	push	r8
     4c8:	9f 92       	push	r9
     4ca:	af 92       	push	r10
     4cc:	bf 92       	push	r11
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	6b 01       	movw	r12, r22
     4dc:	7c 01       	movw	r14, r24
	if (impedance.real[_num] >= value) {
     4de:	c4 2f       	mov	r28, r20
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
     4e2:	fe 01       	movw	r30, r28
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	e4 53       	subi	r30, 0x34	; 52
     4ee:	fe 4f       	sbci	r31, 0xFE	; 254
     4f0:	80 80       	ld	r8, Z
     4f2:	91 80       	ldd	r9, Z+1	; 0x01
     4f4:	a2 80       	ldd	r10, Z+2	; 0x02
     4f6:	b3 80       	ldd	r11, Z+3	; 0x03
     4f8:	9b 01       	movw	r18, r22
     4fa:	ac 01       	movw	r20, r24
     4fc:	c5 01       	movw	r24, r10
     4fe:	b4 01       	movw	r22, r8
     500:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
     504:	87 ff       	sbrs	r24, 7
     506:	2c c0       	rjmp	.+88     	; 0x560 <_Z10getICLevelfh+0x9a>
		return 0;
	}
	
	return abs(value - impedance.real[_num]) * 100.0 / impedance.criticalValue[_num];
     508:	a5 01       	movw	r20, r10
     50a:	94 01       	movw	r18, r8
     50c:	c7 01       	movw	r24, r14
     50e:	b6 01       	movw	r22, r12
     510:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__subsf3>
     514:	6b 01       	movw	r12, r22
     516:	7c 01       	movw	r14, r24
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	a9 01       	movw	r20, r18
     51e:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
     522:	18 16       	cp	r1, r24
     524:	3c f4       	brge	.+14     	; 0x534 <_Z10getICLevelfh+0x6e>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	48 ec       	ldi	r20, 0xC8	; 200
     52c:	52 e4       	ldi	r21, 0x42	; 66
     52e:	c7 01       	movw	r24, r14
     530:	b6 01       	movw	r22, r12
     532:	07 c0       	rjmp	.+14     	; 0x542 <_Z10getICLevelfh+0x7c>
     534:	c7 01       	movw	r24, r14
     536:	b6 01       	movw	r22, r12
     538:	90 58       	subi	r25, 0x80	; 128
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	48 ec       	ldi	r20, 0xC8	; 200
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
     546:	cc 0f       	add	r28, r28
     548:	dd 1f       	adc	r29, r29
     54a:	cc 0f       	add	r28, r28
     54c:	dd 1f       	adc	r29, r29
     54e:	cc 51       	subi	r28, 0x1C	; 28
     550:	de 4f       	sbci	r29, 0xFE	; 254
     552:	28 81       	ld	r18, Y
     554:	39 81       	ldd	r19, Y+1	; 0x01
     556:	4a 81       	ldd	r20, Y+2	; 0x02
     558:	5b 81       	ldd	r21, Y+3	; 0x03
     55a:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
     55e:	03 c0       	rjmp	.+6      	; 0x566 <_Z10getICLevelfh+0xa0>
	measuredParams.currentMeasurement = 1;
}

float getICLevel(float value, byte _num) {
	if (impedance.real[_num] >= value) {
		return 0;
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	cb 01       	movw	r24, r22
	}
	
	return abs(value - impedance.real[_num]) * 100.0 / impedance.criticalValue[_num];
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	9f 90       	pop	r9
     578:	8f 90       	pop	r8
     57a:	08 95       	ret

0000057c <_Z18initMultiplierCoefv>:


void initMultiplierCoef() {
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	c0 e0       	ldi	r28, 0x00	; 0
     58a:	d1 e0       	ldi	r29, 0x01	; 1
	for(byte i = 0; i < 3; i++) {
		multiplier.coef[i] = multiplier.voltage[i] == 0? 0: multiplier.voltage[i] / multiplier.amperage[i];
     58c:	c9 90       	ld	r12, Y+
     58e:	d9 90       	ld	r13, Y+
     590:	e9 90       	ld	r14, Y+
     592:	f9 90       	ld	r15, Y+
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	a9 01       	movw	r20, r18
     59a:	c7 01       	movw	r24, r14
     59c:	b6 01       	movw	r22, r12
     59e:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     5a2:	88 23       	and	r24, r24
     5a4:	49 f0       	breq	.+18     	; 0x5b8 <_Z18initMultiplierCoefv+0x3c>
     5a6:	28 85       	ldd	r18, Y+8	; 0x08
     5a8:	39 85       	ldd	r19, Y+9	; 0x09
     5aa:	4a 85       	ldd	r20, Y+10	; 0x0a
     5ac:	5b 85       	ldd	r21, Y+11	; 0x0b
     5ae:	c7 01       	movw	r24, r14
     5b0:	b6 01       	movw	r22, r12
     5b2:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <_Z18initMultiplierCoefv+0x42>
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	cb 01       	movw	r24, r22
     5be:	6c 8b       	std	Y+20, r22	; 0x14
     5c0:	7d 8b       	std	Y+21, r23	; 0x15
     5c2:	8e 8b       	std	Y+22, r24	; 0x16
     5c4:	9f 8b       	std	Y+23, r25	; 0x17
	return abs(value - impedance.real[_num]) * 100.0 / impedance.criticalValue[_num];
}


void initMultiplierCoef() {
	for(byte i = 0; i < 3; i++) {
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	cc 30       	cpi	r28, 0x0C	; 12
     5ca:	d8 07       	cpc	r29, r24
     5cc:	f9 f6       	brne	.-66     	; 0x58c <_Z18initMultiplierCoefv+0x10>
		multiplier.coef[i] = multiplier.voltage[i] == 0? 0: multiplier.voltage[i] / multiplier.amperage[i];
	}
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	08 95       	ret

000005dc <_Z18isErrorsAsymmetricPf>:

bool isErrorsAsymmetric(float* _impedance) {
     5dc:	2f 92       	push	r2
     5de:	3f 92       	push	r3
     5e0:	4f 92       	push	r4
     5e2:	5f 92       	push	r5
     5e4:	6f 92       	push	r6
     5e6:	7f 92       	push	r7
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	2c 97       	sbiw	r28, 0x0c	; 12
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
	float divImpedance[3] = {0, 0, 0};
     610:	19 82       	std	Y+1, r1	; 0x01
     612:	1a 82       	std	Y+2, r1	; 0x02
     614:	1b 82       	std	Y+3, r1	; 0x03
     616:	1c 82       	std	Y+4, r1	; 0x04
     618:	1d 82       	std	Y+5, r1	; 0x05
     61a:	1e 82       	std	Y+6, r1	; 0x06
     61c:	1f 82       	std	Y+7, r1	; 0x07
     61e:	18 86       	std	Y+8, r1	; 0x08
     620:	19 86       	std	Y+9, r1	; 0x09
     622:	1a 86       	std	Y+10, r1	; 0x0a
     624:	1b 86       	std	Y+11, r1	; 0x0b
     626:	1c 86       	std	Y+12, r1	; 0x0c
     628:	6c 01       	movw	r12, r24
     62a:	0c ec       	ldi	r16, 0xCC	; 204
     62c:	11 e0       	ldi	r17, 0x01	; 1
     62e:	ce 01       	movw	r24, r28
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	1c 01       	movw	r2, r24
     634:	7c 01       	movw	r14, r24
	float avgImpedance = 0;
     636:	81 2c       	mov	r8, r1
     638:	91 2c       	mov	r9, r1
     63a:	54 01       	movw	r10, r8
	byte sign = 100;
	for(byte i = 0; i < 3; i++) {
		divImpedance[i] = _impedance[i] - impedance.real[i];
     63c:	f6 01       	movw	r30, r12
     63e:	61 91       	ld	r22, Z+
     640:	71 91       	ld	r23, Z+
     642:	81 91       	ld	r24, Z+
     644:	91 91       	ld	r25, Z+
     646:	6f 01       	movw	r12, r30
     648:	f8 01       	movw	r30, r16
     64a:	21 91       	ld	r18, Z+
     64c:	31 91       	ld	r19, Z+
     64e:	41 91       	ld	r20, Z+
     650:	51 91       	ld	r21, Z+
     652:	8f 01       	movw	r16, r30
     654:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__subsf3>
     658:	9b 01       	movw	r18, r22
     65a:	ac 01       	movw	r20, r24
     65c:	f7 01       	movw	r30, r14
     65e:	61 93       	st	Z+, r22
     660:	71 93       	st	Z+, r23
     662:	81 93       	st	Z+, r24
     664:	91 93       	st	Z+, r25
     666:	7f 01       	movw	r14, r30
		if (divImpedance[i] > 0) {
			sign++;
		} else {
			sign--;
		}
		avgImpedance += divImpedance[i];
     668:	c5 01       	movw	r24, r10
     66a:	b4 01       	movw	r22, r8
     66c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__addsf3>
     670:	4b 01       	movw	r8, r22
     672:	5c 01       	movw	r10, r24

bool isErrorsAsymmetric(float* _impedance) {
	float divImpedance[3] = {0, 0, 0};
	float avgImpedance = 0;
	byte sign = 100;
	for(byte i = 0; i < 3; i++) {
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	08 3d       	cpi	r16, 0xD8	; 216
     678:	1f 07       	cpc	r17, r31
     67a:	01 f7       	brne	.-64     	; 0x63c <_Z18isErrorsAsymmetricPf+0x60>
		avgImpedance += divImpedance[i];
	}
	if (sign == -97) {
		return false;
	}
	avgImpedance /= 3;
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e4       	ldi	r20, 0x40	; 64
     682:	50 e4       	ldi	r21, 0x40	; 64
     684:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
	
	// всего допустимая погрешность 5 процентов вверх и вниз
	float lowBound = avgImpedance * 0.05;
     68c:	2d ec       	ldi	r18, 0xCD	; 205
     68e:	3c ec       	ldi	r19, 0xCC	; 204
     690:	4c e4       	ldi	r20, 0x4C	; 76
     692:	5d e3       	ldi	r21, 0x3D	; 61
     694:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
     698:	2b 01       	movw	r4, r22
     69a:	3c 01       	movw	r6, r24
	float highBound = avgImpedance + lowBound;
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	c7 01       	movw	r24, r14
     6a2:	b6 01       	movw	r22, r12
     6a4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__addsf3>
     6a8:	4b 01       	movw	r8, r22
     6aa:	5c 01       	movw	r10, r24
	lowBound = avgImpedance - lowBound;
     6ac:	a3 01       	movw	r20, r6
     6ae:	92 01       	movw	r18, r4
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__subsf3>
     6b8:	2b 01       	movw	r4, r22
     6ba:	3c 01       	movw	r6, r24
     6bc:	8e 01       	movw	r16, r28
     6be:	03 5f       	subi	r16, 0xF3	; 243
     6c0:	1f 4f       	sbci	r17, 0xFF	; 255
	for (byte i = 0; i < 3; i++) {
		if (!(divImpedance[i] >= lowBound && divImpedance[i] <= highBound)) {
     6c2:	f1 01       	movw	r30, r2
     6c4:	c1 90       	ld	r12, Z+
     6c6:	d1 90       	ld	r13, Z+
     6c8:	e1 90       	ld	r14, Z+
     6ca:	f1 90       	ld	r15, Z+
     6cc:	1f 01       	movw	r2, r30
     6ce:	a7 01       	movw	r20, r14
     6d0:	96 01       	movw	r18, r12
     6d2:	c3 01       	movw	r24, r6
     6d4:	b2 01       	movw	r22, r4
     6d6:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     6da:	18 16       	cp	r1, r24
     6dc:	6c f0       	brlt	.+26     	; 0x6f8 <_Z18isErrorsAsymmetricPf+0x11c>
     6de:	a7 01       	movw	r20, r14
     6e0:	96 01       	movw	r18, r12
     6e2:	c5 01       	movw	r24, r10
     6e4:	b4 01       	movw	r22, r8
     6e6:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
     6ea:	87 fd       	sbrc	r24, 7
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <_Z18isErrorsAsymmetricPf+0x11c>
	
	// всего допустимая погрешность 5 процентов вверх и вниз
	float lowBound = avgImpedance * 0.05;
	float highBound = avgImpedance + lowBound;
	lowBound = avgImpedance - lowBound;
	for (byte i = 0; i < 3; i++) {
     6ee:	02 15       	cp	r16, r2
     6f0:	13 05       	cpc	r17, r3
     6f2:	39 f7       	brne	.-50     	; 0x6c2 <_Z18isErrorsAsymmetricPf+0xe6>
		if (!(divImpedance[i] >= lowBound && divImpedance[i] <= highBound)) {
			return true;
		}
	}
	return false;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <_Z18isErrorsAsymmetricPf+0x11e>
	float lowBound = avgImpedance * 0.05;
	float highBound = avgImpedance + lowBound;
	lowBound = avgImpedance - lowBound;
	for (byte i = 0; i < 3; i++) {
		if (!(divImpedance[i] >= lowBound && divImpedance[i] <= highBound)) {
			return true;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
     6fa:	2c 96       	adiw	r28, 0x0c	; 12
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	3f 90       	pop	r3
     728:	2f 90       	pop	r2
     72a:	08 95       	ret

0000072c <_Z12getAdsParamsv>:
}

/**
 * Получение параметров с АЦП
 */
void getAdsParams() {
     72c:	2f 92       	push	r2
     72e:	3f 92       	push	r3
     730:	4f 92       	push	r4
     732:	5f 92       	push	r5
     734:	6f 92       	push	r6
     736:	7f 92       	push	r7
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	e9 97       	sbiw	r28, 0x39	; 57
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
	float measuredImpedance[3] = {0, 0, 0};
     760:	19 8e       	std	Y+25, r1	; 0x19
     762:	1a 8e       	std	Y+26, r1	; 0x1a
     764:	1b 8e       	std	Y+27, r1	; 0x1b
     766:	1c 8e       	std	Y+28, r1	; 0x1c
     768:	1d 8e       	std	Y+29, r1	; 0x1d
     76a:	1e 8e       	std	Y+30, r1	; 0x1e
     76c:	1f 8e       	std	Y+31, r1	; 0x1f
     76e:	18 a2       	std	Y+32, r1	; 0x20
     770:	19 a2       	std	Y+33, r1	; 0x21
     772:	1a a2       	std	Y+34, r1	; 0x22
     774:	1b a2       	std	Y+35, r1	; 0x23
     776:	1c a2       	std	Y+36, r1	; 0x24
	float measuredVoltage[3] = {0, 0, 0};
     778:	1d 86       	std	Y+13, r1	; 0x0d
     77a:	1e 86       	std	Y+14, r1	; 0x0e
     77c:	1f 86       	std	Y+15, r1	; 0x0f
     77e:	18 8a       	std	Y+16, r1	; 0x10
     780:	19 8a       	std	Y+17, r1	; 0x11
     782:	1a 8a       	std	Y+18, r1	; 0x12
     784:	1b 8a       	std	Y+19, r1	; 0x13
     786:	1c 8a       	std	Y+20, r1	; 0x14
     788:	1d 8a       	std	Y+21, r1	; 0x15
     78a:	1e 8a       	std	Y+22, r1	; 0x16
     78c:	1f 8a       	std	Y+23, r1	; 0x17
     78e:	18 8e       	std	Y+24, r1	; 0x18
	float measuredAmperage[3] = {0, 0, 0};
     790:	19 82       	std	Y+1, r1	; 0x01
     792:	1a 82       	std	Y+2, r1	; 0x02
     794:	1b 82       	std	Y+3, r1	; 0x03
     796:	1c 82       	std	Y+4, r1	; 0x04
     798:	1d 82       	std	Y+5, r1	; 0x05
     79a:	1e 82       	std	Y+6, r1	; 0x06
     79c:	1f 82       	std	Y+7, r1	; 0x07
     79e:	18 86       	std	Y+8, r1	; 0x08
     7a0:	19 86       	std	Y+9, r1	; 0x09
     7a2:	1a 86       	std	Y+10, r1	; 0x0a
     7a4:	1b 86       	std	Y+11, r1	; 0x0b
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1e 01       	movw	r2, r28
     7aa:	2d e0       	ldi	r18, 0x0D	; 13
     7ac:	22 0e       	add	r2, r18
     7ae:	31 1c       	adc	r3, r1
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	9e a3       	std	Y+38, r25	; 0x26
     7b6:	8d a3       	std	Y+37, r24	; 0x25
     7b8:	6c 01       	movw	r12, r24
     7ba:	51 01       	movw	r10, r2
	
	for (byte i = 0; i < 3; i++) {
     7bc:	10 e0       	ldi	r17, 0x00	; 0
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
     7be:	61 2f       	mov	r22, r17
     7c0:	83 e4       	ldi	r24, 0x43	; 67
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	0e 94 b7 0c 	call	0x196e	; 0x196e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     7c8:	bc 01       	movw	r22, r24
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatunsisf>
     7d2:	d5 01       	movw	r26, r10
     7d4:	6d 93       	st	X+, r22
     7d6:	7d 93       	st	X+, r23
     7d8:	8d 93       	st	X+, r24
     7da:	9d 93       	st	X+, r25
     7dc:	5d 01       	movw	r10, r26
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
     7de:	61 2f       	mov	r22, r17
     7e0:	8e e3       	ldi	r24, 0x3E	; 62
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 b7 0c 	call	0x196e	; 0x196e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     7e8:	bc 01       	movw	r22, r24
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatunsisf>
     7f2:	f6 01       	movw	r30, r12
     7f4:	61 93       	st	Z+, r22
     7f6:	71 93       	st	Z+, r23
     7f8:	81 93       	st	Z+, r24
     7fa:	91 93       	st	Z+, r25
     7fc:	6f 01       	movw	r12, r30
void getAdsParams() {
	float measuredImpedance[3] = {0, 0, 0};
	float measuredVoltage[3] = {0, 0, 0};
	float measuredAmperage[3] = {0, 0, 0};
	
	for (byte i = 0; i < 3; i++) {
     7fe:	1f 5f       	subi	r17, 0xFF	; 255
     800:	13 30       	cpi	r17, 0x03	; 3
     802:	e9 f6       	brne	.-70     	; 0x7be <_Z12getAdsParamsv+0x92>
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}
	for (byte i = 0; i < 3; i++) {
		measuredVoltage[i] *= ads.voltageStep;
     804:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ads>
     808:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ads+0x1>
     80c:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <ads+0x2>
     810:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <ads+0x3>
     814:	8a ab       	std	Y+50, r24	; 0x32
     816:	9b ab       	std	Y+51, r25	; 0x33
     818:	ac ab       	std	Y+52, r26	; 0x34
     81a:	bd ab       	std	Y+53, r27	; 0x35
		measuredAmperage[i] *= ads.amperageStep;
     81c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ads+0x4>
     820:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ads+0x5>
     824:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <ads+0x6>
     828:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <ads+0x7>
     82c:	8e ab       	std	Y+54, r24	; 0x36
     82e:	9f ab       	std	Y+55, r25	; 0x37
     830:	a8 af       	std	Y+56, r26	; 0x38
     832:	b9 af       	std	Y+57, r27	; 0x39
     834:	a8 e1       	ldi	r26, 0x18	; 24
     836:	b1 e0       	ldi	r27, 0x01	; 1
     838:	bf a7       	std	Y+47, r27	; 0x2f
     83a:	ae a7       	std	Y+46, r26	; 0x2e
     83c:	6e 01       	movw	r12, r28
     83e:	b9 e1       	ldi	r27, 0x19	; 25
     840:	cb 0e       	add	r12, r27
     842:	d1 1c       	adc	r13, r1
     844:	0c e2       	ldi	r16, 0x2C	; 44
     846:	11 e0       	ldi	r17, 0x01	; 1
     848:	8c ec       	ldi	r24, 0xCC	; 204
     84a:	e8 2e       	mov	r14, r24
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	f8 2e       	mov	r15, r24
     850:	d9 aa       	std	Y+49, r13	; 0x31
     852:	c8 aa       	std	Y+48, r12	; 0x30
     854:	3d a6       	std	Y+45, r3	; 0x2d
     856:	2c a6       	std	Y+44, r2	; 0x2c
     858:	e3 e0       	ldi	r30, 0x03	; 3
     85a:	eb a7       	std	Y+43, r30	; 0x2b
	for (byte i = 0; i < 3; i++) {
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}
	for (byte i = 0; i < 3; i++) {
		measuredVoltage[i] *= ads.voltageStep;
     85c:	ac a5       	ldd	r26, Y+44	; 0x2c
     85e:	bd a5       	ldd	r27, Y+45	; 0x2d
     860:	6d 91       	ld	r22, X+
     862:	7d 91       	ld	r23, X+
     864:	8d 91       	ld	r24, X+
     866:	9d 91       	ld	r25, X+
     868:	bd a7       	std	Y+45, r27	; 0x2d
     86a:	ac a7       	std	Y+44, r26	; 0x2c
     86c:	2a a9       	ldd	r18, Y+50	; 0x32
     86e:	3b a9       	ldd	r19, Y+51	; 0x33
     870:	4c a9       	ldd	r20, Y+52	; 0x34
     872:	5d a9       	ldd	r21, Y+53	; 0x35
     874:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
     878:	2b 01       	movw	r4, r22
     87a:	3c 01       	movw	r6, r24
     87c:	f1 01       	movw	r30, r2
     87e:	61 93       	st	Z+, r22
     880:	71 93       	st	Z+, r23
     882:	81 93       	st	Z+, r24
     884:	91 93       	st	Z+, r25
     886:	1f 01       	movw	r2, r30
		measuredAmperage[i] *= ads.amperageStep;
     888:	ad a1       	ldd	r26, Y+37	; 0x25
     88a:	be a1       	ldd	r27, Y+38	; 0x26
     88c:	2d 91       	ld	r18, X+
     88e:	3d 91       	ld	r19, X+
     890:	4d 91       	ld	r20, X+
     892:	5c 91       	ld	r21, X
     894:	6e a9       	ldd	r22, Y+54	; 0x36
     896:	7f a9       	ldd	r23, Y+55	; 0x37
     898:	88 ad       	ldd	r24, Y+56	; 0x38
     89a:	99 ad       	ldd	r25, Y+57	; 0x39
     89c:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
     8a0:	4b 01       	movw	r8, r22
     8a2:	5c 01       	movw	r10, r24
     8a4:	ed a1       	ldd	r30, Y+37	; 0x25
     8a6:	fe a1       	ldd	r31, Y+38	; 0x26
     8a8:	61 93       	st	Z+, r22
     8aa:	71 93       	st	Z+, r23
     8ac:	81 93       	st	Z+, r24
     8ae:	91 93       	st	Z+, r25
     8b0:	fe a3       	std	Y+38, r31	; 0x26
     8b2:	ed a3       	std	Y+37, r30	; 0x25
		
		measuredImpedance[i] = measuredVoltage[i] / measuredAmperage[i] * multiplier.coef[i];
     8b4:	ee a5       	ldd	r30, Y+46	; 0x2e
     8b6:	ff a5       	ldd	r31, Y+47	; 0x2f
     8b8:	81 91       	ld	r24, Z+
     8ba:	91 91       	ld	r25, Z+
     8bc:	a1 91       	ld	r26, Z+
     8be:	b1 91       	ld	r27, Z+
     8c0:	ff a7       	std	Y+47, r31	; 0x2f
     8c2:	ee a7       	std	Y+46, r30	; 0x2e
     8c4:	8f a3       	std	Y+39, r24	; 0x27
     8c6:	98 a7       	std	Y+40, r25	; 0x28
     8c8:	a9 a7       	std	Y+41, r26	; 0x29
     8ca:	ba a7       	std	Y+42, r27	; 0x2a
     8cc:	a5 01       	movw	r20, r10
     8ce:	94 01       	movw	r18, r8
     8d0:	c3 01       	movw	r24, r6
     8d2:	b2 01       	movw	r22, r4
     8d4:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
     8d8:	2f a1       	ldd	r18, Y+39	; 0x27
     8da:	38 a5       	ldd	r19, Y+40	; 0x28
     8dc:	49 a5       	ldd	r20, Y+41	; 0x29
     8de:	5a a5       	ldd	r21, Y+42	; 0x2a
     8e0:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
     8e4:	6f a3       	std	Y+39, r22	; 0x27
     8e6:	78 a7       	std	Y+40, r23	; 0x28
     8e8:	89 a7       	std	Y+41, r24	; 0x29
     8ea:	9a a7       	std	Y+42, r25	; 0x2a
     8ec:	a8 a9       	ldd	r26, Y+48	; 0x30
     8ee:	b9 a9       	ldd	r27, Y+49	; 0x31
     8f0:	6d 93       	st	X+, r22
     8f2:	7d 93       	st	X+, r23
     8f4:	8d 93       	st	X+, r24
     8f6:	9d 93       	st	X+, r25
     8f8:	b9 ab       	std	Y+49, r27	; 0x31
     8fa:	a8 ab       	std	Y+48, r26	; 0x30
		
		measuredParams.sumVoltage[i] += measuredVoltage[i];
     8fc:	a3 01       	movw	r20, r6
     8fe:	92 01       	movw	r18, r4
     900:	f8 01       	movw	r30, r16
     902:	60 8d       	ldd	r22, Z+24	; 0x18
     904:	71 8d       	ldd	r23, Z+25	; 0x19
     906:	82 8d       	ldd	r24, Z+26	; 0x1a
     908:	93 8d       	ldd	r25, Z+27	; 0x1b
     90a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__addsf3>
     90e:	d8 01       	movw	r26, r16
     910:	58 96       	adiw	r26, 0x18	; 24
     912:	6d 93       	st	X+, r22
     914:	7d 93       	st	X+, r23
     916:	8d 93       	st	X+, r24
     918:	9c 93       	st	X, r25
     91a:	5b 97       	sbiw	r26, 0x1b	; 27
		measuredParams.sumAmperage[i] += measuredAmperage[i];
     91c:	a5 01       	movw	r20, r10
     91e:	94 01       	movw	r18, r8
     920:	94 96       	adiw	r26, 0x24	; 36
     922:	6d 91       	ld	r22, X+
     924:	7d 91       	ld	r23, X+
     926:	8d 91       	ld	r24, X+
     928:	9c 91       	ld	r25, X
     92a:	97 97       	sbiw	r26, 0x27	; 39
     92c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__addsf3>
     930:	f8 01       	movw	r30, r16
     932:	64 a3       	std	Z+36, r22	; 0x24
     934:	75 a3       	std	Z+37, r23	; 0x25
     936:	86 a3       	std	Z+38, r24	; 0x26
     938:	97 a3       	std	Z+39, r25	; 0x27
		impedance.sumMeasured[i] += measuredImpedance[i];
     93a:	2f a1       	ldd	r18, Y+39	; 0x27
     93c:	38 a5       	ldd	r19, Y+40	; 0x28
     93e:	49 a5       	ldd	r20, Y+41	; 0x29
     940:	5a a5       	ldd	r21, Y+42	; 0x2a
     942:	d7 01       	movw	r26, r14
     944:	94 96       	adiw	r26, 0x24	; 36
     946:	6d 91       	ld	r22, X+
     948:	7d 91       	ld	r23, X+
     94a:	8d 91       	ld	r24, X+
     94c:	9c 91       	ld	r25, X
     94e:	97 97       	sbiw	r26, 0x27	; 39
     950:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__addsf3>
     954:	f7 01       	movw	r30, r14
     956:	64 a3       	std	Z+36, r22	; 0x24
     958:	75 a3       	std	Z+37, r23	; 0x25
     95a:	86 a3       	std	Z+38, r24	; 0x26
     95c:	97 a3       	std	Z+39, r25	; 0x27
     95e:	fb a5       	ldd	r31, Y+43	; 0x2b
     960:	f1 50       	subi	r31, 0x01	; 1
     962:	fb a7       	std	Y+43, r31	; 0x2b
     964:	0c 5f       	subi	r16, 0xFC	; 252
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	24 e0       	ldi	r18, 0x04	; 4
     96a:	e2 0e       	add	r14, r18
     96c:	f1 1c       	adc	r15, r1
	
	for (byte i = 0; i < 3; i++) {
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}
	for (byte i = 0; i < 3; i++) {
     96e:	f1 11       	cpse	r31, r1
     970:	75 cf       	rjmp	.-278    	; 0x85c <_Z12getAdsParamsv+0x130>
     972:	0b ea       	ldi	r16, 0xAB	; 171
     974:	11 e0       	ldi	r17, 0x01	; 1
     976:	f1 2c       	mov	r15, r1
		measuredParams.sumAmperage[i] += measuredAmperage[i];
		impedance.sumMeasured[i] += measuredImpedance[i];
	}
	
	for (byte i = 0; i < 3; i++) {
		if (isErrorsAsymmetric(measuredImpedance)) {
     978:	ce 01       	movw	r24, r28
     97a:	49 96       	adiw	r24, 0x19	; 25
     97c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z18isErrorsAsymmetricPf>
     980:	88 23       	and	r24, r24
     982:	d9 f0       	breq	.+54     	; 0x9ba <__stack+0xbb>
			if (getICLevel(measuredImpedance[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
     984:	d6 01       	movw	r26, r12
     986:	6d 91       	ld	r22, X+
     988:	7d 91       	ld	r23, X+
     98a:	8d 91       	ld	r24, X+
     98c:	9c 91       	ld	r25, X
     98e:	4f 2d       	mov	r20, r15
     990:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z10getICLevelfh>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	4a ea       	ldi	r20, 0xAA	; 170
     99a:	52 e4       	ldi	r21, 0x42	; 66
     99c:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
     9a0:	87 fd       	sbrc	r24, 7
     9a2:	0b c0       	rjmp	.+22     	; 0x9ba <__stack+0xbb>
     9a4:	f8 01       	movw	r30, r16
     9a6:	84 85       	ldd	r24, Z+12	; 0x0c
     9a8:	95 85       	ldd	r25, Z+13	; 0x0d
     9aa:	a6 85       	ldd	r26, Z+14	; 0x0e
     9ac:	b7 85       	ldd	r27, Z+15	; 0x0f
     9ae:	88 3e       	cpi	r24, 0xE8	; 232
     9b0:	f3 e0       	ldi	r31, 0x03	; 3
     9b2:	9f 07       	cpc	r25, r31
     9b4:	a1 05       	cpc	r26, r1
     9b6:	b1 05       	cpc	r27, r1
     9b8:	10 f1       	brcs	.+68     	; 0x9fe <__stack+0xff>
		measuredParams.sumVoltage[i] += measuredVoltage[i];
		measuredParams.sumAmperage[i] += measuredAmperage[i];
		impedance.sumMeasured[i] += measuredImpedance[i];
	}
	
	for (byte i = 0; i < 3; i++) {
     9ba:	f3 94       	inc	r15
     9bc:	24 e0       	ldi	r18, 0x04	; 4
     9be:	c2 0e       	add	r12, r18
     9c0:	d1 1c       	adc	r13, r1
     9c2:	0c 5f       	subi	r16, 0xFC	; 252
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	f8 12       	cpse	r15, r24
     9ca:	d6 cf       	rjmp	.-84     	; 0x978 <__stack+0x79>
			if (getICLevel(measuredImpedance[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
				icError.criticalLvlCount[i]++;
			}
		}
	}
}
     9cc:	e9 96       	adiw	r28, 0x39	; 57
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	bf 90       	pop	r11
     9ea:	af 90       	pop	r10
     9ec:	9f 90       	pop	r9
     9ee:	8f 90       	pop	r8
     9f0:	7f 90       	pop	r7
     9f2:	6f 90       	pop	r6
     9f4:	5f 90       	pop	r5
     9f6:	4f 90       	pop	r4
     9f8:	3f 90       	pop	r3
     9fa:	2f 90       	pop	r2
     9fc:	08 95       	ret
	}
	
	for (byte i = 0; i < 3; i++) {
		if (isErrorsAsymmetric(measuredImpedance)) {
			if (getICLevel(measuredImpedance[i], i) >= IC_ERROR_CRITICAL && icError.criticalLvlCount[i] < 1000) {
				icError.criticalLvlCount[i]++;
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	a1 1d       	adc	r26, r1
     a02:	b1 1d       	adc	r27, r1
     a04:	f8 01       	movw	r30, r16
     a06:	84 87       	std	Z+12, r24	; 0x0c
     a08:	95 87       	std	Z+13, r25	; 0x0d
     a0a:	a6 87       	std	Z+14, r26	; 0x0e
     a0c:	b7 87       	std	Z+15, r27	; 0x0f
     a0e:	d5 cf       	rjmp	.-86     	; 0x9ba <__stack+0xbb>

00000a10 <_Z27lcdPrinRoundedCurErrorLevelh>:
		case MW_SHOW_IMPEDANCE_WINDING_CHARS_AC:
			showWindingCharsValues(2);
			break;
	}
}
void lcdPrinRoundedCurErrorLevel(byte _num) {
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
	if (icError.curLvl[_num] < 1000) {
     a18:	24 e0       	ldi	r18, 0x04	; 4
     a1a:	82 9f       	mul	r24, r18
     a1c:	c0 01       	movw	r24, r0
     a1e:	11 24       	eor	r1, r1
     a20:	fc 01       	movw	r30, r24
     a22:	e5 55       	subi	r30, 0x55	; 85
     a24:	fe 4f       	sbci	r31, 0xFE	; 254
     a26:	c0 80       	ld	r12, Z
     a28:	d1 80       	ldd	r13, Z+1	; 0x01
     a2a:	e2 80       	ldd	r14, Z+2	; 0x02
     a2c:	f3 80       	ldd	r15, Z+3	; 0x03
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	4a e7       	ldi	r20, 0x7A	; 122
     a34:	54 e4       	ldi	r21, 0x44	; 68
     a36:	c7 01       	movw	r24, r14
     a38:	b6 01       	movw	r22, r12
     a3a:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     a3e:	87 ff       	sbrs	r24, 7
     a40:	24 c0       	rjmp	.+72     	; 0xa8a <_Z27lcdPrinRoundedCurErrorLevelh+0x7a>
		lcd.print(round(icError.curLvl[_num]));
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	a9 01       	movw	r20, r18
     a48:	c7 01       	movw	r24, r14
     a4a:	b6 01       	movw	r22, r12
     a4c:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	5f e3       	ldi	r21, 0x3F	; 63
     a58:	87 fd       	sbrc	r24, 7
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <_Z27lcdPrinRoundedCurErrorLevelh+0x56>
     a5c:	c7 01       	movw	r24, r14
     a5e:	b6 01       	movw	r22, r12
     a60:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__addsf3>
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <_Z27lcdPrinRoundedCurErrorLevelh+0x5e>
     a66:	c7 01       	movw	r24, r14
     a68:	b6 01       	movw	r22, r12
     a6a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__subsf3>
     a6e:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fixsfsi>
     a72:	2a e0       	ldi	r18, 0x0A	; 10
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	ab 01       	movw	r20, r22
     a78:	bc 01       	movw	r22, r24
     a7a:	87 e9       	ldi	r24, 0x97	; 151
     a7c:	91 e0       	ldi	r25, 0x01	; 1
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
			break;
	}
}
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
     a86:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <_ZN5Print5printEli>
	} else {
		lcd.print(999);
     a8a:	4a e0       	ldi	r20, 0x0A	; 10
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	67 ee       	ldi	r22, 0xE7	; 231
     a90:	73 e0       	ldi	r23, 0x03	; 3
     a92:	87 e9       	ldi	r24, 0x97	; 151
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEii>
		lcd.print(F("+"));
     a9a:	68 e8       	ldi	r22, 0x88	; 136
     a9c:	71 e0       	ldi	r23, 0x01	; 1
     a9e:	87 e9       	ldi	r24, 0x97	; 151
     aa0:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
	} else {
		lcd.print(999);
		lcd.print(F("+"));
     aaa:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>

00000aae <_Z19lcdPrintCriticalLvlh>:
	}
}

void lcdPrintCriticalLvl(byte _num) {
	if (icError.criticalLvlCount[_num] < 1000) {
     aae:	24 e0       	ldi	r18, 0x04	; 4
     ab0:	82 9f       	mul	r24, r18
     ab2:	c0 01       	movw	r24, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	fc 01       	movw	r30, r24
     ab8:	e9 54       	subi	r30, 0x49	; 73
     aba:	fe 4f       	sbci	r31, 0xFE	; 254
     abc:	40 81       	ld	r20, Z
     abe:	51 81       	ldd	r21, Z+1	; 0x01
     ac0:	62 81       	ldd	r22, Z+2	; 0x02
     ac2:	73 81       	ldd	r23, Z+3	; 0x03
     ac4:	48 3e       	cpi	r20, 0xE8	; 232
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	58 07       	cpc	r21, r24
     aca:	61 05       	cpc	r22, r1
     acc:	71 05       	cpc	r23, r1
     ace:	30 f4       	brcc	.+12     	; 0xadc <_Z19lcdPrintCriticalLvlh+0x2e>
		lcd.print(icError.criticalLvlCount[_num]);
     ad0:	2a e0       	ldi	r18, 0x0A	; 10
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	87 e9       	ldi	r24, 0x97	; 151
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <_ZN5Print5printEmi>
	} else {
		lcd.print(999);
     adc:	4a e0       	ldi	r20, 0x0A	; 10
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	67 ee       	ldi	r22, 0xE7	; 231
     ae2:	73 e0       	ldi	r23, 0x03	; 3
     ae4:	87 e9       	ldi	r24, 0x97	; 151
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEii>
		lcd.print(F("+"));
     aec:	66 e8       	ldi	r22, 0x86	; 134
     aee:	71 e0       	ldi	r23, 0x01	; 1
     af0:	87 e9       	ldi	r24, 0x97	; 151
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>

00000af8 <_Z16showWindingCharsv>:
		lcd.print(F("+"));
	}
}

void showWindingChars() {
	lcd.setCursor(4, 0);
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	64 e0       	ldi	r22, 0x04	; 4
     afc:	87 e9       	ldi	r24, 0x97	; 151
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("R="));
     b04:	68 ed       	ldi	r22, 0xD8	; 216
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	87 e9       	ldi	r24, 0x97	; 151
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     b10:	41 e0       	ldi	r20, 0x01	; 1
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	87 e9       	ldi	r24, 0x97	; 151
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("V="));
     b1c:	65 ed       	ldi	r22, 0xD5	; 213
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	87 e9       	ldi	r24, 0x97	; 151
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(8, 1);
     b28:	41 e0       	ldi	r20, 0x01	; 1
     b2a:	68 e0       	ldi	r22, 0x08	; 8
     b2c:	87 e9       	ldi	r24, 0x97	; 151
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("A="));
     b34:	62 ed       	ldi	r22, 0xD2	; 210
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	87 e9       	ldi	r24, 0x97	; 151
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>

00000b40 <_Z19displayStaticAsModev>:
		lcd.print(F("+"));
	}
}

void displayStaticAsMode() {
	lcd.clear();
     b40:	87 e9       	ldi	r24, 0x97	; 151
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZN17LiquidCrystal_I2C5clearEv>
	switch(modeWork.current) {
     b48:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <modeWork>
     b4c:	8e 2f       	mov	r24, r30
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	81 31       	cpi	r24, 0x11	; 17
     b52:	91 05       	cpc	r25, r1
     b54:	08 f0       	brcs	.+2      	; 0xb58 <_Z19displayStaticAsModev+0x18>
     b56:	a0 c0       	rjmp	.+320    	; 0xc98 <_Z19displayStaticAsModev+0x158>
     b58:	fc 01       	movw	r30, r24
     b5a:	ec 5c       	subi	r30, 0xCC	; 204
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcd.print(F("Connection type"));
     b62:	66 e7       	ldi	r22, 0x76	; 118
     b64:	71 e0       	ldi	r23, 0x01	; 1
     b66:	94 c0       	rjmp	.+296    	; 0xc90 <_Z19displayStaticAsModev+0x150>
		break;
		case MW_SETUP_IMPEDANCE_AB:
			lcd.print(F("R1 AB"));
     b68:	60 e7       	ldi	r22, 0x70	; 112
     b6a:	71 e0       	ldi	r23, 0x01	; 1
     b6c:	91 c0       	rjmp	.+290    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			lcd.print(F("R2 BC"));
     b6e:	6a e6       	ldi	r22, 0x6A	; 106
     b70:	71 e0       	ldi	r23, 0x01	; 1
     b72:	8e c0       	rjmp	.+284    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			lcd.print(F("R3 AC"));
     b74:	64 e6       	ldi	r22, 0x64	; 100
     b76:	71 e0       	ldi	r23, 0x01	; 1
     b78:	8b c0       	rjmp	.+278    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			lcd.print(F("Vm AB"));
     b7a:	6e e5       	ldi	r22, 0x5E	; 94
     b7c:	71 e0       	ldi	r23, 0x01	; 1
     b7e:	88 c0       	rjmp	.+272    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			lcd.print(F("Vm BC"));
     b80:	68 e5       	ldi	r22, 0x58	; 88
     b82:	71 e0       	ldi	r23, 0x01	; 1
     b84:	85 c0       	rjmp	.+266    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			lcd.print(F("Vm AC"));
     b86:	62 e5       	ldi	r22, 0x52	; 82
     b88:	71 e0       	ldi	r23, 0x01	; 1
     b8a:	82 c0       	rjmp	.+260    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			lcd.print(F("Am AB"));
     b8c:	6c e4       	ldi	r22, 0x4C	; 76
     b8e:	71 e0       	ldi	r23, 0x01	; 1
     b90:	7f c0       	rjmp	.+254    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			lcd.print(F("Am BC"));
     b92:	66 e4       	ldi	r22, 0x46	; 70
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	7c c0       	rjmp	.+248    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcd.print(F("Am AC"));
     b98:	60 e4       	ldi	r22, 0x40	; 64
     b9a:	71 e0       	ldi	r23, 0x01	; 1
     b9c:	79 c0       	rjmp	.+242    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SHOW_IMPEDANCE_CRITICLE_ERRORS:
			lcd.print(F("ECrit "));
     b9e:	69 e3       	ldi	r22, 0x39	; 57
     ba0:	71 e0       	ldi	r23, 0x01	; 1
     ba2:	87 e9       	ldi	r24, 0x97	; 151
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	68 e0       	ldi	r22, 0x08	; 8
     bae:	87 e9       	ldi	r24, 0x97	; 151
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AB="));
     bb6:	65 e3       	ldi	r22, 0x35	; 53
     bb8:	71 e0       	ldi	r23, 0x01	; 1
     bba:	87 e9       	ldi	r24, 0x97	; 151
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	87 e9       	ldi	r24, 0x97	; 151
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("BC="));
     bce:	61 e3       	ldi	r22, 0x31	; 49
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	87 e9       	ldi	r24, 0x97	; 151
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 1);
     bda:	41 e0       	ldi	r20, 0x01	; 1
     bdc:	68 e0       	ldi	r22, 0x08	; 8
     bde:	87 e9       	ldi	r24, 0x97	; 151
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AC="));
     be6:	6d e2       	ldi	r22, 0x2D	; 45
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	52 c0       	rjmp	.+164    	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SHOW_IMPEDANCE_ERRORS:
			lcd.print(F("R1="));
     bec:	69 e2       	ldi	r22, 0x29	; 41
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	87 e9       	ldi	r24, 0x97	; 151
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	68 e0       	ldi	r22, 0x08	; 8
     bfc:	87 e9       	ldi	r24, 0x97	; 151
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("R2="));
     c04:	65 e2       	ldi	r22, 0x25	; 37
     c06:	71 e0       	ldi	r23, 0x01	; 1
     c08:	87 e9       	ldi	r24, 0x97	; 151
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	87 e9       	ldi	r24, 0x97	; 151
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("R3="));
     c1c:	61 e2       	ldi	r22, 0x21	; 33
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	87 e9       	ldi	r24, 0x97	; 151
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(14, 1);
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	6e e0       	ldi	r22, 0x0E	; 14
     c2c:	87 e9       	ldi	r24, 0x97	; 151
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("e%"));
     c34:	6e e1       	ldi	r22, 0x1E	; 30
     c36:	71 e0       	ldi	r23, 0x01	; 1
     c38:	2b c0       	rjmp	.+86     	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_SHOW_IMPEDANCE_WINDING_CHARS_AB:
			lcd.print(F("AB"));
     c3a:	6b e1       	ldi	r22, 0x1B	; 27
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <_Z19displayStaticAsModev+0x10a>
			showWindingChars();
			break;
		case MW_SHOW_IMPEDANCE_WINDING_CHARS_BC:
			lcd.print(F("BC"));
     c40:	68 e1       	ldi	r22, 0x18	; 24
     c42:	71 e0       	ldi	r23, 0x01	; 1
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <_Z19displayStaticAsModev+0x10a>
			showWindingChars();
			break;
		case MW_SHOW_IMPEDANCE_WINDING_CHARS_AC:
			lcd.print(F("AC"));
     c46:	65 e1       	ldi	r22, 0x15	; 21
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	87 e9       	ldi	r24, 0x97	; 151
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			showWindingChars();
     c52:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <_Z16showWindingCharsv>
			break;
		case MW_CONTROLL_MEASUREMENT:
			lcd.print(F("Measurement"));
     c56:	69 e0       	ldi	r22, 0x09	; 9
     c58:	71 e0       	ldi	r23, 0x01	; 1
     c5a:	87 e9       	ldi	r24, 0x97	; 151
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     c62:	41 e0       	ldi	r20, 0x01	; 1
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	87 e9       	ldi	r24, 0x97	; 151
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("B1=work; B2=stop"));
     c6e:	68 ef       	ldi	r22, 0xF8	; 248
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e c0       	rjmp	.+28     	; 0xc90 <_Z19displayStaticAsModev+0x150>
			break;
		case MW_NEED_SETUP:
			lcd.print(F("Oooops!"));
     c74:	60 ef       	ldi	r22, 0xF0	; 240
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	87 e9       	ldi	r24, 0x97	; 151
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	87 e9       	ldi	r24, 0x97	; 151
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("Setup required"));
     c8c:	61 ee       	ldi	r22, 0xE1	; 225
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	87 e9       	ldi	r24, 0x97	; 151
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
     c98:	08 95       	ret

00000c9a <_Z12lcdClearCellhhh>:
	lcd.print(F("A="));
}

//
// очистка поля значения от старых данных
void lcdClearCell(byte col, byte row, byte rowLength) {                
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	d8 2f       	mov	r29, r24
     ca4:	16 2f       	mov	r17, r22
     ca6:	04 2f       	mov	r16, r20
	lcd.setCursor(col, row);                                        
     ca8:	46 2f       	mov	r20, r22
     caa:	68 2f       	mov	r22, r24
     cac:	87 e9       	ldi	r24, 0x97	; 151
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>
	for (byte i = 0; i < rowLength; i++) {                             
     cb4:	c0 e0       	ldi	r28, 0x00	; 0
     cb6:	c0 17       	cp	r28, r16
     cb8:	41 f0       	breq	.+16     	; 0xcca <_Z12lcdClearCellhhh+0x30>
		lcd.print(F(" "));
     cba:	60 ed       	ldi	r22, 0xD0	; 208
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	87 e9       	ldi	r24, 0x97	; 151
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>

//
// очистка поля значения от старых данных
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
     cc6:	cf 5f       	subi	r28, 0xFF	; 255
     cc8:	f6 cf       	rjmp	.-20     	; 0xcb6 <_Z12lcdClearCellhhh+0x1c>
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     cca:	41 2f       	mov	r20, r17
     ccc:	6d 2f       	mov	r22, r29
     cce:	87 e9       	ldi	r24, 0x97	; 151
     cd0:	91 e0       	ldi	r25, 0x01	; 1
}
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     cda:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <_ZN17LiquidCrystal_I2C9setCursorEhh>

00000cde <_Z22showWindingCharsValuesh>:
			break;
	}
}


void showWindingCharsValues(byte _num) {
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	c8 2f       	mov	r28, r24
	lcdClearCell(6, 0, 10);
     cf0:	4a e0       	ldi	r20, 0x0A	; 10
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	86 e0       	ldi	r24, 0x06	; 6
     cf6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
	lcd.print(icError.curLvl[_num]);
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
     cfc:	8e 01       	movw	r16, r28
     cfe:	00 0f       	add	r16, r16
     d00:	11 1f       	adc	r17, r17
     d02:	00 0f       	add	r16, r16
     d04:	11 1f       	adc	r17, r17
     d06:	f8 01       	movw	r30, r16
     d08:	e5 55       	subi	r30, 0x55	; 85
     d0a:	fe 4f       	sbci	r31, 0xFE	; 254
     d0c:	40 81       	ld	r20, Z
     d0e:	51 81       	ldd	r21, Z+1	; 0x01
     d10:	62 81       	ldd	r22, Z+2	; 0x02
     d12:	73 81       	ldd	r23, Z+3	; 0x03
     d14:	22 e0       	ldi	r18, 0x02	; 2
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	87 e9       	ldi	r24, 0x97	; 151
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEdi>
	lcd.print(F("%"));
     d20:	6f ed       	ldi	r22, 0xDF	; 223
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	87 e9       	ldi	r24, 0x97	; 151
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>

	lcdClearCell(2, 1, 6);
     d2c:	46 e0       	ldi	r20, 0x06	; 6
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	if (measuredParams.voltage[_num] < 100) {
     d36:	f8 01       	movw	r30, r16
     d38:	e4 5d       	subi	r30, 0xD4	; 212
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	c0 80       	ld	r12, Z
     d3e:	d1 80       	ldd	r13, Z+1	; 0x01
     d40:	e2 80       	ldd	r14, Z+2	; 0x02
     d42:	f3 80       	ldd	r15, Z+3	; 0x03
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	48 ec       	ldi	r20, 0xC8	; 200
     d4a:	52 e4       	ldi	r21, 0x42	; 66
     d4c:	c7 01       	movw	r24, r14
     d4e:	b6 01       	movw	r22, r12
     d50:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     d54:	87 fd       	sbrc	r24, 7
     d56:	3d c0       	rjmp	.+122    	; 0xdd2 <_Z22showWindingCharsValuesh+0xf4>
		roundedSign = 2;
	} else if (measuredParams.voltage[_num] < 1000) {
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a e7       	ldi	r20, 0x7A	; 122
     d5e:	54 e4       	ldi	r21, 0x44	; 68
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     d68:	87 fd       	sbrc	r24, 7
     d6a:	35 c0       	rjmp	.+106    	; 0xdd6 <_Z22showWindingCharsValuesh+0xf8>
	}
	
	if (roundedSign > 0) {
		lcd.print(measuredParams.voltage[_num], roundedSign);
	} else {
		lcd.print(999);
     d6c:	4a e0       	ldi	r20, 0x0A	; 10
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	67 ee       	ldi	r22, 0xE7	; 231
     d72:	73 e0       	ldi	r23, 0x03	; 3
     d74:	87 e9       	ldi	r24, 0x97	; 151
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEii>
		lcd.print(F("+"));
     d7c:	6d ed       	ldi	r22, 0xDD	; 221
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	87 e9       	ldi	r24, 0x97	; 151
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
	}
	
	lcdClearCell(10, 1, 6);
     d88:	46 e0       	ldi	r20, 0x06	; 6
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
	if (measuredParams.amperage[_num] < 100) {
     d92:	cc 0f       	add	r28, r28
     d94:	dd 1f       	adc	r29, r29
     d96:	cc 0f       	add	r28, r28
     d98:	dd 1f       	adc	r29, r29
     d9a:	c8 5c       	subi	r28, 0xC8	; 200
     d9c:	de 4f       	sbci	r29, 0xFE	; 254
     d9e:	c8 80       	ld	r12, Y
     da0:	d9 80       	ldd	r13, Y+1	; 0x01
     da2:	ea 80       	ldd	r14, Y+2	; 0x02
     da4:	fb 80       	ldd	r15, Y+3	; 0x03
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	48 ec       	ldi	r20, 0xC8	; 200
     dac:	52 e4       	ldi	r21, 0x42	; 66
     dae:	c7 01       	movw	r24, r14
     db0:	b6 01       	movw	r22, r12
     db2:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     db6:	87 fd       	sbrc	r24, 7
     db8:	17 c0       	rjmp	.+46     	; 0xde8 <_Z22showWindingCharsValuesh+0x10a>
		roundedSign = 2;
	} else if (measuredParams.amperage[_num] < 1000) {
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	4a e7       	ldi	r20, 0x7A	; 122
     dc0:	54 e4       	ldi	r21, 0x44	; 68
     dc2:	c7 01       	movw	r24, r14
     dc4:	b6 01       	movw	r22, r12
     dc6:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     dca:	87 ff       	sbrs	r24, 7
     dcc:	1d c0       	rjmp	.+58     	; 0xe08 <_Z22showWindingCharsValuesh+0x12a>
		roundedSign = 1;
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	0c c0       	rjmp	.+24     	; 0xdea <_Z22showWindingCharsValuesh+0x10c>
	lcd.print(F("%"));

	lcdClearCell(2, 1, 6);
	byte roundedSign = 2;
	if (measuredParams.voltage[_num] < 100) {
		roundedSign = 2;
     dd2:	22 e0       	ldi	r18, 0x02	; 2
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <_Z22showWindingCharsValuesh+0xfa>
	} else if (measuredParams.voltage[_num] < 1000) {
		roundedSign = 1;
     dd6:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		roundedSign = 0;
	}
	
	if (roundedSign > 0) {
		lcd.print(measuredParams.voltage[_num], roundedSign);
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	b7 01       	movw	r22, r14
     ddc:	a6 01       	movw	r20, r12
     dde:	87 e9       	ldi	r24, 0x97	; 151
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEdi>
     de6:	d0 cf       	rjmp	.-96     	; 0xd88 <_Z22showWindingCharsValuesh+0xaa>
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 6);
	if (measuredParams.amperage[_num] < 100) {
		roundedSign = 2;
     de8:	22 e0       	ldi	r18, 0x02	; 2
		roundedSign = 1;
	} else {
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(measuredParams.amperage[_num], roundedSign);
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	b7 01       	movw	r22, r14
     dee:	a6 01       	movw	r20, r12
     df0:	87 e9       	ldi	r24, 0x97	; 151
     df2:	91 e0       	ldi	r25, 0x01	; 1
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
		roundedSign = 1;
	} else {
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(measuredParams.amperage[_num], roundedSign);
     e04:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <_ZN5Print5printEdi>
	} else {
		lcd.print(999);
     e08:	4a e0       	ldi	r20, 0x0A	; 10
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	67 ee       	ldi	r22, 0xE7	; 231
     e0e:	73 e0       	ldi	r23, 0x03	; 3
     e10:	87 e9       	ldi	r24, 0x97	; 151
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEii>
		lcd.print(F("+"));
     e18:	6b ed       	ldi	r22, 0xDB	; 219
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	87 e9       	ldi	r24, 0x97	; 151
     e1e:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
	}
	if (roundedSign > 0) {
		lcd.print(measuredParams.amperage[_num], roundedSign);
	} else {
		lcd.print(999);
		lcd.print(F("+"));
     e30:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>

00000e34 <_Z13displayAsModev>:
	return false;
}


void displayAsMode() {
	if (modeWork.current != modeWork.prev) {
     e34:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <modeWork>
     e38:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <modeWork+0x1>
     e3c:	89 17       	cp	r24, r25
     e3e:	39 f0       	breq	.+14     	; 0xe4e <_Z13displayAsModev+0x1a>
		modeWork.prev = modeWork.current;
     e40:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <modeWork+0x1>
		lcdUpdateScreen = true;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
		displayStaticAsMode();
     e4a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_Z19displayStaticAsModev>
	}
	if (!lcdUpdateScreen) {
     e4e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
     e52:	88 23       	and	r24, r24
     e54:	09 f4       	brne	.+2      	; 0xe58 <_Z13displayAsModev+0x24>
     e56:	90 c0       	rjmp	.+288    	; 0xf78 <_Z13displayAsModev+0x144>
		return;
	} 
	lcdUpdateScreen = false;
     e58:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
	
	switch(modeWork.current) {
     e5c:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <modeWork>
     e60:	8e 2f       	mov	r24, r30
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	fc 01       	movw	r30, r24
     e66:	31 97       	sbiw	r30, 0x01	; 1
     e68:	ef 30       	cpi	r30, 0x0F	; 15
     e6a:	f1 05       	cpc	r31, r1
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <_Z13displayAsModev+0x3c>
     e6e:	84 c0       	rjmp	.+264    	; 0xf78 <_Z13displayAsModev+0x144>
     e70:	eb 5b       	subi	r30, 0xBB	; 187
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcdClearCell(0, 1, 8);
     e78:	48 e0       	ldi	r20, 0x08	; 8
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			if (setDigit.value == CONNECTION_TYPE_STAR) {
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	a9 01       	movw	r20, r18
     e88:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <setDigit>
     e8c:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <setDigit+0x1>
     e90:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <setDigit+0x2>
     e94:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <setDigit+0x3>
     e98:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
     e9c:	81 11       	cpse	r24, r1
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <_Z13displayAsModev+0x72>
				lcd.print(F("Star"));
     ea0:	65 e9       	ldi	r22, 0x95	; 149
     ea2:	71 e0       	ldi	r23, 0x01	; 1
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <_Z13displayAsModev+0x76>
			} else {
				lcd.print(F("Triangle"));
     ea6:	6c e8       	ldi	r22, 0x8C	; 140
     ea8:	71 e0       	ldi	r23, 0x01	; 1
     eaa:	87 e9       	ldi	r24, 0x97	; 151
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
		case MW_SETUP_MULT_VOLTAGE_BC:
		case MW_SETUP_MULT_VOLTAGE_AC:
		case MW_SETUP_MULT_AMPERAGE_AB:
		case MW_SETUP_MULT_AMPERAGE_BC:
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcdClearCell(7, 0, 8);
     eb2:	48 e0       	ldi	r20, 0x08	; 8
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	87 e0       	ldi	r24, 0x07	; 7
     eb8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			lcd.print(F("x"));
     ebc:	6a e8       	ldi	r22, 0x8A	; 138
     ebe:	71 e0       	ldi	r23, 0x01	; 1
     ec0:	87 e9       	ldi	r24, 0x97	; 151
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(setDigit.curMultiplier, 3);
     ec8:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <setDigit+0x4>
     ecc:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <setDigit+0x5>
     ed0:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <setDigit+0x6>
     ed4:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <setDigit+0x7>
     ed8:	23 e0       	ldi	r18, 0x03	; 3
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	87 e9       	ldi	r24, 0x97	; 151
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN5Print5printEdi>
			lcdClearCell(0, 1, 16);
     ee4:	40 e1       	ldi	r20, 0x10	; 16
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			lcd.print(setDigit.value, 3);
     eee:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <setDigit>
     ef2:	50 91 a4 01 	lds	r21, 0x01A4	; 0x8001a4 <setDigit+0x1>
     ef6:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <setDigit+0x2>
     efa:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <setDigit+0x3>
     efe:	23 e0       	ldi	r18, 0x03	; 3
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	87 e9       	ldi	r24, 0x97	; 151
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <_ZN5Print5printEdi>
			break;
		case MW_SHOW_IMPEDANCE_CRITICLE_ERRORS:
			lcdClearCell(11, 0, 4);
     f0a:	44 e0       	ldi	r20, 0x04	; 4
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	8b e0       	ldi	r24, 0x0B	; 11
     f10:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(0);
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	0e 94 57 05 	call	0xaae	; 0xaae <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(3, 1, 4);
     f1a:	44 e0       	ldi	r20, 0x04	; 4
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(1);
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 57 05 	call	0xaae	; 0xaae <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(11, 1, 4);
     f2a:	44 e0       	ldi	r20, 0x04	; 4
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	8b e0       	ldi	r24, 0x0B	; 11
     f30:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(2);
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	0c 94 57 05 	jmp	0xaae	; 0xaae <_Z19lcdPrintCriticalLvlh>
			break;
		case MW_SHOW_IMPEDANCE_ERRORS:
			lcdClearCell(3, 0, 5);
     f3a:	45 e0       	ldi	r20, 0x05	; 5
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(0);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 08 05 	call	0xa10	; 0xa10 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(11, 0, 5);
     f4a:	45 e0       	ldi	r20, 0x05	; 5
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	8b e0       	ldi	r24, 0x0B	; 11
     f50:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(1);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 08 05 	call	0xa10	; 0xa10 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(3, 1, 5);
     f5a:	45 e0       	ldi	r20, 0x05	; 5
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(2);
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_Z27lcdPrinRoundedCurErrorLevelh>
			break;
		case MW_SHOW_IMPEDANCE_WINDING_CHARS_AB:
			showWindingCharsValues(0);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <_Z13displayAsModev+0x140>
			break;
		case MW_SHOW_IMPEDANCE_WINDING_CHARS_BC:
			showWindingCharsValues(1);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <_Z13displayAsModev+0x140>
			break;
		case MW_SHOW_IMPEDANCE_WINDING_CHARS_AC:
			showWindingCharsValues(2);
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_Z22showWindingCharsValuesh>
     f78:	08 95       	ret

00000f7a <setup>:
void checkIsReadyToWork();
void initImpedanceCriticalValue();
void initAvgVars();
void lcdPrinRoundedCurErrorLevel(byte _num);

void setup() {
     f7a:	cf 93       	push	r28
	adsVoltage.setGain(GAIN_TWOTHIRDS);
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	83 e4       	ldi	r24, 0x43	; 67
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsVoltage.begin();
     f88:	83 e4       	ldi	r24, 0x43	; 67
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN16Adafruit_ADS10155beginEv>
	
	adsAmperage.setGain(GAIN_TWOTHIRDS);
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	8e e3       	ldi	r24, 0x3E	; 62
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsAmperage.begin();
     f9c:	8e e3       	ldi	r24, 0x3E	; 62
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN16Adafruit_ADS10155beginEv>
	
	lcd.init();
     fa4:	87 e9       	ldi	r24, 0x97	; 151
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
     fac:	87 e9       	ldi	r24, 0x97	; 151
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
     fb4:	87 e9       	ldi	r24, 0x97	; 151
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZN17LiquidCrystal_I2C5clearEv>
	
	button1Callback.attachClick(button1Click);
     fbc:	66 ee       	ldi	r22, 0xE6	; 230
     fbe:	71 e0       	ldi	r23, 0x01	; 1
     fc0:	8d e1       	ldi	r24, 0x1D	; 29
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN9OneButton11attachClickEPFvvE>
	button1Callback.attachLongPressStart(button1LongPressStart);
     fc8:	66 e2       	ldi	r22, 0x26	; 38
     fca:	71 e0       	ldi	r23, 0x01	; 1
     fcc:	8d e1       	ldi	r24, 0x1D	; 29
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN9OneButton20attachLongPressStartEPFvvE>
	button1Callback.setDebounceTicks(30);
     fd4:	6e e1       	ldi	r22, 0x1E	; 30
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	8d e1       	ldi	r24, 0x1D	; 29
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <_ZN9OneButton16setDebounceTicksEi>
	button1Callback.setClickTicks(200);
     fe0:	68 ec       	ldi	r22, 0xC8	; 200
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	8d e1       	ldi	r24, 0x1D	; 29
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <_ZN9OneButton13setClickTicksEi>
	button1Callback.setPressTicks(1000);
     fec:	68 ee       	ldi	r22, 0xE8	; 232
     fee:	73 e0       	ldi	r23, 0x03	; 3
     ff0:	8d e1       	ldi	r24, 0x1D	; 29
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_ZN9OneButton13setPressTicksEi>
	
	button2Callback.attachClick(button2Click);
     ff8:	61 e8       	ldi	r22, 0x81	; 129
     ffa:	7a e0       	ldi	r23, 0x0A	; 10
     ffc:	8c ef       	ldi	r24, 0xFC	; 252
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN9OneButton11attachClickEPFvvE>
	button2Callback.attachLongPressStart(button2LongPressStart);
    1004:	68 ed       	ldi	r22, 0xD8	; 216
    1006:	7b e0       	ldi	r23, 0x0B	; 11
    1008:	8c ef       	ldi	r24, 0xFC	; 252
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_ZN9OneButton20attachLongPressStartEPFvvE>
	button2Callback.setDebounceTicks(30);
    1010:	6e e1       	ldi	r22, 0x1E	; 30
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	8c ef       	ldi	r24, 0xFC	; 252
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <_ZN9OneButton16setDebounceTicksEi>
	button2Callback.setClickTicks(200);
    101c:	68 ec       	ldi	r22, 0xC8	; 200
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	8c ef       	ldi	r24, 0xFC	; 252
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <_ZN9OneButton13setClickTicksEi>
	button2Callback.setPressTicks(1000);
    1028:	68 ee       	ldi	r22, 0xE8	; 232
    102a:	73 e0       	ldi	r23, 0x03	; 3
    102c:	8c ef       	ldi	r24, 0xFC	; 252
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_ZN9OneButton13setPressTicksEi>
	
	if (eeprom_read_byte(&eeprom_first_start) != 101) {
    1034:	85 e2       	ldi	r24, 0x25	; 37
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <eeprom_read_byte>
    103c:	85 36       	cpi	r24, 0x65	; 101
    103e:	09 f4       	brne	.+2      	; 0x1042 <setup+0xc8>
    1040:	49 c0       	rjmp	.+146    	; 0x10d4 <setup+0x15a>
		eeprom_update_byte(&eeprom_connection_type, CONNECTION_TYPE_STAR);
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	84 e2       	ldi	r24, 0x24	; 36
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 06 19 	call	0x320c	; 0x320c <eeprom_update_byte>
		eeprom_update_float(&eeprom_impedance_ab, 0);
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	ba 01       	movw	r22, r20
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_bc, 0);
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	ba 01       	movw	r22, r20
    1060:	8c e1       	ldi	r24, 0x1C	; 28
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_ac, 0);
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	ba 01       	movw	r22, r20
    106e:	88 e1       	ldi	r24, 0x18	; 24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ab, 0);
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	ba 01       	movw	r22, r20
    107c:	84 e1       	ldi	r24, 0x14	; 20
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_bc, 0);
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	ba 01       	movw	r22, r20
    108a:	80 e1       	ldi	r24, 0x10	; 16
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ac, 0);
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	ba 01       	movw	r22, r20
    1098:	8c e0       	ldi	r24, 0x0C	; 12
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ab, 0);
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	ba 01       	movw	r22, r20
    10a6:	88 e0       	ldi	r24, 0x08	; 8
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_bc, 0);
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	ba 01       	movw	r22, r20
    10b4:	84 e0       	ldi	r24, 0x04	; 4
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ac, 0);
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	ba 01       	movw	r22, r20
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
		eeprom_update_byte(&eeprom_first_start, 101);
    10ca:	65 e6       	ldi	r22, 0x65	; 101
    10cc:	85 e2       	ldi	r24, 0x25	; 37
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 06 19 	call	0x320c	; 0x320c <eeprom_update_byte>
	}
	
	settings.connectionType = eeprom_read_byte(&eeprom_connection_type);
    10d4:	84 e2       	ldi	r24, 0x24	; 36
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <eeprom_read_byte>
    10dc:	c8 2f       	mov	r28, r24
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	c1 11       	cpse	r28, r1
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <setup+0x16c>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <settings+0x1>
	impedance.real[0] = eeprom_read_float(&eeprom_impedance_ab);
    10ea:	80 e2       	ldi	r24, 0x20	; 32
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    10f2:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <impedance>
    10f6:	70 93 cd 01 	sts	0x01CD, r23	; 0x8001cd <impedance+0x1>
    10fa:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <impedance+0x2>
    10fe:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <impedance+0x3>
	impedance.real[1] = eeprom_read_float(&eeprom_impedance_bc);
    1102:	8c e1       	ldi	r24, 0x1C	; 28
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    110a:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <impedance+0x4>
    110e:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <impedance+0x5>
    1112:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <impedance+0x6>
    1116:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <impedance+0x7>
	impedance.real[2] = eeprom_read_float(&eeprom_impedance_ac);
    111a:	88 e1       	ldi	r24, 0x18	; 24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    1122:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <impedance+0x8>
    1126:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <impedance+0x9>
    112a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <impedance+0xa>
    112e:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <impedance+0xb>
	multiplier.voltage[0] = eeprom_read_float(&eeprom_voltage_mult_ab);
    1132:	84 e1       	ldi	r24, 0x14	; 20
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    113a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    113e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1146:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	multiplier.voltage[1] = eeprom_read_float(&eeprom_voltage_mult_bc);
    114a:	80 e1       	ldi	r24, 0x10	; 16
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    1152:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_start+0x4>
    1156:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_start+0x5>
    115a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_start+0x6>
    115e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_start+0x7>
	multiplier.voltage[2] = eeprom_read_float(&eeprom_voltage_mult_ac);
    1162:	8c e0       	ldi	r24, 0x0C	; 12
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    116a:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_start+0x8>
    116e:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <__data_start+0x9>
    1172:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_start+0xa>
    1176:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_start+0xb>
	multiplier.amperage[0] = eeprom_read_float(&eeprom_amperage_mult_ab);
    117a:	88 e0       	ldi	r24, 0x08	; 8
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    1182:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <__data_start+0xc>
    1186:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <__data_start+0xd>
    118a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_start+0xe>
    118e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_start+0xf>
	multiplier.amperage[1] = eeprom_read_float(&eeprom_amperage_mult_bc);
    1192:	84 e0       	ldi	r24, 0x04	; 4
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    119a:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_start+0x10>
    119e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_start+0x11>
    11a2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_start+0x12>
    11a6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_start+0x13>
	multiplier.amperage[2] = eeprom_read_float(&eeprom_amperage_mult_ac);
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 00 19 	call	0x3200	; 0x3200 <eeprom_read_dword>
    11b2:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <__data_start+0x14>
    11b6:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <__data_start+0x15>
    11ba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_start+0x16>
    11be:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_start+0x17>
	
	settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    11c2:	cc 23       	and	r28, r28
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <setup+0x256>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 ea       	ldi	r26, 0xA0	; 160
    11cc:	b0 e4       	ldi	r27, 0x40	; 64
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <setup+0x25e>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a0 e2       	ldi	r26, 0x20	; 32
    11d6:	b0 e4       	ldi	r27, 0x40	; 64
    11d8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <settings+0x2>
    11dc:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <settings+0x3>
    11e0:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <settings+0x4>
    11e4:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <settings+0x5>
	initImpedanceCriticalValue();
    11e8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z26initImpedanceCriticalValuev>
	
	initMultiplierCoef();
    11ec:	0e 94 be 02 	call	0x57c	; 0x57c <_Z18initMultiplierCoefv>
	checkIsReadyToWork();
    11f0:	0e 94 98 01 	call	0x330	; 0x330 <_Z18checkIsReadyToWorkv>
	
	pinMode(BEEPER, OUTPUT);
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	80 e1       	ldi	r24, 0x10	; 16
    11f8:	0e 94 36 18 	call	0x306c	; 0x306c <pinMode>
	digitalWrite(BEEPER, LOW);
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	80 e1       	ldi	r24, 0x10	; 16
    1200:	0e 94 72 18 	call	0x30e4	; 0x30e4 <digitalWrite>
	
	modeWork.prev = modeWork.current;
    1204:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <modeWork>
    1208:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <modeWork+0x1>
	initAvgVars();
    120c:	0e 94 ce 01 	call	0x39c	; 0x39c <_Z11initAvgVarsv>
	displayStaticAsMode();
    1210:	0e 94 a0 05 	call	0xb40	; 0xb40 <_Z19displayStaticAsModev>
	displayAsMode();
}
    1214:	cf 91       	pop	r28
	digitalWrite(BEEPER, LOW);
	
	modeWork.prev = modeWork.current;
	initAvgVars();
	displayStaticAsMode();
	displayAsMode();
    1216:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <_Z13displayAsModev>

0000121a <loop>:
	} else {
		modeWork.current = MW_NEED_SETUP;
	}
}

void loop() {
    121a:	3f 92       	push	r3
    121c:	4f 92       	push	r4
    121e:	5f 92       	push	r5
    1220:	6f 92       	push	r6
    1222:	7f 92       	push	r7
    1224:	8f 92       	push	r8
    1226:	9f 92       	push	r9
    1228:	af 92       	push	r10
    122a:	bf 92       	push	r11
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	00 d0       	rcall	.+0      	; 0x123e <loop+0x24>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <loop+0x26>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	button1Callback.tick();
    1244:	8d e1       	ldi	r24, 0x1D	; 29
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN9OneButton4tickEv>
	button2Callback.tick();
    124c:	8c ef       	ldi	r24, 0xFC	; 252
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN9OneButton4tickEv>
	displayAsMode();
    1254:	0e 94 1a 07 	call	0xe34	; 0xe34 <_Z13displayAsModev>
	if(settings.isReadyToWork == MM_WORK) {
    1258:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <settings>
    125c:	88 23       	and	r24, r24
    125e:	09 f4       	brne	.+2      	; 0x1262 <loop+0x48>
    1260:	b4 c0       	rjmp	.+360    	; 0x13ca <loop+0x1b0>
		getAdsParams();
    1262:	0e 94 96 03 	call	0x72c	; 0x72c <_Z12getAdsParamsv>
		if (measuredParams.currentMeasurement < measuredParams.measurementsCount) {
    1266:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <measuredParams+0x31>
    126a:	80 90 5c 01 	lds	r8, 0x015C	; 0x80015c <measuredParams+0x30>
    126e:	88 15       	cp	r24, r8
    1270:	20 f4       	brcc	.+8      	; 0x127a <loop+0x60>
			measuredParams.currentMeasurement++;
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <measuredParams+0x31>
    1278:	a8 c0       	rjmp	.+336    	; 0x13ca <loop+0x1b0>
		} else {
			lcdUpdateScreen = true;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    1280:	8c e2       	ldi	r24, 0x2C	; 44
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	e8 2e       	mov	r14, r24
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	f8 2e       	mov	r15, r24
    1290:	0c ec       	ldi	r16, 0xCC	; 204
    1292:	11 e0       	ldi	r17, 0x01	; 1
    1294:	9b ea       	ldi	r25, 0xAB	; 171
    1296:	c9 2e       	mov	r12, r25
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	d9 2e       	mov	r13, r25
    129c:	da 82       	std	Y+2, r13	; 0x02
    129e:	c9 82       	std	Y+1, r12	; 0x01
			for (byte i = 0; i < 3; i++) {
    12a0:	31 2c       	mov	r3, r1
				measuredParams.voltage[i] = measuredParams.sumVoltage[i] / measuredParams.measurementsCount * multiplier.voltage[i];
    12a2:	91 2c       	mov	r9, r1
    12a4:	a1 2c       	mov	r10, r1
    12a6:	b1 2c       	mov	r11, r1
    12a8:	c5 01       	movw	r24, r10
    12aa:	b4 01       	movw	r22, r8
    12ac:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
    12b0:	2b 01       	movw	r4, r22
    12b2:	3c 01       	movw	r6, r24
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ba:	fc 81       	ldd	r31, Y+4	; 0x04
    12bc:	60 8d       	ldd	r22, Z+24	; 0x18
    12be:	71 8d       	ldd	r23, Z+25	; 0x19
    12c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    12c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    12c4:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
    12c8:	f7 01       	movw	r30, r14
    12ca:	20 81       	ld	r18, Z
    12cc:	31 81       	ldd	r19, Z+1	; 0x01
    12ce:	42 81       	ldd	r20, Z+2	; 0x02
    12d0:	53 81       	ldd	r21, Z+3	; 0x03
    12d2:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
    12d6:	eb 81       	ldd	r30, Y+3	; 0x03
    12d8:	fc 81       	ldd	r31, Y+4	; 0x04
    12da:	60 83       	st	Z, r22
    12dc:	71 83       	std	Z+1, r23	; 0x01
    12de:	82 83       	std	Z+2, r24	; 0x02
    12e0:	93 83       	std	Z+3, r25	; 0x03
				measuredParams.amperage[i] = measuredParams.sumAmperage[i] / measuredParams.measurementsCount * multiplier.amperage[i];
    12e2:	a3 01       	movw	r20, r6
    12e4:	92 01       	movw	r18, r4
    12e6:	64 a1       	ldd	r22, Z+36	; 0x24
    12e8:	75 a1       	ldd	r23, Z+37	; 0x25
    12ea:	86 a1       	ldd	r24, Z+38	; 0x26
    12ec:	97 a1       	ldd	r25, Z+39	; 0x27
    12ee:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
    12f2:	f7 01       	movw	r30, r14
    12f4:	24 85       	ldd	r18, Z+12	; 0x0c
    12f6:	35 85       	ldd	r19, Z+13	; 0x0d
    12f8:	46 85       	ldd	r20, Z+14	; 0x0e
    12fa:	57 85       	ldd	r21, Z+15	; 0x0f
    12fc:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
    1300:	eb 81       	ldd	r30, Y+3	; 0x03
    1302:	fc 81       	ldd	r31, Y+4	; 0x04
    1304:	64 87       	std	Z+12, r22	; 0x0c
    1306:	75 87       	std	Z+13, r23	; 0x0d
    1308:	86 87       	std	Z+14, r24	; 0x0e
    130a:	97 87       	std	Z+15, r25	; 0x0f
				impedance.measured[i] = impedance.sumMeasured[i] / measuredParams.measurementsCount;
    130c:	a3 01       	movw	r20, r6
    130e:	92 01       	movw	r18, r4
    1310:	f8 01       	movw	r30, r16
    1312:	64 a1       	ldd	r22, Z+36	; 0x24
    1314:	75 a1       	ldd	r23, Z+37	; 0x25
    1316:	86 a1       	ldd	r24, Z+38	; 0x26
    1318:	97 a1       	ldd	r25, Z+39	; 0x27
    131a:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
    131e:	f8 01       	movw	r30, r16
    1320:	64 87       	std	Z+12, r22	; 0x0c
    1322:	75 87       	std	Z+13, r23	; 0x0d
    1324:	86 87       	std	Z+14, r24	; 0x0e
    1326:	97 87       	std	Z+15, r25	; 0x0f
				icError.curLvl[i] = getICLevel(impedance.measured[i], i);
    1328:	43 2d       	mov	r20, r3
    132a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z10getICLevelfh>
    132e:	e9 81       	ldd	r30, Y+1	; 0x01
    1330:	fa 81       	ldd	r31, Y+2	; 0x02
    1332:	61 93       	st	Z+, r22
    1334:	71 93       	st	Z+, r23
    1336:	81 93       	st	Z+, r24
    1338:	91 93       	st	Z+, r25
    133a:	fa 83       	std	Y+2, r31	; 0x02
    133c:	e9 83       	std	Y+1, r30	; 0x01
		getAdsParams();
		if (measuredParams.currentMeasurement < measuredParams.measurementsCount) {
			measuredParams.currentMeasurement++;
		} else {
			lcdUpdateScreen = true;
			for (byte i = 0; i < 3; i++) {
    133e:	33 94       	inc	r3
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	04 96       	adiw	r24, 0x04	; 4
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	94 e0       	ldi	r25, 0x04	; 4
    134c:	e9 0e       	add	r14, r25
    134e:	f1 1c       	adc	r15, r1
    1350:	0c 5f       	subi	r16, 0xFC	; 252
    1352:	1f 4f       	sbci	r17, 0xFF	; 255
    1354:	e3 e0       	ldi	r30, 0x03	; 3
    1356:	3e 12       	cpse	r3, r30
    1358:	a7 cf       	rjmp	.-178    	; 0x12a8 <loop+0x8e>
				measuredParams.voltage[i] = measuredParams.sumVoltage[i] / measuredParams.measurementsCount * multiplier.voltage[i];
				measuredParams.amperage[i] = measuredParams.sumAmperage[i] / measuredParams.measurementsCount * multiplier.amperage[i];
				impedance.measured[i] = impedance.sumMeasured[i] / measuredParams.measurementsCount;
				icError.curLvl[i] = getICLevel(impedance.measured[i], i);
			}
			initAvgVars();
    135a:	0e 94 ce 01 	call	0x39c	; 0x39c <_Z11initAvgVarsv>
			
			bool isHasIC = false;
			for (byte i = 0; i < 3; i++) {
				if (icError.curLvl[i] > 100 - settings.connectionType) {
    135e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <settings+0x1>
    1362:	64 e6       	ldi	r22, 0x64	; 100
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	68 1b       	sub	r22, r24
    1368:	71 09       	sbc	r23, r1
    136a:	07 2e       	mov	r0, r23
    136c:	00 0c       	add	r0, r0
    136e:	88 0b       	sbc	r24, r24
    1370:	99 0b       	sbc	r25, r25
    1372:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
    1376:	4b 01       	movw	r8, r22
    1378:	5c 01       	movw	r10, r24
    137a:	f6 01       	movw	r30, r12
    137c:	61 91       	ld	r22, Z+
    137e:	71 91       	ld	r23, Z+
    1380:	81 91       	ld	r24, Z+
    1382:	91 91       	ld	r25, Z+
    1384:	6f 01       	movw	r12, r30
    1386:	a5 01       	movw	r20, r10
    1388:	94 01       	movw	r18, r8
    138a:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
    138e:	18 16       	cp	r1, r24
    1390:	3c f4       	brge	.+14     	; 0x13a0 <loop+0x186>
					icError.hasAsymmetry = isErrorsAsymmetric(impedance.measured);
    1392:	88 ed       	ldi	r24, 0xD8	; 216
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z18isErrorsAsymmetricPf>
    139a:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <icError+0x18>
					isHasIC = true;
					break;
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <loop+0x190>
				icError.curLvl[i] = getICLevel(impedance.measured[i], i);
			}
			initAvgVars();
			
			bool isHasIC = false;
			for (byte i = 0; i < 3; i++) {
    13a0:	87 eb       	ldi	r24, 0xB7	; 183
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	8c 15       	cp	r24, r12
    13a6:	9d 05       	cpc	r25, r13
    13a8:	41 f7       	brne	.-48     	; 0x137a <loop+0x160>
					icError.hasAsymmetry = isErrorsAsymmetric(impedance.measured);
					isHasIC = true;
					break;
				}
			}
			if (!icError.hasAsymmetry) {
    13aa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <icError+0x18>
    13ae:	88 23       	and	r24, r24
    13b0:	61 f0       	breq	.+24     	; 0x13ca <loop+0x1b0>
				isHasIC = false;
			} else {
				settings.isReadyToWork = MM_STOP;
    13b2:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <settings>
				modeWork.current = MW_SHOW_IMPEDANCE_CRITICLE_ERRORS;
    13b6:	8b e0       	ldi	r24, 0x0B	; 11
    13b8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <modeWork>
				digitalWrite(BEEPER, HIGH);
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	80 e1       	ldi	r24, 0x10	; 16
    13c0:	0e 94 72 18 	call	0x30e4	; 0x30e4 <digitalWrite>
				icError.hasIC = true;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <icError+0x19>
			}
		}
	} 
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	9f 90       	pop	r9
    13e8:	8f 90       	pop	r8
    13ea:	7f 90       	pop	r7
    13ec:	6f 90       	pop	r6
    13ee:	5f 90       	pop	r5
    13f0:	4f 90       	pop	r4
    13f2:	3f 90       	pop	r3
    13f4:	08 95       	ret

000013f6 <_Z12setEditValuev>:
		settings.isSetupMode = true;
	}
}

void setEditValue() {
	lcdUpdateScreen = true;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
	switch(modeWork.current) {
    13fc:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <modeWork>
    1400:	8e 2f       	mov	r24, r30
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	fc 01       	movw	r30, r24
    1406:	31 97       	sbiw	r30, 0x01	; 1
    1408:	ea 30       	cpi	r30, 0x0A	; 10
    140a:	f1 05       	cpc	r31, r1
    140c:	08 f0       	brcs	.+2      	; 0x1410 <_Z12setEditValuev+0x1a>
    140e:	6c c0       	rjmp	.+216    	; 0x14e8 <_Z12setEditValuev+0xf2>
    1410:	ec 5a       	subi	r30, 0xAC	; 172
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			setDigit.value = settings.connectionType;
    1418:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <settings+0x1>
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatunsisf>
    1426:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <setDigit>
    142a:	70 93 a4 01 	sts	0x01A4, r23	; 0x8001a4 <setDigit+0x1>
    142e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <setDigit+0x2>
    1432:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <setDigit+0x3>
			break;
    1436:	58 c0       	rjmp	.+176    	; 0x14e8 <_Z12setEditValuev+0xf2>
		case MW_SETUP_IMPEDANCE_AB:
			setDigit.value = impedance.real[0];
    1438:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <impedance>
    143c:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <impedance+0x1>
    1440:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <impedance+0x2>
    1444:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <impedance+0x3>
    1448:	47 c0       	rjmp	.+142    	; 0x14d8 <_Z12setEditValuev+0xe2>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			setDigit.value = impedance.real[1];
    144a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <impedance+0x4>
    144e:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <impedance+0x5>
    1452:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <impedance+0x6>
    1456:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <impedance+0x7>
    145a:	3e c0       	rjmp	.+124    	; 0x14d8 <_Z12setEditValuev+0xe2>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			setDigit.value = impedance.real[2];
    145c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <impedance+0x8>
    1460:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <impedance+0x9>
    1464:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <impedance+0xa>
    1468:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <impedance+0xb>
    146c:	35 c0       	rjmp	.+106    	; 0x14d8 <_Z12setEditValuev+0xe2>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			setDigit.value = multiplier.voltage[0];
    146e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1472:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1476:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    147a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    147e:	2c c0       	rjmp	.+88     	; 0x14d8 <_Z12setEditValuev+0xe2>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			setDigit.value = multiplier.voltage[1];
    1480:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
    1484:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_start+0x5>
    1488:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_start+0x6>
    148c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_start+0x7>
    1490:	23 c0       	rjmp	.+70     	; 0x14d8 <_Z12setEditValuev+0xe2>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			setDigit.value = multiplier.voltage[2];
    1492:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_start+0x8>
    1496:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_start+0x9>
    149a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <__data_start+0xa>
    149e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <__data_start+0xb>
    14a2:	1a c0       	rjmp	.+52     	; 0x14d8 <_Z12setEditValuev+0xe2>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			setDigit.value = multiplier.amperage[0];
    14a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_start+0xc>
    14a8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_start+0xd>
    14ac:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_start+0xe>
    14b0:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_start+0xf>
    14b4:	11 c0       	rjmp	.+34     	; 0x14d8 <_Z12setEditValuev+0xe2>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			setDigit.value = multiplier.amperage[1];
    14b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_start+0x10>
    14ba:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_start+0x11>
    14be:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_start+0x12>
    14c2:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_start+0x13>
    14c6:	08 c0       	rjmp	.+16     	; 0x14d8 <_Z12setEditValuev+0xe2>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			setDigit.value = multiplier.amperage[2];
    14c8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_start+0x14>
    14cc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_start+0x15>
    14d0:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_start+0x16>
    14d4:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_start+0x17>
    14d8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <setDigit>
    14dc:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <setDigit+0x1>
    14e0:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <setDigit+0x2>
    14e4:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <setDigit+0x3>
			break;
	}
	setDigit.curMultiplier = 1.0f;
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e8       	ldi	r26, 0x80	; 128
    14ee:	bf e3       	ldi	r27, 0x3F	; 63
    14f0:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <setDigit+0x4>
    14f4:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <setDigit+0x5>
    14f8:	a0 93 a9 01 	sts	0x01A9, r26	; 0x8001a9 <setDigit+0x6>
    14fc:	b0 93 aa 01 	sts	0x01AA, r27	; 0x8001aa <setDigit+0x7>
    1500:	08 95       	ret

00001502 <_Z12button2Clickv>:
		initAvgVars();
		return;
	}
}

void button2Click() {
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	cf 93       	push	r28
	if (modeWork.current == MW_NEED_SETUP) {
    150c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <modeWork>
    1510:	81 11       	cpse	r24, r1
    1512:	0a c0       	rjmp	.+20     	; 0x1528 <_Z12button2Clickv+0x26>
		lcdUpdateScreen = true;
    1514:	c1 e0       	ldi	r28, 0x01	; 1
    1516:	c0 93 94 01 	sts	0x0194, r28	; 0x800194 <__data_end>
		modeWork.current = MW_SETUP_START;
    151a:	c0 93 95 01 	sts	0x0195, r28	; 0x800195 <modeWork>
		setEditValue();
    151e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_Z12setEditValuev>
		settings.isSetupMode = true;
    1522:	c0 93 cb 01 	sts	0x01CB, r28	; 0x8001cb <settings+0x6>
		return;
    1526:	64 c0       	rjmp	.+200    	; 0x15f0 <_Z12button2Clickv+0xee>
	}
		
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
    1528:	9f ef       	ldi	r25, 0xFF	; 255
    152a:	98 0f       	add	r25, r24
    152c:	9a 30       	cpi	r25, 0x0A	; 10
    152e:	08 f0       	brcs	.+2      	; 0x1532 <_Z12button2Clickv+0x30>
    1530:	4e c0       	rjmp	.+156    	; 0x15ce <_Z12button2Clickv+0xcc>
		lcdUpdateScreen = true;
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <__data_end>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	c1 f4       	brne	.+48     	; 0x156c <_Z12button2Clickv+0x6a>
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <setDigit>
    1546:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <setDigit+0x1>
    154a:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <setDigit+0x2>
    154e:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <setDigit+0x3>
    1552:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
    1556:	88 23       	and	r24, r24
    1558:	21 f0       	breq	.+8      	; 0x1562 <_Z12button2Clickv+0x60>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	dc 01       	movw	r26, r24
    1560:	2d c0       	rjmp	.+90     	; 0x15bc <_Z12button2Clickv+0xba>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e8       	ldi	r26, 0x80	; 128
    1568:	bf e3       	ldi	r27, 0x3F	; 63
    156a:	28 c0       	rjmp	.+80     	; 0x15bc <_Z12button2Clickv+0xba>
		} else {
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    156c:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <setDigit+0x4>
    1570:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <setDigit+0x5>
    1574:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <setDigit+0x6>
    1578:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <setDigit+0x7>
    157c:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <setDigit>
    1580:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <setDigit+0x1>
    1584:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <setDigit+0x2>
    1588:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <setDigit+0x3>
    158c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__subsf3>
    1590:	6b 01       	movw	r12, r22
    1592:	7c 01       	movw	r14, r24
			if (setDigit.value < 0) {
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	a9 01       	movw	r20, r18
    159a:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
    159e:	87 fd       	sbrc	r24, 7
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <_Z12button2Clickv+0xb2>
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
		lcdUpdateScreen = true;
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
		} else {
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    15a2:	c0 92 a3 01 	sts	0x01A3, r12	; 0x8001a3 <setDigit>
    15a6:	d0 92 a4 01 	sts	0x01A4, r13	; 0x8001a4 <setDigit+0x1>
    15aa:	e0 92 a5 01 	sts	0x01A5, r14	; 0x8001a5 <setDigit+0x2>
    15ae:	f0 92 a6 01 	sts	0x01A6, r15	; 0x8001a6 <setDigit+0x3>
    15b2:	1e c0       	rjmp	.+60     	; 0x15f0 <_Z12button2Clickv+0xee>
			if (setDigit.value < 0) {
				setDigit.value = 999.999f;
    15b4:	80 ef       	ldi	r24, 0xF0	; 240
    15b6:	9f ef       	ldi	r25, 0xFF	; 255
    15b8:	a9 e7       	ldi	r26, 0x79	; 121
    15ba:	b4 e4       	ldi	r27, 0x44	; 68
    15bc:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <setDigit>
    15c0:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <setDigit+0x1>
    15c4:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <setDigit+0x2>
    15c8:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <setDigit+0x3>
    15cc:	11 c0       	rjmp	.+34     	; 0x15f0 <_Z12button2Clickv+0xee>
			}
		}
		return;
	}
	
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    15ce:	25 ef       	ldi	r18, 0xF5	; 245
    15d0:	28 0f       	add	r18, r24
    15d2:	25 30       	cpi	r18, 0x05	; 5
    15d4:	30 f4       	brcc	.+12     	; 0x15e2 <_Z12button2Clickv+0xe0>
		modeWork.current = modeWork.current == MW_SHOWING_START? MW_SHOWING_STOP: modeWork.current - 1;
    15d6:	8b 30       	cpi	r24, 0x0B	; 11
    15d8:	09 f4       	brne	.+2      	; 0x15dc <_Z12button2Clickv+0xda>
    15da:	9f e0       	ldi	r25, 0x0F	; 15
    15dc:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <modeWork>
		return;
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <_Z12button2Clickv+0xee>
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    15e2:	80 31       	cpi	r24, 0x10	; 16
    15e4:	29 f4       	brne	.+10     	; 0x15f0 <_Z12button2Clickv+0xee>
		modeWork.current = MW_SHOWING_START;
    15e6:	8b e0       	ldi	r24, 0x0B	; 11
    15e8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <modeWork>
		settings.isReadyToWork = MM_STOP;
    15ec:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <settings>
		return;
	}
}
    15f0:	cf 91       	pop	r28
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	08 95       	ret

000015fc <_Z12saveSettingsv>:
	}
	setDigit.curMultiplier = 1.0f;
}


void saveSettings() {
    15fc:	cf 92       	push	r12
    15fe:	df 92       	push	r13
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	cf 93       	push	r28
	switch(modeWork.current) {
    1606:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <modeWork>
    160a:	8e 2f       	mov	r24, r30
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	fc 01       	movw	r30, r24
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	ea 30       	cpi	r30, 0x0A	; 10
    1614:	f1 05       	cpc	r31, r1
    1616:	08 f0       	brcs	.+2      	; 0x161a <_Z12saveSettingsv+0x1e>
    1618:	b2 c0       	rjmp	.+356    	; 0x177e <_Z12saveSettingsv+0x182>
    161a:	e2 5a       	subi	r30, 0xA2	; 162
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	c0 90 a3 01 	lds	r12, 0x01A3	; 0x8001a3 <setDigit>
    1622:	d0 90 a4 01 	lds	r13, 0x01A4	; 0x8001a4 <setDigit+0x1>
    1626:	e0 90 a5 01 	lds	r14, 0x01A5	; 0x8001a5 <setDigit+0x2>
    162a:	f0 90 a6 01 	lds	r15, 0x01A6	; 0x8001a6 <setDigit+0x3>
    162e:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			settings.connectionType = setDigit.value;
    1632:	c1 e0       	ldi	r28, 0x01	; 1
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	a9 01       	movw	r20, r18
    163a:	c7 01       	movw	r24, r14
    163c:	b6 01       	movw	r22, r12
    163e:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
    1642:	81 11       	cpse	r24, r1
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <_Z12saveSettingsv+0x4c>
    1646:	c0 e0       	ldi	r28, 0x00	; 0
    1648:	c0 93 c6 01 	sts	0x01C6, r28	; 0x8001c6 <settings+0x1>
			settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	c7 01       	movw	r24, r14
    1654:	b6 01       	movw	r22, r12
    1656:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
    165a:	88 23       	and	r24, r24
    165c:	29 f0       	breq	.+10     	; 0x1668 <_Z12saveSettingsv+0x6c>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a0 ea       	ldi	r26, 0xA0	; 160
    1664:	b0 e4       	ldi	r27, 0x40	; 64
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <_Z12saveSettingsv+0x74>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e2       	ldi	r26, 0x20	; 32
    166e:	b0 e4       	ldi	r27, 0x40	; 64
    1670:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <settings+0x2>
    1674:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <settings+0x3>
    1678:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <settings+0x4>
    167c:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <settings+0x5>
			initImpedanceCriticalValue();
    1680:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z26initImpedanceCriticalValuev>
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
    1684:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <settings+0x1>
    1688:	84 e2       	ldi	r24, 0x24	; 36
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 06 19 	call	0x320c	; 0x320c <eeprom_update_byte>
			break;
    1690:	76 c0       	rjmp	.+236    	; 0x177e <_Z12saveSettingsv+0x182>
		case MW_SETUP_IMPEDANCE_AB:
			impedance.real[0] = setDigit.value;
    1692:	c0 92 cc 01 	sts	0x01CC, r12	; 0x8001cc <impedance>
    1696:	d0 92 cd 01 	sts	0x01CD, r13	; 0x8001cd <impedance+0x1>
    169a:	e0 92 ce 01 	sts	0x01CE, r14	; 0x8001ce <impedance+0x2>
    169e:	f0 92 cf 01 	sts	0x01CF, r15	; 0x8001cf <impedance+0x3>
			eeprom_update_float(&eeprom_impedance_ab, impedance.real[0]);
    16a2:	b7 01       	movw	r22, r14
    16a4:	a6 01       	movw	r20, r12
    16a6:	80 e2       	ldi	r24, 0x20	; 32
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	67 c0       	rjmp	.+206    	; 0x177a <_Z12saveSettingsv+0x17e>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			impedance.real[1] = setDigit.value;
    16ac:	c0 92 d0 01 	sts	0x01D0, r12	; 0x8001d0 <impedance+0x4>
    16b0:	d0 92 d1 01 	sts	0x01D1, r13	; 0x8001d1 <impedance+0x5>
    16b4:	e0 92 d2 01 	sts	0x01D2, r14	; 0x8001d2 <impedance+0x6>
    16b8:	f0 92 d3 01 	sts	0x01D3, r15	; 0x8001d3 <impedance+0x7>
			eeprom_update_float(&eeprom_impedance_bc, impedance.real[1]);
    16bc:	b7 01       	movw	r22, r14
    16be:	a6 01       	movw	r20, r12
    16c0:	8c e1       	ldi	r24, 0x1C	; 28
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	5a c0       	rjmp	.+180    	; 0x177a <_Z12saveSettingsv+0x17e>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			impedance.real[2] = setDigit.value;
    16c6:	c0 92 d4 01 	sts	0x01D4, r12	; 0x8001d4 <impedance+0x8>
    16ca:	d0 92 d5 01 	sts	0x01D5, r13	; 0x8001d5 <impedance+0x9>
    16ce:	e0 92 d6 01 	sts	0x01D6, r14	; 0x8001d6 <impedance+0xa>
    16d2:	f0 92 d7 01 	sts	0x01D7, r15	; 0x8001d7 <impedance+0xb>
			eeprom_update_float(&eeprom_impedance_ac, impedance.real[2]);
    16d6:	b7 01       	movw	r22, r14
    16d8:	a6 01       	movw	r20, r12
    16da:	88 e1       	ldi	r24, 0x18	; 24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	4d c0       	rjmp	.+154    	; 0x177a <_Z12saveSettingsv+0x17e>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			multiplier.voltage[0] = setDigit.value;
    16e0:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    16e4:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    16e8:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    16ec:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
			eeprom_update_float(&eeprom_voltage_mult_ab, multiplier.voltage[0]);
    16f0:	b7 01       	movw	r22, r14
    16f2:	a6 01       	movw	r20, r12
    16f4:	84 e1       	ldi	r24, 0x14	; 20
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	40 c0       	rjmp	.+128    	; 0x177a <_Z12saveSettingsv+0x17e>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			multiplier.voltage[1] = setDigit.value;
    16fa:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <__data_start+0x4>
    16fe:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <__data_start+0x5>
    1702:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <__data_start+0x6>
    1706:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <__data_start+0x7>
			eeprom_update_float(&eeprom_voltage_mult_bc, multiplier.voltage[1]);
    170a:	b7 01       	movw	r22, r14
    170c:	a6 01       	movw	r20, r12
    170e:	80 e1       	ldi	r24, 0x10	; 16
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	33 c0       	rjmp	.+102    	; 0x177a <_Z12saveSettingsv+0x17e>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			multiplier.voltage[2] = setDigit.value;
    1714:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <__data_start+0x8>
    1718:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <__data_start+0x9>
    171c:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <__data_start+0xa>
    1720:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <__data_start+0xb>
			eeprom_update_float(&eeprom_voltage_mult_ac, multiplier.voltage[2]);
    1724:	b7 01       	movw	r22, r14
    1726:	a6 01       	movw	r20, r12
    1728:	8c e0       	ldi	r24, 0x0C	; 12
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	26 c0       	rjmp	.+76     	; 0x177a <_Z12saveSettingsv+0x17e>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			multiplier.amperage[0] = setDigit.value;
    172e:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <__data_start+0xc>
    1732:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <__data_start+0xd>
    1736:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <__data_start+0xe>
    173a:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <__data_start+0xf>
			eeprom_update_float(&eeprom_amperage_mult_ab, multiplier.amperage[0]);
    173e:	b7 01       	movw	r22, r14
    1740:	a6 01       	movw	r20, r12
    1742:	88 e0       	ldi	r24, 0x08	; 8
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	19 c0       	rjmp	.+50     	; 0x177a <_Z12saveSettingsv+0x17e>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			multiplier.amperage[1] = setDigit.value;
    1748:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_start+0x10>
    174c:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_start+0x11>
    1750:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_start+0x12>
    1754:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_start+0x13>
			eeprom_update_float(&eeprom_amperage_mult_bc, multiplier.amperage[1]);
    1758:	b7 01       	movw	r22, r14
    175a:	a6 01       	movw	r20, r12
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0c c0       	rjmp	.+24     	; 0x177a <_Z12saveSettingsv+0x17e>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			multiplier.amperage[2] = setDigit.value;
    1762:	c0 92 14 01 	sts	0x0114, r12	; 0x800114 <__data_start+0x14>
    1766:	d0 92 15 01 	sts	0x0115, r13	; 0x800115 <__data_start+0x15>
    176a:	e0 92 16 01 	sts	0x0116, r14	; 0x800116 <__data_start+0x16>
    176e:	f0 92 17 01 	sts	0x0117, r15	; 0x800117 <__data_start+0x17>
			eeprom_update_float(&eeprom_amperage_mult_ac, multiplier.amperage[2]);
    1772:	b7 01       	movw	r22, r14
    1774:	a6 01       	movw	r20, r12
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 18 19 	call	0x3230	; 0x3230 <eeprom_update_dword>
			break;
	}
	
	if (modeWork.current == MW_SETUP_CONNECTION_TYPE || (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC)) {
    177e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <modeWork>
    1782:	81 50       	subi	r24, 0x01	; 1
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	10 f4       	brcc	.+4      	; 0x178c <_Z12saveSettingsv+0x190>
		initImpedanceCriticalValue();
    1788:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z26initImpedanceCriticalValuev>
	}

	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
    178c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <modeWork>
    1790:	85 50       	subi	r24, 0x05	; 5
    1792:	86 30       	cpi	r24, 0x06	; 6
    1794:	38 f4       	brcc	.+14     	; 0x17a4 <_Z12saveSettingsv+0x1a8>
		initMultiplierCoef();
	}
    1796:	cf 91       	pop	r28
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	df 90       	pop	r13
    179e:	cf 90       	pop	r12
	if (modeWork.current == MW_SETUP_CONNECTION_TYPE || (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC)) {
		initImpedanceCriticalValue();
	}

	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
		initMultiplierCoef();
    17a0:	0c 94 be 02 	jmp	0x57c	; 0x57c <_Z18initMultiplierCoefv>
	}
    17a4:	cf 91       	pop	r28
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	08 95       	ret

000017b0 <_Z21button2LongPressStartv>:
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
		modeWork.current = MW_SHOWING_START;
	}
}

void button2LongPressStart() {
    17b0:	cf 93       	push	r28
	if (icError.hasIC) {
    17b2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <icError+0x19>
    17b6:	88 23       	and	r24, r24
    17b8:	39 f0       	breq	.+14     	; 0x17c8 <_Z21button2LongPressStartv+0x18>
		digitalWrite(BEEPER, LOW);
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	80 e1       	ldi	r24, 0x10	; 16
    17be:	0e 94 72 18 	call	0x30e4	; 0x30e4 <digitalWrite>
		icError.hasIC = false;
    17c2:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <icError+0x19>
		return;
    17c6:	47 c0       	rjmp	.+142    	; 0x1856 <_Z21button2LongPressStartv+0xa6>
	}
	if (modeWork.current == MW_NEED_SETUP) {
    17c8:	c0 91 95 01 	lds	r28, 0x0195	; 0x800195 <modeWork>
    17cc:	cc 23       	and	r28, r28
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <_Z21button2LongPressStartv+0x22>
    17d0:	42 c0       	rjmp	.+132    	; 0x1856 <_Z21button2LongPressStartv+0xa6>
		return;
	}
	if (modeWork.current == MW_SHOW_IMPEDANCE_CRITICLE_ERRORS) {
    17d2:	cb 30       	cpi	r28, 0x0B	; 11
    17d4:	01 f5       	brne	.+64     	; 0x1816 <_Z21button2LongPressStartv+0x66>
		for(byte i = 0; i < 3; i++) {
			icError.criticalLvlCount[i] = 0;
    17d6:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <icError+0xc>
    17da:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <icError+0xd>
    17de:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <icError+0xe>
    17e2:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <icError+0xf>
    17e6:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <icError+0x10>
    17ea:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <icError+0x11>
    17ee:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <icError+0x12>
    17f2:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <icError+0x13>
    17f6:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <icError+0x14>
    17fa:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <icError+0x15>
    17fe:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <icError+0x16>
    1802:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <icError+0x17>
		}
		initAvgVars();
    1806:	0e 94 ce 01 	call	0x39c	; 0x39c <_Z11initAvgVarsv>
		modeWork.current = MW_SHOWING_START;
    180a:	c0 93 95 01 	sts	0x0195, r28	; 0x800195 <modeWork>
		lcdUpdateScreen = true;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
		return;
    1814:	20 c0       	rjmp	.+64     	; 0x1856 <_Z21button2LongPressStartv+0xa6>
	}
	
	
	if (settings.isSetupMode) {
    1816:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <settings+0x6>
    181a:	88 23       	and	r24, r24
    181c:	99 f0       	breq	.+38     	; 0x1844 <_Z21button2LongPressStartv+0x94>
		if (modeWork.current == MW_SETUP_STOP) {
    181e:	ca 30       	cpi	r28, 0x0A	; 10
    1820:	39 f4       	brne	.+14     	; 0x1830 <_Z21button2LongPressStartv+0x80>
			saveSettings();
    1822:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_Z12saveSettingsv>
			initMultiplierCoef();
    1826:	0e 94 be 02 	call	0x57c	; 0x57c <_Z18initMultiplierCoefv>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    182a:	cf 91       	pop	r28
	
	if (settings.isSetupMode) {
		if (modeWork.current == MW_SETUP_STOP) {
			saveSettings();
			initMultiplierCoef();
			checkIsReadyToWork();
    182c:	0c 94 98 01 	jmp	0x330	; 0x330 <_Z18checkIsReadyToWorkv>
		} else {
			saveSettings();
    1830:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_Z12saveSettingsv>
			modeWork.current++;
    1834:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <modeWork>
    1838:	8f 5f       	subi	r24, 0xFF	; 255
    183a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <modeWork>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    183e:	cf 91       	pop	r28
			initMultiplierCoef();
			checkIsReadyToWork();
		} else {
			saveSettings();
			modeWork.current++;
			setEditValue();
    1840:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <_Z12setEditValuev>
		}
	} else {
		settings.isReadyToWork = MM_STOP;
    1844:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <settings>
		modeWork.current = MW_SETUP_START;
    1848:	c1 e0       	ldi	r28, 0x01	; 1
    184a:	c0 93 95 01 	sts	0x0195, r28	; 0x800195 <modeWork>
		setEditValue();
    184e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_Z12setEditValuev>
		settings.isSetupMode = true;
    1852:	c0 93 cb 01 	sts	0x01CB, r28	; 0x8001cb <settings+0x6>
	}
}
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <_GLOBAL__sub_I_eeprom_first_start>:
	| GAIN_EIGHT     | x8   |    0.512    | 0.015625	 |
	| GAIN_SIXTEEN   | x16  |    0.256    | 0.0078125	 |
	------------------------------------------------------
*/

Adafruit_ADS1115 adsVoltage(0x48);
    185a:	68 e4       	ldi	r22, 0x48	; 72
    185c:	83 e4       	ldi	r24, 0x43	; 67
    185e:	92 e0       	ldi	r25, 0x02	; 2
    1860:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 adsAmperage(0x49);
    1864:	69 e4       	ldi	r22, 0x49	; 73
    1866:	8e e3       	ldi	r24, 0x3E	; 62
    1868:	92 e0       	ldi	r25, 0x02	; 2
    186a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <_ZN16Adafruit_ADS1115C1Eh>
		В режиме измерения смена режима показа назад
	Динное нажатие:
		В режиме измерения в меню критических величин сбрасывает счетчик
		Переход в режим настроек/отображения измерений кроме режима критических величин
*/
OneButton button1Callback(BUTTON_1, false);
    186e:	21 e0       	ldi	r18, 0x01	; 1
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	6e e0       	ldi	r22, 0x0E	; 14
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	8d e1       	ldi	r24, 0x1D	; 29
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN9OneButtonC1Eiib>
OneButton button2Callback(BUTTON_2, false);
    1880:	21 e0       	ldi	r18, 0x01	; 1
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	6f e0       	ldi	r22, 0x0F	; 15
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	8c ef       	ldi	r24, 0xFC	; 252
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN9OneButtonC1Eiib>
	float voltage[3] = {1, 1, 1};
	float amperage[3] = {1, 1, 1};	
	float coef[3] = {1, 1, 1};
};

struct Settings {
    1892:	e5 ec       	ldi	r30, 0xC5	; 197
    1894:	f1 e0       	ldi	r31, 0x01	; 1
    1896:	10 82       	st	Z, r1
    1898:	11 82       	std	Z+1, r1	; 0x01
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e2       	ldi	r26, 0x20	; 32
    18a0:	b0 e4       	ldi	r27, 0x40	; 64
    18a2:	82 83       	std	Z+2, r24	; 0x02
    18a4:	93 83       	std	Z+3, r25	; 0x03
    18a6:	a4 83       	std	Z+4, r26	; 0x04
    18a8:	b5 83       	std	Z+5, r27	; 0x05
Impedance impedance;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    18aa:	22 e0       	ldi	r18, 0x02	; 2
    18ac:	40 e1       	ldi	r20, 0x10	; 16
    18ae:	67 e2       	ldi	r22, 0x27	; 39
    18b0:	87 e9       	ldi	r24, 0x97	; 151
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <_ZN17LiquidCrystal_I2CC1Ehhh>

000018b8 <_ZN16Adafruit_ADS1115C1Eh>:
  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH, threshold << m_bitShift);

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    18b8:	fc 01       	movw	r30, r24
    18ba:	14 82       	std	Z+4, r1	; 0x04
    18bc:	13 82       	std	Z+3, r1	; 0x03
    18be:	60 83       	st	Z, r22
    18c0:	88 e0       	ldi	r24, 0x08	; 8
    18c2:	81 83       	std	Z+1, r24	; 0x01
    18c4:	12 82       	std	Z+2, r1	; 0x02
    18c6:	08 95       	ret

000018c8 <_ZN16Adafruit_ADS10155beginEv>:
    18c8:	86 eb       	ldi	r24, 0xB6	; 182
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	0c 94 33 12 	jmp	0x2466	; 0x2466 <_ZN7TwoWire5beginEv>

000018d0 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    18d0:	fc 01       	movw	r30, r24
    18d2:	74 83       	std	Z+4, r23	; 0x04
    18d4:	63 83       	std	Z+3, r22	; 0x03
    18d6:	08 95       	ret

000018d8 <_ZL13writeRegisterhhj>:
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	16 2f       	mov	r17, r22
    18e0:	ea 01       	movw	r28, r20
    18e2:	68 2f       	mov	r22, r24
    18e4:	86 eb       	ldi	r24, 0xB6	; 182
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN7TwoWire17beginTransmissionEh>
    18ec:	61 2f       	mov	r22, r17
    18ee:	86 eb       	ldi	r24, 0xB6	; 182
    18f0:	92 e0       	ldi	r25, 0x02	; 2
    18f2:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN7TwoWire5writeEh>
    18f6:	6d 2f       	mov	r22, r29
    18f8:	86 eb       	ldi	r24, 0xB6	; 182
    18fa:	92 e0       	ldi	r25, 0x02	; 2
    18fc:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN7TwoWire5writeEh>
    1900:	6c 2f       	mov	r22, r28
    1902:	86 eb       	ldi	r24, 0xB6	; 182
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN7TwoWire5writeEh>
    190a:	86 eb       	ldi	r24, 0xB6	; 182
    190c:	92 e0       	ldi	r25, 0x02	; 2
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <_ZN7TwoWire15endTransmissionEv>

00001918 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	18 2f       	mov	r17, r24
  Wire.beginTransmission(i2cAddress);
    1920:	68 2f       	mov	r22, r24
    1922:	86 eb       	ldi	r24, 0xB6	; 182
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN7TwoWire17beginTransmissionEh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	86 eb       	ldi	r24, 0xB6	; 182
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN7TwoWire5writeEh>
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
    1934:	86 eb       	ldi	r24, 0xB6	; 182
    1936:	92 e0       	ldi	r25, 0x02	; 2
    1938:	0e 94 c9 12 	call	0x2592	; 0x2592 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
    193c:	42 e0       	ldi	r20, 0x02	; 2
    193e:	61 2f       	mov	r22, r17
    1940:	86 eb       	ldi	r24, 0xB6	; 182
    1942:	92 e0       	ldi	r25, 0x02	; 2
    1944:	0e 94 c6 12 	call	0x258c	; 0x258c <_ZN7TwoWire11requestFromEhh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
  #if ARDUINO >= 100
  return Wire.read();
    1948:	86 eb       	ldi	r24, 0xB6	; 182
    194a:	92 e0       	ldi	r25, 0x02	; 2
    194c:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN7TwoWire4readEv>
    1950:	18 2f       	mov	r17, r24
    1952:	86 eb       	ldi	r24, 0xB6	; 182
    1954:	92 e0       	ldi	r25, 0x02	; 2
    1956:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN7TwoWire4readEv>
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
  Wire.requestFrom(i2cAddress, (uint8_t)2);
  return ((i2cread() << 8) | i2cread());  
    195a:	d1 2f       	mov	r29, r17
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	c2 2f       	mov	r28, r18
}
    1960:	9e 01       	movw	r18, r28
    1962:	28 2b       	or	r18, r24
    1964:	c9 01       	movw	r24, r18
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	08 95       	ret

0000196e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
  if (channel > 3)
    1972:	64 30       	cpi	r22, 0x04	; 4
    1974:	50 f5       	brcc	.+84     	; 0x19ca <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x5c>
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
    1976:	fc 01       	movw	r30, r24
    1978:	43 81       	ldd	r20, Z+3	; 0x03
    197a:	54 81       	ldd	r21, Z+4	; 0x04

  // Set single-ended input channel
  switch (channel)
    197c:	62 30       	cpi	r22, 0x02	; 2
    197e:	51 f0       	breq	.+20     	; 0x1994 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
    1980:	63 30       	cpi	r22, 0x03	; 3
    1982:	59 f0       	breq	.+22     	; 0x199a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2c>
    1984:	61 30       	cpi	r22, 0x01	; 1
    1986:	19 f0       	breq	.+6      	; 0x198e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    1988:	43 68       	ori	r20, 0x83	; 131
    198a:	51 64       	ori	r21, 0x41	; 65
      break;
    198c:	08 c0       	rjmp	.+16     	; 0x199e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    198e:	43 68       	ori	r20, 0x83	; 131
    1990:	51 65       	ori	r21, 0x51	; 81
      break;
    1992:	05 c0       	rjmp	.+10     	; 0x199e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    1994:	43 68       	ori	r20, 0x83	; 131
    1996:	51 66       	ori	r21, 0x61	; 97
      break;
    1998:	02 c0       	rjmp	.+4      	; 0x199e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    199a:	43 68       	ori	r20, 0x83	; 131
    199c:	51 67       	ori	r21, 0x71	; 113
    199e:	ec 01       	movw	r28, r24

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    19a0:	50 68       	ori	r21, 0x80	; 128
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	88 81       	ld	r24, Y
    19a6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZL13writeRegisterhhj>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
    19aa:	69 81       	ldd	r22, Y+1	; 0x01
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
    19b6:	88 81       	ld	r24, Y
    19b8:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_ZL12readRegisterhh.isra.0>
    19bc:	0a 80       	ldd	r0, Y+2	; 0x02
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x56>
    19c0:	96 95       	lsr	r25
    19c2:	87 95       	ror	r24
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x52>
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x60>
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <_ZN5Print17availableForWriteEv>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	08 95       	ret

000019da <_ZN5Print5flushEv>:
    19da:	08 95       	ret

000019dc <_ZN17LiquidCrystal_I2CC1Ehhh>:
    19dc:	fc 01       	movw	r30, r24
    19de:	13 82       	std	Z+3, r1	; 0x03
    19e0:	12 82       	std	Z+2, r1	; 0x02
    19e2:	8a e6       	ldi	r24, 0x6A	; 106
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
    19ea:	64 83       	std	Z+4, r22	; 0x04
    19ec:	41 87       	std	Z+9, r20	; 0x09
    19ee:	22 87       	std	Z+10, r18	; 0x0a
    19f0:	13 86       	std	Z+11, r1	; 0x0b
    19f2:	08 95       	ret

000019f4 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	ec 01       	movw	r28, r24
    19fc:	16 2f       	mov	r17, r22
    19fe:	6c 81       	ldd	r22, Y+4	; 0x04
    1a00:	86 eb       	ldi	r24, 0xB6	; 182
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN7TwoWire17beginTransmissionEh>
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	61 2b       	or	r22, r17
    1a0c:	86 eb       	ldi	r24, 0xB6	; 182
    1a0e:	92 e0       	ldi	r25, 0x02	; 2
    1a10:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN7TwoWire5writeEh>
    1a14:	86 eb       	ldi	r24, 0xB6	; 182
    1a16:	92 e0       	ldi	r25, 0x02	; 2
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <_ZN7TwoWire15endTransmissionEv>

00001a22 <_ZN17LiquidCrystal_I2C9backlightEv>:
    1a22:	28 e0       	ldi	r18, 0x08	; 8
    1a24:	fc 01       	movw	r30, r24
    1a26:	23 87       	std	Z+11, r18	; 0x0b
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00001a2e <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	8c 01       	movw	r16, r24
    1a36:	c6 2f       	mov	r28, r22
    1a38:	64 60       	ori	r22, 0x04	; 4
    1a3a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <delayMicroseconds>
    1a46:	6c 2f       	mov	r22, r28
    1a48:	6b 7f       	andi	r22, 0xFB	; 251
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1a50:	82 e3       	ldi	r24, 0x32	; 50
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <delayMicroseconds>

00001a5e <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	ec 01       	movw	r28, r24
    1a66:	16 2f       	mov	r17, r22
    1a68:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1a6c:	61 2f       	mov	r22, r17
    1a6e:	ce 01       	movw	r24, r28
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00001a7a <_ZN17LiquidCrystal_I2C4sendEhh>:
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	8c 01       	movw	r16, r24
    1a84:	c6 2f       	mov	r28, r22
    1a86:	d4 2f       	mov	r29, r20
    1a88:	60 7f       	andi	r22, 0xF0	; 240
    1a8a:	64 2b       	or	r22, r20
    1a8c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN17LiquidCrystal_I2C10write4bitsEh>
    1a90:	80 e1       	ldi	r24, 0x10	; 16
    1a92:	c8 9f       	mul	r28, r24
    1a94:	b0 01       	movw	r22, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	6d 2b       	or	r22, r29
    1a9a:	c8 01       	movw	r24, r16
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <_ZN17LiquidCrystal_I2C10write4bitsEh>

00001aa8 <_ZN17LiquidCrystal_I2C7commandEh>:
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <_ZN17LiquidCrystal_I2C4sendEhh>

00001aae <_ZN17LiquidCrystal_I2C5clearEv>:
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN17LiquidCrystal_I2C7commandEh>
    1ab4:	80 ed       	ldi	r24, 0xD0	; 208
    1ab6:	97 e0       	ldi	r25, 0x07	; 7
    1ab8:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <delayMicroseconds>

00001abc <_ZN17LiquidCrystal_I2C4homeEv>:
    1abc:	62 e0       	ldi	r22, 0x02	; 2
    1abe:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN17LiquidCrystal_I2C7commandEh>
    1ac2:	80 ed       	ldi	r24, 0xD0	; 208
    1ac4:	97 e0       	ldi	r25, 0x07	; 7
    1ac6:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <delayMicroseconds>

00001aca <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	28 97       	sbiw	r28, 0x08	; 8
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	9c 01       	movw	r18, r24
    1ae0:	88 e0       	ldi	r24, 0x08	; 8
    1ae2:	ee e5       	ldi	r30, 0x5E	; 94
    1ae4:	f1 e0       	ldi	r31, 0x01	; 1
    1ae6:	de 01       	movw	r26, r28
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	01 90       	ld	r0, Z+
    1aec:	0d 92       	st	X+, r0
    1aee:	8a 95       	dec	r24
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    1af2:	f9 01       	movw	r30, r18
    1af4:	80 85       	ldd	r24, Z+8	; 0x08
    1af6:	84 17       	cp	r24, r20
    1af8:	10 f4       	brcc	.+4      	; 0x1afe <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1afa:	4f ef       	ldi	r20, 0xFF	; 255
    1afc:	48 0f       	add	r20, r24
    1afe:	fe 01       	movw	r30, r28
    1b00:	31 96       	adiw	r30, 0x01	; 1
    1b02:	e4 0f       	add	r30, r20
    1b04:	f1 1d       	adc	r31, r1
    1b06:	e4 0f       	add	r30, r20
    1b08:	f1 1d       	adc	r31, r1
    1b0a:	90 81       	ld	r25, Z
    1b0c:	69 0f       	add	r22, r25
    1b0e:	60 68       	ori	r22, 0x80	; 128
    1b10:	c9 01       	movw	r24, r18
    1b12:	28 96       	adiw	r28, 0x08	; 8
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <_ZN17LiquidCrystal_I2C7commandEh>

00001b26 <_ZN17LiquidCrystal_I2C7displayEv>:
    1b26:	fc 01       	movw	r30, r24
    1b28:	66 81       	ldd	r22, Z+6	; 0x06
    1b2a:	26 2f       	mov	r18, r22
    1b2c:	24 60       	ori	r18, 0x04	; 4
    1b2e:	26 83       	std	Z+6, r18	; 0x06
    1b30:	6c 60       	ori	r22, 0x0C	; 12
    1b32:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <_ZN17LiquidCrystal_I2C7commandEh>

00001b36 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1b36:	41 e0       	ldi	r20, 0x01	; 1
    1b38:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	08 95       	ret

00001b42 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	ec 01       	movw	r28, r24
	if (lines > 1) {
    1b48:	42 30       	cpi	r20, 0x02	; 2
    1b4a:	18 f0       	brcs	.+6      	; 0x1b52 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	88 60       	ori	r24, 0x08	; 8
    1b50:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    1b52:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    1b54:	22 23       	and	r18, r18
    1b56:	29 f0       	breq	.+10     	; 0x1b62 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    1b58:	41 30       	cpi	r20, 0x01	; 1
    1b5a:	19 f4       	brne	.+6      	; 0x1b62 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	84 60       	ori	r24, 0x04	; 4
    1b60:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    1b62:	62 e3       	ldi	r22, 0x32	; 50
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    1b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b70:	ce 01       	movw	r24, r28
    1b72:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1b76:	68 ee       	ldi	r22, 0xE8	; 232
    1b78:	73 e0       	ldi	r23, 0x03	; 3
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    1b82:	60 e3       	ldi	r22, 0x30	; 48
    1b84:	ce 01       	movw	r24, r28
    1b86:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1b8a:	84 e9       	ldi	r24, 0x94	; 148
    1b8c:	91 e1       	ldi	r25, 0x11	; 17
    1b8e:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    1b92:	60 e3       	ldi	r22, 0x30	; 48
    1b94:	ce 01       	movw	r24, r28
    1b96:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1b9a:	84 e9       	ldi	r24, 0x94	; 148
    1b9c:	91 e1       	ldi	r25, 0x11	; 17
    1b9e:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    1ba2:	60 e3       	ldi	r22, 0x30	; 48
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    1baa:	86 e9       	ldi	r24, 0x96	; 150
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    1bb2:	60 e2       	ldi	r22, 0x20	; 32
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    1bba:	6d 81       	ldd	r22, Y+5	; 0x05
    1bbc:	60 62       	ori	r22, 0x20	; 32
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1bc4:	84 e0       	ldi	r24, 0x04	; 4
    1bc6:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1bc8:	ce 01       	movw	r24, r28
    1bca:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    1bce:	ce 01       	movw	r24, r28
    1bd0:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1bd8:	66 e0       	ldi	r22, 0x06	; 6
    1bda:	ce 01       	movw	r24, r28
    1bdc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    1be0:	ce 01       	movw	r24, r28
  
}
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    1be6:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <_ZN17LiquidCrystal_I2C4homeEv>

00001bea <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	ec 01       	movw	r28, r24
	Wire.begin();
    1bf0:	86 eb       	ldi	r24, 0xB6	; 182
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	0e 94 33 12 	call	0x2466	; 0x2466 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1bf8:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	4a 85       	ldd	r20, Y+10	; 0x0a
    1bfe:	69 85       	ldd	r22, Y+9	; 0x09
    1c00:	ce 01       	movw	r24, r28
}
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    1c06:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <_ZN17LiquidCrystal_I2C5beginEhhh>

00001c0a <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    1c0a:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <_ZN17LiquidCrystal_I2C9init_privEv>

00001c0e <_ZN9OneButtonC1Eiib>:

void OneButton::reset(void){
  _state = 0; // restart.
  _startTime = 0;
  _stopTime = 0;
  _isLongPressed = false;
    1c0e:	fc 01       	movw	r30, r24
    1c10:	86 2f       	mov	r24, r22
    1c12:	a2 e3       	ldi	r26, 0x32	; 50
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	b3 83       	std	Z+3, r27	; 0x03
    1c18:	a2 83       	std	Z+2, r26	; 0x02
    1c1a:	a8 e5       	ldi	r26, 0x58	; 88
    1c1c:	b2 e0       	ldi	r27, 0x02	; 2
    1c1e:	b5 83       	std	Z+5, r27	; 0x05
    1c20:	a4 83       	std	Z+4, r26	; 0x04
    1c22:	a8 ee       	ldi	r26, 0xE8	; 232
    1c24:	b3 e0       	ldi	r27, 0x03	; 3
    1c26:	b7 83       	std	Z+7, r27	; 0x07
    1c28:	a6 83       	std	Z+6, r26	; 0x06
    1c2a:	12 86       	std	Z+10, r1	; 0x0a
    1c2c:	14 86       	std	Z+12, r1	; 0x0c
    1c2e:	13 86       	std	Z+11, r1	; 0x0b
    1c30:	16 86       	std	Z+14, r1	; 0x0e
    1c32:	15 86       	std	Z+13, r1	; 0x0d
    1c34:	10 8a       	std	Z+16, r1	; 0x10
    1c36:	17 86       	std	Z+15, r1	; 0x0f
    1c38:	12 8a       	std	Z+18, r1	; 0x12
    1c3a:	11 8a       	std	Z+17, r1	; 0x11
    1c3c:	14 8a       	std	Z+20, r1	; 0x14
    1c3e:	13 8a       	std	Z+19, r1	; 0x13
    1c40:	16 8a       	std	Z+22, r1	; 0x16
    1c42:	15 8a       	std	Z+21, r1	; 0x15
    1c44:	10 8e       	std	Z+24, r1	; 0x18
    1c46:	17 8a       	std	Z+23, r1	; 0x17
    1c48:	60 83       	st	Z, r22
    1c4a:	71 83       	std	Z+1, r23	; 0x01
    1c4c:	45 2b       	or	r20, r21
    1c4e:	19 f0       	breq	.+6      	; 0x1c56 <_ZN9OneButtonC1Eiib+0x48>
    1c50:	11 86       	std	Z+9, r1	; 0x09
    1c52:	10 86       	std	Z+8, r1	; 0x08
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <_ZN9OneButtonC1Eiib+0x50>
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	51 87       	std	Z+9, r21	; 0x09
    1c5c:	40 87       	std	Z+8, r20	; 0x08
    1c5e:	22 23       	and	r18, r18
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <_ZN9OneButtonC1Eiib+0x58>
    1c62:	62 e0       	ldi	r22, 0x02	; 2
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <_ZN9OneButtonC1Eiib+0x5a>
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	0c 94 36 18 	jmp	0x306c	; 0x306c <pinMode>

00001c6c <_ZN9OneButton16setDebounceTicksEi>:
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	73 83       	std	Z+3, r23	; 0x03
    1c70:	62 83       	std	Z+2, r22	; 0x02
    1c72:	08 95       	ret

00001c74 <_ZN9OneButton13setClickTicksEi>:
    1c74:	fc 01       	movw	r30, r24
    1c76:	75 83       	std	Z+5, r23	; 0x05
    1c78:	64 83       	std	Z+4, r22	; 0x04
    1c7a:	08 95       	ret

00001c7c <_ZN9OneButton13setPressTicksEi>:
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	77 83       	std	Z+7, r23	; 0x07
    1c80:	66 83       	std	Z+6, r22	; 0x06
    1c82:	08 95       	ret

00001c84 <_ZN9OneButton11attachClickEPFvvE>:
    1c84:	fc 01       	movw	r30, r24
    1c86:	74 87       	std	Z+12, r23	; 0x0c
    1c88:	63 87       	std	Z+11, r22	; 0x0b
    1c8a:	08 95       	ret

00001c8c <_ZN9OneButton20attachLongPressStartEPFvvE>:
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	72 8b       	std	Z+18, r23	; 0x12
    1c90:	61 8b       	std	Z+17, r22	; 0x11
    1c92:	08 95       	ret

00001c94 <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
    1c94:	cf 92       	push	r12
    1c96:	df 92       	push	r13
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	ec 01       	movw	r28, r24
    1ca4:	16 2f       	mov	r17, r22
  unsigned long now = millis(); // current (relative) time in msecs.
    1ca6:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <millis>
    1caa:	6b 01       	movw	r12, r22
    1cac:	7c 01       	movw	r14, r24

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
    1cae:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	31 f4       	brne	.+12     	; 0x1cc2 <_ZN9OneButton4tickEb+0x2e>
    if (activeLevel) {
    1cb6:	11 23       	and	r17, r17
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <_ZN9OneButton4tickEb+0x28>
    1cba:	bc c0       	rjmp	.+376    	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
      _state = 1; // step to state 1
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	78 c0       	rjmp	.+240    	; 0x1db2 <_ZN9OneButton4tickEb+0x11e>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	d9 f5       	brne	.+118    	; 0x1d3e <_ZN9OneButton4tickEb+0xaa>
    1cc8:	89 8d       	ldd	r24, Y+25	; 0x19
    1cca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ccc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1cce:	bc 8d       	ldd	r27, Y+28	; 0x1c

    if ((!activeLevel) &&
    1cd0:	b7 01       	movw	r22, r14
    1cd2:	a6 01       	movw	r20, r12
    1cd4:	48 1b       	sub	r20, r24
    1cd6:	59 0b       	sbc	r21, r25
    1cd8:	6a 0b       	sbc	r22, r26
    1cda:	7b 0b       	sbc	r23, r27
    1cdc:	11 11       	cpse	r17, r1
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <_ZN9OneButton4tickEb+0x6a>
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce4:	a0 e0       	ldi	r26, 0x00	; 0
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	48 17       	cp	r20, r24
    1cea:	59 07       	cpc	r21, r25
    1cec:	6a 07       	cpc	r22, r26
    1cee:	7b 07       	cpc	r23, r27
    1cf0:	18 f4       	brcc	.+6      	; 0x1cf8 <_ZN9OneButton4tickEb+0x64>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
    1cf2:	18 8e       	std	Y+24, r1	; 0x18
    1cf4:	1f 8a       	std	Y+23, r1	; 0x17
    1cf6:	9e c0       	rjmp	.+316    	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	1d c0       	rjmp	.+58     	; 0x1d38 <_ZN9OneButton4tickEb+0xa4>
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
    1cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1d00:	9f 81       	ldd	r25, Y+7	; 0x07
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	84 17       	cp	r24, r20
    1d08:	95 07       	cpc	r25, r21
    1d0a:	a6 07       	cpc	r26, r22
    1d0c:	b7 07       	cpc	r27, r23
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <_ZN9OneButton4tickEb+0x7e>
    1d10:	91 c0       	rjmp	.+290    	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true; // Keep track of long press state
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	8a 87       	std	Y+10, r24	; 0x0a
      if (_pressFunc)
    1d16:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d18:	f8 89       	ldd	r31, Y+16	; 0x10
    1d1a:	30 97       	sbiw	r30, 0x00	; 0
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <_ZN9OneButton4tickEb+0x8c>
        _pressFunc();
    1d1e:	09 95       	icall
      if (_longPressStartFunc)
    1d20:	e9 89       	ldd	r30, Y+17	; 0x11
    1d22:	fa 89       	ldd	r31, Y+18	; 0x12
    1d24:	30 97       	sbiw	r30, 0x00	; 0
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <_ZN9OneButton4tickEb+0x96>
        _longPressStartFunc();
    1d28:	09 95       	icall
      if (_duringLongPressFunc)
    1d2a:	ed 89       	ldd	r30, Y+21	; 0x15
    1d2c:	fe 89       	ldd	r31, Y+22	; 0x16
    1d2e:	30 97       	sbiw	r30, 0x00	; 0
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <_ZN9OneButton4tickEb+0xa0>
        _duringLongPressFunc();
    1d32:	09 95       	icall
      _state = 6; // step to state 6
    1d34:	86 e0       	ldi	r24, 0x06	; 6
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	98 8f       	std	Y+24, r25	; 0x18
    1d3a:	8f 8b       	std	Y+23, r24	; 0x17
    1d3c:	68 c0       	rjmp	.+208    	; 0x1e0e <_ZN9OneButton4tickEb+0x17a>
      _stopTime = now; // remember stopping time
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) {
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 05       	cpc	r25, r1
    1d42:	f1 f5       	brne	.+124    	; 0x1dc0 <_ZN9OneButton4tickEb+0x12c>
    // waiting for menu pin being pressed the second time or timeout.
    if (_doubleClickFunc == NULL ||
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	89 2b       	or	r24, r25
    1d4a:	99 f0       	breq	.+38     	; 0x1d72 <_ZN9OneButton4tickEb+0xde>
    1d4c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d50:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1d52:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1d54:	b7 01       	movw	r22, r14
    1d56:	a6 01       	movw	r20, r12
    1d58:	48 1b       	sub	r20, r24
    1d5a:	59 0b       	sbc	r21, r25
    1d5c:	6a 0b       	sbc	r22, r26
    1d5e:	7b 0b       	sbc	r23, r27
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	84 17       	cp	r24, r20
    1d6a:	95 07       	cpc	r25, r21
    1d6c:	a6 07       	cpc	r26, r22
    1d6e:	b7 07       	cpc	r27, r23
    1d70:	38 f4       	brcc	.+14     	; 0x1d80 <_ZN9OneButton4tickEb+0xec>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
    1d72:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d74:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d76:	30 97       	sbiw	r30, 0x00	; 0
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <_ZN9OneButton4tickEb+0xe8>
    1d7a:	bb cf       	rjmp	.-138    	; 0x1cf2 <_ZN9OneButton4tickEb+0x5e>
        _clickFunc();
    1d7c:	09 95       	icall
    1d7e:	b9 cf       	rjmp	.-142    	; 0x1cf2 <_ZN9OneButton4tickEb+0x5e>
      _state = 0; // restart.

    } else if ((activeLevel) &&
    1d80:	11 23       	and	r17, r17
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <_ZN9OneButton4tickEb+0xf2>
    1d84:	57 c0       	rjmp	.+174    	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
    1d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d8a:	af 8d       	ldd	r26, Y+31	; 0x1f
    1d8c:	b8 a1       	ldd	r27, Y+32	; 0x20
    1d8e:	b7 01       	movw	r22, r14
    1d90:	a6 01       	movw	r20, r12
    1d92:	48 1b       	sub	r20, r24
    1d94:	59 0b       	sbc	r21, r25
    1d96:	6a 0b       	sbc	r22, r26
    1d98:	7b 0b       	sbc	r23, r27
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	84 17       	cp	r24, r20
    1da4:	95 07       	cpc	r25, r21
    1da6:	a6 07       	cpc	r26, r22
    1da8:	b7 07       	cpc	r27, r23
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <_ZN9OneButton4tickEb+0x11a>
    1dac:	43 c0       	rjmp	.+134    	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	98 8f       	std	Y+24, r25	; 0x18
    1db4:	8f 8b       	std	Y+23, r24	; 0x17
      _startTime = now; // remember starting time
    1db6:	c9 8e       	std	Y+25, r12	; 0x19
    1db8:	da 8e       	std	Y+26, r13	; 0x1a
    1dba:	eb 8e       	std	Y+27, r14	; 0x1b
    1dbc:	fc 8e       	std	Y+28, r15	; 0x1c
    1dbe:	3a c0       	rjmp	.+116    	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    1dc0:	83 30       	cpi	r24, 0x03	; 3
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	c1 f4       	brne	.+48     	; 0x1df6 <_ZN9OneButton4tickEb+0x162>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
    1dc6:	11 11       	cpse	r17, r1
    1dc8:	35 c0       	rjmp	.+106    	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
    1dca:	89 8d       	ldd	r24, Y+25	; 0x19
    1dcc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dce:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1dd0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1dd2:	b7 01       	movw	r22, r14
    1dd4:	a6 01       	movw	r20, r12
    1dd6:	48 1b       	sub	r20, r24
    1dd8:	59 0b       	sbc	r21, r25
    1dda:	6a 0b       	sbc	r22, r26
    1ddc:	7b 0b       	sbc	r23, r27
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	a0 e0       	ldi	r26, 0x00	; 0
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	84 17       	cp	r24, r20
    1de8:	95 07       	cpc	r25, r21
    1dea:	a6 07       	cpc	r26, r22
    1dec:	b7 07       	cpc	r27, r23
    1dee:	10 f5       	brcc	.+68     	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      // this was a 2 click sequence.
      if (_doubleClickFunc)
    1df0:	ed 85       	ldd	r30, Y+13	; 0x0d
    1df2:	fe 85       	ldd	r31, Y+14	; 0x0e
    1df4:	07 c0       	rjmp	.+14     	; 0x1e04 <_ZN9OneButton4tickEb+0x170>
        _doubleClickFunc();
      _state = 0; // restart.
      _stopTime = now; // remember stopping time
    } // if

  } else if (_state == 6) {
    1df6:	06 97       	sbiw	r24, 0x06	; 6
    1df8:	e9 f4       	brne	.+58     	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
    1dfa:	11 11       	cpse	r17, r1
    1dfc:	0d c0       	rjmp	.+26     	; 0x1e18 <_ZN9OneButton4tickEb+0x184>
      _isLongPressed = false; // Keep track of long press state
    1dfe:	1a 86       	std	Y+10, r1	; 0x0a
      if (_longPressStopFunc)
    1e00:	eb 89       	ldd	r30, Y+19	; 0x13
    1e02:	fc 89       	ldd	r31, Y+20	; 0x14
    1e04:	30 97       	sbiw	r30, 0x00	; 0
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <_ZN9OneButton4tickEb+0x176>
        _longPressStopFunc();
    1e08:	09 95       	icall
      _state = 0; // restart.
    1e0a:	18 8e       	std	Y+24, r1	; 0x18
    1e0c:	1f 8a       	std	Y+23, r1	; 0x17
      _stopTime = now; // remember stopping time
    1e0e:	cd 8e       	std	Y+29, r12	; 0x1d
    1e10:	de 8e       	std	Y+30, r13	; 0x1e
    1e12:	ef 8e       	std	Y+31, r14	; 0x1f
    1e14:	f8 a2       	std	Y+32, r15	; 0x20
    1e16:	0e c0       	rjmp	.+28     	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	8a 87       	std	Y+10, r24	; 0x0a
      if (_duringLongPressFunc)
    1e1c:	ed 89       	ldd	r30, Y+21	; 0x15
    1e1e:	fe 89       	ldd	r31, Y+22	; 0x16
    1e20:	30 97       	sbiw	r30, 0x00	; 0
    1e22:	41 f0       	breq	.+16     	; 0x1e34 <_ZN9OneButton4tickEb+0x1a0>
        _duringLongPressFunc();
    } // if

  } // if
} // OneButton.tick()
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	df 90       	pop	r13
    1e30:	cf 90       	pop	r12
      _stopTime = now; // remember stopping time
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
    1e32:	09 94       	ijmp
    } // if

  } // if
} // OneButton.tick()
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	08 95       	ret

00001e44 <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	ec 01       	movw	r28, r24
  if (_pin >= 0) {
    1e4a:	88 81       	ld	r24, Y
    1e4c:	99 81       	ldd	r25, Y+1	; 0x01
    1e4e:	97 fd       	sbrc	r25, 7
    1e50:	0e c0       	rjmp	.+28     	; 0x1e6e <_ZN9OneButton4tickEv+0x2a>
    tick(digitalRead(_pin) == _buttonPressed);
    1e52:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalRead>
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	28 85       	ldd	r18, Y+8	; 0x08
    1e5a:	39 85       	ldd	r19, Y+9	; 0x09
    1e5c:	28 17       	cp	r18, r24
    1e5e:	39 07       	cpc	r19, r25
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <_ZN9OneButton4tickEv+0x20>
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	ce 01       	movw	r24, r28
  }
}
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
    1e6a:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <_ZN9OneButton4tickEb>
  }
}
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	08 95       	ret

00001e74 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e74:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_state>
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <twi_sendStop>
    1e7e:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <twi_inRepStart>
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	82 e1       	ldi	r24, 0x12	; 18
    1e86:	0e 94 72 18 	call	0x30e4	; 0x30e4 <digitalWrite>
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	83 e1       	ldi	r24, 0x13	; 19
    1e8e:	0e 94 72 18 	call	0x30e4	; 0x30e4 <digitalWrite>
    1e92:	e9 eb       	ldi	r30, 0xB9	; 185
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8e 7f       	andi	r24, 0xFE	; 254
    1e9a:	80 83       	st	Z, r24
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8d 7f       	andi	r24, 0xFD	; 253
    1ea0:	80 83       	st	Z, r24
    1ea2:	88 e4       	ldi	r24, 0x48	; 72
    1ea4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1ea8:	85 e4       	ldi	r24, 0x45	; 69
    1eaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1eae:	08 95       	ret

00001eb0 <twi_readFrom>:
    1eb0:	41 32       	cpi	r20, 0x21	; 33
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <twi_readFrom+0x6>
    1eb4:	43 c0       	rjmp	.+134    	; 0x1f3c <twi_readFrom+0x8c>
    1eb6:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <twi_state>
    1eba:	91 11       	cpse	r25, r1
    1ebc:	fc cf       	rjmp	.-8      	; 0x1eb6 <twi_readFrom+0x6>
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <twi_state>
    1ec4:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <twi_sendStop>
    1ec8:	2f ef       	ldi	r18, 0xFF	; 255
    1eca:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <twi_error>
    1ece:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <twi_masterBufferIndex>
    1ed2:	24 0f       	add	r18, r20
    1ed4:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <twi_masterBufferLength>
    1ed8:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <twi_slarw>
    1edc:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <twi_slarw>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	89 2b       	or	r24, r25
    1ee4:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <twi_slarw>
    1ee8:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_inRepStart>
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	61 f4       	brne	.+24     	; 0x1f08 <twi_readFrom+0x58>
    1ef0:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <twi_inRepStart>
    1ef4:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_slarw>
    1ef8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1efc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f00:	83 fd       	sbrc	r24, 3
    1f02:	f8 cf       	rjmp	.-16     	; 0x1ef4 <twi_readFrom+0x44>
    1f04:	85 ec       	ldi	r24, 0xC5	; 197
    1f06:	01 c0       	rjmp	.+2      	; 0x1f0a <twi_readFrom+0x5a>
    1f08:	85 ee       	ldi	r24, 0xE5	; 229
    1f0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f0e:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_state>
    1f12:	81 30       	cpi	r24, 0x01	; 1
    1f14:	e1 f3       	breq	.-8      	; 0x1f0e <twi_readFrom+0x5e>
    1f16:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <twi_masterBufferIndex>
    1f1a:	84 17       	cp	r24, r20
    1f1c:	10 f4       	brcc	.+4      	; 0x1f22 <twi_readFrom+0x72>
    1f1e:	40 91 8d 02 	lds	r20, 0x028D	; 0x80028d <twi_masterBufferIndex>
    1f22:	ae e8       	ldi	r26, 0x8E	; 142
    1f24:	b2 e0       	ldi	r27, 0x02	; 2
    1f26:	96 2f       	mov	r25, r22
    1f28:	fb 01       	movw	r30, r22
    1f2a:	8e 2f       	mov	r24, r30
    1f2c:	89 1b       	sub	r24, r25
    1f2e:	84 17       	cp	r24, r20
    1f30:	18 f4       	brcc	.+6      	; 0x1f38 <twi_readFrom+0x88>
    1f32:	8d 91       	ld	r24, X+
    1f34:	81 93       	st	Z+, r24
    1f36:	f9 cf       	rjmp	.-14     	; 0x1f2a <twi_readFrom+0x7a>
    1f38:	84 2f       	mov	r24, r20
    1f3a:	08 95       	ret
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	08 95       	ret

00001f40 <twi_writeTo>:
    1f40:	0f 93       	push	r16
    1f42:	41 32       	cpi	r20, 0x21	; 33
    1f44:	08 f0       	brcs	.+2      	; 0x1f48 <twi_writeTo+0x8>
    1f46:	4a c0       	rjmp	.+148    	; 0x1fdc <twi_writeTo+0x9c>
    1f48:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <twi_state>
    1f4c:	91 11       	cpse	r25, r1
    1f4e:	fc cf       	rjmp	.-8      	; 0x1f48 <twi_writeTo+0x8>
    1f50:	32 e0       	ldi	r19, 0x02	; 2
    1f52:	30 93 b5 02 	sts	0x02B5, r19	; 0x8002b5 <twi_state>
    1f56:	00 93 b3 02 	sts	0x02B3, r16	; 0x8002b3 <twi_sendStop>
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	30 93 48 02 	sts	0x0248, r19	; 0x800248 <twi_error>
    1f60:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <twi_masterBufferIndex>
    1f64:	40 93 8c 02 	sts	0x028C, r20	; 0x80028c <twi_masterBufferLength>
    1f68:	56 2f       	mov	r21, r22
    1f6a:	ae e8       	ldi	r26, 0x8E	; 142
    1f6c:	b2 e0       	ldi	r27, 0x02	; 2
    1f6e:	fb 01       	movw	r30, r22
    1f70:	3e 2f       	mov	r19, r30
    1f72:	35 1b       	sub	r19, r21
    1f74:	34 17       	cp	r19, r20
    1f76:	18 f4       	brcc	.+6      	; 0x1f7e <twi_writeTo+0x3e>
    1f78:	31 91       	ld	r19, Z+
    1f7a:	3d 93       	st	X+, r19
    1f7c:	f9 cf       	rjmp	.-14     	; 0x1f70 <twi_writeTo+0x30>
    1f7e:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <twi_slarw>
    1f82:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <twi_slarw>
    1f86:	88 0f       	add	r24, r24
    1f88:	83 2b       	or	r24, r19
    1f8a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <twi_slarw>
    1f8e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_inRepStart>
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	61 f4       	brne	.+24     	; 0x1fae <twi_writeTo+0x6e>
    1f96:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <twi_inRepStart>
    1f9a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_slarw>
    1f9e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fa2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1fa6:	83 fd       	sbrc	r24, 3
    1fa8:	f8 cf       	rjmp	.-16     	; 0x1f9a <twi_writeTo+0x5a>
    1faa:	85 ec       	ldi	r24, 0xC5	; 197
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <twi_writeTo+0x70>
    1fae:	85 ee       	ldi	r24, 0xE5	; 229
    1fb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1fb4:	22 23       	and	r18, r18
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <twi_writeTo+0x80>
    1fb8:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_state>
    1fbc:	82 30       	cpi	r24, 0x02	; 2
    1fbe:	d1 f3       	breq	.-12     	; 0x1fb4 <twi_writeTo+0x74>
    1fc0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <twi_error>
    1fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc6:	79 f0       	breq	.+30     	; 0x1fe6 <twi_writeTo+0xa6>
    1fc8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <twi_error>
    1fcc:	80 32       	cpi	r24, 0x20	; 32
    1fce:	41 f0       	breq	.+16     	; 0x1fe0 <twi_writeTo+0xa0>
    1fd0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <twi_error>
    1fd4:	80 33       	cpi	r24, 0x30	; 48
    1fd6:	31 f0       	breq	.+12     	; 0x1fe4 <twi_writeTo+0xa4>
    1fd8:	94 e0       	ldi	r25, 0x04	; 4
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <twi_writeTo+0xa6>
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	03 c0       	rjmp	.+6      	; 0x1fe6 <twi_writeTo+0xa6>
    1fe0:	92 e0       	ldi	r25, 0x02	; 2
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <twi_writeTo+0xa6>
    1fe4:	93 e0       	ldi	r25, 0x03	; 3
    1fe6:	89 2f       	mov	r24, r25
    1fe8:	0f 91       	pop	r16
    1fea:	08 95       	ret

00001fec <twi_transmit>:
    1fec:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <twi_txBufferLength>
    1ff0:	26 2f       	mov	r18, r22
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	24 0f       	add	r18, r20
    1ff6:	31 1d       	adc	r19, r1
    1ff8:	21 32       	cpi	r18, 0x21	; 33
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	dc f4       	brge	.+54     	; 0x2034 <twi_transmit+0x48>
    1ffe:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <twi_state>
    2002:	24 30       	cpi	r18, 0x04	; 4
    2004:	c9 f4       	brne	.+50     	; 0x2038 <twi_transmit+0x4c>
    2006:	fc 01       	movw	r30, r24
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	86 17       	cp	r24, r22
    200e:	58 f4       	brcc	.+22     	; 0x2026 <twi_transmit+0x3a>
    2010:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <twi_txBufferLength>
    2014:	21 91       	ld	r18, Z+
    2016:	dc 01       	movw	r26, r24
    2018:	a4 59       	subi	r26, 0x94	; 148
    201a:	bd 4f       	sbci	r27, 0xFD	; 253
    201c:	a3 0f       	add	r26, r19
    201e:	b1 1d       	adc	r27, r1
    2020:	2c 93       	st	X, r18
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	f3 cf       	rjmp	.-26     	; 0x200c <twi_transmit+0x20>
    2026:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <twi_txBufferLength>
    202a:	68 0f       	add	r22, r24
    202c:	60 93 6a 02 	sts	0x026A, r22	; 0x80026a <twi_txBufferLength>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	08 95       	ret
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	08 95       	ret
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	08 95       	ret

0000203c <twi_attachSlaveRxEvent>:
    203c:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <twi_onSlaveReceive+0x1>
    2040:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <twi_onSlaveReceive>
    2044:	08 95       	ret

00002046 <twi_attachSlaveTxEvent>:
    2046:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <twi_onSlaveTransmit+0x1>
    204a:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <twi_onSlaveTransmit>
    204e:	08 95       	ret

00002050 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2050:	85 ed       	ldi	r24, 0xD5	; 213
    2052:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2056:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    205a:	84 fd       	sbrc	r24, 4
    205c:	fc cf       	rjmp	.-8      	; 0x2056 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    205e:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_state>
    2062:	08 95       	ret

00002064 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2064:	85 ec       	ldi	r24, 0xC5	; 197
    2066:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    206a:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_state>
    206e:	08 95       	ret

00002070 <__vector_24>:
}

ISR(TWI_vect)
{
    2070:	1f 92       	push	r1
    2072:	0f 92       	push	r0
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	0f 92       	push	r0
    2078:	11 24       	eor	r1, r1
    207a:	2f 93       	push	r18
    207c:	3f 93       	push	r19
    207e:	4f 93       	push	r20
    2080:	5f 93       	push	r21
    2082:	6f 93       	push	r22
    2084:	7f 93       	push	r23
    2086:	8f 93       	push	r24
    2088:	9f 93       	push	r25
    208a:	af 93       	push	r26
    208c:	bf 93       	push	r27
    208e:	ef 93       	push	r30
    2090:	ff 93       	push	r31
  switch(TW_STATUS){
    2092:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2096:	88 7f       	andi	r24, 0xF8	; 248
    2098:	80 36       	cpi	r24, 0x60	; 96
    209a:	09 f4       	brne	.+2      	; 0x209e <__vector_24+0x2e>
    209c:	9e c0       	rjmp	.+316    	; 0x21da <__vector_24+0x16a>
    209e:	78 f5       	brcc	.+94     	; 0x20fe <__vector_24+0x8e>
    20a0:	88 32       	cpi	r24, 0x28	; 40
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <__vector_24+0x36>
    20a4:	5d c0       	rjmp	.+186    	; 0x2160 <__vector_24+0xf0>
    20a6:	90 f4       	brcc	.+36     	; 0x20cc <__vector_24+0x5c>
    20a8:	80 31       	cpi	r24, 0x10	; 16
    20aa:	09 f4       	brne	.+2      	; 0x20ae <__vector_24+0x3e>
    20ac:	56 c0       	rjmp	.+172    	; 0x215a <__vector_24+0xea>
    20ae:	38 f4       	brcc	.+14     	; 0x20be <__vector_24+0x4e>
    20b0:	88 23       	and	r24, r24
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <__vector_24+0x46>
    20b4:	f5 c0       	rjmp	.+490    	; 0x22a0 <__vector_24+0x230>
    20b6:	88 30       	cpi	r24, 0x08	; 8
    20b8:	09 f4       	brne	.+2      	; 0x20bc <__vector_24+0x4c>
    20ba:	4f c0       	rjmp	.+158    	; 0x215a <__vector_24+0xea>
    20bc:	f5 c0       	rjmp	.+490    	; 0x22a8 <__vector_24+0x238>
    20be:	88 31       	cpi	r24, 0x18	; 24
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <__vector_24+0x54>
    20c2:	4e c0       	rjmp	.+156    	; 0x2160 <__vector_24+0xf0>
    20c4:	80 32       	cpi	r24, 0x20	; 32
    20c6:	09 f4       	brne	.+2      	; 0x20ca <__vector_24+0x5a>
    20c8:	5f c0       	rjmp	.+190    	; 0x2188 <__vector_24+0x118>
    20ca:	ee c0       	rjmp	.+476    	; 0x22a8 <__vector_24+0x238>
    20cc:	80 34       	cpi	r24, 0x40	; 64
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <__vector_24+0x62>
    20d0:	6a c0       	rjmp	.+212    	; 0x21a6 <__vector_24+0x136>
    20d2:	58 f4       	brcc	.+22     	; 0x20ea <__vector_24+0x7a>
    20d4:	80 33       	cpi	r24, 0x30	; 48
    20d6:	09 f4       	brne	.+2      	; 0x20da <__vector_24+0x6a>
    20d8:	57 c0       	rjmp	.+174    	; 0x2188 <__vector_24+0x118>
    20da:	88 33       	cpi	r24, 0x38	; 56
    20dc:	09 f0       	breq	.+2      	; 0x20e0 <__vector_24+0x70>
    20de:	e4 c0       	rjmp	.+456    	; 0x22a8 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    20e0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <twi_error>
      twi_releaseBus();
    20e4:	0e 94 32 10 	call	0x2064	; 0x2064 <twi_releaseBus>
      break;
    20e8:	df c0       	rjmp	.+446    	; 0x22a8 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20ea:	80 35       	cpi	r24, 0x50	; 80
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <__vector_24+0x80>
    20ee:	4f c0       	rjmp	.+158    	; 0x218e <__vector_24+0x11e>
    20f0:	88 35       	cpi	r24, 0x58	; 88
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <__vector_24+0x86>
    20f4:	5d c0       	rjmp	.+186    	; 0x21b0 <__vector_24+0x140>
    20f6:	88 34       	cpi	r24, 0x48	; 72
    20f8:	09 f0       	breq	.+2      	; 0x20fc <__vector_24+0x8c>
    20fa:	d6 c0       	rjmp	.+428    	; 0x22a8 <__vector_24+0x238>
    20fc:	d3 c0       	rjmp	.+422    	; 0x22a4 <__vector_24+0x234>
    20fe:	88 39       	cpi	r24, 0x98	; 152
    2100:	09 f4       	brne	.+2      	; 0x2104 <__vector_24+0x94>
    2102:	c4 c0       	rjmp	.+392    	; 0x228c <__vector_24+0x21c>
    2104:	a8 f4       	brcc	.+42     	; 0x2130 <__vector_24+0xc0>
    2106:	88 37       	cpi	r24, 0x78	; 120
    2108:	09 f4       	brne	.+2      	; 0x210c <__vector_24+0x9c>
    210a:	67 c0       	rjmp	.+206    	; 0x21da <__vector_24+0x16a>
    210c:	38 f4       	brcc	.+14     	; 0x211c <__vector_24+0xac>
    210e:	88 36       	cpi	r24, 0x68	; 104
    2110:	09 f4       	brne	.+2      	; 0x2114 <__vector_24+0xa4>
    2112:	63 c0       	rjmp	.+198    	; 0x21da <__vector_24+0x16a>
    2114:	80 37       	cpi	r24, 0x70	; 112
    2116:	09 f4       	brne	.+2      	; 0x211a <__vector_24+0xaa>
    2118:	60 c0       	rjmp	.+192    	; 0x21da <__vector_24+0x16a>
    211a:	c6 c0       	rjmp	.+396    	; 0x22a8 <__vector_24+0x238>
    211c:	88 38       	cpi	r24, 0x88	; 136
    211e:	09 f4       	brne	.+2      	; 0x2122 <__vector_24+0xb2>
    2120:	b5 c0       	rjmp	.+362    	; 0x228c <__vector_24+0x21c>
    2122:	80 39       	cpi	r24, 0x90	; 144
    2124:	09 f4       	brne	.+2      	; 0x2128 <__vector_24+0xb8>
    2126:	5f c0       	rjmp	.+190    	; 0x21e6 <__vector_24+0x176>
    2128:	80 38       	cpi	r24, 0x80	; 128
    212a:	09 f0       	breq	.+2      	; 0x212e <__vector_24+0xbe>
    212c:	bd c0       	rjmp	.+378    	; 0x22a8 <__vector_24+0x238>
    212e:	5b c0       	rjmp	.+182    	; 0x21e6 <__vector_24+0x176>
    2130:	80 3b       	cpi	r24, 0xB0	; 176
    2132:	09 f4       	brne	.+2      	; 0x2136 <__vector_24+0xc6>
    2134:	83 c0       	rjmp	.+262    	; 0x223c <__vector_24+0x1cc>
    2136:	38 f4       	brcc	.+14     	; 0x2146 <__vector_24+0xd6>
    2138:	80 3a       	cpi	r24, 0xA0	; 160
    213a:	09 f4       	brne	.+2      	; 0x213e <__vector_24+0xce>
    213c:	66 c0       	rjmp	.+204    	; 0x220a <__vector_24+0x19a>
    213e:	88 3a       	cpi	r24, 0xA8	; 168
    2140:	09 f4       	brne	.+2      	; 0x2144 <__vector_24+0xd4>
    2142:	7c c0       	rjmp	.+248    	; 0x223c <__vector_24+0x1cc>
    2144:	b1 c0       	rjmp	.+354    	; 0x22a8 <__vector_24+0x238>
    2146:	80 3c       	cpi	r24, 0xC0	; 192
    2148:	09 f4       	brne	.+2      	; 0x214c <__vector_24+0xdc>
    214a:	a4 c0       	rjmp	.+328    	; 0x2294 <__vector_24+0x224>
    214c:	88 3c       	cpi	r24, 0xC8	; 200
    214e:	09 f4       	brne	.+2      	; 0x2152 <__vector_24+0xe2>
    2150:	a1 c0       	rjmp	.+322    	; 0x2294 <__vector_24+0x224>
    2152:	88 3b       	cpi	r24, 0xB8	; 184
    2154:	09 f4       	brne	.+2      	; 0x2158 <__vector_24+0xe8>
    2156:	87 c0       	rjmp	.+270    	; 0x2266 <__vector_24+0x1f6>
    2158:	a7 c0       	rjmp	.+334    	; 0x22a8 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    215a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_slarw>
    215e:	10 c0       	rjmp	.+32     	; 0x2180 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2160:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <twi_masterBufferIndex>
    2164:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <twi_masterBufferLength>
    2168:	98 17       	cp	r25, r24
    216a:	70 f5       	brcc	.+92     	; 0x21c8 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    216c:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	8e 0f       	add	r24, r30
    2174:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	e2 57       	subi	r30, 0x72	; 114
    217c:	fd 4f       	sbci	r31, 0xFD	; 253
    217e:	80 81       	ld	r24, Z
    2180:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2184:	85 ec       	ldi	r24, 0xC5	; 197
    2186:	83 c0       	rjmp	.+262    	; 0x228e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2188:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <twi_error>
    218c:	8b c0       	rjmp	.+278    	; 0x22a4 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    218e:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	8e 0f       	add	r24, r30
    2196:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    219a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	e2 57       	subi	r30, 0x72	; 114
    21a2:	fd 4f       	sbci	r31, 0xFD	; 253
    21a4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21a6:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <twi_masterBufferIndex>
    21aa:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <twi_masterBufferLength>
    21ae:	6b c0       	rjmp	.+214    	; 0x2286 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21b0:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <twi_masterBufferIndex>
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	8e 0f       	add	r24, r30
    21b8:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_masterBufferIndex>
    21bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	e2 57       	subi	r30, 0x72	; 114
    21c4:	fd 4f       	sbci	r31, 0xFD	; 253
    21c6:	80 83       	st	Z, r24
	if (twi_sendStop)
    21c8:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <twi_sendStop>
    21cc:	81 11       	cpse	r24, r1
    21ce:	6a c0       	rjmp	.+212    	; 0x22a4 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    21d6:	84 ea       	ldi	r24, 0xA4	; 164
    21d8:	5e c0       	rjmp	.+188    	; 0x2296 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    21da:	83 e0       	ldi	r24, 0x03	; 3
    21dc:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    21e0:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <twi_rxBufferIndex>
    21e4:	cf cf       	rjmp	.-98     	; 0x2184 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    21e6:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <twi_rxBufferIndex>
    21ea:	80 32       	cpi	r24, 0x20	; 32
    21ec:	08 f0       	brcs	.+2      	; 0x21f0 <__vector_24+0x180>
    21ee:	4e c0       	rjmp	.+156    	; 0x228c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    21f0:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <twi_rxBufferIndex>
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	8e 0f       	add	r24, r30
    21f8:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <twi_rxBufferIndex>
    21fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	e6 5b       	subi	r30, 0xB6	; 182
    2204:	fd 4f       	sbci	r31, 0xFD	; 253
    2206:	80 83       	st	Z, r24
    2208:	bd cf       	rjmp	.-134    	; 0x2184 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    220a:	0e 94 32 10 	call	0x2064	; 0x2064 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    220e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <twi_rxBufferIndex>
    2212:	80 32       	cpi	r24, 0x20	; 32
    2214:	30 f4       	brcc	.+12     	; 0x2222 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2216:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <twi_rxBufferIndex>
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	e6 5b       	subi	r30, 0xB6	; 182
    221e:	fd 4f       	sbci	r31, 0xFD	; 253
    2220:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2222:	60 91 49 02 	lds	r22, 0x0249	; 0x800249 <twi_rxBufferIndex>
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <twi_onSlaveReceive>
    222c:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <twi_onSlaveReceive+0x1>
    2230:	8a e4       	ldi	r24, 0x4A	; 74
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2236:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <twi_rxBufferIndex>
      break;
    223a:	36 c0       	rjmp	.+108    	; 0x22a8 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2242:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2246:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    224a:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <twi_onSlaveTransmit>
    224e:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <twi_onSlaveTransmit+0x1>
    2252:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2254:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <twi_txBufferLength>
    2258:	81 11       	cpse	r24, r1
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2262:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2266:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <twi_txBufferIndex>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	8e 0f       	add	r24, r30
    226e:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <twi_txBufferIndex>
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	e4 59       	subi	r30, 0x94	; 148
    2276:	fd 4f       	sbci	r31, 0xFD	; 253
    2278:	80 81       	ld	r24, Z
    227a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    227e:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <twi_txBufferIndex>
    2282:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <twi_txBufferLength>
    2286:	98 17       	cp	r25, r24
    2288:	08 f4       	brcc	.+2      	; 0x228c <__vector_24+0x21c>
    228a:	7c cf       	rjmp	.-264    	; 0x2184 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    228c:	85 e8       	ldi	r24, 0x85	; 133
    228e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2292:	0a c0       	rjmp	.+20     	; 0x22a8 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2294:	85 ec       	ldi	r24, 0xC5	; 197
    2296:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    229a:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_state>
      break;
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    22a0:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <twi_error>
      twi_stop();
    22a4:	0e 94 28 10 	call	0x2050	; 0x2050 <twi_stop>
      break;
  }
}
    22a8:	ff 91       	pop	r31
    22aa:	ef 91       	pop	r30
    22ac:	bf 91       	pop	r27
    22ae:	af 91       	pop	r26
    22b0:	9f 91       	pop	r25
    22b2:	8f 91       	pop	r24
    22b4:	7f 91       	pop	r23
    22b6:	6f 91       	pop	r22
    22b8:	5f 91       	pop	r21
    22ba:	4f 91       	pop	r20
    22bc:	3f 91       	pop	r19
    22be:	2f 91       	pop	r18
    22c0:	0f 90       	pop	r0
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	0f 90       	pop	r0
    22c6:	1f 90       	pop	r1
    22c8:	18 95       	reti

000022ca <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    22ca:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
    22d4:	82 1b       	sub	r24, r18
    22d6:	91 09       	sbc	r25, r1
    22d8:	08 95       	ret

000022da <_ZN7TwoWire4readEv>:
    22da:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
    22de:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
    22e2:	98 17       	cp	r25, r24
    22e4:	50 f4       	brcc	.+20     	; 0x22fa <_ZN7TwoWire4readEv+0x20>
    22e6:	e9 2f       	mov	r30, r25
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	e4 51       	subi	r30, 0x14	; 20
    22ec:	fd 4f       	sbci	r31, 0xFD	; 253
    22ee:	20 81       	ld	r18, Z
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	9f 5f       	subi	r25, 0xFF	; 255
    22f4:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <_ZN7TwoWire4readEv+0x24>
    22fa:	2f ef       	ldi	r18, 0xFF	; 255
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	c9 01       	movw	r24, r18
    2300:	08 95       	ret

00002302 <_ZN7TwoWire4peekEv>:
    2302:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
    2306:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
    230a:	e8 17       	cp	r30, r24
    230c:	30 f4       	brcc	.+12     	; 0x231a <_ZN7TwoWire4peekEv+0x18>
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	e4 51       	subi	r30, 0x14	; 20
    2312:	fd 4f       	sbci	r31, 0xFD	; 253
    2314:	80 81       	ld	r24, Z
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	08 95       	ret
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	9f ef       	ldi	r25, 0xFF	; 255
    231e:	08 95       	ret

00002320 <_ZN7TwoWire5flushEv>:
    2320:	08 95       	ret

00002322 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	ec 01       	movw	r28, r24
    2328:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <_ZN7TwoWire14user_onReceiveE>
    232c:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <_ZN7TwoWire14user_onReceiveE+0x1>
    2330:	30 97       	sbiw	r30, 0x00	; 0
    2332:	f1 f0       	breq	.+60     	; 0x2370 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2334:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
    2338:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
    233c:	98 17       	cp	r25, r24
    233e:	c0 f0       	brcs	.+48     	; 0x2370 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	29 2f       	mov	r18, r25
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	26 17       	cp	r18, r22
    2348:	37 07       	cpc	r19, r23
    234a:	54 f4       	brge	.+20     	; 0x2360 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    234c:	de 01       	movw	r26, r28
    234e:	a2 0f       	add	r26, r18
    2350:	b3 1f       	adc	r27, r19
    2352:	4c 91       	ld	r20, X
    2354:	d9 01       	movw	r26, r18
    2356:	a4 51       	subi	r26, 0x14	; 20
    2358:	bd 4f       	sbci	r27, 0xFD	; 253
    235a:	4c 93       	st	X, r20
    235c:	9f 5f       	subi	r25, 0xFF	; 255
    235e:	f1 cf       	rjmp	.-30     	; 0x2342 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2360:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
    2364:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
    2368:	cb 01       	movw	r24, r22
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	09 94       	ijmp
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	08 95       	ret

00002376 <_ZN7TwoWire16onRequestServiceEv>:
    2376:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <_ZN7TwoWire14user_onRequestE>
    237a:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <_ZN7TwoWire14user_onRequestE+0x1>
    237e:	30 97       	sbiw	r30, 0x00	; 0
    2380:	29 f0       	breq	.+10     	; 0x238c <_ZN7TwoWire16onRequestServiceEv+0x16>
    2382:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire13txBufferIndexE>
    2386:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <_ZN7TwoWire14txBufferLengthE>
    238a:	09 94       	ijmp
    238c:	08 95       	ret

0000238e <_ZN7TwoWire5writeEPKhj>:
    238e:	cf 92       	push	r12
    2390:	df 92       	push	r13
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	7c 01       	movw	r14, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8a 01       	movw	r16, r20
    23a4:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <_ZN7TwoWire12transmittingE>
    23a8:	22 23       	and	r18, r18
    23aa:	89 f0       	breq	.+34     	; 0x23ce <_ZN7TwoWire5writeEPKhj+0x40>
    23ac:	eb 01       	movw	r28, r22
    23ae:	6b 01       	movw	r12, r22
    23b0:	c4 0e       	add	r12, r20
    23b2:	d5 1e       	adc	r13, r21
    23b4:	cc 15       	cp	r28, r12
    23b6:	dd 05       	cpc	r29, r13
    23b8:	69 f0       	breq	.+26     	; 0x23d4 <_ZN7TwoWire5writeEPKhj+0x46>
    23ba:	69 91       	ld	r22, Y+
    23bc:	d7 01       	movw	r26, r14
    23be:	ed 91       	ld	r30, X+
    23c0:	fc 91       	ld	r31, X
    23c2:	01 90       	ld	r0, Z+
    23c4:	f0 81       	ld	r31, Z
    23c6:	e0 2d       	mov	r30, r0
    23c8:	c7 01       	movw	r24, r14
    23ca:	09 95       	icall
    23cc:	f3 cf       	rjmp	.-26     	; 0x23b4 <_ZN7TwoWire5writeEPKhj+0x26>
    23ce:	64 2f       	mov	r22, r20
    23d0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <twi_transmit>
    23d4:	c8 01       	movw	r24, r16
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	cf 90       	pop	r12
    23e6:	08 95       	ret

000023e8 <_ZN7TwoWire5writeEh>:
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	1f 92       	push	r1
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	69 83       	std	Y+1, r22	; 0x01
    23f4:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <_ZN7TwoWire12transmittingE>
    23f8:	22 23       	and	r18, r18
    23fa:	d1 f0       	breq	.+52     	; 0x2430 <_ZN7TwoWire5writeEh+0x48>
    23fc:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <_ZN7TwoWire14txBufferLengthE>
    2400:	20 32       	cpi	r18, 0x20	; 32
    2402:	40 f0       	brcs	.+16     	; 0x2414 <_ZN7TwoWire5writeEh+0x2c>
    2404:	21 e0       	ldi	r18, 0x01	; 1
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	fc 01       	movw	r30, r24
    240a:	33 83       	std	Z+3, r19	; 0x03
    240c:	22 83       	std	Z+2, r18	; 0x02
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	15 c0       	rjmp	.+42     	; 0x243e <_ZN7TwoWire5writeEh+0x56>
    2414:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <_ZN7TwoWire13txBufferIndexE>
    2418:	e8 2f       	mov	r30, r24
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	e7 53       	subi	r30, 0x37	; 55
    241e:	fd 4f       	sbci	r31, 0xFD	; 253
    2420:	99 81       	ldd	r25, Y+1	; 0x01
    2422:	90 83       	st	Z, r25
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <_ZN7TwoWire13txBufferIndexE>
    242a:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <_ZN7TwoWire14txBufferLengthE>
    242e:	05 c0       	rjmp	.+10     	; 0x243a <_ZN7TwoWire5writeEh+0x52>
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	ce 01       	movw	r24, r28
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <twi_transmit>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <_ZN7TwoWireC1Ev>:
    2446:	fc 01       	movw	r30, r24
    2448:	13 82       	std	Z+3, r1	; 0x03
    244a:	12 82       	std	Z+2, r1	; 0x02
    244c:	88 ee       	ldi	r24, 0xE8	; 232
    244e:	93 e0       	ldi	r25, 0x03	; 3
    2450:	a0 e0       	ldi	r26, 0x00	; 0
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	84 83       	std	Z+4, r24	; 0x04
    2456:	95 83       	std	Z+5, r25	; 0x05
    2458:	a6 83       	std	Z+6, r26	; 0x06
    245a:	b7 83       	std	Z+7, r27	; 0x07
    245c:	86 e7       	ldi	r24, 0x76	; 118
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
    2464:	08 95       	ret

00002466 <_ZN7TwoWire5beginEv>:
    2466:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
    246a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
    246e:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire13txBufferIndexE>
    2472:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <_ZN7TwoWire14txBufferLengthE>
    2476:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <twi_init>
    247a:	8b eb       	ldi	r24, 0xBB	; 187
    247c:	91 e1       	ldi	r25, 0x11	; 17
    247e:	0e 94 23 10 	call	0x2046	; 0x2046 <twi_attachSlaveTxEvent>
    2482:	81 e9       	ldi	r24, 0x91	; 145
    2484:	91 e1       	ldi	r25, 0x11	; 17
    2486:	0c 94 1e 10 	jmp	0x203c	; 0x203c <twi_attachSlaveRxEvent>

0000248a <_ZN7TwoWire17beginTransmissionEh>:
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <_ZN7TwoWire12transmittingE>
    2490:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <_ZN7TwoWire9txAddressE>
    2494:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire13txBufferIndexE>
    2498:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <_ZN7TwoWire14txBufferLengthE>
    249c:	08 95       	ret

0000249e <_ZN7TwoWire15endTransmissionEh>:
    249e:	0f 93       	push	r16
    24a0:	06 2f       	mov	r16, r22
    24a2:	21 e0       	ldi	r18, 0x01	; 1
    24a4:	40 91 c7 02 	lds	r20, 0x02C7	; 0x8002c7 <_ZN7TwoWire14txBufferLengthE>
    24a8:	69 ec       	ldi	r22, 0xC9	; 201
    24aa:	72 e0       	ldi	r23, 0x02	; 2
    24ac:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_ZN7TwoWire9txAddressE>
    24b0:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <twi_writeTo>
    24b4:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire13txBufferIndexE>
    24b8:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <_ZN7TwoWire14txBufferLengthE>
    24bc:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <_ZN7TwoWire12transmittingE>
    24c0:	0f 91       	pop	r16
    24c2:	08 95       	ret

000024c4 <_ZN7TwoWire11requestFromEhhmhh>:
    24c4:	4f 92       	push	r4
    24c6:	5f 92       	push	r5
    24c8:	6f 92       	push	r6
    24ca:	7f 92       	push	r7
    24cc:	af 92       	push	r10
    24ce:	bf 92       	push	r11
    24d0:	cf 92       	push	r12
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	5c 01       	movw	r10, r24
    24e0:	f6 2e       	mov	r15, r22
    24e2:	d4 2f       	mov	r29, r20
    24e4:	28 01       	movw	r4, r16
    24e6:	39 01       	movw	r6, r18
    24e8:	ee 20       	and	r14, r14
    24ea:	21 f1       	breq	.+72     	; 0x2534 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    24ec:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN7TwoWire17beginTransmissionEh>
    24f0:	ce 2d       	mov	r28, r14
    24f2:	c4 30       	cpi	r28, 0x04	; 4
    24f4:	08 f0       	brcs	.+2      	; 0x24f8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    24f6:	c3 e0       	ldi	r28, 0x03	; 3
    24f8:	c1 50       	subi	r28, 0x01	; 1
    24fa:	c0 f0       	brcs	.+48     	; 0x252c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    24fc:	28 e0       	ldi	r18, 0x08	; 8
    24fe:	c2 9f       	mul	r28, r18
    2500:	c0 01       	movw	r24, r0
    2502:	11 24       	eor	r1, r1
    2504:	a3 01       	movw	r20, r6
    2506:	92 01       	movw	r18, r4
    2508:	04 c0       	rjmp	.+8      	; 0x2512 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    250a:	56 95       	lsr	r21
    250c:	47 95       	ror	r20
    250e:	37 95       	ror	r19
    2510:	27 95       	ror	r18
    2512:	8a 95       	dec	r24
    2514:	d2 f7       	brpl	.-12     	; 0x250a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2516:	ca 01       	movw	r24, r20
    2518:	b9 01       	movw	r22, r18
    251a:	d5 01       	movw	r26, r10
    251c:	ed 91       	ld	r30, X+
    251e:	fc 91       	ld	r31, X
    2520:	01 90       	ld	r0, Z+
    2522:	f0 81       	ld	r31, Z
    2524:	e0 2d       	mov	r30, r0
    2526:	c5 01       	movw	r24, r10
    2528:	09 95       	icall
    252a:	e6 cf       	rjmp	.-52     	; 0x24f8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	c5 01       	movw	r24, r10
    2530:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN7TwoWire15endTransmissionEh>
    2534:	4d 2f       	mov	r20, r29
    2536:	d1 32       	cpi	r29, 0x21	; 33
    2538:	08 f0       	brcs	.+2      	; 0x253c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	2c 2d       	mov	r18, r12
    253e:	6c ee       	ldi	r22, 0xEC	; 236
    2540:	72 e0       	ldi	r23, 0x02	; 2
    2542:	8f 2d       	mov	r24, r15
    2544:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <twi_readFrom>
    2548:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_ZN7TwoWire13rxBufferIndexE>
    254c:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_ZN7TwoWire14rxBufferLengthE>
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	cf 90       	pop	r12
    255e:	bf 90       	pop	r11
    2560:	af 90       	pop	r10
    2562:	7f 90       	pop	r7
    2564:	6f 90       	pop	r6
    2566:	5f 90       	pop	r5
    2568:	4f 90       	pop	r4
    256a:	08 95       	ret

0000256c <_ZN7TwoWire11requestFromEhhh>:
    256c:	cf 92       	push	r12
    256e:	ef 92       	push	r14
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	c2 2e       	mov	r12, r18
    2576:	e1 2c       	mov	r14, r1
    2578:	00 e0       	ldi	r16, 0x00	; 0
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	98 01       	movw	r18, r16
    257e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN7TwoWire11requestFromEhhmhh>
    2582:	1f 91       	pop	r17
    2584:	0f 91       	pop	r16
    2586:	ef 90       	pop	r14
    2588:	cf 90       	pop	r12
    258a:	08 95       	ret

0000258c <_ZN7TwoWire11requestFromEhh>:
    258c:	21 e0       	ldi	r18, 0x01	; 1
    258e:	0c 94 b6 12 	jmp	0x256c	; 0x256c <_ZN7TwoWire11requestFromEhhh>

00002592 <_ZN7TwoWire15endTransmissionEv>:
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	0c 94 4f 12 	jmp	0x249e	; 0x249e <_ZN7TwoWire15endTransmissionEh>

00002598 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2598:	86 eb       	ldi	r24, 0xB6	; 182
    259a:	92 e0       	ldi	r25, 0x02	; 2
    259c:	0c 94 23 12 	jmp	0x2446	; 0x2446 <_ZN7TwoWireC1Ev>

000025a0 <__subsf3>:
    25a0:	50 58       	subi	r21, 0x80	; 128

000025a2 <__addsf3>:
    25a2:	bb 27       	eor	r27, r27
    25a4:	aa 27       	eor	r26, r26
    25a6:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__addsf3x>
    25aa:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__fp_round>
    25ae:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__fp_pscA>
    25b2:	38 f0       	brcs	.+14     	; 0x25c2 <__addsf3+0x20>
    25b4:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_pscB>
    25b8:	20 f0       	brcs	.+8      	; 0x25c2 <__addsf3+0x20>
    25ba:	39 f4       	brne	.+14     	; 0x25ca <__addsf3+0x28>
    25bc:	9f 3f       	cpi	r25, 0xFF	; 255
    25be:	19 f4       	brne	.+6      	; 0x25c6 <__addsf3+0x24>
    25c0:	26 f4       	brtc	.+8      	; 0x25ca <__addsf3+0x28>
    25c2:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__fp_nan>
    25c6:	0e f4       	brtc	.+2      	; 0x25ca <__addsf3+0x28>
    25c8:	e0 95       	com	r30
    25ca:	e7 fb       	bst	r30, 7
    25cc:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__fp_inf>

000025d0 <__addsf3x>:
    25d0:	e9 2f       	mov	r30, r25
    25d2:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__fp_split3>
    25d6:	58 f3       	brcs	.-42     	; 0x25ae <__addsf3+0xc>
    25d8:	ba 17       	cp	r27, r26
    25da:	62 07       	cpc	r22, r18
    25dc:	73 07       	cpc	r23, r19
    25de:	84 07       	cpc	r24, r20
    25e0:	95 07       	cpc	r25, r21
    25e2:	20 f0       	brcs	.+8      	; 0x25ec <__addsf3x+0x1c>
    25e4:	79 f4       	brne	.+30     	; 0x2604 <__addsf3x+0x34>
    25e6:	a6 f5       	brtc	.+104    	; 0x2650 <__addsf3x+0x80>
    25e8:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_zero>
    25ec:	0e f4       	brtc	.+2      	; 0x25f0 <__addsf3x+0x20>
    25ee:	e0 95       	com	r30
    25f0:	0b 2e       	mov	r0, r27
    25f2:	ba 2f       	mov	r27, r26
    25f4:	a0 2d       	mov	r26, r0
    25f6:	0b 01       	movw	r0, r22
    25f8:	b9 01       	movw	r22, r18
    25fa:	90 01       	movw	r18, r0
    25fc:	0c 01       	movw	r0, r24
    25fe:	ca 01       	movw	r24, r20
    2600:	a0 01       	movw	r20, r0
    2602:	11 24       	eor	r1, r1
    2604:	ff 27       	eor	r31, r31
    2606:	59 1b       	sub	r21, r25
    2608:	99 f0       	breq	.+38     	; 0x2630 <__addsf3x+0x60>
    260a:	59 3f       	cpi	r21, 0xF9	; 249
    260c:	50 f4       	brcc	.+20     	; 0x2622 <__addsf3x+0x52>
    260e:	50 3e       	cpi	r21, 0xE0	; 224
    2610:	68 f1       	brcs	.+90     	; 0x266c <__addsf3x+0x9c>
    2612:	1a 16       	cp	r1, r26
    2614:	f0 40       	sbci	r31, 0x00	; 0
    2616:	a2 2f       	mov	r26, r18
    2618:	23 2f       	mov	r18, r19
    261a:	34 2f       	mov	r19, r20
    261c:	44 27       	eor	r20, r20
    261e:	58 5f       	subi	r21, 0xF8	; 248
    2620:	f3 cf       	rjmp	.-26     	; 0x2608 <__addsf3x+0x38>
    2622:	46 95       	lsr	r20
    2624:	37 95       	ror	r19
    2626:	27 95       	ror	r18
    2628:	a7 95       	ror	r26
    262a:	f0 40       	sbci	r31, 0x00	; 0
    262c:	53 95       	inc	r21
    262e:	c9 f7       	brne	.-14     	; 0x2622 <__addsf3x+0x52>
    2630:	7e f4       	brtc	.+30     	; 0x2650 <__addsf3x+0x80>
    2632:	1f 16       	cp	r1, r31
    2634:	ba 0b       	sbc	r27, r26
    2636:	62 0b       	sbc	r22, r18
    2638:	73 0b       	sbc	r23, r19
    263a:	84 0b       	sbc	r24, r20
    263c:	ba f0       	brmi	.+46     	; 0x266c <__addsf3x+0x9c>
    263e:	91 50       	subi	r25, 0x01	; 1
    2640:	a1 f0       	breq	.+40     	; 0x266a <__addsf3x+0x9a>
    2642:	ff 0f       	add	r31, r31
    2644:	bb 1f       	adc	r27, r27
    2646:	66 1f       	adc	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	88 1f       	adc	r24, r24
    264c:	c2 f7       	brpl	.-16     	; 0x263e <__addsf3x+0x6e>
    264e:	0e c0       	rjmp	.+28     	; 0x266c <__addsf3x+0x9c>
    2650:	ba 0f       	add	r27, r26
    2652:	62 1f       	adc	r22, r18
    2654:	73 1f       	adc	r23, r19
    2656:	84 1f       	adc	r24, r20
    2658:	48 f4       	brcc	.+18     	; 0x266c <__addsf3x+0x9c>
    265a:	87 95       	ror	r24
    265c:	77 95       	ror	r23
    265e:	67 95       	ror	r22
    2660:	b7 95       	ror	r27
    2662:	f7 95       	ror	r31
    2664:	9e 3f       	cpi	r25, 0xFE	; 254
    2666:	08 f0       	brcs	.+2      	; 0x266a <__addsf3x+0x9a>
    2668:	b0 cf       	rjmp	.-160    	; 0x25ca <__addsf3+0x28>
    266a:	93 95       	inc	r25
    266c:	88 0f       	add	r24, r24
    266e:	08 f0       	brcs	.+2      	; 0x2672 <__addsf3x+0xa2>
    2670:	99 27       	eor	r25, r25
    2672:	ee 0f       	add	r30, r30
    2674:	97 95       	ror	r25
    2676:	87 95       	ror	r24
    2678:	08 95       	ret

0000267a <__cmpsf2>:
    267a:	0e 94 27 14 	call	0x284e	; 0x284e <__fp_cmp>
    267e:	08 f4       	brcc	.+2      	; 0x2682 <__cmpsf2+0x8>
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	08 95       	ret

00002684 <__divsf3>:
    2684:	0e 94 56 13 	call	0x26ac	; 0x26ac <__divsf3x>
    2688:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__fp_round>
    268c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_pscB>
    2690:	58 f0       	brcs	.+22     	; 0x26a8 <__divsf3+0x24>
    2692:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__fp_pscA>
    2696:	40 f0       	brcs	.+16     	; 0x26a8 <__divsf3+0x24>
    2698:	29 f4       	brne	.+10     	; 0x26a4 <__divsf3+0x20>
    269a:	5f 3f       	cpi	r21, 0xFF	; 255
    269c:	29 f0       	breq	.+10     	; 0x26a8 <__divsf3+0x24>
    269e:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__fp_inf>
    26a2:	51 11       	cpse	r21, r1
    26a4:	0c 94 96 14 	jmp	0x292c	; 0x292c <__fp_szero>
    26a8:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__fp_nan>

000026ac <__divsf3x>:
    26ac:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__fp_split3>
    26b0:	68 f3       	brcs	.-38     	; 0x268c <__divsf3+0x8>

000026b2 <__divsf3_pse>:
    26b2:	99 23       	and	r25, r25
    26b4:	b1 f3       	breq	.-20     	; 0x26a2 <__divsf3+0x1e>
    26b6:	55 23       	and	r21, r21
    26b8:	91 f3       	breq	.-28     	; 0x269e <__divsf3+0x1a>
    26ba:	95 1b       	sub	r25, r21
    26bc:	55 0b       	sbc	r21, r21
    26be:	bb 27       	eor	r27, r27
    26c0:	aa 27       	eor	r26, r26
    26c2:	62 17       	cp	r22, r18
    26c4:	73 07       	cpc	r23, r19
    26c6:	84 07       	cpc	r24, r20
    26c8:	38 f0       	brcs	.+14     	; 0x26d8 <__divsf3_pse+0x26>
    26ca:	9f 5f       	subi	r25, 0xFF	; 255
    26cc:	5f 4f       	sbci	r21, 0xFF	; 255
    26ce:	22 0f       	add	r18, r18
    26d0:	33 1f       	adc	r19, r19
    26d2:	44 1f       	adc	r20, r20
    26d4:	aa 1f       	adc	r26, r26
    26d6:	a9 f3       	breq	.-22     	; 0x26c2 <__divsf3_pse+0x10>
    26d8:	35 d0       	rcall	.+106    	; 0x2744 <__divsf3_pse+0x92>
    26da:	0e 2e       	mov	r0, r30
    26dc:	3a f0       	brmi	.+14     	; 0x26ec <__divsf3_pse+0x3a>
    26de:	e0 e8       	ldi	r30, 0x80	; 128
    26e0:	32 d0       	rcall	.+100    	; 0x2746 <__divsf3_pse+0x94>
    26e2:	91 50       	subi	r25, 0x01	; 1
    26e4:	50 40       	sbci	r21, 0x00	; 0
    26e6:	e6 95       	lsr	r30
    26e8:	00 1c       	adc	r0, r0
    26ea:	ca f7       	brpl	.-14     	; 0x26de <__divsf3_pse+0x2c>
    26ec:	2b d0       	rcall	.+86     	; 0x2744 <__divsf3_pse+0x92>
    26ee:	fe 2f       	mov	r31, r30
    26f0:	29 d0       	rcall	.+82     	; 0x2744 <__divsf3_pse+0x92>
    26f2:	66 0f       	add	r22, r22
    26f4:	77 1f       	adc	r23, r23
    26f6:	88 1f       	adc	r24, r24
    26f8:	bb 1f       	adc	r27, r27
    26fa:	26 17       	cp	r18, r22
    26fc:	37 07       	cpc	r19, r23
    26fe:	48 07       	cpc	r20, r24
    2700:	ab 07       	cpc	r26, r27
    2702:	b0 e8       	ldi	r27, 0x80	; 128
    2704:	09 f0       	breq	.+2      	; 0x2708 <__divsf3_pse+0x56>
    2706:	bb 0b       	sbc	r27, r27
    2708:	80 2d       	mov	r24, r0
    270a:	bf 01       	movw	r22, r30
    270c:	ff 27       	eor	r31, r31
    270e:	93 58       	subi	r25, 0x83	; 131
    2710:	5f 4f       	sbci	r21, 0xFF	; 255
    2712:	3a f0       	brmi	.+14     	; 0x2722 <__divsf3_pse+0x70>
    2714:	9e 3f       	cpi	r25, 0xFE	; 254
    2716:	51 05       	cpc	r21, r1
    2718:	78 f0       	brcs	.+30     	; 0x2738 <__divsf3_pse+0x86>
    271a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__fp_inf>
    271e:	0c 94 96 14 	jmp	0x292c	; 0x292c <__fp_szero>
    2722:	5f 3f       	cpi	r21, 0xFF	; 255
    2724:	e4 f3       	brlt	.-8      	; 0x271e <__divsf3_pse+0x6c>
    2726:	98 3e       	cpi	r25, 0xE8	; 232
    2728:	d4 f3       	brlt	.-12     	; 0x271e <__divsf3_pse+0x6c>
    272a:	86 95       	lsr	r24
    272c:	77 95       	ror	r23
    272e:	67 95       	ror	r22
    2730:	b7 95       	ror	r27
    2732:	f7 95       	ror	r31
    2734:	9f 5f       	subi	r25, 0xFF	; 255
    2736:	c9 f7       	brne	.-14     	; 0x272a <__divsf3_pse+0x78>
    2738:	88 0f       	add	r24, r24
    273a:	91 1d       	adc	r25, r1
    273c:	96 95       	lsr	r25
    273e:	87 95       	ror	r24
    2740:	97 f9       	bld	r25, 7
    2742:	08 95       	ret
    2744:	e1 e0       	ldi	r30, 0x01	; 1
    2746:	66 0f       	add	r22, r22
    2748:	77 1f       	adc	r23, r23
    274a:	88 1f       	adc	r24, r24
    274c:	bb 1f       	adc	r27, r27
    274e:	62 17       	cp	r22, r18
    2750:	73 07       	cpc	r23, r19
    2752:	84 07       	cpc	r24, r20
    2754:	ba 07       	cpc	r27, r26
    2756:	20 f0       	brcs	.+8      	; 0x2760 <__divsf3_pse+0xae>
    2758:	62 1b       	sub	r22, r18
    275a:	73 0b       	sbc	r23, r19
    275c:	84 0b       	sbc	r24, r20
    275e:	ba 0b       	sbc	r27, r26
    2760:	ee 1f       	adc	r30, r30
    2762:	88 f7       	brcc	.-30     	; 0x2746 <__divsf3_pse+0x94>
    2764:	e0 95       	com	r30
    2766:	08 95       	ret

00002768 <__fixsfsi>:
    2768:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fixunssfsi>
    276c:	68 94       	set
    276e:	b1 11       	cpse	r27, r1
    2770:	0c 94 96 14 	jmp	0x292c	; 0x292c <__fp_szero>
    2774:	08 95       	ret

00002776 <__fixunssfsi>:
    2776:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__fp_splitA>
    277a:	88 f0       	brcs	.+34     	; 0x279e <__fixunssfsi+0x28>
    277c:	9f 57       	subi	r25, 0x7F	; 127
    277e:	98 f0       	brcs	.+38     	; 0x27a6 <__fixunssfsi+0x30>
    2780:	b9 2f       	mov	r27, r25
    2782:	99 27       	eor	r25, r25
    2784:	b7 51       	subi	r27, 0x17	; 23
    2786:	b0 f0       	brcs	.+44     	; 0x27b4 <__fixunssfsi+0x3e>
    2788:	e1 f0       	breq	.+56     	; 0x27c2 <__fixunssfsi+0x4c>
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	88 1f       	adc	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	1a f0       	brmi	.+6      	; 0x279a <__fixunssfsi+0x24>
    2794:	ba 95       	dec	r27
    2796:	c9 f7       	brne	.-14     	; 0x278a <__fixunssfsi+0x14>
    2798:	14 c0       	rjmp	.+40     	; 0x27c2 <__fixunssfsi+0x4c>
    279a:	b1 30       	cpi	r27, 0x01	; 1
    279c:	91 f0       	breq	.+36     	; 0x27c2 <__fixunssfsi+0x4c>
    279e:	0e 94 95 14 	call	0x292a	; 0x292a <__fp_zero>
    27a2:	b1 e0       	ldi	r27, 0x01	; 1
    27a4:	08 95       	ret
    27a6:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_zero>
    27aa:	67 2f       	mov	r22, r23
    27ac:	78 2f       	mov	r23, r24
    27ae:	88 27       	eor	r24, r24
    27b0:	b8 5f       	subi	r27, 0xF8	; 248
    27b2:	39 f0       	breq	.+14     	; 0x27c2 <__fixunssfsi+0x4c>
    27b4:	b9 3f       	cpi	r27, 0xF9	; 249
    27b6:	cc f3       	brlt	.-14     	; 0x27aa <__fixunssfsi+0x34>
    27b8:	86 95       	lsr	r24
    27ba:	77 95       	ror	r23
    27bc:	67 95       	ror	r22
    27be:	b3 95       	inc	r27
    27c0:	d9 f7       	brne	.-10     	; 0x27b8 <__fixunssfsi+0x42>
    27c2:	3e f4       	brtc	.+14     	; 0x27d2 <__fixunssfsi+0x5c>
    27c4:	90 95       	com	r25
    27c6:	80 95       	com	r24
    27c8:	70 95       	com	r23
    27ca:	61 95       	neg	r22
    27cc:	7f 4f       	sbci	r23, 0xFF	; 255
    27ce:	8f 4f       	sbci	r24, 0xFF	; 255
    27d0:	9f 4f       	sbci	r25, 0xFF	; 255
    27d2:	08 95       	ret

000027d4 <__floatunsisf>:
    27d4:	e8 94       	clt
    27d6:	09 c0       	rjmp	.+18     	; 0x27ea <__floatsisf+0x12>

000027d8 <__floatsisf>:
    27d8:	97 fb       	bst	r25, 7
    27da:	3e f4       	brtc	.+14     	; 0x27ea <__floatsisf+0x12>
    27dc:	90 95       	com	r25
    27de:	80 95       	com	r24
    27e0:	70 95       	com	r23
    27e2:	61 95       	neg	r22
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
    27e6:	8f 4f       	sbci	r24, 0xFF	; 255
    27e8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ea:	99 23       	and	r25, r25
    27ec:	a9 f0       	breq	.+42     	; 0x2818 <__floatsisf+0x40>
    27ee:	f9 2f       	mov	r31, r25
    27f0:	96 e9       	ldi	r25, 0x96	; 150
    27f2:	bb 27       	eor	r27, r27
    27f4:	93 95       	inc	r25
    27f6:	f6 95       	lsr	r31
    27f8:	87 95       	ror	r24
    27fa:	77 95       	ror	r23
    27fc:	67 95       	ror	r22
    27fe:	b7 95       	ror	r27
    2800:	f1 11       	cpse	r31, r1
    2802:	f8 cf       	rjmp	.-16     	; 0x27f4 <__floatsisf+0x1c>
    2804:	fa f4       	brpl	.+62     	; 0x2844 <__floatsisf+0x6c>
    2806:	bb 0f       	add	r27, r27
    2808:	11 f4       	brne	.+4      	; 0x280e <__floatsisf+0x36>
    280a:	60 ff       	sbrs	r22, 0
    280c:	1b c0       	rjmp	.+54     	; 0x2844 <__floatsisf+0x6c>
    280e:	6f 5f       	subi	r22, 0xFF	; 255
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	8f 4f       	sbci	r24, 0xFF	; 255
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	16 c0       	rjmp	.+44     	; 0x2844 <__floatsisf+0x6c>
    2818:	88 23       	and	r24, r24
    281a:	11 f0       	breq	.+4      	; 0x2820 <__floatsisf+0x48>
    281c:	96 e9       	ldi	r25, 0x96	; 150
    281e:	11 c0       	rjmp	.+34     	; 0x2842 <__floatsisf+0x6a>
    2820:	77 23       	and	r23, r23
    2822:	21 f0       	breq	.+8      	; 0x282c <__floatsisf+0x54>
    2824:	9e e8       	ldi	r25, 0x8E	; 142
    2826:	87 2f       	mov	r24, r23
    2828:	76 2f       	mov	r23, r22
    282a:	05 c0       	rjmp	.+10     	; 0x2836 <__floatsisf+0x5e>
    282c:	66 23       	and	r22, r22
    282e:	71 f0       	breq	.+28     	; 0x284c <__floatsisf+0x74>
    2830:	96 e8       	ldi	r25, 0x86	; 134
    2832:	86 2f       	mov	r24, r22
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	2a f0       	brmi	.+10     	; 0x2844 <__floatsisf+0x6c>
    283a:	9a 95       	dec	r25
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	88 1f       	adc	r24, r24
    2842:	da f7       	brpl	.-10     	; 0x283a <__floatsisf+0x62>
    2844:	88 0f       	add	r24, r24
    2846:	96 95       	lsr	r25
    2848:	87 95       	ror	r24
    284a:	97 f9       	bld	r25, 7
    284c:	08 95       	ret

0000284e <__fp_cmp>:
    284e:	99 0f       	add	r25, r25
    2850:	00 08       	sbc	r0, r0
    2852:	55 0f       	add	r21, r21
    2854:	aa 0b       	sbc	r26, r26
    2856:	e0 e8       	ldi	r30, 0x80	; 128
    2858:	fe ef       	ldi	r31, 0xFE	; 254
    285a:	16 16       	cp	r1, r22
    285c:	17 06       	cpc	r1, r23
    285e:	e8 07       	cpc	r30, r24
    2860:	f9 07       	cpc	r31, r25
    2862:	c0 f0       	brcs	.+48     	; 0x2894 <__fp_cmp+0x46>
    2864:	12 16       	cp	r1, r18
    2866:	13 06       	cpc	r1, r19
    2868:	e4 07       	cpc	r30, r20
    286a:	f5 07       	cpc	r31, r21
    286c:	98 f0       	brcs	.+38     	; 0x2894 <__fp_cmp+0x46>
    286e:	62 1b       	sub	r22, r18
    2870:	73 0b       	sbc	r23, r19
    2872:	84 0b       	sbc	r24, r20
    2874:	95 0b       	sbc	r25, r21
    2876:	39 f4       	brne	.+14     	; 0x2886 <__fp_cmp+0x38>
    2878:	0a 26       	eor	r0, r26
    287a:	61 f0       	breq	.+24     	; 0x2894 <__fp_cmp+0x46>
    287c:	23 2b       	or	r18, r19
    287e:	24 2b       	or	r18, r20
    2880:	25 2b       	or	r18, r21
    2882:	21 f4       	brne	.+8      	; 0x288c <__fp_cmp+0x3e>
    2884:	08 95       	ret
    2886:	0a 26       	eor	r0, r26
    2888:	09 f4       	brne	.+2      	; 0x288c <__fp_cmp+0x3e>
    288a:	a1 40       	sbci	r26, 0x01	; 1
    288c:	a6 95       	lsr	r26
    288e:	8f ef       	ldi	r24, 0xFF	; 255
    2890:	81 1d       	adc	r24, r1
    2892:	81 1d       	adc	r24, r1
    2894:	08 95       	ret

00002896 <__fp_inf>:
    2896:	97 f9       	bld	r25, 7
    2898:	9f 67       	ori	r25, 0x7F	; 127
    289a:	80 e8       	ldi	r24, 0x80	; 128
    289c:	70 e0       	ldi	r23, 0x00	; 0
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	08 95       	ret

000028a2 <__fp_nan>:
    28a2:	9f ef       	ldi	r25, 0xFF	; 255
    28a4:	80 ec       	ldi	r24, 0xC0	; 192
    28a6:	08 95       	ret

000028a8 <__fp_pscA>:
    28a8:	00 24       	eor	r0, r0
    28aa:	0a 94       	dec	r0
    28ac:	16 16       	cp	r1, r22
    28ae:	17 06       	cpc	r1, r23
    28b0:	18 06       	cpc	r1, r24
    28b2:	09 06       	cpc	r0, r25
    28b4:	08 95       	ret

000028b6 <__fp_pscB>:
    28b6:	00 24       	eor	r0, r0
    28b8:	0a 94       	dec	r0
    28ba:	12 16       	cp	r1, r18
    28bc:	13 06       	cpc	r1, r19
    28be:	14 06       	cpc	r1, r20
    28c0:	05 06       	cpc	r0, r21
    28c2:	08 95       	ret

000028c4 <__fp_round>:
    28c4:	09 2e       	mov	r0, r25
    28c6:	03 94       	inc	r0
    28c8:	00 0c       	add	r0, r0
    28ca:	11 f4       	brne	.+4      	; 0x28d0 <__fp_round+0xc>
    28cc:	88 23       	and	r24, r24
    28ce:	52 f0       	brmi	.+20     	; 0x28e4 <__fp_round+0x20>
    28d0:	bb 0f       	add	r27, r27
    28d2:	40 f4       	brcc	.+16     	; 0x28e4 <__fp_round+0x20>
    28d4:	bf 2b       	or	r27, r31
    28d6:	11 f4       	brne	.+4      	; 0x28dc <__fp_round+0x18>
    28d8:	60 ff       	sbrs	r22, 0
    28da:	04 c0       	rjmp	.+8      	; 0x28e4 <__fp_round+0x20>
    28dc:	6f 5f       	subi	r22, 0xFF	; 255
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	8f 4f       	sbci	r24, 0xFF	; 255
    28e2:	9f 4f       	sbci	r25, 0xFF	; 255
    28e4:	08 95       	ret

000028e6 <__fp_split3>:
    28e6:	57 fd       	sbrc	r21, 7
    28e8:	90 58       	subi	r25, 0x80	; 128
    28ea:	44 0f       	add	r20, r20
    28ec:	55 1f       	adc	r21, r21
    28ee:	59 f0       	breq	.+22     	; 0x2906 <__fp_splitA+0x10>
    28f0:	5f 3f       	cpi	r21, 0xFF	; 255
    28f2:	71 f0       	breq	.+28     	; 0x2910 <__fp_splitA+0x1a>
    28f4:	47 95       	ror	r20

000028f6 <__fp_splitA>:
    28f6:	88 0f       	add	r24, r24
    28f8:	97 fb       	bst	r25, 7
    28fa:	99 1f       	adc	r25, r25
    28fc:	61 f0       	breq	.+24     	; 0x2916 <__fp_splitA+0x20>
    28fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2900:	79 f0       	breq	.+30     	; 0x2920 <__fp_splitA+0x2a>
    2902:	87 95       	ror	r24
    2904:	08 95       	ret
    2906:	12 16       	cp	r1, r18
    2908:	13 06       	cpc	r1, r19
    290a:	14 06       	cpc	r1, r20
    290c:	55 1f       	adc	r21, r21
    290e:	f2 cf       	rjmp	.-28     	; 0x28f4 <__fp_split3+0xe>
    2910:	46 95       	lsr	r20
    2912:	f1 df       	rcall	.-30     	; 0x28f6 <__fp_splitA>
    2914:	08 c0       	rjmp	.+16     	; 0x2926 <__fp_splitA+0x30>
    2916:	16 16       	cp	r1, r22
    2918:	17 06       	cpc	r1, r23
    291a:	18 06       	cpc	r1, r24
    291c:	99 1f       	adc	r25, r25
    291e:	f1 cf       	rjmp	.-30     	; 0x2902 <__fp_splitA+0xc>
    2920:	86 95       	lsr	r24
    2922:	71 05       	cpc	r23, r1
    2924:	61 05       	cpc	r22, r1
    2926:	08 94       	sec
    2928:	08 95       	ret

0000292a <__fp_zero>:
    292a:	e8 94       	clt

0000292c <__fp_szero>:
    292c:	bb 27       	eor	r27, r27
    292e:	66 27       	eor	r22, r22
    2930:	77 27       	eor	r23, r23
    2932:	cb 01       	movw	r24, r22
    2934:	97 f9       	bld	r25, 7
    2936:	08 95       	ret

00002938 <__gesf2>:
    2938:	0e 94 27 14 	call	0x284e	; 0x284e <__fp_cmp>
    293c:	08 f4       	brcc	.+2      	; 0x2940 <__gesf2+0x8>
    293e:	8f ef       	ldi	r24, 0xFF	; 255
    2940:	08 95       	ret

00002942 <__mulsf3>:
    2942:	0e 94 b4 14 	call	0x2968	; 0x2968 <__mulsf3x>
    2946:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__fp_round>
    294a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__fp_pscA>
    294e:	38 f0       	brcs	.+14     	; 0x295e <__mulsf3+0x1c>
    2950:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fp_pscB>
    2954:	20 f0       	brcs	.+8      	; 0x295e <__mulsf3+0x1c>
    2956:	95 23       	and	r25, r21
    2958:	11 f0       	breq	.+4      	; 0x295e <__mulsf3+0x1c>
    295a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__fp_inf>
    295e:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__fp_nan>
    2962:	11 24       	eor	r1, r1
    2964:	0c 94 96 14 	jmp	0x292c	; 0x292c <__fp_szero>

00002968 <__mulsf3x>:
    2968:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__fp_split3>
    296c:	70 f3       	brcs	.-36     	; 0x294a <__mulsf3+0x8>

0000296e <__mulsf3_pse>:
    296e:	95 9f       	mul	r25, r21
    2970:	c1 f3       	breq	.-16     	; 0x2962 <__mulsf3+0x20>
    2972:	95 0f       	add	r25, r21
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	55 1f       	adc	r21, r21
    2978:	62 9f       	mul	r22, r18
    297a:	f0 01       	movw	r30, r0
    297c:	72 9f       	mul	r23, r18
    297e:	bb 27       	eor	r27, r27
    2980:	f0 0d       	add	r31, r0
    2982:	b1 1d       	adc	r27, r1
    2984:	63 9f       	mul	r22, r19
    2986:	aa 27       	eor	r26, r26
    2988:	f0 0d       	add	r31, r0
    298a:	b1 1d       	adc	r27, r1
    298c:	aa 1f       	adc	r26, r26
    298e:	64 9f       	mul	r22, r20
    2990:	66 27       	eor	r22, r22
    2992:	b0 0d       	add	r27, r0
    2994:	a1 1d       	adc	r26, r1
    2996:	66 1f       	adc	r22, r22
    2998:	82 9f       	mul	r24, r18
    299a:	22 27       	eor	r18, r18
    299c:	b0 0d       	add	r27, r0
    299e:	a1 1d       	adc	r26, r1
    29a0:	62 1f       	adc	r22, r18
    29a2:	73 9f       	mul	r23, r19
    29a4:	b0 0d       	add	r27, r0
    29a6:	a1 1d       	adc	r26, r1
    29a8:	62 1f       	adc	r22, r18
    29aa:	83 9f       	mul	r24, r19
    29ac:	a0 0d       	add	r26, r0
    29ae:	61 1d       	adc	r22, r1
    29b0:	22 1f       	adc	r18, r18
    29b2:	74 9f       	mul	r23, r20
    29b4:	33 27       	eor	r19, r19
    29b6:	a0 0d       	add	r26, r0
    29b8:	61 1d       	adc	r22, r1
    29ba:	23 1f       	adc	r18, r19
    29bc:	84 9f       	mul	r24, r20
    29be:	60 0d       	add	r22, r0
    29c0:	21 1d       	adc	r18, r1
    29c2:	82 2f       	mov	r24, r18
    29c4:	76 2f       	mov	r23, r22
    29c6:	6a 2f       	mov	r22, r26
    29c8:	11 24       	eor	r1, r1
    29ca:	9f 57       	subi	r25, 0x7F	; 127
    29cc:	50 40       	sbci	r21, 0x00	; 0
    29ce:	9a f0       	brmi	.+38     	; 0x29f6 <__mulsf3_pse+0x88>
    29d0:	f1 f0       	breq	.+60     	; 0x2a0e <__mulsf3_pse+0xa0>
    29d2:	88 23       	and	r24, r24
    29d4:	4a f0       	brmi	.+18     	; 0x29e8 <__mulsf3_pse+0x7a>
    29d6:	ee 0f       	add	r30, r30
    29d8:	ff 1f       	adc	r31, r31
    29da:	bb 1f       	adc	r27, r27
    29dc:	66 1f       	adc	r22, r22
    29de:	77 1f       	adc	r23, r23
    29e0:	88 1f       	adc	r24, r24
    29e2:	91 50       	subi	r25, 0x01	; 1
    29e4:	50 40       	sbci	r21, 0x00	; 0
    29e6:	a9 f7       	brne	.-22     	; 0x29d2 <__mulsf3_pse+0x64>
    29e8:	9e 3f       	cpi	r25, 0xFE	; 254
    29ea:	51 05       	cpc	r21, r1
    29ec:	80 f0       	brcs	.+32     	; 0x2a0e <__mulsf3_pse+0xa0>
    29ee:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__fp_inf>
    29f2:	0c 94 96 14 	jmp	0x292c	; 0x292c <__fp_szero>
    29f6:	5f 3f       	cpi	r21, 0xFF	; 255
    29f8:	e4 f3       	brlt	.-8      	; 0x29f2 <__mulsf3_pse+0x84>
    29fa:	98 3e       	cpi	r25, 0xE8	; 232
    29fc:	d4 f3       	brlt	.-12     	; 0x29f2 <__mulsf3_pse+0x84>
    29fe:	86 95       	lsr	r24
    2a00:	77 95       	ror	r23
    2a02:	67 95       	ror	r22
    2a04:	b7 95       	ror	r27
    2a06:	f7 95       	ror	r31
    2a08:	e7 95       	ror	r30
    2a0a:	9f 5f       	subi	r25, 0xFF	; 255
    2a0c:	c1 f7       	brne	.-16     	; 0x29fe <__mulsf3_pse+0x90>
    2a0e:	fe 2b       	or	r31, r30
    2a10:	88 0f       	add	r24, r24
    2a12:	91 1d       	adc	r25, r1
    2a14:	96 95       	lsr	r25
    2a16:	87 95       	ror	r24
    2a18:	97 f9       	bld	r25, 7
    2a1a:	08 95       	ret

00002a1c <initVariant>:
    2a1c:	08 95       	ret

00002a1e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2a1e:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <init>

	initVariant();
    2a22:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2a26:	0e 94 bd 07 	call	0xf7a	; 0xf7a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2a2a:	c0 e0       	ldi	r28, 0x00	; 0
    2a2c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2a2e:	0e 94 0d 09 	call	0x121a	; 0x121a <loop>
		if (serialEventRun) serialEventRun();
    2a32:	20 97       	sbiw	r28, 0x00	; 0
    2a34:	e1 f3       	breq	.-8      	; 0x2a2e <main+0x10>
    2a36:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2a3a:	f9 cf       	rjmp	.-14     	; 0x2a2e <main+0x10>

00002a3c <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2a3c:	cf 92       	push	r12
    2a3e:	df 92       	push	r13
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	6c 01       	movw	r12, r24
    2a4e:	7a 01       	movw	r14, r20
    2a50:	8b 01       	movw	r16, r22
    2a52:	c0 e0       	ldi	r28, 0x00	; 0
    2a54:	d0 e0       	ldi	r29, 0x00	; 0
    2a56:	ce 15       	cp	r28, r14
    2a58:	df 05       	cpc	r29, r15
    2a5a:	81 f0       	breq	.+32     	; 0x2a7c <_ZN5Print5writeEPKhj+0x40>
    2a5c:	d8 01       	movw	r26, r16
    2a5e:	6d 91       	ld	r22, X+
    2a60:	8d 01       	movw	r16, r26
    2a62:	d6 01       	movw	r26, r12
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	01 90       	ld	r0, Z+
    2a6a:	f0 81       	ld	r31, Z
    2a6c:	e0 2d       	mov	r30, r0
    2a6e:	c6 01       	movw	r24, r12
    2a70:	09 95       	icall
    2a72:	89 2b       	or	r24, r25
    2a74:	11 f0       	breq	.+4      	; 0x2a7a <_ZN5Print5writeEPKhj+0x3e>
    2a76:	21 96       	adiw	r28, 0x01	; 1
    2a78:	ee cf       	rjmp	.-36     	; 0x2a56 <_ZN5Print5writeEPKhj+0x1a>
    2a7a:	7e 01       	movw	r14, r28
    2a7c:	c7 01       	movw	r24, r14
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	ff 90       	pop	r15
    2a88:	ef 90       	pop	r14
    2a8a:	df 90       	pop	r13
    2a8c:	cf 90       	pop	r12
    2a8e:	08 95       	ret

00002a90 <_ZN5Print5writeEPKc>:
    2a90:	61 15       	cp	r22, r1
    2a92:	71 05       	cpc	r23, r1
    2a94:	79 f0       	breq	.+30     	; 0x2ab4 <_ZN5Print5writeEPKc+0x24>
    2a96:	fb 01       	movw	r30, r22
    2a98:	01 90       	ld	r0, Z+
    2a9a:	00 20       	and	r0, r0
    2a9c:	e9 f7       	brne	.-6      	; 0x2a98 <_ZN5Print5writeEPKc+0x8>
    2a9e:	31 97       	sbiw	r30, 0x01	; 1
    2aa0:	af 01       	movw	r20, r30
    2aa2:	46 1b       	sub	r20, r22
    2aa4:	57 0b       	sbc	r21, r23
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	ed 91       	ld	r30, X+
    2aaa:	fc 91       	ld	r31, X
    2aac:	02 80       	ldd	r0, Z+2	; 0x02
    2aae:	f3 81       	ldd	r31, Z+3	; 0x03
    2ab0:	e0 2d       	mov	r30, r0
    2ab2:	09 94       	ijmp
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	08 95       	ret

00002aba <_ZN5Print5printEPK19__FlashStringHelper>:
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	8c 01       	movw	r16, r24
    2ac8:	7b 01       	movw	r14, r22
    2aca:	c0 e0       	ldi	r28, 0x00	; 0
    2acc:	d0 e0       	ldi	r29, 0x00	; 0
    2ace:	f7 01       	movw	r30, r14
    2ad0:	ec 0f       	add	r30, r28
    2ad2:	fd 1f       	adc	r31, r29
    2ad4:	64 91       	lpm	r22, Z
    2ad6:	66 23       	and	r22, r22
    2ad8:	61 f0       	breq	.+24     	; 0x2af2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2ada:	d8 01       	movw	r26, r16
    2adc:	ed 91       	ld	r30, X+
    2ade:	fc 91       	ld	r31, X
    2ae0:	01 90       	ld	r0, Z+
    2ae2:	f0 81       	ld	r31, Z
    2ae4:	e0 2d       	mov	r30, r0
    2ae6:	c8 01       	movw	r24, r16
    2ae8:	09 95       	icall
    2aea:	89 2b       	or	r24, r25
    2aec:	11 f0       	breq	.+4      	; 0x2af2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2aee:	21 96       	adiw	r28, 0x01	; 1
    2af0:	ee cf       	rjmp	.-36     	; 0x2ace <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2af2:	ce 01       	movw	r24, r28
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	ff 90       	pop	r15
    2afe:	ef 90       	pop	r14
    2b00:	08 95       	ret

00002b02 <_ZN5Print5printEc>:
    2b02:	dc 01       	movw	r26, r24
    2b04:	ed 91       	ld	r30, X+
    2b06:	fc 91       	ld	r31, X
    2b08:	01 90       	ld	r0, Z+
    2b0a:	f0 81       	ld	r31, Z
    2b0c:	e0 2d       	mov	r30, r0
    2b0e:	09 94       	ijmp

00002b10 <_ZN5Print11printNumberEmh>:
    2b10:	8f 92       	push	r8
    2b12:	9f 92       	push	r9
    2b14:	af 92       	push	r10
    2b16:	bf 92       	push	r11
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	a1 97       	sbiw	r28, 0x21	; 33
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	7c 01       	movw	r14, r24
    2b36:	fa 01       	movw	r30, r20
    2b38:	cb 01       	movw	r24, r22
    2b3a:	19 a2       	std	Y+33, r1	; 0x21
    2b3c:	22 30       	cpi	r18, 0x02	; 2
    2b3e:	08 f4       	brcc	.+2      	; 0x2b42 <_ZN5Print11printNumberEmh+0x32>
    2b40:	2a e0       	ldi	r18, 0x0A	; 10
    2b42:	8e 01       	movw	r16, r28
    2b44:	0f 5d       	subi	r16, 0xDF	; 223
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	82 2e       	mov	r8, r18
    2b4a:	91 2c       	mov	r9, r1
    2b4c:	a1 2c       	mov	r10, r1
    2b4e:	b1 2c       	mov	r11, r1
    2b50:	bf 01       	movw	r22, r30
    2b52:	a5 01       	movw	r20, r10
    2b54:	94 01       	movw	r18, r8
    2b56:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__udivmodsi4>
    2b5a:	f9 01       	movw	r30, r18
    2b5c:	ca 01       	movw	r24, r20
    2b5e:	01 50       	subi	r16, 0x01	; 1
    2b60:	11 09       	sbc	r17, r1
    2b62:	6a 30       	cpi	r22, 0x0A	; 10
    2b64:	10 f4       	brcc	.+4      	; 0x2b6a <_ZN5Print11printNumberEmh+0x5a>
    2b66:	60 5d       	subi	r22, 0xD0	; 208
    2b68:	01 c0       	rjmp	.+2      	; 0x2b6c <_ZN5Print11printNumberEmh+0x5c>
    2b6a:	69 5c       	subi	r22, 0xC9	; 201
    2b6c:	d8 01       	movw	r26, r16
    2b6e:	6c 93       	st	X, r22
    2b70:	23 2b       	or	r18, r19
    2b72:	24 2b       	or	r18, r20
    2b74:	25 2b       	or	r18, r21
    2b76:	61 f7       	brne	.-40     	; 0x2b50 <_ZN5Print11printNumberEmh+0x40>
    2b78:	b8 01       	movw	r22, r16
    2b7a:	c7 01       	movw	r24, r14
    2b7c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <_ZN5Print5writeEPKc>
    2b80:	a1 96       	adiw	r28, 0x21	; 33
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	bf 90       	pop	r11
    2b9a:	af 90       	pop	r10
    2b9c:	9f 90       	pop	r9
    2b9e:	8f 90       	pop	r8
    2ba0:	08 95       	ret

00002ba2 <_ZN5Print5printEmi>:
    2ba2:	21 15       	cp	r18, r1
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	41 f4       	brne	.+16     	; 0x2bb8 <_ZN5Print5printEmi+0x16>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	ed 91       	ld	r30, X+
    2bac:	fc 91       	ld	r31, X
    2bae:	01 90       	ld	r0, Z+
    2bb0:	f0 81       	ld	r31, Z
    2bb2:	e0 2d       	mov	r30, r0
    2bb4:	64 2f       	mov	r22, r20
    2bb6:	09 94       	ijmp
    2bb8:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <_ZN5Print11printNumberEmh>

00002bbc <_ZN5Print5printEji>:
    2bbc:	9a 01       	movw	r18, r20
    2bbe:	ab 01       	movw	r20, r22
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <_ZN5Print5printEmi>

00002bc8 <_ZN5Print5printEli>:
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	21 15       	cp	r18, r1
    2bda:	31 05       	cpc	r19, r1
    2bdc:	81 f4       	brne	.+32     	; 0x2bfe <_ZN5Print5printEli+0x36>
    2bde:	dc 01       	movw	r26, r24
    2be0:	ed 91       	ld	r30, X+
    2be2:	fc 91       	ld	r31, X
    2be4:	01 90       	ld	r0, Z+
    2be6:	f0 81       	ld	r31, Z
    2be8:	e0 2d       	mov	r30, r0
    2bea:	64 2f       	mov	r22, r20
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	ff 90       	pop	r15
    2bf6:	ef 90       	pop	r14
    2bf8:	df 90       	pop	r13
    2bfa:	cf 90       	pop	r12
    2bfc:	09 94       	ijmp
    2bfe:	2a 30       	cpi	r18, 0x0A	; 10
    2c00:	31 05       	cpc	r19, r1
    2c02:	01 f5       	brne	.+64     	; 0x2c44 <_ZN5Print5printEli+0x7c>
    2c04:	77 ff       	sbrs	r23, 7
    2c06:	1d c0       	rjmp	.+58     	; 0x2c42 <_ZN5Print5printEli+0x7a>
    2c08:	6a 01       	movw	r12, r20
    2c0a:	7b 01       	movw	r14, r22
    2c0c:	ec 01       	movw	r28, r24
    2c0e:	6d e2       	ldi	r22, 0x2D	; 45
    2c10:	0e 94 81 15 	call	0x2b02	; 0x2b02 <_ZN5Print5printEc>
    2c14:	8c 01       	movw	r16, r24
    2c16:	44 27       	eor	r20, r20
    2c18:	55 27       	eor	r21, r21
    2c1a:	ba 01       	movw	r22, r20
    2c1c:	4c 19       	sub	r20, r12
    2c1e:	5d 09       	sbc	r21, r13
    2c20:	6e 09       	sbc	r22, r14
    2c22:	7f 09       	sbc	r23, r15
    2c24:	2a e0       	ldi	r18, 0x0A	; 10
    2c26:	ce 01       	movw	r24, r28
    2c28:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN5Print11printNumberEmh>
    2c2c:	80 0f       	add	r24, r16
    2c2e:	91 1f       	adc	r25, r17
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	1f 91       	pop	r17
    2c36:	0f 91       	pop	r16
    2c38:	ff 90       	pop	r15
    2c3a:	ef 90       	pop	r14
    2c3c:	df 90       	pop	r13
    2c3e:	cf 90       	pop	r12
    2c40:	08 95       	ret
    2c42:	2a e0       	ldi	r18, 0x0A	; 10
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	ef 90       	pop	r14
    2c50:	df 90       	pop	r13
    2c52:	cf 90       	pop	r12
    2c54:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <_ZN5Print11printNumberEmh>

00002c58 <_ZN5Print5printEii>:
    2c58:	9a 01       	movw	r18, r20
    2c5a:	ab 01       	movw	r20, r22
    2c5c:	77 0f       	add	r23, r23
    2c5e:	66 0b       	sbc	r22, r22
    2c60:	77 0b       	sbc	r23, r23
    2c62:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <_ZN5Print5printEli>

00002c66 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2c66:	7f 92       	push	r7
    2c68:	8f 92       	push	r8
    2c6a:	9f 92       	push	r9
    2c6c:	af 92       	push	r10
    2c6e:	bf 92       	push	r11
    2c70:	cf 92       	push	r12
    2c72:	df 92       	push	r13
    2c74:	ef 92       	push	r14
    2c76:	ff 92       	push	r15
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	8c 01       	movw	r16, r24
    2c82:	6a 01       	movw	r12, r20
    2c84:	7b 01       	movw	r14, r22
    2c86:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2c88:	9a 01       	movw	r18, r20
    2c8a:	ab 01       	movw	r20, r22
    2c8c:	c7 01       	movw	r24, r14
    2c8e:	b6 01       	movw	r22, r12
    2c90:	0e 94 cb 18 	call	0x3196	; 0x3196 <__unordsf2>
    2c94:	88 23       	and	r24, r24
    2c96:	19 f0       	breq	.+6      	; 0x2c9e <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2c98:	67 e8       	ldi	r22, 0x87	; 135
    2c9a:	71 e0       	ldi	r23, 0x01	; 1
    2c9c:	27 c0       	rjmp	.+78     	; 0x2cec <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2c9e:	46 01       	movw	r8, r12
    2ca0:	57 01       	movw	r10, r14
    2ca2:	e8 94       	clt
    2ca4:	b7 f8       	bld	r11, 7
    2ca6:	2f ef       	ldi	r18, 0xFF	; 255
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	5f e7       	ldi	r21, 0x7F	; 127
    2cae:	c5 01       	movw	r24, r10
    2cb0:	b4 01       	movw	r22, r8
    2cb2:	0e 94 cb 18 	call	0x3196	; 0x3196 <__unordsf2>
    2cb6:	81 11       	cpse	r24, r1
    2cb8:	0d c0       	rjmp	.+26     	; 0x2cd4 <_ZN5Print10printFloatEdh+0x6e>
    2cba:	2f ef       	ldi	r18, 0xFF	; 255
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	5f e7       	ldi	r21, 0x7F	; 127
    2cc2:	c5 01       	movw	r24, r10
    2cc4:	b4 01       	movw	r22, r8
    2cc6:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
    2cca:	18 16       	cp	r1, r24
    2ccc:	1c f4       	brge	.+6      	; 0x2cd4 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2cce:	6b e8       	ldi	r22, 0x8B	; 139
    2cd0:	71 e0       	ldi	r23, 0x01	; 1
    2cd2:	0c c0       	rjmp	.+24     	; 0x2cec <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2cd4:	2f ef       	ldi	r18, 0xFF	; 255
    2cd6:	3f ef       	ldi	r19, 0xFF	; 255
    2cd8:	4f e7       	ldi	r20, 0x7F	; 127
    2cda:	5f e4       	ldi	r21, 0x4F	; 79
    2cdc:	c7 01       	movw	r24, r14
    2cde:	b6 01       	movw	r22, r12
    2ce0:	0e 94 9c 14 	call	0x2938	; 0x2938 <__gesf2>
    2ce4:	18 16       	cp	r1, r24
    2ce6:	94 f4       	brge	.+36     	; 0x2d0c <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2ce8:	6f e8       	ldi	r22, 0x8F	; 143
    2cea:	71 e0       	ldi	r23, 0x01	; 1
    2cec:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	1f 91       	pop	r17
    2cf4:	0f 91       	pop	r16
    2cf6:	ff 90       	pop	r15
    2cf8:	ef 90       	pop	r14
    2cfa:	df 90       	pop	r13
    2cfc:	cf 90       	pop	r12
    2cfe:	bf 90       	pop	r11
    2d00:	af 90       	pop	r10
    2d02:	9f 90       	pop	r9
    2d04:	8f 90       	pop	r8
    2d06:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2d08:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2d0c:	2f ef       	ldi	r18, 0xFF	; 255
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	4f e7       	ldi	r20, 0x7F	; 127
    2d12:	5f ec       	ldi	r21, 0xCF	; 207
    2d14:	c7 01       	movw	r24, r14
    2d16:	b6 01       	movw	r22, r12
    2d18:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
    2d1c:	87 fd       	sbrc	r24, 7
    2d1e:	e4 cf       	rjmp	.-56     	; 0x2ce8 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	a9 01       	movw	r20, r18
    2d26:	c7 01       	movw	r24, r14
    2d28:	b6 01       	movw	r22, r12
    2d2a:	0e 94 3d 13 	call	0x267a	; 0x267a <__cmpsf2>
    2d2e:	87 ff       	sbrs	r24, 7
    2d30:	0a c0       	rjmp	.+20     	; 0x2d46 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2d32:	6d e2       	ldi	r22, 0x2D	; 45
    2d34:	c8 01       	movw	r24, r16
    2d36:	0e 94 81 15 	call	0x2b02	; 0x2b02 <_ZN5Print5printEc>
    2d3a:	ec 01       	movw	r28, r24
     number = -number;
    2d3c:	f7 fa       	bst	r15, 7
    2d3e:	f0 94       	com	r15
    2d40:	f7 f8       	bld	r15, 7
    2d42:	f0 94       	com	r15
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2d46:	c0 e0       	ldi	r28, 0x00	; 0
    2d48:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2d4a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	70 e0       	ldi	r23, 0x00	; 0
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2d54:	7b 14       	cp	r7, r11
    2d56:	41 f0       	breq	.+16     	; 0x2d68 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 e2       	ldi	r20, 0x20	; 32
    2d5e:	51 e4       	ldi	r21, 0x41	; 65
    2d60:	0e 94 42 13 	call	0x2684	; 0x2684 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2d64:	b3 94       	inc	r11
    2d66:	f6 cf       	rjmp	.-20     	; 0x2d54 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2d68:	a7 01       	movw	r20, r14
    2d6a:	96 01       	movw	r18, r12
    2d6c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__addsf3>
    2d70:	6b 01       	movw	r12, r22
    2d72:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2d74:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fixunssfsi>
    2d78:	4b 01       	movw	r8, r22
    2d7a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2d7c:	2a e0       	ldi	r18, 0x0A	; 10
    2d7e:	ab 01       	movw	r20, r22
    2d80:	bc 01       	movw	r22, r24
    2d82:	c8 01       	movw	r24, r16
    2d84:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2d88:	c8 0f       	add	r28, r24
    2d8a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2d8c:	77 20       	and	r7, r7
    2d8e:	b9 f1       	breq	.+110    	; 0x2dfe <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2d90:	c5 01       	movw	r24, r10
    2d92:	b4 01       	movw	r22, r8
    2d94:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatunsisf>
    2d98:	9b 01       	movw	r18, r22
    2d9a:	ac 01       	movw	r20, r24
    2d9c:	c7 01       	movw	r24, r14
    2d9e:	b6 01       	movw	r22, r12
    2da0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__subsf3>
    2da4:	6b 01       	movw	r12, r22
    2da6:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2da8:	6e e2       	ldi	r22, 0x2E	; 46
    2daa:	c8 01       	movw	r24, r16
    2dac:	0e 94 81 15 	call	0x2b02	; 0x2b02 <_ZN5Print5printEc>
    2db0:	c8 0f       	add	r28, r24
    2db2:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e2       	ldi	r20, 0x20	; 32
    2dba:	51 e4       	ldi	r21, 0x41	; 65
    2dbc:	c7 01       	movw	r24, r14
    2dbe:	b6 01       	movw	r22, r12
    2dc0:	0e 94 a1 14 	call	0x2942	; 0x2942 <__mulsf3>
    2dc4:	4b 01       	movw	r8, r22
    2dc6:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2dc8:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fixunssfsi>
    2dcc:	6b 01       	movw	r12, r22
    2dce:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2dd0:	4a e0       	ldi	r20, 0x0A	; 10
    2dd2:	50 e0       	ldi	r21, 0x00	; 0
    2dd4:	c8 01       	movw	r24, r16
    2dd6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <_ZN5Print5printEji>
    2dda:	c8 0f       	add	r28, r24
    2ddc:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2dde:	b6 01       	movw	r22, r12
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatunsisf>
    2de8:	9b 01       	movw	r18, r22
    2dea:	ac 01       	movw	r20, r24
    2dec:	c5 01       	movw	r24, r10
    2dee:	b4 01       	movw	r22, r8
    2df0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__subsf3>
    2df4:	6b 01       	movw	r12, r22
    2df6:	7c 01       	movw	r14, r24
    2df8:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2dfa:	71 10       	cpse	r7, r1
    2dfc:	db cf       	rjmp	.-74     	; 0x2db4 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2dfe:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	ff 90       	pop	r15
    2e0a:	ef 90       	pop	r14
    2e0c:	df 90       	pop	r13
    2e0e:	cf 90       	pop	r12
    2e10:	bf 90       	pop	r11
    2e12:	af 90       	pop	r10
    2e14:	9f 90       	pop	r9
    2e16:	8f 90       	pop	r8
    2e18:	7f 90       	pop	r7
    2e1a:	08 95       	ret

00002e1c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2e1c:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <_ZN5Print10printFloatEdh>

00002e20 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2e20:	1f 92       	push	r1
    2e22:	0f 92       	push	r0
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	0f 92       	push	r0
    2e28:	11 24       	eor	r1, r1
    2e2a:	2f 93       	push	r18
    2e2c:	3f 93       	push	r19
    2e2e:	8f 93       	push	r24
    2e30:	9f 93       	push	r25
    2e32:	af 93       	push	r26
    2e34:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2e36:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <timer0_millis>
    2e3a:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <timer0_millis+0x1>
    2e3e:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <timer0_millis+0x2>
    2e42:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2e46:	30 91 0c 03 	lds	r19, 0x030C	; 0x80030c <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2e4a:	23 e0       	ldi	r18, 0x03	; 3
    2e4c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2e4e:	2d 37       	cpi	r18, 0x7D	; 125
    2e50:	20 f4       	brcc	.+8      	; 0x2e5a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2e52:	01 96       	adiw	r24, 0x01	; 1
    2e54:	a1 1d       	adc	r26, r1
    2e56:	b1 1d       	adc	r27, r1
    2e58:	05 c0       	rjmp	.+10     	; 0x2e64 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2e5a:	26 e8       	ldi	r18, 0x86	; 134
    2e5c:	23 0f       	add	r18, r19
		m += 1;
    2e5e:	02 96       	adiw	r24, 0x02	; 2
    2e60:	a1 1d       	adc	r26, r1
    2e62:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2e64:	20 93 0c 03 	sts	0x030C, r18	; 0x80030c <timer0_fract>
	timer0_millis = m;
    2e68:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <timer0_millis>
    2e6c:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <timer0_millis+0x1>
    2e70:	a0 93 0f 03 	sts	0x030F, r26	; 0x80030f <timer0_millis+0x2>
    2e74:	b0 93 10 03 	sts	0x0310, r27	; 0x800310 <timer0_millis+0x3>
	timer0_overflow_count++;
    2e78:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <timer0_overflow_count>
    2e7c:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <timer0_overflow_count+0x1>
    2e80:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <timer0_overflow_count+0x2>
    2e84:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <timer0_overflow_count+0x3>
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	a1 1d       	adc	r26, r1
    2e8c:	b1 1d       	adc	r27, r1
    2e8e:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <timer0_overflow_count>
    2e92:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <timer0_overflow_count+0x1>
    2e96:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <timer0_overflow_count+0x2>
    2e9a:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <timer0_overflow_count+0x3>
}
    2e9e:	bf 91       	pop	r27
    2ea0:	af 91       	pop	r26
    2ea2:	9f 91       	pop	r25
    2ea4:	8f 91       	pop	r24
    2ea6:	3f 91       	pop	r19
    2ea8:	2f 91       	pop	r18
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	0f 90       	pop	r0
    2eb0:	1f 90       	pop	r1
    2eb2:	18 95       	reti

00002eb4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2eb4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2eb6:	f8 94       	cli
	m = timer0_millis;
    2eb8:	60 91 0d 03 	lds	r22, 0x030D	; 0x80030d <timer0_millis>
    2ebc:	70 91 0e 03 	lds	r23, 0x030E	; 0x80030e <timer0_millis+0x1>
    2ec0:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <timer0_millis+0x2>
    2ec4:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <timer0_millis+0x3>
	SREG = oldSREG;
    2ec8:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2eca:	08 95       	ret

00002ecc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2ecc:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2ece:	f8 94       	cli
	m = timer0_overflow_count;
    2ed0:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <timer0_overflow_count>
    2ed4:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <timer0_overflow_count+0x1>
    2ed8:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <timer0_overflow_count+0x2>
    2edc:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2ee0:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2ee2:	a8 9b       	sbis	0x15, 0	; 21
    2ee4:	05 c0       	rjmp	.+10     	; 0x2ef0 <micros+0x24>
    2ee6:	2f 3f       	cpi	r18, 0xFF	; 255
    2ee8:	19 f0       	breq	.+6      	; 0x2ef0 <micros+0x24>
		m++;
    2eea:	01 96       	adiw	r24, 0x01	; 1
    2eec:	a1 1d       	adc	r26, r1
    2eee:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2ef0:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2ef2:	ba 2f       	mov	r27, r26
    2ef4:	a9 2f       	mov	r26, r25
    2ef6:	98 2f       	mov	r25, r24
    2ef8:	88 27       	eor	r24, r24
    2efa:	82 0f       	add	r24, r18
    2efc:	91 1d       	adc	r25, r1
    2efe:	a1 1d       	adc	r26, r1
    2f00:	b1 1d       	adc	r27, r1
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	42 e0       	ldi	r20, 0x02	; 2
    2f08:	66 0f       	add	r22, r22
    2f0a:	77 1f       	adc	r23, r23
    2f0c:	88 1f       	adc	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	4a 95       	dec	r20
    2f12:	d1 f7       	brne	.-12     	; 0x2f08 <micros+0x3c>
}
    2f14:	08 95       	ret

00002f16 <delay>:

void delay(unsigned long ms)
{
    2f16:	8f 92       	push	r8
    2f18:	9f 92       	push	r9
    2f1a:	af 92       	push	r10
    2f1c:	bf 92       	push	r11
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	6b 01       	movw	r12, r22
    2f28:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2f2a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <micros>
    2f2e:	4b 01       	movw	r8, r22
    2f30:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2f32:	c1 14       	cp	r12, r1
    2f34:	d1 04       	cpc	r13, r1
    2f36:	e1 04       	cpc	r14, r1
    2f38:	f1 04       	cpc	r15, r1
    2f3a:	01 f1       	breq	.+64     	; 0x2f7c <delay+0x66>
		yield();
    2f3c:	0e 94 ca 18 	call	0x3194	; 0x3194 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2f40:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <micros>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	88 19       	sub	r24, r8
    2f4a:	99 09       	sbc	r25, r9
    2f4c:	aa 09       	sbc	r26, r10
    2f4e:	bb 09       	sbc	r27, r11
    2f50:	88 3e       	cpi	r24, 0xE8	; 232
    2f52:	93 40       	sbci	r25, 0x03	; 3
    2f54:	a1 05       	cpc	r26, r1
    2f56:	b1 05       	cpc	r27, r1
    2f58:	60 f3       	brcs	.-40     	; 0x2f32 <delay+0x1c>
			ms--;
    2f5a:	21 e0       	ldi	r18, 0x01	; 1
    2f5c:	c2 1a       	sub	r12, r18
    2f5e:	d1 08       	sbc	r13, r1
    2f60:	e1 08       	sbc	r14, r1
    2f62:	f1 08       	sbc	r15, r1
			start += 1000;
    2f64:	88 ee       	ldi	r24, 0xE8	; 232
    2f66:	88 0e       	add	r8, r24
    2f68:	83 e0       	ldi	r24, 0x03	; 3
    2f6a:	98 1e       	adc	r9, r24
    2f6c:	a1 1c       	adc	r10, r1
    2f6e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2f70:	c1 14       	cp	r12, r1
    2f72:	d1 04       	cpc	r13, r1
    2f74:	e1 04       	cpc	r14, r1
    2f76:	f1 04       	cpc	r15, r1
    2f78:	19 f7       	brne	.-58     	; 0x2f40 <delay+0x2a>
    2f7a:	db cf       	rjmp	.-74     	; 0x2f32 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	df 90       	pop	r13
    2f82:	cf 90       	pop	r12
    2f84:	bf 90       	pop	r11
    2f86:	af 90       	pop	r10
    2f88:	9f 90       	pop	r9
    2f8a:	8f 90       	pop	r8
    2f8c:	08 95       	ret

00002f8e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2f8e:	82 30       	cpi	r24, 0x02	; 2
    2f90:	91 05       	cpc	r25, r1
    2f92:	38 f0       	brcs	.+14     	; 0x2fa2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2f9c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <delayMicroseconds+0x10>
    2fa2:	08 95       	ret

00002fa4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2fa4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2fa6:	84 b5       	in	r24, 0x24	; 36
    2fa8:	82 60       	ori	r24, 0x02	; 2
    2faa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2fac:	84 b5       	in	r24, 0x24	; 36
    2fae:	81 60       	ori	r24, 0x01	; 1
    2fb0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2fb2:	85 b5       	in	r24, 0x25	; 37
    2fb4:	82 60       	ori	r24, 0x02	; 2
    2fb6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2fb8:	85 b5       	in	r24, 0x25	; 37
    2fba:	81 60       	ori	r24, 0x01	; 1
    2fbc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2fbe:	ee e6       	ldi	r30, 0x6E	; 110
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	81 60       	ori	r24, 0x01	; 1
    2fc6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2fc8:	e1 e8       	ldi	r30, 0x81	; 129
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2fce:	80 81       	ld	r24, Z
    2fd0:	82 60       	ori	r24, 0x02	; 2
    2fd2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2fd4:	80 81       	ld	r24, Z
    2fd6:	81 60       	ori	r24, 0x01	; 1
    2fd8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2fda:	e0 e8       	ldi	r30, 0x80	; 128
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	81 60       	ori	r24, 0x01	; 1
    2fe2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2fe4:	e1 eb       	ldi	r30, 0xB1	; 177
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	84 60       	ori	r24, 0x04	; 4
    2fec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2fee:	e0 eb       	ldi	r30, 0xB0	; 176
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	81 60       	ori	r24, 0x01	; 1
    2ff6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2ff8:	ea e7       	ldi	r30, 0x7A	; 122
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	84 60       	ori	r24, 0x04	; 4
    3000:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3002:	80 81       	ld	r24, Z
    3004:	82 60       	ori	r24, 0x02	; 2
    3006:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3008:	80 81       	ld	r24, Z
    300a:	81 60       	ori	r24, 0x01	; 1
    300c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    300e:	80 81       	ld	r24, Z
    3010:	80 68       	ori	r24, 0x80	; 128
    3012:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3014:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3018:	08 95       	ret

0000301a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    301a:	83 30       	cpi	r24, 0x03	; 3
    301c:	81 f0       	breq	.+32     	; 0x303e <turnOffPWM+0x24>
    301e:	28 f4       	brcc	.+10     	; 0x302a <turnOffPWM+0x10>
    3020:	81 30       	cpi	r24, 0x01	; 1
    3022:	99 f0       	breq	.+38     	; 0x304a <turnOffPWM+0x30>
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	a1 f0       	breq	.+40     	; 0x3050 <turnOffPWM+0x36>
    3028:	08 95       	ret
    302a:	87 30       	cpi	r24, 0x07	; 7
    302c:	a9 f0       	breq	.+42     	; 0x3058 <turnOffPWM+0x3e>
    302e:	88 30       	cpi	r24, 0x08	; 8
    3030:	b9 f0       	breq	.+46     	; 0x3060 <turnOffPWM+0x46>
    3032:	84 30       	cpi	r24, 0x04	; 4
    3034:	d1 f4       	brne	.+52     	; 0x306a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3036:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    303a:	8f 7d       	andi	r24, 0xDF	; 223
    303c:	03 c0       	rjmp	.+6      	; 0x3044 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    303e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3042:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3044:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3048:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    304a:	84 b5       	in	r24, 0x24	; 36
    304c:	8f 77       	andi	r24, 0x7F	; 127
    304e:	02 c0       	rjmp	.+4      	; 0x3054 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3050:	84 b5       	in	r24, 0x24	; 36
    3052:	8f 7d       	andi	r24, 0xDF	; 223
    3054:	84 bd       	out	0x24, r24	; 36
    3056:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3058:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    305c:	8f 77       	andi	r24, 0x7F	; 127
    305e:	03 c0       	rjmp	.+6      	; 0x3066 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3060:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3064:	8f 7d       	andi	r24, 0xDF	; 223
    3066:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    306a:	08 95       	ret

0000306c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	fc 01       	movw	r30, r24
    3074:	e2 55       	subi	r30, 0x52	; 82
    3076:	fe 4f       	sbci	r31, 0xFE	; 254
    3078:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    307a:	fc 01       	movw	r30, r24
    307c:	ee 53       	subi	r30, 0x3E	; 62
    307e:	fe 4f       	sbci	r31, 0xFE	; 254
    3080:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3082:	88 23       	and	r24, r24
    3084:	61 f1       	breq	.+88     	; 0x30de <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	fc 01       	movw	r30, r24
    308e:	e6 51       	subi	r30, 0x16	; 22
    3090:	fe 4f       	sbci	r31, 0xFE	; 254
    3092:	c5 91       	lpm	r28, Z+
    3094:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3096:	fc 01       	movw	r30, r24
    3098:	e0 52       	subi	r30, 0x20	; 32
    309a:	fe 4f       	sbci	r31, 0xFE	; 254
    309c:	a5 91       	lpm	r26, Z+
    309e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    30a0:	61 11       	cpse	r22, r1
    30a2:	09 c0       	rjmp	.+18     	; 0x30b6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    30a4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    30a6:	f8 94       	cli
		*reg &= ~bit;
    30a8:	88 81       	ld	r24, Y
    30aa:	20 95       	com	r18
    30ac:	82 23       	and	r24, r18
    30ae:	88 83       	st	Y, r24
		*out &= ~bit;
    30b0:	ec 91       	ld	r30, X
    30b2:	2e 23       	and	r18, r30
    30b4:	0b c0       	rjmp	.+22     	; 0x30cc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    30b6:	62 30       	cpi	r22, 0x02	; 2
    30b8:	61 f4       	brne	.+24     	; 0x30d2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    30ba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    30bc:	f8 94       	cli
		*reg &= ~bit;
    30be:	88 81       	ld	r24, Y
    30c0:	32 2f       	mov	r19, r18
    30c2:	30 95       	com	r19
    30c4:	83 23       	and	r24, r19
    30c6:	88 83       	st	Y, r24
		*out |= bit;
    30c8:	ec 91       	ld	r30, X
    30ca:	2e 2b       	or	r18, r30
    30cc:	2c 93       	st	X, r18
		SREG = oldSREG;
    30ce:	9f bf       	out	0x3f, r25	; 63
    30d0:	06 c0       	rjmp	.+12     	; 0x30de <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    30d2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    30d4:	f8 94       	cli
		*reg |= bit;
    30d6:	e8 81       	ld	r30, Y
    30d8:	2e 2b       	or	r18, r30
    30da:	28 83       	st	Y, r18
		SREG = oldSREG;
    30dc:	8f bf       	out	0x3f, r24	; 63
	}
}
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	08 95       	ret

000030e4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    30e4:	1f 93       	push	r17
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	f9 01       	movw	r30, r18
    30f0:	e6 56       	subi	r30, 0x66	; 102
    30f2:	fe 4f       	sbci	r31, 0xFE	; 254
    30f4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    30f6:	f9 01       	movw	r30, r18
    30f8:	e2 55       	subi	r30, 0x52	; 82
    30fa:	fe 4f       	sbci	r31, 0xFE	; 254
    30fc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    30fe:	f9 01       	movw	r30, r18
    3100:	ee 53       	subi	r30, 0x3E	; 62
    3102:	fe 4f       	sbci	r31, 0xFE	; 254
    3104:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3106:	cc 23       	and	r28, r28
    3108:	c1 f0       	breq	.+48     	; 0x313a <digitalWrite+0x56>
    310a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    310c:	81 11       	cpse	r24, r1
    310e:	0e 94 0d 18 	call	0x301a	; 0x301a <turnOffPWM>

	out = portOutputRegister(port);
    3112:	ec 2f       	mov	r30, r28
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	ee 0f       	add	r30, r30
    3118:	ff 1f       	adc	r31, r31
    311a:	e0 52       	subi	r30, 0x20	; 32
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	a5 91       	lpm	r26, Z+
    3120:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3122:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3124:	f8 94       	cli

	if (val == LOW) {
    3126:	11 11       	cpse	r17, r1
    3128:	04 c0       	rjmp	.+8      	; 0x3132 <digitalWrite+0x4e>
		*out &= ~bit;
    312a:	8c 91       	ld	r24, X
    312c:	d0 95       	com	r29
    312e:	d8 23       	and	r29, r24
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3132:	ec 91       	ld	r30, X
    3134:	de 2b       	or	r29, r30
    3136:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3138:	9f bf       	out	0x3f, r25	; 63
}
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	1f 91       	pop	r17
    3140:	08 95       	ret

00003142 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3146:	28 2f       	mov	r18, r24
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	f9 01       	movw	r30, r18
    314c:	e6 56       	subi	r30, 0x66	; 102
    314e:	fe 4f       	sbci	r31, 0xFE	; 254
    3150:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3152:	f9 01       	movw	r30, r18
    3154:	e2 55       	subi	r30, 0x52	; 82
    3156:	fe 4f       	sbci	r31, 0xFE	; 254
    3158:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    315a:	f9 01       	movw	r30, r18
    315c:	ee 53       	subi	r30, 0x3E	; 62
    315e:	fe 4f       	sbci	r31, 0xFE	; 254
    3160:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    3162:	cc 23       	and	r28, r28
    3164:	91 f0       	breq	.+36     	; 0x318a <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3166:	81 11       	cpse	r24, r1
    3168:	0e 94 0d 18 	call	0x301a	; 0x301a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    316c:	ec 2f       	mov	r30, r28
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	ee 0f       	add	r30, r30
    3172:	ff 1f       	adc	r31, r31
    3174:	ea 52       	subi	r30, 0x2A	; 42
    3176:	fe 4f       	sbci	r31, 0xFE	; 254
    3178:	a5 91       	lpm	r26, Z+
    317a:	b4 91       	lpm	r27, Z
    317c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    317e:	ed 23       	and	r30, r29
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	21 f4       	brne	.+8      	; 0x318e <digitalRead+0x4c>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	02 c0       	rjmp	.+4      	; 0x318e <digitalRead+0x4c>
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    318e:	df 91       	pop	r29
    3190:	cf 91       	pop	r28
    3192:	08 95       	ret

00003194 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3194:	08 95       	ret

00003196 <__unordsf2>:
    3196:	0e 94 27 14 	call	0x284e	; 0x284e <__fp_cmp>
    319a:	88 0b       	sbc	r24, r24
    319c:	99 0b       	sbc	r25, r25
    319e:	08 95       	ret

000031a0 <__udivmodsi4>:
    31a0:	a1 e2       	ldi	r26, 0x21	; 33
    31a2:	1a 2e       	mov	r1, r26
    31a4:	aa 1b       	sub	r26, r26
    31a6:	bb 1b       	sub	r27, r27
    31a8:	fd 01       	movw	r30, r26
    31aa:	0d c0       	rjmp	.+26     	; 0x31c6 <__udivmodsi4_ep>

000031ac <__udivmodsi4_loop>:
    31ac:	aa 1f       	adc	r26, r26
    31ae:	bb 1f       	adc	r27, r27
    31b0:	ee 1f       	adc	r30, r30
    31b2:	ff 1f       	adc	r31, r31
    31b4:	a2 17       	cp	r26, r18
    31b6:	b3 07       	cpc	r27, r19
    31b8:	e4 07       	cpc	r30, r20
    31ba:	f5 07       	cpc	r31, r21
    31bc:	20 f0       	brcs	.+8      	; 0x31c6 <__udivmodsi4_ep>
    31be:	a2 1b       	sub	r26, r18
    31c0:	b3 0b       	sbc	r27, r19
    31c2:	e4 0b       	sbc	r30, r20
    31c4:	f5 0b       	sbc	r31, r21

000031c6 <__udivmodsi4_ep>:
    31c6:	66 1f       	adc	r22, r22
    31c8:	77 1f       	adc	r23, r23
    31ca:	88 1f       	adc	r24, r24
    31cc:	99 1f       	adc	r25, r25
    31ce:	1a 94       	dec	r1
    31d0:	69 f7       	brne	.-38     	; 0x31ac <__udivmodsi4_loop>
    31d2:	60 95       	com	r22
    31d4:	70 95       	com	r23
    31d6:	80 95       	com	r24
    31d8:	90 95       	com	r25
    31da:	9b 01       	movw	r18, r22
    31dc:	ac 01       	movw	r20, r24
    31de:	bd 01       	movw	r22, r26
    31e0:	cf 01       	movw	r24, r30
    31e2:	08 95       	ret

000031e4 <__tablejump2__>:
    31e4:	ee 0f       	add	r30, r30
    31e6:	ff 1f       	adc	r31, r31
    31e8:	05 90       	lpm	r0, Z+
    31ea:	f4 91       	lpm	r31, Z
    31ec:	e0 2d       	mov	r30, r0
    31ee:	09 94       	ijmp

000031f0 <eeprom_read_byte>:
    31f0:	f9 99       	sbic	0x1f, 1	; 31
    31f2:	fe cf       	rjmp	.-4      	; 0x31f0 <eeprom_read_byte>
    31f4:	92 bd       	out	0x22, r25	; 34
    31f6:	81 bd       	out	0x21, r24	; 33
    31f8:	f8 9a       	sbi	0x1f, 0	; 31
    31fa:	99 27       	eor	r25, r25
    31fc:	80 b5       	in	r24, 0x20	; 32
    31fe:	08 95       	ret

00003200 <eeprom_read_dword>:
    3200:	a6 e1       	ldi	r26, 0x16	; 22
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	44 e0       	ldi	r20, 0x04	; 4
    3206:	50 e0       	ldi	r21, 0x00	; 0
    3208:	0c 94 26 19 	jmp	0x324c	; 0x324c <eeprom_read_blraw>

0000320c <eeprom_update_byte>:
    320c:	26 2f       	mov	r18, r22

0000320e <eeprom_update_r18>:
    320e:	f9 99       	sbic	0x1f, 1	; 31
    3210:	fe cf       	rjmp	.-4      	; 0x320e <eeprom_update_r18>
    3212:	92 bd       	out	0x22, r25	; 34
    3214:	81 bd       	out	0x21, r24	; 33
    3216:	f8 9a       	sbi	0x1f, 0	; 31
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	00 b4       	in	r0, 0x20	; 32
    321c:	02 16       	cp	r0, r18
    321e:	39 f0       	breq	.+14     	; 0x322e <eeprom_update_r18+0x20>
    3220:	1f ba       	out	0x1f, r1	; 31
    3222:	20 bd       	out	0x20, r18	; 32
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	fa 9a       	sbi	0x1f, 2	; 31
    322a:	f9 9a       	sbi	0x1f, 1	; 31
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	08 95       	ret

00003230 <eeprom_update_dword>:
    3230:	03 96       	adiw	r24, 0x03	; 3
    3232:	27 2f       	mov	r18, r23
    3234:	0e 94 07 19 	call	0x320e	; 0x320e <eeprom_update_r18>
    3238:	0e 94 06 19 	call	0x320c	; 0x320c <eeprom_update_byte>
    323c:	25 2f       	mov	r18, r21
    323e:	0e 94 07 19 	call	0x320e	; 0x320e <eeprom_update_r18>
    3242:	24 2f       	mov	r18, r20
    3244:	0c 94 07 19 	jmp	0x320e	; 0x320e <eeprom_update_r18>

00003248 <eeprom_read_block>:
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22

0000324c <eeprom_read_blraw>:
    324c:	fc 01       	movw	r30, r24
    324e:	f9 99       	sbic	0x1f, 1	; 31
    3250:	fe cf       	rjmp	.-4      	; 0x324e <eeprom_read_blraw+0x2>
    3252:	06 c0       	rjmp	.+12     	; 0x3260 <eeprom_read_blraw+0x14>
    3254:	f2 bd       	out	0x22, r31	; 34
    3256:	e1 bd       	out	0x21, r30	; 33
    3258:	f8 9a       	sbi	0x1f, 0	; 31
    325a:	31 96       	adiw	r30, 0x01	; 1
    325c:	00 b4       	in	r0, 0x20	; 32
    325e:	0d 92       	st	X+, r0
    3260:	41 50       	subi	r20, 0x01	; 1
    3262:	50 40       	sbci	r21, 0x00	; 0
    3264:	b8 f7       	brcc	.-18     	; 0x3254 <eeprom_read_blraw+0x8>
    3266:	08 95       	ret

00003268 <_exit>:
    3268:	f8 94       	cli

0000326a <__stop_program>:
    326a:	ff cf       	rjmp	.-2      	; 0x326a <__stop_program>
