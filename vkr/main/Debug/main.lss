
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00004850  00004904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004850  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  008001e0  008001e0  000049e4  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  000049e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00004a0c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a3c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000820  00000000  00000000  00004a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010db1  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d7a  00000000  00000000  00016051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004783  00000000  00000000  00018dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015d4  00000000  00000000  0001d550  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000040c1  00000000  00000000  0001eb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000603e  00000000  00000000  00022be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000758  00000000  00000000  00028c23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__ctors_end>
       4:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
       8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
       c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      10:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      14:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      18:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      1c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      20:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      24:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      28:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      2c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      30:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      34:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      38:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      3c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      40:	0c 94 02 22 	jmp	0x4404	; 0x4404 <__vector_16>
      44:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      48:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__vector_18>
      4c:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <__vector_19>
      50:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      54:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      58:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      5c:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      60:	0c 94 07 19 	jmp	0x320e	; 0x320e <__vector_24>
      64:	0c 94 16 03 	jmp	0x62c	; 0x62c <__bad_interrupt>
      68:	65 08       	sbc	r6, r5
      6a:	a4 07       	cpc	r26, r20
      6c:	aa 07       	cpc	r26, r26
      6e:	a7 07       	cpc	r26, r23
      70:	ad 07       	cpc	r26, r29
      72:	b0 07       	cpc	r27, r16
      74:	b3 07       	cpc	r27, r19
      76:	b6 07       	cpc	r27, r22
      78:	b9 07       	cpc	r27, r25
      7a:	bc 07       	cpc	r27, r28
      7c:	77 08       	sbc	r7, r7
      7e:	77 08       	sbc	r7, r7
      80:	77 08       	sbc	r7, r7
      82:	bf 07       	cpc	r27, r31
      84:	e6 07       	cpc	r30, r22
      86:	0d 08       	sbc	r0, r13
      88:	77 08       	sbc	r7, r7
      8a:	3a 08       	sbc	r3, r10
      8c:	3d 08       	sbc	r3, r13
      8e:	40 08       	sbc	r4, r0
      90:	48 08       	sbc	r4, r8
      92:	4b 08       	sbc	r4, r11
      94:	4e 08       	sbc	r4, r14
      96:	77 08       	sbc	r7, r7
      98:	77 08       	sbc	r7, r7
      9a:	77 08       	sbc	r7, r7
      9c:	77 08       	sbc	r7, r7
      9e:	77 08       	sbc	r7, r7
      a0:	77 08       	sbc	r7, r7
      a2:	77 08       	sbc	r7, r7
      a4:	56 08       	sbc	r5, r6
      a6:	da 09       	sbc	r29, r10
      a8:	f7 09       	sbc	r31, r7
      aa:	f7 09       	sbc	r31, r7
      ac:	48 0a       	sbc	r4, r24
      ae:	48 0a       	sbc	r4, r24
      b0:	48 0a       	sbc	r4, r24
      b2:	48 0a       	sbc	r4, r24
      b4:	48 0a       	sbc	r4, r24
      b6:	48 0a       	sbc	r4, r24
      b8:	f9 09       	sbc	r31, r9
      ba:	59 0b       	sbc	r21, r25
      bc:	59 0b       	sbc	r21, r25
      be:	74 0a       	sbc	r7, r20
      c0:	8c 0a       	sbc	r8, r28
      c2:	a4 0a       	sbc	r10, r20
      c4:	cc 0a       	sbc	r12, r28
      c6:	4b 0b       	sbc	r20, r27
      c8:	4d 0b       	sbc	r20, r29
      ca:	4f 0b       	sbc	r20, r31
      cc:	52 0b       	sbc	r21, r18
      ce:	54 0b       	sbc	r21, r20
      d0:	56 0b       	sbc	r21, r22
      d2:	39 0f       	add	r19, r25
      d4:	4c 0f       	add	r20, r28
      d6:	3c 0f       	add	r19, r28
      d8:	4f 0f       	add	r20, r31
      da:	58 0f       	add	r21, r24
      dc:	61 0f       	add	r22, r17
      de:	6a 0f       	add	r22, r26
      e0:	73 0f       	add	r23, r19
      e2:	7c 0f       	add	r23, r28
      e4:	83 13       	cpse	r24, r19
      e6:	cf 13       	cpse	r28, r31
      e8:	b6 13       	cpse	r27, r22
      ea:	05 14       	cp	r0, r5
      ec:	18 14       	cp	r1, r8
      ee:	2b 14       	cp	r2, r11
      f0:	3e 14       	cp	r3, r14
      f2:	51 14       	cp	r5, r1
      f4:	64 14       	cp	r6, r4
      f6:	e2 13       	cpse	r30, r18

000000f8 <__trampolines_end>:
      f8:	47 41       	sbci	r20, 0x17	; 23
      fa:	49 4e       	sbci	r20, 0xE9	; 233
      fc:	5f 54       	subi	r21, 0x4F	; 79
      fe:	57 4f       	sbci	r21, 0xF7	; 247
     100:	54 48       	sbci	r21, 0x84	; 132
     102:	49 52       	subi	r20, 0x29	; 41
     104:	44 53       	subi	r20, 0x34	; 52
	...

00000107 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_4>:
     107:	47 41 49 4e 5f 53 49 58 54 45 45 4e 00              GAIN_SIXTEEN.

00000114 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_3>:
     114:	47 41 49 4e 5f 45 49 47 48 54 00                    GAIN_EIGHT.

0000011f <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_2>:
     11f:	47 41 49 4e 5f 46 4f 55 52 00                       GAIN_FOUR.

00000129 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_1>:
     129:	47 41 49 4e 5f 54 57 4f 00                          GAIN_TWO.

00000132 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_0>:
     132:	47 41 49 4e 5f 4f 4e 45 00                          GAIN_ONE.

0000013b <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c>:
     13b:	41 44 53 3a 20 00                                   ADS: .

00000141 <_ZZ21button2LongPressStartvE3__c>:
     141:	2a 2a 4d 65 61 73 75 72 65 6d 65 6e 74 20 53 74     **Measurement St
     151:	6f 70 65 64 21 00                                   oped!.

00000157 <_ZZ21button1LongPressStartvE3__c>:
     157:	49 6d 70 65 64 61 6e 63 65 20 73 65 74 75 70 00     Impedance setup.

00000167 <_ZZ12button1ClickvE3__c>:
     167:	2a 2a 4d 65 61 73 75 72 65 6d 65 6e 74 20 53 74     **Measurement St
     177:	61 72 74 65 64 21 00                                arted!.

0000017e <_ZZ14setupImpedancevE3__c_4>:
     17e:	2d 2d 2d 2d 2d 2d 00                                ------.

00000185 <_ZZ14setupImpedancevE3__c_3>:
     185:	2d 2d 2d 65 6e 64 2d 2d 2d 00                       ---end---.

0000018f <_ZZ14setupImpedancevE3__c_2>:
     18f:	52 3d 00                                            R=.

00000192 <_ZZ14setupImpedancevE3__c_1>:
     192:	41 3d 00                                            A=.

00000195 <_ZZ14setupImpedancevE3__c_0>:
     195:	56 3d 00                                            V=.

00000198 <_ZZ14setupImpedancevE3__c>:
     198:	49 6d 70 65 64 61 6e 63 65 20 73 65 74 75 70 00     Impedance setup.

000001a8 <_ZZ12lcdClearCellhhhE3__c>:
     1a8:	20 00                                                .

000001aa <_ZZ22showStaticWindingCharsvE3__c_1>:
     1aa:	45 3d 00                                            E=.

000001ad <_ZZ22showStaticWindingCharsvE3__c_0>:
     1ad:	56 3d 00                                            V=.

000001b0 <_ZZ22showStaticWindingCharsvE3__c>:
     1b0:	49 3d 00                                            I=.

000001b3 <_ZZ22showWindingCharsValueshE3__c_0>:
     1b3:	25 00                                               %.

000001b5 <_ZZ22showWindingCharsValueshE3__c>:
     1b5:	2b 00                                               +.

000001b7 <_ZZ18showStaticAmperagevE3__c_0>:
     1b7:	4d 00                                               M.

000001b9 <_ZZ18showStaticAmperagevE3__c>:
     1b9:	50 00                                               P.

000001bb <_ZZ19displayStaticAsModevE3__c_26>:
     1bb:	53 65 74 75 70 20 72 65 71 75 69 72 65 64 00        Setup required.

000001ca <_ZZ19displayStaticAsModevE3__c_25>:
     1ca:	4f 6f 6f 6f 70 73 21 00                             Oooops!.

000001d2 <_ZZ19displayStaticAsModevE3__c_24>:
     1d2:	42 31 3d 77 6f 72 6b 3b 20 42 32 3d 73 74 6f 70     B1=work; B2=stop
	...

000001e3 <_ZZ19displayStaticAsModevE3__c_23>:
     1e3:	4d 65 61 73 75 72 65 6d 65 6e 74 00                 Measurement.

000001ef <_ZZ19displayStaticAsModevE3__c_22>:
     1ef:	41 43 00                                            AC.

000001f2 <_ZZ19displayStaticAsModevE3__c_21>:
     1f2:	42 43 00                                            BC.

000001f5 <_ZZ19displayStaticAsModevE3__c_20>:
     1f5:	41 42 00                                            AB.

000001f8 <_ZZ19displayStaticAsModevE3__c_19>:
     1f8:	41 43 20 44 00                                      AC D.

000001fd <_ZZ19displayStaticAsModevE3__c_18>:
     1fd:	42 43 20 44 00                                      BC D.

00000202 <_ZZ19displayStaticAsModevE3__c_17>:
     202:	41 42 20 44 00                                      AB D.

00000207 <_ZZ19displayStaticAsModevE3__c_16>:
     207:	46 00                                               F.

00000209 <_ZZ19displayStaticAsModevE3__c_15>:
     209:	65 25 00                                            e%.

0000020c <_ZZ19displayStaticAsModevE3__c_14>:
     20c:	49 33 3d 00                                         I3=.

00000210 <_ZZ19displayStaticAsModevE3__c_13>:
     210:	49 32 3d 00                                         I2=.

00000214 <_ZZ19displayStaticAsModevE3__c_12>:
     214:	49 31 3d 00                                         I1=.

00000218 <_ZZ19displayStaticAsModevE3__c_11>:
     218:	41 43 3d 00                                         AC=.

0000021c <_ZZ19displayStaticAsModevE3__c_10>:
     21c:	42 43 3d 00                                         BC=.

00000220 <_ZZ19displayStaticAsModevE3__c_9>:
     220:	41 42 3d 00                                         AB=.

00000224 <_ZZ19displayStaticAsModevE3__c_8>:
     224:	45 43 6f 75 6e 74 00                                ECount.

0000022b <_ZZ19displayStaticAsModevE3__c_7>:
     22b:	41 6d 20 41 43 00                                   Am AC.

00000231 <_ZZ19displayStaticAsModevE3__c_6>:
     231:	41 6d 20 42 43 00                                   Am BC.

00000237 <_ZZ19displayStaticAsModevE3__c_5>:
     237:	41 6d 20 41 42 00                                   Am AB.

0000023d <_ZZ19displayStaticAsModevE3__c_4>:
     23d:	56 6d 20 41 43 00                                   Vm AC.

00000243 <_ZZ19displayStaticAsModevE3__c_3>:
     243:	56 6d 20 42 43 00                                   Vm BC.

00000249 <_ZZ19displayStaticAsModevE3__c_2>:
     249:	56 6d 20 41 42 00                                   Vm AB.

0000024f <_ZZ19displayStaticAsModevE3__c_1>:
     24f:	56 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     V gain maxV/step
	...

00000260 <_ZZ19displayStaticAsModevE3__c_0>:
     260:	41 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     A gain maxV/step
	...

00000271 <_ZZ19displayStaticAsModevE3__c>:
     271:	43 6f 6e 6e 65 63 74 69 6f 6e 20 74 79 70 65 00     Connection type.

00000281 <_ZZ19lcdPrintCriticalLvlhE3__c>:
     281:	2b 00                                               +.

00000283 <_ZZ27lcdPrinRoundedCurErrorLevelhE3__c>:
     283:	2b 00                                               +.

00000285 <_ZZ20lcdPrintAmperageDiffhE3__c>:
     285:	2b 00                                               +.

00000287 <_ZZ13displayAsModevE3__c_10>:
     287:	23 00                                               #.

00000289 <_ZZ13displayAsModevE3__c_9>:
     289:	23 00                                               #.

0000028b <_ZZ13displayAsModevE3__c_8>:
     28b:	4d 20 00                                            M .

0000028e <_ZZ13displayAsModevE3__c_7>:
     28e:	23 00                                               #.

00000290 <_ZZ13displayAsModevE3__c_6>:
     290:	23 00                                               #.

00000292 <_ZZ13displayAsModevE3__c_5>:
     292:	50 20 00                                            P .

00000295 <_ZZ13displayAsModevE3__c_4>:
     295:	78 00                                               x.

00000297 <_ZZ13displayAsModevE3__c_3>:
     297:	52 33 3d 00                                         R3=.

0000029b <_ZZ13displayAsModevE3__c_2>:
     29b:	52 32 3d 00                                         R2=.

0000029f <_ZZ13displayAsModevE3__c_1>:
     29f:	52 31 3d 00                                         R1=.

000002a3 <_ZZ13displayAsModevE3__c_0>:
     2a3:	54 72 69 61 6e 67 6c 65 00                          Triangle.

000002ac <_ZZ13displayAsModevE3__c>:
     2ac:	53 74 61 72 00                                      Star.

000002b1 <_ZZ12showGainInfovE3__c_4>:
     2b1:	30 2e 32 35 36 20 30 2e 30 30 37 38 31 32 35 00     0.256 0.0078125.

000002c1 <_ZZ12showGainInfovE3__c_3>:
     2c1:	30 2e 35 31 32 20 30 2e 30 31 35 36 32 35 00        0.512 0.015625.

000002d0 <_ZZ12showGainInfovE3__c_2>:
     2d0:	31 2e 30 32 34 20 30 2e 30 33 31 32 35 00           1.024 0.03125.

000002de <_ZZ12showGainInfovE3__c_1>:
     2de:	32 2e 30 34 38 20 30 2e 30 36 32 35 00              2.048 0.0625.

000002eb <_ZZ12showGainInfovE3__c_0>:
     2eb:	34 2e 30 39 36 20 30 2e 31 32 35 00                 4.096 0.125.

000002f7 <_ZZ12showGainInfovE3__c>:
     2f7:	36 2e 31 34 34 20 30 2e 31 38 37 35 00              6.144 0.1875.

00000304 <_ZZ4loopE3__c_11>:
     304:	68 61 2d 68 61 2c 20 69 74 27 73 20 6a 6f 6b 65     ha-ha, it's joke
     314:	2e 20 54 68 65 72 65 20 61 72 65 20 6e 6f 74 20     . There are not 
     324:	65 78 69 73 74 73 20 63 72 69 74 69 63 61 6c 20     exists critical 
     334:	65 72 72 6f 72 00                                   error.

0000033a <_ZZ4loopE3__c_10>:
     33a:	57 41 52 4e 49 4e 47 21 21 21 20 4d 65 61 73 75     WARNING!!! Measu
     34a:	72 65 6d 65 6e 74 20 53 74 6f 70 65 64 20 49 43     rement Stoped IC
     35a:	20 45 58 49 53 54 53 21 00                           EXISTS!.

00000363 <_ZZ4loopE3__c_9>:
     363:	50 72 6f 62 61 62 6c 79 20 65 72 72 6f 72 20 65     Probably error e
     373:	78 69 73 74 73 00                                   xists.

00000379 <_ZZ4loopE3__c_8>:
     379:	2d 2d 2d 65 6e 64 2d 2d 2d 00                       ---end---.

00000383 <_ZZ4loopE3__c_7>:
     383:	65 72 72 6f 72 20 66 75 6c 6c 20 20 20 20 20 20     error full      
     393:	20 20 3d 20 00                                        = .

00000398 <_ZZ4loopE3__c_6>:
     398:	2d 2d 2d 00                                         ---.

0000039c <_ZZ4loopE3__c_5>:
     39c:	65 72 72 6f 72 20 64 69 66 66 20 20 20 20 20 20     error diff      
     3ac:	20 20 3d 20 00                                        = .

000003b1 <_ZZ4loopE3__c_4>:
     3b1:	65 72 72 6f 72 20 70 65 72 63 65 6e 74 20 20 20     error percent   
     3c1:	20 20 3d 20 00                                        = .

000003c6 <_ZZ4loopE3__c_3>:
     3c6:	70 65 72 66 65 63 74 20 61 6d 70 65 72 61 67 65     perfect amperage
     3d6:	20 20 3d 20 00                                        = .

000003db <_ZZ4loopE3__c_2>:
     3db:	6d 65 61 73 75 72 65 64 20 61 6d 70 65 72 61 67     measured amperag
     3eb:	65 20 3d 20 00                                      e = .

000003f0 <_ZZ4loopE3__c_1>:
     3f0:	6d 65 61 73 75 72 65 64 20 76 6f 6c 74 61 67 65     measured voltage
     400:	20 20 3d 20 00                                        = .

00000405 <_ZZ4loopE3__c_0>:
     405:	7c 00                                               |.

00000407 <_ZZ4loopE3__c>:
     407:	57 69 6e 64 69 6e 67 20 7c 00                       Winding |.

00000411 <_ZZ18checkIsReadyToWorkvE3__c>:
     411:	4e 65 65 64 20 73 65 74 75 70 20 70 61 72 61 6d     Need setup param
     421:	73 00                                               s.

00000423 <_ZZ5setupE3__c_19>:
     423:	53 74 61 6e 64 20 62 79 2e 2e 2e 00                 Stand by....

0000042f <_ZZ5setupE3__c_18>:
     42f:	43 6f 6d 70 6c 65 74 65 64 21 00                    Completed!.

0000043a <_ZZ5setupE3__c_17>:
     43a:	44 65 62 75 67 20 6d 6f 64 65 00                    Debug mode.

00000445 <_ZZ5setupE3__c_16>:
     445:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 61 63     amperage_mult_ac
     455:	3a 20 00                                            : .

00000458 <_ZZ5setupE3__c_15>:
     458:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 62 63     amperage_mult_bc
     468:	3a 20 00                                            : .

0000046b <_ZZ5setupE3__c_14>:
     46b:	61 6d 70 65 72 61 67 65 5f 6d 75 6c 74 5f 61 62     amperage_mult_ab
     47b:	3a 20 00                                            : .

0000047e <_ZZ5setupE3__c_13>:
     47e:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 61 63 3a     voltage_mult_ac:
     48e:	20 00                                                .

00000490 <_ZZ5setupE3__c_12>:
     490:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 62 63 3a     voltage_mult_bc:
     4a0:	20 00                                                .

000004a2 <_ZZ5setupE3__c_11>:
     4a2:	76 6f 6c 74 61 67 65 5f 6d 75 6c 74 5f 61 62 3a     voltage_mult_ab:
     4b2:	20 00                                                .

000004b4 <_ZZ5setupE3__c_10>:
     4b4:	69 6d 70 65 64 61 6e 63 65 5f 61 63 3a 20 00        impedance_ac: .

000004c3 <_ZZ5setupE3__c_9>:
     4c3:	69 6d 70 65 64 61 6e 63 65 5f 62 63 3a 20 00        impedance_bc: .

000004d2 <_ZZ5setupE3__c_8>:
     4d2:	69 6d 70 65 64 61 6e 63 65 5f 61 62 3a 20 00        impedance_ab: .

000004e1 <_ZZ5setupE3__c_7>:
     4e1:	63 6f 6e 6e 65 63 74 69 6f 6e 5f 74 79 70 65 3a     connection_type:
     4f1:	20 00                                                .

000004f3 <_ZZ5setupE3__c_6>:
     4f3:	67 61 69 6e 5f 76 6f 6c 74 61 67 65 3a 20 00        gain_voltage: .

00000502 <_ZZ5setupE3__c_5>:
     502:	67 61 69 6e 5f 61 6d 70 65 72 61 67 65 3a 20 00     gain_amperage: .

00000512 <_ZZ5setupE3__c_4>:
     512:	45 45 50 52 4f 4d 20 76 61 6c 75 65 73 3a 00        EEPROM values:.

00000521 <_ZZ5setupE3__c_3>:
     521:	45 45 50 52 4f 4d 20 66 69 72 73 74 20 73 74 61     EEPROM first sta
     531:	72 74 20 77 72 69 74 65 64 21 00                    rt writed!.

0000053c <_ZZ5setupE3__c_2>:
     53c:	42 75 74 74 6f 6e 20 32 20 69 6e 69 74 65 64 21     Button 2 inited!
	...

0000054d <_ZZ5setupE3__c_1>:
     54d:	42 75 74 74 6f 6e 20 31 20 69 6e 69 74 65 64 21     Button 1 inited!
	...

0000055e <_ZZ5setupE3__c_0>:
     55e:	4c 43 44 20 69 6e 69 74 65 64 21 00                 LCD inited!.

0000056a <_ZZ5setupE3__c>:
     56a:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 2e 2e     Initialization..
     57a:	2e 00                                               ..

0000057c <digital_pin_to_timer_PGM>:
     57c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     58c:	00 00 00 00                                         ....

00000590 <digital_pin_to_bit_mask_PGM>:
     590:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     5a0:	04 08 10 20                                         ... 

000005a4 <digital_pin_to_port_PGM>:
     5a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     5b4:	03 03 03 03                                         ....

000005b8 <port_to_input_PGM>:
     5b8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000005c2 <port_to_output_PGM>:
     5c2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005cc <port_to_mode_PGM>:
     5cc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005d6 <__ctors_start>:
     5d6:	d7 14       	cp	r13, r7
     5d8:	9b 1b       	sub	r25, r27
     5da:	80 1f       	adc	r24, r16

000005dc <__ctors_end>:
     5dc:	11 24       	eor	r1, r1
     5de:	1f be       	out	0x3f, r1	; 63
     5e0:	cf ef       	ldi	r28, 0xFF	; 255
     5e2:	d8 e0       	ldi	r29, 0x08	; 8
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	cd bf       	out	0x3d, r28	; 61

000005e8 <__do_copy_data>:
     5e8:	11 e0       	ldi	r17, 0x01	; 1
     5ea:	a0 e0       	ldi	r26, 0x00	; 0
     5ec:	b1 e0       	ldi	r27, 0x01	; 1
     5ee:	e0 e5       	ldi	r30, 0x50	; 80
     5f0:	f8 e4       	ldi	r31, 0x48	; 72
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__do_copy_data+0x10>
     5f4:	05 90       	lpm	r0, Z+
     5f6:	0d 92       	st	X+, r0
     5f8:	a0 3e       	cpi	r26, 0xE0	; 224
     5fa:	b1 07       	cpc	r27, r17
     5fc:	d9 f7       	brne	.-10     	; 0x5f4 <__do_copy_data+0xc>

000005fe <__do_clear_bss>:
     5fe:	23 e0       	ldi	r18, 0x03	; 3
     600:	a0 ee       	ldi	r26, 0xE0	; 224
     602:	b1 e0       	ldi	r27, 0x01	; 1
     604:	01 c0       	rjmp	.+2      	; 0x608 <.do_clear_bss_start>

00000606 <.do_clear_bss_loop>:
     606:	1d 92       	st	X+, r1

00000608 <.do_clear_bss_start>:
     608:	af 3d       	cpi	r26, 0xDF	; 223
     60a:	b2 07       	cpc	r27, r18
     60c:	e1 f7       	brne	.-8      	; 0x606 <.do_clear_bss_loop>

0000060e <__do_global_ctors>:
     60e:	12 e0       	ldi	r17, 0x02	; 2
     610:	ce ee       	ldi	r28, 0xEE	; 238
     612:	d2 e0       	ldi	r29, 0x02	; 2
     614:	04 c0       	rjmp	.+8      	; 0x61e <__do_global_ctors+0x10>
     616:	21 97       	sbiw	r28, 0x01	; 1
     618:	fe 01       	movw	r30, r28
     61a:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__tablejump2__>
     61e:	cb 3e       	cpi	r28, 0xEB	; 235
     620:	d1 07       	cpc	r29, r17
     622:	c9 f7       	brne	.-14     	; 0x616 <__do_global_ctors+0x8>
     624:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <main>
     628:	0c 94 26 24 	jmp	0x484c	; 0x484c <_exit>

0000062c <__bad_interrupt>:
     62c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000630 <_Z18checkIsReadyToWorkv>:
}

/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	c1 e0       	ldi	r28, 0x01	; 1
     636:	d2 e0       	ldi	r29, 0x02	; 2
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
     638:	69 91       	ld	r22, Y+
     63a:	79 91       	ld	r23, Y+
     63c:	89 91       	ld	r24, Y+
     63e:	99 91       	ld	r25, Y+
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	a9 01       	movw	r20, r18
     646:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
     64a:	88 23       	and	r24, r24
     64c:	e1 f0       	breq	.+56     	; 0x686 <_Z18checkIsReadyToWorkv+0x56>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	a9 01       	movw	r20, r18
     654:	6f 89       	ldd	r22, Y+23	; 0x17
     656:	78 8d       	ldd	r23, Y+24	; 0x18
     658:	89 8d       	ldd	r24, Y+25	; 0x19
     65a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     65c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
     660:	88 23       	and	r24, r24
     662:	89 f0       	breq	.+34     	; 0x686 <_Z18checkIsReadyToWorkv+0x56>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	a9 01       	movw	r20, r18
     66a:	6b 85       	ldd	r22, Y+11	; 0x0b
     66c:	7c 85       	ldd	r23, Y+12	; 0x0c
     66e:	8d 85       	ldd	r24, Y+13	; 0x0d
     670:	9e 85       	ldd	r25, Y+14	; 0x0e
     672:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
     676:	88 23       	and	r24, r24
     678:	31 f0       	breq	.+12     	; 0x686 <_Z18checkIsReadyToWorkv+0x56>
/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	cd 30       	cpi	r28, 0x0D	; 13
     67e:	d8 07       	cpc	r29, r24
     680:	d9 f6       	brne	.-74     	; 0x638 <_Z18checkIsReadyToWorkv+0x8>

/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
	bool isReadyToWork = true;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	01 c0       	rjmp	.+2      	; 0x688 <_Z18checkIsReadyToWorkv+0x58>
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
			isReadyToWork = false;
     686:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
		
	settings.isSetupMode = false;
     688:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <settings+0x12>
	if (isReadyToWork) {
     68c:	88 23       	and	r24, r24
     68e:	31 f0       	breq	.+12     	; 0x69c <_Z18checkIsReadyToWorkv+0x6c>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
     690:	8e e1       	ldi	r24, 0x1E	; 30
     692:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
	}
}
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret
		
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
     69c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <modeWork>
		Serial.println(F("Need setup params"));
     6a0:	61 e1       	ldi	r22, 0x11	; 17
     6a2:	74 e0       	ldi	r23, 0x04	; 4
     6a4:	89 e3       	ldi	r24, 0x39	; 57
     6a6:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
     6ac:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>

000006b0 <_Z11initAvgVarsv>:
}

/*
	Обнуление переменных - средние значения характеристик и сбрасываем счетчик измерений
*/
void initAvgVars() {
     6b0:	e3 e7       	ldi	r30, 0x73	; 115
     6b2:	f1 e0       	ldi	r31, 0x01	; 1
	for (byte i = 0; i < 3; i++) {
		adsChars.sumVoltage[i] = 0;
     6b4:	11 92       	st	Z+, r1
     6b6:	11 92       	st	Z+, r1
     6b8:	11 92       	st	Z+, r1
     6ba:	11 92       	st	Z+, r1
		adsChars.sumMeasuredAmperage[i] = 0;
     6bc:	10 86       	std	Z+8, r1	; 0x08
     6be:	11 86       	std	Z+9, r1	; 0x09
     6c0:	12 86       	std	Z+10, r1	; 0x0a
     6c2:	13 86       	std	Z+11, r1	; 0x0b

/*
	Обнуление переменных - средние значения характеристик и сбрасываем счетчик измерений
*/
void initAvgVars() {
	for (byte i = 0; i < 3; i++) {
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	ef 37       	cpi	r30, 0x7F	; 127
     6c8:	f8 07       	cpc	r31, r24
     6ca:	a1 f7       	brne	.-24     	; 0x6b4 <_Z11initAvgVarsv+0x4>
		adsChars.sumVoltage[i] = 0;
		adsChars.sumMeasuredAmperage[i] = 0;
	}
	adsChars.currentMeasurement = 1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <adsChars+0x3d>
     6d2:	08 95       	ret

000006d4 <_Z12button1Clickv>:
}

/*
	Обработчика короткого клика первой клавиши
*/
void button1Click() {
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
	// Если мы в настройках сопротивления то ничего не делать
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
     6dc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
     6e0:	8a 30       	cpi	r24, 0x0A	; 10
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <_Z12button1Clickv+0x12>
     6e4:	7e c0       	rjmp	.+252    	; 0x7e2 <_Z12button1Clickv+0x10e>
		return;
	}
	// Если мы в любых других настройках
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
     6e6:	9f ef       	ldi	r25, 0xFF	; 255
     6e8:	98 0f       	add	r25, r24
     6ea:	9a 30       	cpi	r25, 0x0A	; 10
     6ec:	08 f0       	brcs	.+2      	; 0x6f0 <_Z12button1Clickv+0x1c>
     6ee:	53 c0       	rjmp	.+166    	; 0x796 <_Z12button1Clickv+0xc2>
		lcdUpdateScreen = true;
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	01 f5       	brne	.+64     	; 0x73a <_Z12button1Clickv+0x66>
			// Режим выбора подключения обмотки - изменяем его
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR;
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	a9 01       	movw	r20, r18
     700:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
     704:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
     708:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
     70c:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
     710:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
     714:	88 23       	and	r24, r24
     716:	21 f0       	breq	.+8      	; 0x720 <_Z12button1Clickv+0x4c>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	dc 01       	movw	r26, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <_Z12button1Clickv+0x54>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	a0 e8       	ldi	r26, 0x80	; 128
     726:	bf e3       	ldi	r27, 0x3F	; 63
     728:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <setDigit>
     72c:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <setDigit+0x1>
     730:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <setDigit+0x2>
     734:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <setDigit+0x3>
     738:	54 c0       	rjmp	.+168    	; 0x7e2 <_Z12button1Clickv+0x10e>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в большую сторону
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			// Любой другой режим увеличиваем значение на величину curMultiplier
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     73a:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <setDigit+0x4>
     73e:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <setDigit+0x5>
     742:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <setDigit+0x6>
     746:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <setDigit+0x7>
     74a:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
     74e:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
     752:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
     756:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
     75a:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
			if (setDigit.value >= 1000) {
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	4a e7       	ldi	r20, 0x7A	; 122
     768:	54 e4       	ldi	r21, 0x44	; 68
     76a:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     76e:	87 ff       	sbrs	r24, 7
     770:	09 c0       	rjmp	.+18     	; 0x784 <_Z12button1Clickv+0xb0>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в большую сторону
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			// Любой другой режим увеличиваем значение на величину curMultiplier
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     772:	c0 92 f3 01 	sts	0x01F3, r12	; 0x8001f3 <setDigit>
     776:	d0 92 f4 01 	sts	0x01F4, r13	; 0x8001f4 <setDigit+0x1>
     77a:	e0 92 f5 01 	sts	0x01F5, r14	; 0x8001f5 <setDigit+0x2>
     77e:	f0 92 f6 01 	sts	0x01F6, r15	; 0x8001f6 <setDigit+0x3>
     782:	2f c0       	rjmp	.+94     	; 0x7e2 <_Z12button1Clickv+0x10e>
			if (setDigit.value >= 1000) {
				setDigit.value = 0;
     784:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <setDigit>
     788:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <setDigit+0x1>
     78c:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <setDigit+0x2>
     790:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <setDigit+0x3>
     794:	26 c0       	rjmp	.+76     	; 0x7e2 <_Z12button1Clickv+0x10e>
		}
		return;	
	}
	
	// В режиме отображения данных листаем вперед меню
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
     796:	93 ef       	ldi	r25, 0xF3	; 243
     798:	98 0f       	add	r25, r24
     79a:	9a 30       	cpi	r25, 0x0A	; 10
     79c:	40 f4       	brcc	.+16     	; 0x7ae <_Z12button1Clickv+0xda>
		modeWork.current = modeWork.current == MW_SHOWING_STOP? MW_SHOWING_START: modeWork.current + 1;
     79e:	86 31       	cpi	r24, 0x16	; 22
     7a0:	11 f0       	breq	.+4      	; 0x7a6 <_Z12button1Clickv+0xd2>
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <_Z12button1Clickv+0xd4>
     7a6:	8d e0       	ldi	r24, 0x0D	; 13
     7a8:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
		return;
     7ac:	1a c0       	rjmp	.+52     	; 0x7e2 <_Z12button1Clickv+0x10e>
	}
	
	// Если вопрос о начале измерений, то клик его подтверждает
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
     7ae:	8e 31       	cpi	r24, 0x1E	; 30
     7b0:	c1 f4       	brne	.+48     	; 0x7e2 <_Z12button1Clickv+0x10e>
		modeWork.current = MW_SHOWING_START;
     7b2:	8d e0       	ldi	r24, 0x0D	; 13
     7b4:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
		settings.isReadyToWork = MM_WORK;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <settings>
		icError.hasIC = false;
     7be:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_start+0x16>
		digitalWrite(RELAY, LOW);
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	81 e1       	ldi	r24, 0x11	; 17
     7c6:	0e 94 64 23 	call	0x46c8	; 0x46c8 <digitalWrite>
		
		Serial.println(F("**Measurement Started!"));
     7ca:	67 e6       	ldi	r22, 0x67	; 103
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	89 e3       	ldi	r24, 0x39	; 57
     7d0:	93 e0       	ldi	r25, 0x03	; 3
     7d2:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
		initAvgVars();
		return;
	}
}
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
		settings.isReadyToWork = MM_WORK;
		icError.hasIC = false;
		digitalWrite(RELAY, LOW);
		
		Serial.println(F("**Measurement Started!"));
		initAvgVars();
     7de:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <_Z11initAvgVarsv>
		return;
	}
}
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	08 95       	ret

000007ec <_Z19getICLevelByWindingh>:
/*
	Получения степени отклонения силы тока идеального от измеренного по обмотке
	_amperage - измеренное значение тока
	_num - номер обмотки
*/
float getICLevelByWinding(byte _num) {
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
	if (adsChars.perfectAmperage[_num] >= adsChars.measuredAmperage[_num]) {
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	fc 01       	movw	r30, r24
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	e9 59       	subi	r30, 0x99	; 153
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	80 80       	ld	r8, Z
     80e:	91 80       	ldd	r9, Z+1	; 0x01
     810:	a2 80       	ldd	r10, Z+2	; 0x02
     812:	b3 80       	ldd	r11, Z+3	; 0x03
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	fc 01       	movw	r30, r24
     81e:	e5 5a       	subi	r30, 0xA5	; 165
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	c0 80       	ld	r12, Z
     824:	d1 80       	ldd	r13, Z+1	; 0x01
     826:	e2 80       	ldd	r14, Z+2	; 0x02
     828:	f3 80       	ldd	r15, Z+3	; 0x03
     82a:	a7 01       	movw	r20, r14
     82c:	96 01       	movw	r18, r12
     82e:	c5 01       	movw	r24, r10
     830:	b4 01       	movw	r22, r8
     832:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     836:	87 ff       	sbrs	r24, 7
     838:	34 c0       	rjmp	.+104    	; 0x8a2 <_Z19getICLevelByWindingh+0xb6>
		return 0;
	}
	return abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]) * 100.0 / ( adsChars.perfectAmperage[_num] + icError.criticalSingle);
     83a:	a5 01       	movw	r20, r10
     83c:	94 01       	movw	r18, r8
     83e:	c7 01       	movw	r24, r14
     840:	b6 01       	movw	r22, r12
     842:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
     846:	6b 01       	movw	r12, r22
     848:	7c 01       	movw	r14, r24
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	a9 01       	movw	r20, r18
     850:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     854:	18 16       	cp	r1, r24
     856:	3c f4       	brge	.+14     	; 0x866 <_Z19getICLevelByWindingh+0x7a>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	48 ec       	ldi	r20, 0xC8	; 200
     85e:	52 e4       	ldi	r21, 0x42	; 66
     860:	c7 01       	movw	r24, r14
     862:	b6 01       	movw	r22, r12
     864:	07 c0       	rjmp	.+14     	; 0x874 <_Z19getICLevelByWindingh+0x88>
     866:	c7 01       	movw	r24, r14
     868:	b6 01       	movw	r22, r12
     86a:	90 58       	subi	r25, 0x80	; 128
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	48 ec       	ldi	r20, 0xC8	; 200
     872:	52 e4       	ldi	r21, 0x42	; 66
     874:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
     878:	6b 01       	movw	r12, r22
     87a:	7c 01       	movw	r14, r24
     87c:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_start+0x1b>
     880:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <__data_start+0x1c>
     884:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <__data_start+0x1d>
     888:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <__data_start+0x1e>
     88c:	c5 01       	movw	r24, r10
     88e:	b4 01       	movw	r22, r8
     890:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <_Z19getICLevelByWindingh+0xbc>
	_amperage - измеренное значение тока
	_num - номер обмотки
*/
float getICLevelByWinding(byte _num) {
	if (adsChars.perfectAmperage[_num] >= adsChars.measuredAmperage[_num]) {
		return 0;
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	cb 01       	movw	r24, r22
	}
	return abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]) * 100.0 / ( adsChars.perfectAmperage[_num] + icError.criticalSingle);
}
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	9f 90       	pop	r9
     8b6:	8f 90       	pop	r8
     8b8:	08 95       	ret

000008ba <_Z19isSingleErrorExistsffh>:
 * Ошибка проверяется только при положительных разностях
 * _amperage - массив измеренных токов
 * _voltage - массив измеренных напряжений
 * index - индекс
*/
bool isSingleErrorExists(float _amperage, float _voltage, byte index) {
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	6b 01       	movw	r12, r22
     8c6:	7c 01       	movw	r14, r24
     8c8:	ca 01       	movw	r24, r20
     8ca:	b9 01       	movw	r22, r18
	// высчитываем идеальный ток и отнимаем измеренный
	float divAmperage = _amperage - (_voltage / settings.impedance[index]);
     8cc:	24 e0       	ldi	r18, 0x04	; 4
     8ce:	02 9f       	mul	r16, r18
     8d0:	f0 01       	movw	r30, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	e5 50       	subi	r30, 0x05	; 5
     8d6:	fe 4f       	sbci	r31, 0xFE	; 254
     8d8:	26 81       	ldd	r18, Z+6	; 0x06
     8da:	37 81       	ldd	r19, Z+7	; 0x07
     8dc:	40 85       	ldd	r20, Z+8	; 0x08
     8de:	51 85       	ldd	r21, Z+9	; 0x09
     8e0:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	c7 01       	movw	r24, r14
     8ea:	b6 01       	movw	r22, r12
     8ec:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
     8f0:	6b 01       	movw	r12, r22
     8f2:	7c 01       	movw	r14, r24
	if (divAmperage <= 0) {
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	a9 01       	movw	r20, r18
     8fa:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
     8fe:	18 16       	cp	r1, r24
     900:	74 f4       	brge	.+28     	; 0x91e <__stack+0x1f>
		return false;
	}
	return divAmperage >= icError.criticalSingle;
     902:	01 e0       	ldi	r16, 0x01	; 1
     904:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_start+0x1b>
     908:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <__data_start+0x1c>
     90c:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <__data_start+0x1d>
     910:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <__data_start+0x1e>
     914:	c7 01       	movw	r24, r14
     916:	b6 01       	movw	r22, r12
     918:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     91c:	87 fd       	sbrc	r24, 7
*/
bool isSingleErrorExists(float _amperage, float _voltage, byte index) {
	// высчитываем идеальный ток и отнимаем измеренный
	float divAmperage = _amperage - (_voltage / settings.impedance[index]);
	if (divAmperage <= 0) {
		return false;
     91e:	00 e0       	ldi	r16, 0x00	; 0
	}
	return divAmperage >= icError.criticalSingle;
}
     920:	80 2f       	mov	r24, r16
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <_Z12getAdsParamsv>:
}

/**
 * Получение параметров с АЦП
 */
void getAdsParams() {
     92e:	2f 92       	push	r2
     930:	3f 92       	push	r3
     932:	4f 92       	push	r4
     934:	5f 92       	push	r5
     936:	6f 92       	push	r6
     938:	7f 92       	push	r7
     93a:	8f 92       	push	r8
     93c:	9f 92       	push	r9
     93e:	af 92       	push	r10
     940:	bf 92       	push	r11
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	a6 97       	sbiw	r28, 0x26	; 38
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
	// Временные данные по напряжению, току и иделаьному току
	float measuredVoltage[3] = {0, 0, 0};
     962:	1d 86       	std	Y+13, r1	; 0x0d
     964:	1e 86       	std	Y+14, r1	; 0x0e
     966:	1f 86       	std	Y+15, r1	; 0x0f
     968:	18 8a       	std	Y+16, r1	; 0x10
     96a:	19 8a       	std	Y+17, r1	; 0x11
     96c:	1a 8a       	std	Y+18, r1	; 0x12
     96e:	1b 8a       	std	Y+19, r1	; 0x13
     970:	1c 8a       	std	Y+20, r1	; 0x14
     972:	1d 8a       	std	Y+21, r1	; 0x15
     974:	1e 8a       	std	Y+22, r1	; 0x16
     976:	1f 8a       	std	Y+23, r1	; 0x17
     978:	18 8e       	std	Y+24, r1	; 0x18
	float measuredAmperage[3] = {0, 0, 0};
     97a:	19 82       	std	Y+1, r1	; 0x01
     97c:	1a 82       	std	Y+2, r1	; 0x02
     97e:	1b 82       	std	Y+3, r1	; 0x03
     980:	1c 82       	std	Y+4, r1	; 0x04
     982:	1d 82       	std	Y+5, r1	; 0x05
     984:	1e 82       	std	Y+6, r1	; 0x06
     986:	1f 82       	std	Y+7, r1	; 0x07
     988:	18 86       	std	Y+8, r1	; 0x08
     98a:	19 86       	std	Y+9, r1	; 0x09
     98c:	1a 86       	std	Y+10, r1	; 0x0a
     98e:	1b 86       	std	Y+11, r1	; 0x0b
     990:	1c 86       	std	Y+12, r1	; 0x0c
     992:	1e 01       	movw	r2, r28
     994:	2d e0       	ldi	r18, 0x0D	; 13
     996:	22 0e       	add	r2, r18
     998:	31 1c       	adc	r3, r1
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	6c 01       	movw	r12, r24
     9a0:	7c 01       	movw	r14, r24
     9a2:	51 01       	movw	r10, r2
	float perfectAmperage[3] = {0, 0, 0};
		
	// получение данных с ацп для кжадой обмотки
	for (byte i = 0; i < 3; i++) {
     9a4:	10 e0       	ldi	r17, 0x00	; 0
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
     9a6:	61 2f       	mov	r22, r17
     9a8:	80 e7       	ldi	r24, 0x70	; 112
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     9b0:	bc 01       	movw	r22, r24
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__floatunsisf>
     9ba:	d5 01       	movw	r26, r10
     9bc:	6d 93       	st	X+, r22
     9be:	7d 93       	st	X+, r23
     9c0:	8d 93       	st	X+, r24
     9c2:	9d 93       	st	X+, r25
     9c4:	5d 01       	movw	r10, r26
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
     9c6:	61 2f       	mov	r22, r17
     9c8:	8b e6       	ldi	r24, 0x6B	; 107
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     9d0:	bc 01       	movw	r22, r24
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__floatunsisf>
     9da:	f7 01       	movw	r30, r14
     9dc:	61 93       	st	Z+, r22
     9de:	71 93       	st	Z+, r23
     9e0:	81 93       	st	Z+, r24
     9e2:	91 93       	st	Z+, r25
     9e4:	7f 01       	movw	r14, r30
	float measuredVoltage[3] = {0, 0, 0};
	float measuredAmperage[3] = {0, 0, 0};
	float perfectAmperage[3] = {0, 0, 0};
		
	// получение данных с ацп для кжадой обмотки
	for (byte i = 0; i < 3; i++) {
     9e6:	1f 5f       	subi	r17, 0xFF	; 255
     9e8:	13 30       	cpi	r17, 0x03	; 3
     9ea:	e9 f6       	brne	.-70     	; 0x9a6 <_Z12getAdsParamsv+0x78>
	for (byte i = 0; i < 3; i++) {
		// увеличиваем данные для усреднения
		adsChars.sumVoltage[i] += measuredVoltage[i];
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
		// вычисляем текущие реальные значения
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
     9ec:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ads+0x18>
     9f0:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <ads+0x19>
     9f4:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <ads+0x1a>
     9f8:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <ads+0x1b>
     9fc:	8f 8f       	std	Y+31, r24	; 0x1f
     9fe:	98 a3       	std	Y+32, r25	; 0x20
     a00:	a9 a3       	std	Y+33, r26	; 0x21
     a02:	ba a3       	std	Y+34, r27	; 0x22
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
     a04:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ads+0x1c>
     a08:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <ads+0x1d>
     a0c:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <ads+0x1e>
     a10:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <ads+0x1f>
     a14:	8b a3       	std	Y+35, r24	; 0x23
     a16:	9c a3       	std	Y+36, r25	; 0x24
     a18:	ad a3       	std	Y+37, r26	; 0x25
     a1a:	be a3       	std	Y+38, r27	; 0x26
     a1c:	8f e4       	ldi	r24, 0x4F	; 79
     a1e:	e8 2e       	mov	r14, r24
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	f8 2e       	mov	r15, r24
     a24:	ab ef       	ldi	r26, 0xFB	; 251
     a26:	b1 e0       	ldi	r27, 0x01	; 1
     a28:	ba 8f       	std	Y+26, r27	; 0x1a
     a2a:	a9 8f       	std	Y+25, r26	; 0x19
     a2c:	e0 e0       	ldi	r30, 0x00	; 0
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	fc 8f       	std	Y+28, r31	; 0x1c
     a32:	eb 8f       	std	Y+27, r30	; 0x1b
     a34:	3e 8e       	std	Y+30, r3	; 0x1e
     a36:	2d 8e       	std	Y+29, r2	; 0x1d
     a38:	10 e0       	ldi	r17, 0x00	; 0
	}

	
	for (byte i = 0; i < 3; i++) {
		// увеличиваем данные для усреднения
		adsChars.sumVoltage[i] += measuredVoltage[i];
     a3a:	ad 8d       	ldd	r26, Y+29	; 0x1d
     a3c:	be 8d       	ldd	r27, Y+30	; 0x1e
     a3e:	4d 90       	ld	r4, X+
     a40:	5d 90       	ld	r5, X+
     a42:	6d 90       	ld	r6, X+
     a44:	7d 90       	ld	r7, X+
     a46:	be 8f       	std	Y+30, r27	; 0x1e
     a48:	ad 8f       	std	Y+29, r26	; 0x1d
     a4a:	a3 01       	movw	r20, r6
     a4c:	92 01       	movw	r18, r4
     a4e:	f7 01       	movw	r30, r14
     a50:	64 a1       	ldd	r22, Z+36	; 0x24
     a52:	75 a1       	ldd	r23, Z+37	; 0x25
     a54:	86 a1       	ldd	r24, Z+38	; 0x26
     a56:	97 a1       	ldd	r25, Z+39	; 0x27
     a58:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
     a5c:	d7 01       	movw	r26, r14
     a5e:	94 96       	adiw	r26, 0x24	; 36
     a60:	6d 93       	st	X+, r22
     a62:	7d 93       	st	X+, r23
     a64:	8d 93       	st	X+, r24
     a66:	9c 93       	st	X, r25
     a68:	97 97       	sbiw	r26, 0x27	; 39
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
     a6a:	f6 01       	movw	r30, r12
     a6c:	80 80       	ld	r8, Z
     a6e:	91 80       	ldd	r9, Z+1	; 0x01
     a70:	a2 80       	ldd	r10, Z+2	; 0x02
     a72:	b3 80       	ldd	r11, Z+3	; 0x03
     a74:	a5 01       	movw	r20, r10
     a76:	94 01       	movw	r18, r8
     a78:	d0 96       	adiw	r26, 0x30	; 48
     a7a:	6d 91       	ld	r22, X+
     a7c:	7d 91       	ld	r23, X+
     a7e:	8d 91       	ld	r24, X+
     a80:	9c 91       	ld	r25, X
     a82:	d3 97       	sbiw	r26, 0x33	; 51
     a84:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
     a88:	d7 01       	movw	r26, r14
     a8a:	d0 96       	adiw	r26, 0x30	; 48
     a8c:	6d 93       	st	X+, r22
     a8e:	7d 93       	st	X+, r23
     a90:	8d 93       	st	X+, r24
     a92:	9c 93       	st	X, r25
     a94:	d3 97       	sbiw	r26, 0x33	; 51
		// вычисляем текущие реальные значения
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
     a96:	e9 8d       	ldd	r30, Y+25	; 0x19
     a98:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a9a:	25 89       	ldd	r18, Z+21	; 0x15
     a9c:	36 89       	ldd	r19, Z+22	; 0x16
     a9e:	47 89       	ldd	r20, Z+23	; 0x17
     aa0:	50 8d       	ldd	r21, Z+24	; 0x18
     aa2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     aa4:	78 a1       	ldd	r23, Y+32	; 0x20
     aa6:	89 a1       	ldd	r24, Y+33	; 0x21
     aa8:	9a a1       	ldd	r25, Y+34	; 0x22
     aaa:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
     aae:	a3 01       	movw	r20, r6
     ab0:	92 01       	movw	r18, r4
     ab2:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
     ab6:	2b 01       	movw	r4, r22
     ab8:	3c 01       	movw	r6, r24
     aba:	d1 01       	movw	r26, r2
     abc:	6d 93       	st	X+, r22
     abe:	7d 93       	st	X+, r23
     ac0:	8d 93       	st	X+, r24
     ac2:	9d 93       	st	X+, r25
     ac4:	1d 01       	movw	r2, r26
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
     ac6:	e9 8d       	ldd	r30, Y+25	; 0x19
     ac8:	fa 8d       	ldd	r31, Y+26	; 0x1a
     aca:	21 a1       	ldd	r18, Z+33	; 0x21
     acc:	32 a1       	ldd	r19, Z+34	; 0x22
     ace:	43 a1       	ldd	r20, Z+35	; 0x23
     ad0:	54 a1       	ldd	r21, Z+36	; 0x24
     ad2:	6b a1       	ldd	r22, Y+35	; 0x23
     ad4:	7c a1       	ldd	r23, Y+36	; 0x24
     ad6:	8d a1       	ldd	r24, Y+37	; 0x25
     ad8:	9e a1       	ldd	r25, Y+38	; 0x26
     ada:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
     ade:	a5 01       	movw	r20, r10
     ae0:	94 01       	movw	r18, r8
     ae2:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
     ae6:	d6 01       	movw	r26, r12
     ae8:	6d 93       	st	X+, r22
     aea:	7d 93       	st	X+, r23
     aec:	8d 93       	st	X+, r24
     aee:	9c 93       	st	X, r25
     af0:	13 97       	sbiw	r26, 0x03	; 3
		
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
     af2:	eb 8d       	ldd	r30, Y+27	; 0x1b
     af4:	fc 8d       	ldd	r31, Y+28	; 0x1c
     af6:	a0 88       	ldd	r10, Z+16	; 0x10
     af8:	b1 88       	ldd	r11, Z+17	; 0x11
     afa:	f8 ee       	ldi	r31, 0xE8	; 232
     afc:	af 16       	cp	r10, r31
     afe:	f3 e0       	ldi	r31, 0x03	; 3
     b00:	bf 06       	cpc	r11, r31
     b02:	3c f4       	brge	.+14     	; 0xb12 <_Z12getAdsParamsv+0x1e4>
     b04:	01 2f       	mov	r16, r17
     b06:	a3 01       	movw	r20, r6
     b08:	92 01       	movw	r18, r4
     b0a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z19isSingleErrorExistsffh>
     b0e:	81 11       	cpse	r24, r1
     b10:	2d c0       	rjmp	.+90     	; 0xb6c <_Z12getAdsParamsv+0x23e>
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}

	
	for (byte i = 0; i < 3; i++) {
     b12:	1f 5f       	subi	r17, 0xFF	; 255
     b14:	24 e0       	ldi	r18, 0x04	; 4
     b16:	e2 0e       	add	r14, r18
     b18:	f1 1c       	adc	r15, r1
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	c8 0e       	add	r12, r24
     b1e:	d1 1c       	adc	r13, r1
     b20:	a9 8d       	ldd	r26, Y+25	; 0x19
     b22:	ba 8d       	ldd	r27, Y+26	; 0x1a
     b24:	14 96       	adiw	r26, 0x04	; 4
     b26:	ba 8f       	std	Y+26, r27	; 0x1a
     b28:	a9 8f       	std	Y+25, r26	; 0x19
     b2a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b2c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b2e:	32 96       	adiw	r30, 0x02	; 2
     b30:	fc 8f       	std	Y+28, r31	; 0x1c
     b32:	eb 8f       	std	Y+27, r30	; 0x1b
     b34:	13 30       	cpi	r17, 0x03	; 3
     b36:	09 f0       	breq	.+2      	; 0xb3a <_Z12getAdsParamsv+0x20c>
     b38:	80 cf       	rjmp	.-256    	; 0xa3a <_Z12getAdsParamsv+0x10c>
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
			icError.criticalLvlCount[i]++;
		}
	}
}
     b3a:	a6 96       	adiw	r28, 0x26	; 38
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	df 90       	pop	r13
     b54:	cf 90       	pop	r12
     b56:	bf 90       	pop	r11
     b58:	af 90       	pop	r10
     b5a:	9f 90       	pop	r9
     b5c:	8f 90       	pop	r8
     b5e:	7f 90       	pop	r7
     b60:	6f 90       	pop	r6
     b62:	5f 90       	pop	r5
     b64:	4f 90       	pop	r4
     b66:	3f 90       	pop	r3
     b68:	2f 90       	pop	r2
     b6a:	08 95       	ret
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
		
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
			icError.criticalLvlCount[i]++;
     b6c:	ff ef       	ldi	r31, 0xFF	; 255
     b6e:	af 1a       	sub	r10, r31
     b70:	bf 0a       	sbc	r11, r31
     b72:	ab 8d       	ldd	r26, Y+27	; 0x1b
     b74:	bc 8d       	ldd	r27, Y+28	; 0x1c
     b76:	51 96       	adiw	r26, 0x11	; 17
     b78:	bc 92       	st	X, r11
     b7a:	ae 92       	st	-X, r10
     b7c:	50 97       	sbiw	r26, 0x10	; 16
     b7e:	c9 cf       	rjmp	.-110    	; 0xb12 <_Z12getAdsParamsv+0x1e4>

00000b80 <_Z17isFullErrorExistsPfS_>:
 * Проверка наличия отклоеннеия.
 * Ошибка проверяется только при положительных разностях
 * _amperage - массив измеренных токов
 * _voltage - массив измеренных напряжений
*/
bool isFullErrorExists(float* _amperage, float* _voltage) {
     b80:	4f 92       	push	r4
     b82:	5f 92       	push	r5
     b84:	6f 92       	push	r6
     b86:	7f 92       	push	r7
     b88:	8f 92       	push	r8
     b8a:	9f 92       	push	r9
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	60 97       	sbiw	r28, 0x10	; 16
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
	float divAmperage[3] = {0, 0, 0};
     bb0:	19 82       	std	Y+1, r1	; 0x01
     bb2:	1a 82       	std	Y+2, r1	; 0x02
     bb4:	1b 82       	std	Y+3, r1	; 0x03
     bb6:	1c 82       	std	Y+4, r1	; 0x04
     bb8:	1d 82       	std	Y+5, r1	; 0x05
     bba:	1e 82       	std	Y+6, r1	; 0x06
     bbc:	1f 82       	std	Y+7, r1	; 0x07
     bbe:	18 86       	std	Y+8, r1	; 0x08
     bc0:	19 86       	std	Y+9, r1	; 0x09
     bc2:	1a 86       	std	Y+10, r1	; 0x0a
     bc4:	1b 86       	std	Y+11, r1	; 0x0b
     bc6:	1c 86       	std	Y+12, r1	; 0x0c
     bc8:	7b 01       	movw	r14, r22
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	82 2e       	mov	r8, r18
     bce:	22 e0       	ldi	r18, 0x02	; 2
     bd0:	92 2e       	mov	r9, r18
     bd2:	37 e6       	ldi	r19, 0x67	; 103
     bd4:	a3 2e       	mov	r10, r19
     bd6:	31 e0       	ldi	r19, 0x01	; 1
     bd8:	b3 2e       	mov	r11, r19
     bda:	6c 01       	movw	r12, r24
     bdc:	8e 01       	movw	r16, r28
     bde:	0f 5f       	subi	r16, 0xFF	; 255
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	3b 01       	movw	r6, r22
     be4:	8c e0       	ldi	r24, 0x0C	; 12
     be6:	68 0e       	add	r6, r24
     be8:	71 1c       	adc	r7, r1
	byte sign = 100;
	
	// получаем разницу идеального от измеренного тока и изменяем значения счетчика знака
	for(byte i = 0; i < 3; i++) {
		// на ходу вычисляем значения идеального тока
		adsChars.perfectAmperage[i] = _voltage[i] / settings.impedance[i];
     bea:	d7 01       	movw	r26, r14
     bec:	6d 91       	ld	r22, X+
     bee:	7d 91       	ld	r23, X+
     bf0:	8d 91       	ld	r24, X+
     bf2:	9d 91       	ld	r25, X+
     bf4:	7d 01       	movw	r14, r26
     bf6:	f4 01       	movw	r30, r8
     bf8:	21 91       	ld	r18, Z+
     bfa:	31 91       	ld	r19, Z+
     bfc:	41 91       	ld	r20, Z+
     bfe:	51 91       	ld	r21, Z+
     c00:	4f 01       	movw	r8, r30
     c02:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
     c06:	d5 01       	movw	r26, r10
     c08:	6d 93       	st	X+, r22
     c0a:	7d 93       	st	X+, r23
     c0c:	8d 93       	st	X+, r24
     c0e:	9d 93       	st	X+, r25
     c10:	5d 01       	movw	r10, r26
		divAmperage[i] = adsChars.perfectAmperage[i] - _amperage[i];
     c12:	f6 01       	movw	r30, r12
     c14:	21 91       	ld	r18, Z+
     c16:	31 91       	ld	r19, Z+
     c18:	41 91       	ld	r20, Z+
     c1a:	51 91       	ld	r21, Z+
     c1c:	6f 01       	movw	r12, r30
     c1e:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
     c22:	d8 01       	movw	r26, r16
     c24:	6d 93       	st	X+, r22
     c26:	7d 93       	st	X+, r23
     c28:	8d 93       	st	X+, r24
     c2a:	9d 93       	st	X+, r25
     c2c:	8d 01       	movw	r16, r26
	float divAmperage[3] = {0, 0, 0};
	// 100 - магическое число и ничего не значит, прсото для удобства 
	byte sign = 100;
	
	// получаем разницу идеального от измеренного тока и изменяем значения счетчика знака
	for(byte i = 0; i < 3; i++) {
     c2e:	e6 14       	cp	r14, r6
     c30:	f7 04       	cpc	r15, r7
     c32:	d9 f6       	brne	.-74     	; 0xbea <_Z17isFullErrorExistsPfS_+0x6a>
	// если знак = -97, значит все значения измеренных токов меньше идеальных и замыкания нет
	if (sign == -97) {
		return false;
	}
	// По формуле вычисляем глоабльную ошибку по токам |AB - BC| + |BC - AC| + |AC - AB| 
	icError.fullError = abs(divAmperage[0] - divAmperage[1]) + abs(divAmperage[1] - divAmperage[2]) + abs(divAmperage[2] - divAmperage[0]);
     c34:	49 80       	ldd	r4, Y+1	; 0x01
     c36:	5a 80       	ldd	r5, Y+2	; 0x02
     c38:	6b 80       	ldd	r6, Y+3	; 0x03
     c3a:	7c 80       	ldd	r7, Y+4	; 0x04
     c3c:	8d 80       	ldd	r8, Y+5	; 0x05
     c3e:	9e 80       	ldd	r9, Y+6	; 0x06
     c40:	af 80       	ldd	r10, Y+7	; 0x07
     c42:	b8 84       	ldd	r11, Y+8	; 0x08
     c44:	a5 01       	movw	r20, r10
     c46:	94 01       	movw	r18, r8
     c48:	c3 01       	movw	r24, r6
     c4a:	b2 01       	movw	r22, r4
     c4c:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
     c50:	6b 01       	movw	r12, r22
     c52:	7c 01       	movw	r14, r24
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	a9 01       	movw	r20, r18
     c5a:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     c5e:	18 16       	cp	r1, r24
     c60:	24 f0       	brlt	.+8      	; 0xc6a <_Z17isFullErrorExistsPfS_+0xea>
     c62:	f7 fa       	bst	r15, 7
     c64:	f0 94       	com	r15
     c66:	f7 f8       	bld	r15, 7
     c68:	f0 94       	com	r15
     c6a:	89 85       	ldd	r24, Y+9	; 0x09
     c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6e:	ab 85       	ldd	r26, Y+11	; 0x0b
     c70:	bc 85       	ldd	r27, Y+12	; 0x0c
     c72:	8d 87       	std	Y+13, r24	; 0x0d
     c74:	9e 87       	std	Y+14, r25	; 0x0e
     c76:	af 87       	std	Y+15, r26	; 0x0f
     c78:	b8 8b       	std	Y+16, r27	; 0x10
     c7a:	9c 01       	movw	r18, r24
     c7c:	ad 01       	movw	r20, r26
     c7e:	c5 01       	movw	r24, r10
     c80:	b4 01       	movw	r22, r8
     c82:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
     c86:	4b 01       	movw	r8, r22
     c88:	5c 01       	movw	r10, r24
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	a9 01       	movw	r20, r18
     c90:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     c94:	18 16       	cp	r1, r24
     c96:	24 f0       	brlt	.+8      	; 0xca0 <_Z17isFullErrorExistsPfS_+0x120>
     c98:	b7 fa       	bst	r11, 7
     c9a:	b0 94       	com	r11
     c9c:	b7 f8       	bld	r11, 7
     c9e:	b0 94       	com	r11
     ca0:	a5 01       	movw	r20, r10
     ca2:	94 01       	movw	r18, r8
     ca4:	c7 01       	movw	r24, r14
     ca6:	b6 01       	movw	r22, r12
     ca8:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
     cac:	6b 01       	movw	r12, r22
     cae:	7c 01       	movw	r14, r24
     cb0:	a3 01       	movw	r20, r6
     cb2:	92 01       	movw	r18, r4
     cb4:	6d 85       	ldd	r22, Y+13	; 0x0d
     cb6:	7e 85       	ldd	r23, Y+14	; 0x0e
     cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cba:	98 89       	ldd	r25, Y+16	; 0x10
     cbc:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
     cc0:	4b 01       	movw	r8, r22
     cc2:	5c 01       	movw	r10, r24
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	a9 01       	movw	r20, r18
     cca:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     cce:	18 16       	cp	r1, r24
     cd0:	24 f0       	brlt	.+8      	; 0xcda <_Z17isFullErrorExistsPfS_+0x15a>
     cd2:	b7 fa       	bst	r11, 7
     cd4:	b0 94       	com	r11
     cd6:	b7 f8       	bld	r11, 7
     cd8:	b0 94       	com	r11
     cda:	a7 01       	movw	r20, r14
     cdc:	96 01       	movw	r18, r12
     cde:	c5 01       	movw	r24, r10
     ce0:	b4 01       	movw	r22, r8
     ce2:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
     ce6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     cea:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     cee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     cf2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>

	// Крит общей ошибки отклонение в 1
	return icError.fullError >= icError.criticalFull;
     cf6:	11 e0       	ldi	r17, 0x01	; 1
     cf8:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <__data_start+0x1f>
     cfc:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <__data_start+0x20>
     d00:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <__data_start+0x21>
     d04:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <__data_start+0x22>
     d08:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     d0c:	87 fd       	sbrc	r24, 7
     d0e:	10 e0       	ldi	r17, 0x00	; 0
}
     d10:	81 2f       	mov	r24, r17
     d12:	60 96       	adiw	r28, 0x10	; 16
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	7f 90       	pop	r7
     d38:	6f 90       	pop	r6
     d3a:	5f 90       	pop	r5
     d3c:	4f 90       	pop	r4
     d3e:	08 95       	ret

00000d40 <_Z20lcdPrintAmperageDiffh>:
			showWindingCharsValues(2);
			break;
	}
}

void lcdPrintAmperageDiff(byte index) {
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
	icError.diff[index] =  adsChars.measuredAmperage[index] - adsChars.perfectAmperage[index];
     d44:	c8 2f       	mov	r28, r24
     d46:	d0 e0       	ldi	r29, 0x00	; 0
     d48:	fe 01       	movw	r30, r28
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	e5 5a       	subi	r30, 0xA5	; 165
     d54:	fe 4f       	sbci	r31, 0xFE	; 254
     d56:	de 01       	movw	r26, r28
     d58:	aa 0f       	add	r26, r26
     d5a:	bb 1f       	adc	r27, r27
     d5c:	aa 0f       	add	r26, r26
     d5e:	bb 1f       	adc	r27, r27
     d60:	a9 59       	subi	r26, 0x99	; 153
     d62:	be 4f       	sbci	r27, 0xFE	; 254
     d64:	2d 91       	ld	r18, X+
     d66:	3d 91       	ld	r19, X+
     d68:	4d 91       	ld	r20, X+
     d6a:	5c 91       	ld	r21, X
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
     d78:	cc 0f       	add	r28, r28
     d7a:	dd 1f       	adc	r29, r29
     d7c:	cc 0f       	add	r28, r28
     d7e:	dd 1f       	adc	r29, r29
     d80:	fe 01       	movw	r30, r28
     d82:	e0 50       	subi	r30, 0x00	; 0
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	63 a3       	std	Z+35, r22	; 0x23
     d88:	74 a3       	std	Z+36, r23	; 0x24
     d8a:	85 a3       	std	Z+37, r24	; 0x25
     d8c:	96 a3       	std	Z+38, r25	; 0x26
	// Если у нас измеренное число больше чем идеальное - значит мы получили отклонение в + иначе в -
	if (icError.diff[index] >= 0) {
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	a9 01       	movw	r20, r18
     d94:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     d98:	87 fd       	sbrc	r24, 7
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <_Z20lcdPrintAmperageDiffh+0x68>
		lcd.print(F("+"));
     d9c:	65 e8       	ldi	r22, 0x85	; 133
     d9e:	72 e0       	ldi	r23, 0x02	; 2
     da0:	87 ee       	ldi	r24, 0xE7	; 231
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
	} 
	lcd.print(icError.diff[index], 3);
     da8:	c0 50       	subi	r28, 0x00	; 0
     daa:	df 4f       	sbci	r29, 0xFF	; 255
     dac:	4b a1       	ldd	r20, Y+35	; 0x23
     dae:	5c a1       	ldd	r21, Y+36	; 0x24
     db0:	6d a1       	ldd	r22, Y+37	; 0x25
     db2:	7e a1       	ldd	r23, Y+38	; 0x26
     db4:	23 e0       	ldi	r18, 0x03	; 3
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	87 ee       	ldi	r24, 0xE7	; 231
     dba:	91 e0       	ldi	r25, 0x01	; 1
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
	icError.diff[index] =  adsChars.measuredAmperage[index] - adsChars.perfectAmperage[index];
	// Если у нас измеренное число больше чем идеальное - значит мы получили отклонение в + иначе в -
	if (icError.diff[index] >= 0) {
		lcd.print(F("+"));
	} 
	lcd.print(icError.diff[index], 3);
     dc0:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <_ZN5Print5printEdi>

00000dc4 <_Z27lcdPrinRoundedCurErrorLevelh>:

/*
	Отображение округленных значений ошибки в зависимости от обмотки 
	_num - номер обмотки
*/
void lcdPrinRoundedCurErrorLevel(byte _num) {
     dc4:	cf 92       	push	r12
     dc6:	df 92       	push	r13
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
	if (icError.curLvl[_num] < 1000) {
     dcc:	24 e0       	ldi	r18, 0x04	; 4
     dce:	82 9f       	mul	r24, r18
     dd0:	c0 01       	movw	r24, r0
     dd2:	11 24       	eor	r1, r1
     dd4:	fc 01       	movw	r30, r24
     dd6:	ec 5f       	subi	r30, 0xFC	; 252
     dd8:	fe 4f       	sbci	r31, 0xFE	; 254
     dda:	c0 80       	ld	r12, Z
     ddc:	d1 80       	ldd	r13, Z+1	; 0x01
     dde:	e2 80       	ldd	r14, Z+2	; 0x02
     de0:	f3 80       	ldd	r15, Z+3	; 0x03
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	4a e7       	ldi	r20, 0x7A	; 122
     de8:	54 e4       	ldi	r21, 0x44	; 68
     dea:	c7 01       	movw	r24, r14
     dec:	b6 01       	movw	r22, r12
     dee:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
     df2:	87 ff       	sbrs	r24, 7
     df4:	24 c0       	rjmp	.+72     	; 0xe3e <_Z27lcdPrinRoundedCurErrorLevelh+0x7a>
		lcd.print(round(icError.curLvl[_num]));
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	a9 01       	movw	r20, r18
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	87 fd       	sbrc	r24, 7
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <_Z27lcdPrinRoundedCurErrorLevelh+0x56>
     e10:	c7 01       	movw	r24, r14
     e12:	b6 01       	movw	r22, r12
     e14:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <_Z27lcdPrinRoundedCurErrorLevelh+0x5e>
     e1a:	c7 01       	movw	r24, r14
     e1c:	b6 01       	movw	r22, r12
     e1e:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
     e22:	0e 94 83 1c 	call	0x3906	; 0x3906 <__fixsfsi>
     e26:	2a e0       	ldi	r18, 0x0A	; 10
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	ab 01       	movw	r20, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	87 ee       	ldi	r24, 0xE7	; 231
     e30:	91 e0       	ldi	r25, 0x01	; 1
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	df 90       	pop	r13
     e38:	cf 90       	pop	r12
	Отображение округленных значений ошибки в зависимости от обмотки 
	_num - номер обмотки
*/
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
     e3a:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <_ZN5Print5printEli>
	} else {
		lcd.print(999);
     e3e:	4a e0       	ldi	r20, 0x0A	; 10
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	67 ee       	ldi	r22, 0xE7	; 231
     e44:	73 e0       	ldi	r23, 0x03	; 3
     e46:	87 ee       	ldi	r24, 0xE7	; 231
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN5Print5printEii>
		lcd.print(F("+"));
     e4e:	63 e8       	ldi	r22, 0x83	; 131
     e50:	72 e0       	ldi	r23, 0x02	; 2
     e52:	87 ee       	ldi	r24, 0xE7	; 231
     e54:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
	} else {
		lcd.print(999);
		lcd.print(F("+"));
     e5e:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>

00000e62 <_Z19lcdPrintCriticalLvlh>:
/*
	Отображение счетчиков выхода за пределы допуска ошибки
	_num - номер обмотки
*/
void lcdPrintCriticalLvl(byte _num) {
	if (icError.criticalLvlCount[_num] < 100) {
     e62:	e8 2f       	mov	r30, r24
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	e0 5f       	subi	r30, 0xF0	; 240
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	64 36       	cpi	r22, 0x64	; 100
     e74:	71 05       	cpc	r23, r1
     e76:	1c f4       	brge	.+6      	; 0xe7e <_Z19lcdPrintCriticalLvlh+0x1c>
		lcd.print(icError.criticalLvlCount[_num], 2);
     e78:	42 e0       	ldi	r20, 0x02	; 2
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <_Z19lcdPrintCriticalLvlh+0x28>
	} else if (icError.criticalLvlCount[_num] < 1000) {
     e7e:	68 3e       	cpi	r22, 0xE8	; 232
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	78 07       	cpc	r23, r24
     e84:	34 f4       	brge	.+12     	; 0xe92 <_Z19lcdPrintCriticalLvlh+0x30>
		lcd.print(icError.criticalLvlCount[_num], 1);
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	87 ee       	ldi	r24, 0xE7	; 231
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0c 94 fa 20 	jmp	0x41f4	; 0x41f4 <_ZN5Print5printEii>
	} else {
		lcd.print(999);
     e92:	4a e0       	ldi	r20, 0x0A	; 10
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	67 ee       	ldi	r22, 0xE7	; 231
     e98:	73 e0       	ldi	r23, 0x03	; 3
     e9a:	87 ee       	ldi	r24, 0xE7	; 231
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN5Print5printEii>
		lcd.print(F("+"));
     ea2:	61 e8       	ldi	r22, 0x81	; 129
     ea4:	72 e0       	ldi	r23, 0x02	; 2
     ea6:	87 ee       	ldi	r24, 0xE7	; 231
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>

00000eae <_Z18showStaticAmperagev>:

/*
	Отображение дополнительной статики для режима отображения по току
*/
void showStaticAmperage() {
	lcd.setCursor(7, 0);
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	67 e0       	ldi	r22, 0x07	; 7
     eb2:	87 ee       	ldi	r24, 0xE7	; 231
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("P"));
     eba:	69 eb       	ldi	r22, 0xB9	; 185
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	87 ee       	ldi	r24, 0xE7	; 231
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(7, 1);
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	67 e0       	ldi	r22, 0x07	; 7
     eca:	87 ee       	ldi	r24, 0xE7	; 231
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("M"));
     ed2:	67 eb       	ldi	r22, 0xB7	; 183
     ed4:	71 e0       	ldi	r23, 0x01	; 1
     ed6:	87 ee       	ldi	r24, 0xE7	; 231
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>

00000ede <_Z22showStaticWindingCharsv>:
/*
	Отображение статики по обмоткам
	MP значит measured|perfect
*/
void showStaticWindingChars() {
	lcd.setCursor(3, 0);
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	63 e0       	ldi	r22, 0x03	; 3
     ee2:	87 ee       	ldi	r24, 0xE7	; 231
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("I="));
     eea:	60 eb       	ldi	r22, 0xB0	; 176
     eec:	71 e0       	ldi	r23, 0x01	; 1
     eee:	87 ee       	ldi	r24, 0xE7	; 231
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	87 ee       	ldi	r24, 0xE7	; 231
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("V="));
     f02:	6d ea       	ldi	r22, 0xAD	; 173
     f04:	71 e0       	ldi	r23, 0x01	; 1
     f06:	87 ee       	ldi	r24, 0xE7	; 231
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(8, 1);
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	68 e0       	ldi	r22, 0x08	; 8
     f12:	87 ee       	ldi	r24, 0xE7	; 231
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("E="));
     f1a:	6a ea       	ldi	r22, 0xAA	; 170
     f1c:	71 e0       	ldi	r23, 0x01	; 1
     f1e:	87 ee       	ldi	r24, 0xE7	; 231
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>

00000f26 <_Z19displayStaticAsModev>:

/*
	Отображение статики в ависимости от режима отображения
*/
void displayStaticAsMode() {
	lcd.clear();
     f26:	87 ee       	ldi	r24, 0xE7	; 231
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN17LiquidCrystal_I2C5clearEv>
	switch(modeWork.current) {
     f2e:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <modeWork>
     f32:	8e 2f       	mov	r24, r30
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	8f 31       	cpi	r24, 0x1F	; 31
     f38:	91 05       	cpc	r25, r1
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <_Z19displayStaticAsModev+0x18>
     f3c:	d8 c0       	rjmp	.+432    	; 0x10ee <_Z19displayStaticAsModev+0x1c8>
     f3e:	fc 01       	movw	r30, r24
     f40:	ec 5c       	subi	r30, 0xCC	; 204
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcd.print(F("Connection type"));
     f48:	61 e7       	ldi	r22, 0x71	; 113
     f4a:	72 e0       	ldi	r23, 0x02	; 2
     f4c:	cc c0       	rjmp	.+408    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
		break;
		case MW_SETUP_GAIN_AMPERAGE:
			lcd.print(F("A gain maxV/step"));
     f4e:	60 e6       	ldi	r22, 0x60	; 96
     f50:	72 e0       	ldi	r23, 0x02	; 2
     f52:	c9 c0       	rjmp	.+402    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			lcd.print(F("V gain maxV/step"));
     f54:	6f e4       	ldi	r22, 0x4F	; 79
     f56:	72 e0       	ldi	r23, 0x02	; 2
     f58:	c6 c0       	rjmp	.+396    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			lcd.print(F("Vm AB"));
     f5a:	69 e4       	ldi	r22, 0x49	; 73
     f5c:	72 e0       	ldi	r23, 0x02	; 2
     f5e:	c3 c0       	rjmp	.+390    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			lcd.print(F("Vm BC"));
     f60:	63 e4       	ldi	r22, 0x43	; 67
     f62:	72 e0       	ldi	r23, 0x02	; 2
     f64:	c0 c0       	rjmp	.+384    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			lcd.print(F("Vm AC"));
     f66:	6d e3       	ldi	r22, 0x3D	; 61
     f68:	72 e0       	ldi	r23, 0x02	; 2
     f6a:	bd c0       	rjmp	.+378    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			lcd.print(F("Am AB"));
     f6c:	67 e3       	ldi	r22, 0x37	; 55
     f6e:	72 e0       	ldi	r23, 0x02	; 2
     f70:	ba c0       	rjmp	.+372    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			lcd.print(F("Am BC"));
     f72:	61 e3       	ldi	r22, 0x31	; 49
     f74:	72 e0       	ldi	r23, 0x02	; 2
     f76:	b7 c0       	rjmp	.+366    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcd.print(F("Am AC"));
     f78:	6b e2       	ldi	r22, 0x2B	; 43
     f7a:	72 e0       	ldi	r23, 0x02	; 2
     f7c:	b4 c0       	rjmp	.+360    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcd.print(F("ECount"));
     f7e:	64 e2       	ldi	r22, 0x24	; 36
     f80:	72 e0       	ldi	r23, 0x02	; 2
     f82:	87 ee       	ldi	r24, 0xE7	; 231
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	68 e0       	ldi	r22, 0x08	; 8
     f8e:	87 ee       	ldi	r24, 0xE7	; 231
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AB="));
     f96:	60 e2       	ldi	r22, 0x20	; 32
     f98:	72 e0       	ldi	r23, 0x02	; 2
     f9a:	87 ee       	ldi	r24, 0xE7	; 231
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	87 ee       	ldi	r24, 0xE7	; 231
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("BC="));
     fae:	6c e1       	ldi	r22, 0x1C	; 28
     fb0:	72 e0       	ldi	r23, 0x02	; 2
     fb2:	87 ee       	ldi	r24, 0xE7	; 231
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 1);
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	68 e0       	ldi	r22, 0x08	; 8
     fbe:	87 ee       	ldi	r24, 0xE7	; 231
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AC="));
     fc6:	68 e1       	ldi	r22, 0x18	; 24
     fc8:	72 e0       	ldi	r23, 0x02	; 2
     fca:	8d c0       	rjmp	.+282    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SHOW_ERRORS:
			lcd.print(F("I1="));
     fcc:	64 e1       	ldi	r22, 0x14	; 20
     fce:	72 e0       	ldi	r23, 0x02	; 2
     fd0:	87 ee       	ldi	r24, 0xE7	; 231
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	68 e0       	ldi	r22, 0x08	; 8
     fdc:	87 ee       	ldi	r24, 0xE7	; 231
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I2="));
     fe4:	60 e1       	ldi	r22, 0x10	; 16
     fe6:	72 e0       	ldi	r23, 0x02	; 2
     fe8:	87 ee       	ldi	r24, 0xE7	; 231
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	87 ee       	ldi	r24, 0xE7	; 231
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I3="));
     ffc:	6c e0       	ldi	r22, 0x0C	; 12
     ffe:	72 e0       	ldi	r23, 0x02	; 2
    1000:	87 ee       	ldi	r24, 0xE7	; 231
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(14, 1);
    1008:	41 e0       	ldi	r20, 0x01	; 1
    100a:	6e e0       	ldi	r22, 0x0E	; 14
    100c:	87 ee       	ldi	r24, 0xE7	; 231
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("e%"));
    1014:	69 e0       	ldi	r22, 0x09	; 9
    1016:	72 e0       	ldi	r23, 0x02	; 2
    1018:	66 c0       	rjmp	.+204    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SHOW_ERRORS_DIFF:
			lcd.print(1);
    101a:	4a e0       	ldi	r20, 0x0A	; 10
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	87 ee       	ldi	r24, 0xE7	; 231
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN5Print5printEii>
			lcd.setCursor(8, 0);
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	68 e0       	ldi	r22, 0x08	; 8
    102e:	87 ee       	ldi	r24, 0xE7	; 231
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(2);
    1036:	4a e0       	ldi	r20, 0x0A	; 10
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	87 ee       	ldi	r24, 0xE7	; 231
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN5Print5printEii>
			lcd.setCursor(0, 1);
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	87 ee       	ldi	r24, 0xE7	; 231
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(3);
    1052:	4a e0       	ldi	r20, 0x0A	; 10
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	63 e0       	ldi	r22, 0x03	; 3
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	87 ee       	ldi	r24, 0xE7	; 231
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN5Print5printEii>
			lcd.setCursor(8, 1);
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	68 e0       	ldi	r22, 0x08	; 8
    1066:	87 ee       	ldi	r24, 0xE7	; 231
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("F"));
    106e:	67 e0       	ldi	r22, 0x07	; 7
    1070:	72 e0       	ldi	r23, 0x02	; 2
    1072:	39 c0       	rjmp	.+114    	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SHOW_AMPERAGE_AB:
			lcd.print(F("AB D"));
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	72 e0       	ldi	r23, 0x02	; 2
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <_Z19displayStaticAsModev+0x15e>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_BC:
			lcd.print(F("BC D"));
    107a:	6d ef       	ldi	r22, 0xFD	; 253
    107c:	71 e0       	ldi	r23, 0x01	; 1
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <_Z19displayStaticAsModev+0x15e>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_AC:
			lcd.print(F("AC D"));
    1080:	68 ef       	ldi	r22, 0xF8	; 248
    1082:	71 e0       	ldi	r23, 0x01	; 1
    1084:	87 ee       	ldi	r24, 0xE7	; 231
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticAmperage();
    108c:	0c 94 57 07 	jmp	0xeae	; 0xeae <_Z18showStaticAmperagev>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			lcd.print(F("AB"));
    1090:	65 ef       	ldi	r22, 0xF5	; 245
    1092:	71 e0       	ldi	r23, 0x01	; 1
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <_Z19displayStaticAsModev+0x17a>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			lcd.print(F("BC"));
    1096:	62 ef       	ldi	r22, 0xF2	; 242
    1098:	71 e0       	ldi	r23, 0x01	; 1
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <_Z19displayStaticAsModev+0x17a>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			lcd.print(F("AC"));
    109c:	6f ee       	ldi	r22, 0xEF	; 239
    109e:	71 e0       	ldi	r23, 0x01	; 1
    10a0:	87 ee       	ldi	r24, 0xE7	; 231
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticWindingChars();
    10a8:	0c 94 6f 07 	jmp	0xede	; 0xede <_Z22showStaticWindingCharsv>
			break;
		case MW_CONTROLL_MEASUREMENT:
			lcd.print(F("Measurement"));
    10ac:	63 ee       	ldi	r22, 0xE3	; 227
    10ae:	71 e0       	ldi	r23, 0x01	; 1
    10b0:	87 ee       	ldi	r24, 0xE7	; 231
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	87 ee       	ldi	r24, 0xE7	; 231
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("B1=work; B2=stop"));
    10c4:	62 ed       	ldi	r22, 0xD2	; 210
    10c6:	71 e0       	ldi	r23, 0x01	; 1
    10c8:	0e c0       	rjmp	.+28     	; 0x10e6 <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_NEED_SETUP:
			lcd.print(F("Oooops!"));
    10ca:	6a ec       	ldi	r22, 0xCA	; 202
    10cc:	71 e0       	ldi	r23, 0x01	; 1
    10ce:	87 ee       	ldi	r24, 0xE7	; 231
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	87 ee       	ldi	r24, 0xE7	; 231
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("Setup required"));
    10e2:	6b eb       	ldi	r22, 0xBB	; 187
    10e4:	71 e0       	ldi	r23, 0x01	; 1
    10e6:	87 ee       	ldi	r24, 0xE7	; 231
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    10ee:	08 95       	ret

000010f0 <_Z12lcdClearCellhhh>:
	Очистка определенного блока экрана с установкой на этом месте курсора
	col - номер колонки
	row - номер строки
	rowLength - количество ячеек для очистки в строке
*/
void lcdClearCell(byte col, byte row, byte rowLength) {                
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	d8 2f       	mov	r29, r24
    10fa:	16 2f       	mov	r17, r22
    10fc:	04 2f       	mov	r16, r20
	lcd.setCursor(col, row);                                        
    10fe:	46 2f       	mov	r20, r22
    1100:	68 2f       	mov	r22, r24
    1102:	87 ee       	ldi	r24, 0xE7	; 231
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	for (byte i = 0; i < rowLength; i++) {                             
    110a:	c0 e0       	ldi	r28, 0x00	; 0
    110c:	c0 17       	cp	r28, r16
    110e:	41 f0       	breq	.+16     	; 0x1120 <_Z12lcdClearCellhhh+0x30>
		lcd.print(F(" "));
    1110:	68 ea       	ldi	r22, 0xA8	; 168
    1112:	71 e0       	ldi	r23, 0x01	; 1
    1114:	87 ee       	ldi	r24, 0xE7	; 231
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
	row - номер строки
	rowLength - количество ячеек для очистки в строке
*/
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
    111c:	cf 5f       	subi	r28, 0xFF	; 255
    111e:	f6 cf       	rjmp	.-20     	; 0x110c <_Z12lcdClearCellhhh+0x1c>
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
    1120:	41 2f       	mov	r20, r17
    1122:	6d 2f       	mov	r22, r29
    1124:	87 ee       	ldi	r24, 0xE7	; 231
    1126:	91 e0       	ldi	r25, 0x01	; 1
}
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
    1130:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>

00001134 <_Z12showGainInfov>:

/*
	Оторажаем возможные варианты усиления
*/
void showGainInfo() {
	lcdClearCell(0, 1, 16);
    1134:	40 e1       	ldi	r20, 0x10	; 16
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
	switch((int)setDigit.value) {
    113e:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    1142:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    1146:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    114a:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    114e:	0e 94 83 1c 	call	0x3906	; 0x3906 <__fixsfsi>
    1152:	62 30       	cpi	r22, 0x02	; 2
    1154:	71 05       	cpc	r23, r1
    1156:	b1 f0       	breq	.+44     	; 0x1184 <_Z12showGainInfov+0x50>
    1158:	3c f4       	brge	.+14     	; 0x1168 <_Z12showGainInfov+0x34>
    115a:	61 15       	cp	r22, r1
    115c:	71 05       	cpc	r23, r1
    115e:	61 f0       	breq	.+24     	; 0x1178 <_Z12showGainInfov+0x44>
    1160:	61 30       	cpi	r22, 0x01	; 1
    1162:	71 05       	cpc	r23, r1
    1164:	61 f0       	breq	.+24     	; 0x117e <_Z12showGainInfov+0x4a>
    1166:	08 95       	ret
    1168:	64 30       	cpi	r22, 0x04	; 4
    116a:	71 05       	cpc	r23, r1
    116c:	89 f0       	breq	.+34     	; 0x1190 <_Z12showGainInfov+0x5c>
    116e:	6c f0       	brlt	.+26     	; 0x118a <_Z12showGainInfov+0x56>
    1170:	65 30       	cpi	r22, 0x05	; 5
    1172:	71 05       	cpc	r23, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <_Z12showGainInfov+0x62>
    1176:	08 95       	ret
		case 0:
			lcd.print(F("6.144 0.1875"));
    1178:	67 ef       	ldi	r22, 0xF7	; 247
    117a:	72 e0       	ldi	r23, 0x02	; 2
    117c:	0e c0       	rjmp	.+28     	; 0x119a <_Z12showGainInfov+0x66>
			break;
		case 1:
			lcd.print(F("4.096 0.125"));
    117e:	6b ee       	ldi	r22, 0xEB	; 235
    1180:	72 e0       	ldi	r23, 0x02	; 2
    1182:	0b c0       	rjmp	.+22     	; 0x119a <_Z12showGainInfov+0x66>
			break;
		case 2:
			lcd.print(F("2.048 0.0625"));
    1184:	6e ed       	ldi	r22, 0xDE	; 222
    1186:	72 e0       	ldi	r23, 0x02	; 2
    1188:	08 c0       	rjmp	.+16     	; 0x119a <_Z12showGainInfov+0x66>
			break;
		case 3:
			lcd.print(F("1.024 0.03125"));
    118a:	60 ed       	ldi	r22, 0xD0	; 208
    118c:	72 e0       	ldi	r23, 0x02	; 2
    118e:	05 c0       	rjmp	.+10     	; 0x119a <_Z12showGainInfov+0x66>
			break;
		case 4:
			lcd.print(F("0.512 0.015625"));
    1190:	61 ec       	ldi	r22, 0xC1	; 193
    1192:	72 e0       	ldi	r23, 0x02	; 2
    1194:	02 c0       	rjmp	.+4      	; 0x119a <_Z12showGainInfov+0x66>
			break;
		case 5:
			lcd.print(F("0.256 0.0078125"));
    1196:	61 eb       	ldi	r22, 0xB1	; 177
    1198:	72 e0       	ldi	r23, 0x02	; 2
    119a:	87 ee       	ldi	r24, 0xE7	; 231
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>

000011a2 <_Z17showAmperageCharsh>:

/*
	Отображение идеального и измеренного тока
	_num - номер обмотки
*/
void showAmperageChars(byte _num) {
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	c8 2f       	mov	r28, r24
	lcdClearCell(9, 0, 7);
    11b4:	47 e0       	ldi	r20, 0x07	; 7
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	89 e0       	ldi	r24, 0x09	; 9
    11ba:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
	lcd.print(adsChars.perfectAmperage[_num], 5);
    11be:	d0 e0       	ldi	r29, 0x00	; 0
    11c0:	8e 01       	movw	r16, r28
    11c2:	00 0f       	add	r16, r16
    11c4:	11 1f       	adc	r17, r17
    11c6:	00 0f       	add	r16, r16
    11c8:	11 1f       	adc	r17, r17
    11ca:	09 59       	subi	r16, 0x99	; 153
    11cc:	1e 4f       	sbci	r17, 0xFE	; 254
    11ce:	d8 01       	movw	r26, r16
    11d0:	4d 91       	ld	r20, X+
    11d2:	5d 91       	ld	r21, X+
    11d4:	6d 91       	ld	r22, X+
    11d6:	7c 91       	ld	r23, X
    11d8:	25 e0       	ldi	r18, 0x05	; 5
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	87 ee       	ldi	r24, 0xE7	; 231
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
	
	lcdClearCell(0, 1, 6);
    11e4:	46 e0       	ldi	r20, 0x06	; 6
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
	float _diff = abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]);
    11ee:	23 96       	adiw	r28, 0x03	; 3
    11f0:	fe 01       	movw	r30, r28
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	e1 5b       	subi	r30, 0xB1	; 177
    11fc:	fe 4f       	sbci	r31, 0xFE	; 254
    11fe:	d8 01       	movw	r26, r16
    1200:	2d 91       	ld	r18, X+
    1202:	3d 91       	ld	r19, X+
    1204:	4d 91       	ld	r20, X+
    1206:	5c 91       	ld	r21, X
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
    1214:	6b 01       	movw	r12, r22
    1216:	7c 01       	movw	r14, r24
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	a9 01       	movw	r20, r18
    121e:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
    1222:	18 16       	cp	r1, r24
    1224:	24 f0       	brlt	.+8      	; 0x122e <_Z17showAmperageCharsh+0x8c>
    1226:	f7 fa       	bst	r15, 7
    1228:	f0 94       	com	r15
    122a:	f7 f8       	bld	r15, 7
    122c:	f0 94       	com	r15
	lcd.print(_diff, 4);
    122e:	24 e0       	ldi	r18, 0x04	; 4
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	b7 01       	movw	r22, r14
    1234:	a6 01       	movw	r20, r12
    1236:	87 ee       	ldi	r24, 0xE7	; 231
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
	
	lcdClearCell(9, 1, 7);
    123e:	47 e0       	ldi	r20, 0x07	; 7
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	89 e0       	ldi	r24, 0x09	; 9
    1244:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
	lcd.print(adsChars.measuredAmperage[_num], 5);
    1248:	cc 0f       	add	r28, r28
    124a:	dd 1f       	adc	r29, r29
    124c:	cc 0f       	add	r28, r28
    124e:	dd 1f       	adc	r29, r29
    1250:	c1 5b       	subi	r28, 0xB1	; 177
    1252:	de 4f       	sbci	r29, 0xFE	; 254
    1254:	48 81       	ld	r20, Y
    1256:	59 81       	ldd	r21, Y+1	; 0x01
    1258:	6a 81       	ldd	r22, Y+2	; 0x02
    125a:	7b 81       	ldd	r23, Y+3	; 0x03
    125c:	25 e0       	ldi	r18, 0x05	; 5
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	87 ee       	ldi	r24, 0xE7	; 231
    1262:	91 e0       	ldi	r25, 0x01	; 1
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
	lcdClearCell(0, 1, 6);
	float _diff = abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]);
	lcd.print(_diff, 4);
	
	lcdClearCell(9, 1, 7);
	lcd.print(adsChars.measuredAmperage[_num], 5);
    1274:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <_ZN5Print5printEdi>

00001278 <_Z22showWindingCharsValuesh>:

/*
	Отображение характеристик по обмоткам
	_num - номер обмотки
*/
void showWindingCharsValues(byte _num) {
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	c8 2f       	mov	r28, r24
	lcdClearCell(5, 0, 7);
    1286:	47 e0       	ldi	r20, 0x07	; 7
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	85 e0       	ldi	r24, 0x05	; 5
    128c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	lcd.print(adsChars.measuredAmperage[_num], 5);
    1290:	d0 e0       	ldi	r29, 0x00	; 0
    1292:	fe 01       	movw	r30, r28
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	e5 5a       	subi	r30, 0xA5	; 165
    129e:	fe 4f       	sbci	r31, 0xFE	; 254
    12a0:	40 81       	ld	r20, Z
    12a2:	51 81       	ldd	r21, Z+1	; 0x01
    12a4:	62 81       	ldd	r22, Z+2	; 0x02
    12a6:	73 81       	ldd	r23, Z+3	; 0x03
    12a8:	25 e0       	ldi	r18, 0x05	; 5
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	87 ee       	ldi	r24, 0xE7	; 231
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
	
	lcdClearCell(2, 1, 8);
    12b4:	48 e0       	ldi	r20, 0x08	; 8
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
	if (adsChars.voltage[_num] < 100) {
    12be:	fe 01       	movw	r30, r28
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	e1 5b       	subi	r30, 0xB1	; 177
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	c0 80       	ld	r12, Z
    12ce:	d1 80       	ldd	r13, Z+1	; 0x01
    12d0:	e2 80       	ldd	r14, Z+2	; 0x02
    12d2:	f3 80       	ldd	r15, Z+3	; 0x03
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	48 ec       	ldi	r20, 0xC8	; 200
    12da:	52 e4       	ldi	r21, 0x42	; 66
    12dc:	c7 01       	movw	r24, r14
    12de:	b6 01       	movw	r22, r12
    12e0:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    12e4:	87 fd       	sbrc	r24, 7
    12e6:	39 c0       	rjmp	.+114    	; 0x135a <_Z22showWindingCharsValuesh+0xe2>
		roundedSign = 2;
	} else if (adsChars.voltage[_num] < 1000) {
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a e7       	ldi	r20, 0x7A	; 122
    12ee:	54 e4       	ldi	r21, 0x44	; 68
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    12f8:	87 fd       	sbrc	r24, 7
    12fa:	31 c0       	rjmp	.+98     	; 0x135e <_Z22showWindingCharsValuesh+0xe6>
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
	} else {
		lcd.print(999);
    12fc:	4a e0       	ldi	r20, 0x0A	; 10
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	67 ee       	ldi	r22, 0xE7	; 231
    1302:	73 e0       	ldi	r23, 0x03	; 3
    1304:	87 ee       	ldi	r24, 0xE7	; 231
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN5Print5printEii>
		lcd.print(F("+"));
    130c:	65 eb       	ldi	r22, 0xB5	; 181
    130e:	71 e0       	ldi	r23, 0x01	; 1
    1310:	87 ee       	ldi	r24, 0xE7	; 231
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
	}
	
	lcdClearCell(10, 1, 5);
    1318:	45 e0       	ldi	r20, 0x05	; 5
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	8a e0       	ldi	r24, 0x0A	; 10
    131e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
	lcd.print(icError.curLvl[_num], 1);
    1322:	cc 0f       	add	r28, r28
    1324:	dd 1f       	adc	r29, r29
    1326:	cc 0f       	add	r28, r28
    1328:	dd 1f       	adc	r29, r29
    132a:	cc 5f       	subi	r28, 0xFC	; 252
    132c:	de 4f       	sbci	r29, 0xFE	; 254
    132e:	48 81       	ld	r20, Y
    1330:	59 81       	ldd	r21, Y+1	; 0x01
    1332:	6a 81       	ldd	r22, Y+2	; 0x02
    1334:	7b 81       	ldd	r23, Y+3	; 0x03
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	87 ee       	ldi	r24, 0xE7	; 231
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
	lcd.print(F("%"));
    1342:	63 eb       	ldi	r22, 0xB3	; 179
    1344:	71 e0       	ldi	r23, 0x01	; 1
    1346:	87 ee       	ldi	r24, 0xE7	; 231
    1348:	91 e0       	ldi	r25, 0x01	; 1
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
	lcd.print(icError.curLvl[_num], 1);
	lcd.print(F("%"));
    1356:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
	byte roundedSign = 2;
	lcd.print(adsChars.measuredAmperage[_num], 5);
	
	lcdClearCell(2, 1, 8);
	if (adsChars.voltage[_num] < 100) {
		roundedSign = 2;
    135a:	22 e0       	ldi	r18, 0x02	; 2
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <_Z22showWindingCharsValuesh+0xe8>
	} else if (adsChars.voltage[_num] < 1000) {
		roundedSign = 1;
    135e:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	b7 01       	movw	r22, r14
    1364:	a6 01       	movw	r20, r12
    1366:	87 ee       	ldi	r24, 0xE7	; 231
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
    136e:	d4 cf       	rjmp	.-88     	; 0x1318 <_Z22showWindingCharsValuesh+0xa0>

00001370 <_Z13displayAsModev>:
/*
	Отображение динамиеских данных в зависимости от режима
*/
void displayAsMode() {
	// Если мы изменили режим отображения, то необходимо обновиь статику и динамику
	if (modeWork.current != modeWork.prev) {
    1370:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    1374:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <modeWork+0x1>
    1378:	89 17       	cp	r24, r25
    137a:	39 f0       	breq	.+14     	; 0x138a <_Z13displayAsModev+0x1a>
		modeWork.prev = modeWork.current;
    137c:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <modeWork+0x1>
		lcdUpdateScreen = true;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
		displayStaticAsMode();
    1386:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z19displayStaticAsModev>
	}
	if (!lcdUpdateScreen) {
    138a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <lcdUpdateScreen>
    138e:	88 23       	and	r24, r24
    1390:	09 f4       	brne	.+2      	; 0x1394 <_Z13displayAsModev+0x24>
    1392:	8f c1       	rjmp	.+798    	; 0x16b2 <_Z13displayAsModev+0x342>
		return;
	} 
	lcdUpdateScreen = false;
    1394:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <lcdUpdateScreen>
	// обновляем динамику
	switch(modeWork.current) {
    1398:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <modeWork>
    139c:	8e 2f       	mov	r24, r30
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	fc 01       	movw	r30, r24
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    13a4:	e6 31       	cpi	r30, 0x16	; 22
    13a6:	f1 05       	cpc	r31, r1
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <_Z13displayAsModev+0x3c>
    13aa:	83 c1       	rjmp	.+774    	; 0x16b2 <_Z13displayAsModev+0x342>
    13ac:	ed 5a       	subi	r30, 0xAD	; 173
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcdClearCell(0, 1, 8);
    13b4:	48 e0       	ldi	r20, 0x08	; 8
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			if (setDigit.value == CONNECTION_TYPE_STAR) {
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    13c8:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    13cc:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    13d0:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    13d4:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    13d8:	81 11       	cpse	r24, r1
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <_Z13displayAsModev+0x72>
				lcd.print(F("Star"));
    13dc:	6c ea       	ldi	r22, 0xAC	; 172
    13de:	72 e0       	ldi	r23, 0x02	; 2
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <_Z13displayAsModev+0x76>
			} else {
				lcd.print(F("Triangle"));
    13e2:	63 ea       	ldi	r22, 0xA3	; 163
    13e4:	72 e0       	ldi	r23, 0x02	; 2
    13e6:	87 ee       	ldi	r24, 0xE7	; 231
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			}
			break;
		case MW_SETUP_GAIN_AMPERAGE:
		case MW_SETUP_GAIN_VOLTAGE:
			showGainInfo();
    13ee:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <_Z12showGainInfov>
			break;
		case MW_SETUP_IMPEDANCE:
			lcd.print(F("R1="));
    13f2:	6f e9       	ldi	r22, 0x9F	; 159
    13f4:	72 e0       	ldi	r23, 0x02	; 2
    13f6:	87 ee       	ldi	r24, 0xE7	; 231
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(settings.impedance[0], 1);
    13fe:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <settings+0x6>
    1402:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <settings+0x7>
    1406:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <settings+0x8>
    140a:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <settings+0x9>
    140e:	21 e0       	ldi	r18, 0x01	; 1
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	87 ee       	ldi	r24, 0xE7	; 231
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
			lcd.setCursor(8, 0);
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	68 e0       	ldi	r22, 0x08	; 8
    141e:	87 ee       	ldi	r24, 0xE7	; 231
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("R2="));
    1426:	6b e9       	ldi	r22, 0x9B	; 155
    1428:	72 e0       	ldi	r23, 0x02	; 2
    142a:	87 ee       	ldi	r24, 0xE7	; 231
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcdClearCell(11, 0, 5);
    1432:	45 e0       	ldi	r20, 0x05	; 5
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	8b e0       	ldi	r24, 0x0B	; 11
    1438:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcd.print(settings.impedance[1], 1);
    143c:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <settings+0xa>
    1440:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <settings+0xb>
    1444:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <settings+0xc>
    1448:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <settings+0xd>
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	87 ee       	ldi	r24, 0xE7	; 231
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
			lcd.setCursor(0, 1);
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	87 ee       	ldi	r24, 0xE7	; 231
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("R3="));
    1464:	67 e9       	ldi	r22, 0x97	; 151
    1466:	72 e0       	ldi	r23, 0x02	; 2
    1468:	87 ee       	ldi	r24, 0xE7	; 231
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcdClearCell(3, 1, 5);
    1470:	45 e0       	ldi	r20, 0x05	; 5
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcd.print(settings.impedance[2], 1);
    147a:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <settings+0xe>
    147e:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <settings+0xf>
    1482:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <settings+0x10>
    1486:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <settings+0x11>
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	28 c0       	rjmp	.+80     	; 0x14e0 <_Z13displayAsModev+0x170>
		case MW_SETUP_MULT_VOLTAGE_BC:
		case MW_SETUP_MULT_VOLTAGE_AC:
		case MW_SETUP_MULT_AMPERAGE_AB:
		case MW_SETUP_MULT_AMPERAGE_BC:
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcdClearCell(7, 0, 8);
    1490:	48 e0       	ldi	r20, 0x08	; 8
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	87 e0       	ldi	r24, 0x07	; 7
    1496:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcd.print(F("x"));
    149a:	65 e9       	ldi	r22, 0x95	; 149
    149c:	72 e0       	ldi	r23, 0x02	; 2
    149e:	87 ee       	ldi	r24, 0xE7	; 231
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(setDigit.curMultiplier, 3);
    14a6:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <setDigit+0x4>
    14aa:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <setDigit+0x5>
    14ae:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <setDigit+0x6>
    14b2:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <setDigit+0x7>
    14b6:	23 e0       	ldi	r18, 0x03	; 3
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	87 ee       	ldi	r24, 0xE7	; 231
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
			lcdClearCell(0, 1, 16);
    14c2:	40 e1       	ldi	r20, 0x10	; 16
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcd.print(setDigit.value, 3);
    14cc:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    14d0:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    14d4:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    14d8:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    14dc:	23 e0       	ldi	r18, 0x03	; 3
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	87 ee       	ldi	r24, 0xE7	; 231
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <_ZN5Print5printEdi>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcdClearCell(11, 0, 4);
    14e8:	44 e0       	ldi	r20, 0x04	; 4
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	8b e0       	ldi	r24, 0x0B	; 11
    14ee:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(0);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	0e 94 31 07 	call	0xe62	; 0xe62 <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(3, 1, 4);
    14f8:	44 e0       	ldi	r20, 0x04	; 4
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(1);
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	0e 94 31 07 	call	0xe62	; 0xe62 <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(11, 1, 4);
    1508:	44 e0       	ldi	r20, 0x04	; 4
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	8b e0       	ldi	r24, 0x0B	; 11
    150e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(2);
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	0c 94 31 07 	jmp	0xe62	; 0xe62 <_Z19lcdPrintCriticalLvlh>
			break;
		case MW_SHOW_ERRORS:
			lcdClearCell(3, 0, 5);
    1518:	45 e0       	ldi	r20, 0x05	; 5
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(0);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(11, 0, 5);
    1528:	45 e0       	ldi	r20, 0x05	; 5
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	8b e0       	ldi	r24, 0x0B	; 11
    152e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(1);
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(3, 1, 5);
    1538:	45 e0       	ldi	r20, 0x05	; 5
    153a:	61 e0       	ldi	r22, 0x01	; 1
    153c:	83 e0       	ldi	r24, 0x03	; 3
    153e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(2);
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <_Z27lcdPrinRoundedCurErrorLevelh>
			break;
		case MW_SHOW_ERRORS_DIFF:
			lcdClearCell(1, 0, 6);
    1548:	46 e0       	ldi	r20, 0x06	; 6
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrintAmperageDiff(0);
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z20lcdPrintAmperageDiffh>
			lcdClearCell(9, 0, 6);
    1558:	46 e0       	ldi	r20, 0x06	; 6
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	89 e0       	ldi	r24, 0x09	; 9
    155e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrintAmperageDiff(1);
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z20lcdPrintAmperageDiffh>
			lcdClearCell(1, 1, 6);
    1568:	46 e0       	ldi	r20, 0x06	; 6
    156a:	61 e0       	ldi	r22, 0x01	; 1
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcdPrintAmperageDiff(2);
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z20lcdPrintAmperageDiffh>
			lcdClearCell(9, 1, 6);
    1578:	46 e0       	ldi	r20, 0x06	; 6
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	89 e0       	ldi	r24, 0x09	; 9
    157e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z12lcdClearCellhhh>
			lcd.print(icError.fullError, 4);
    1582:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1586:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    158a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
    158e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
    1592:	24 e0       	ldi	r18, 0x04	; 4
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	a4 cf       	rjmp	.-184    	; 0x14e0 <_Z13displayAsModev+0x170>
			break;
		case MW_SHOW_AMPERAGE:
			lcd.clear();
    1598:	87 ee       	ldi	r24, 0xE7	; 231
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN17LiquidCrystal_I2C5clearEv>
			lcd.print(F("P "));
    15a0:	62 e9       	ldi	r22, 0x92	; 146
    15a2:	72 e0       	ldi	r23, 0x02	; 2
    15a4:	87 ee       	ldi	r24, 0xE7	; 231
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[0], 2);
    15ac:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <adsChars+0x18>
    15b0:	50 91 68 01 	lds	r21, 0x0168	; 0x800168 <adsChars+0x19>
    15b4:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <adsChars+0x1a>
    15b8:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <adsChars+0x1b>
    15bc:	22 e0       	ldi	r18, 0x02	; 2
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	87 ee       	ldi	r24, 0xE7	; 231
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
			lcd.print(F("#"));
    15c8:	60 e9       	ldi	r22, 0x90	; 144
    15ca:	72 e0       	ldi	r23, 0x02	; 2
    15cc:	87 ee       	ldi	r24, 0xE7	; 231
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[1], 2);
    15d4:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <adsChars+0x1c>
    15d8:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <adsChars+0x1d>
    15dc:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <adsChars+0x1e>
    15e0:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <adsChars+0x1f>
    15e4:	22 e0       	ldi	r18, 0x02	; 2
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	87 ee       	ldi	r24, 0xE7	; 231
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
			lcd.print(F("#"));
    15f0:	6e e8       	ldi	r22, 0x8E	; 142
    15f2:	72 e0       	ldi	r23, 0x02	; 2
    15f4:	87 ee       	ldi	r24, 0xE7	; 231
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[2], 2);
    15fc:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <adsChars+0x20>
    1600:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <adsChars+0x21>
    1604:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <adsChars+0x22>
    1608:	70 91 72 01 	lds	r23, 0x0172	; 0x800172 <adsChars+0x23>
    160c:	22 e0       	ldi	r18, 0x02	; 2
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	87 ee       	ldi	r24, 0xE7	; 231
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
	
			lcd.setCursor(0, 1);
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	87 ee       	ldi	r24, 0xE7	; 231
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("M "));
    1624:	6b e8       	ldi	r22, 0x8B	; 139
    1626:	72 e0       	ldi	r23, 0x02	; 2
    1628:	87 ee       	ldi	r24, 0xE7	; 231
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[0], 2);
    1630:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <adsChars+0xc>
    1634:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <adsChars+0xd>
    1638:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <adsChars+0xe>
    163c:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <adsChars+0xf>
    1640:	22 e0       	ldi	r18, 0x02	; 2
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	87 ee       	ldi	r24, 0xE7	; 231
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
			lcd.print(F("#"));
    164c:	69 e8       	ldi	r22, 0x89	; 137
    164e:	72 e0       	ldi	r23, 0x02	; 2
    1650:	87 ee       	ldi	r24, 0xE7	; 231
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[1], 2);
    1658:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <adsChars+0x10>
    165c:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <adsChars+0x11>
    1660:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <adsChars+0x12>
    1664:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <adsChars+0x13>
    1668:	22 e0       	ldi	r18, 0x02	; 2
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	87 ee       	ldi	r24, 0xE7	; 231
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 ee 21 	call	0x43dc	; 0x43dc <_ZN5Print5printEdi>
			lcd.print(F("#"));
    1674:	67 e8       	ldi	r22, 0x87	; 135
    1676:	72 e0       	ldi	r23, 0x02	; 2
    1678:	87 ee       	ldi	r24, 0xE7	; 231
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[2], 2);
    1680:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <adsChars+0x14>
    1684:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <adsChars+0x15>
    1688:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <adsChars+0x16>
    168c:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <adsChars+0x17>
    1690:	22 e0       	ldi	r18, 0x02	; 2
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	25 cf       	rjmp	.-438    	; 0x14e0 <_Z13displayAsModev+0x170>
			break;
		case MW_SHOW_AMPERAGE_AB:
			showAmperageChars(0);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	03 c0       	rjmp	.+6      	; 0x16a0 <_Z13displayAsModev+0x330>
			break;
		case MW_SHOW_AMPERAGE_BC:
			showAmperageChars(1);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <_Z13displayAsModev+0x330>
			break;
		case MW_SHOW_AMPERAGE_AC:
			showAmperageChars(2);
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <_Z17showAmperageCharsh>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			showWindingCharsValues(0);
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <_Z13displayAsModev+0x33e>
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			showWindingCharsValues(1);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <_Z13displayAsModev+0x33e>
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			showWindingCharsValues(2);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_Z22showWindingCharsValuesh>
    16b2:	08 95       	ret

000016b4 <loop>:
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("Need setup params"));
	}
}

void loop() {
    16b4:	3f 92       	push	r3
    16b6:	4f 92       	push	r4
    16b8:	5f 92       	push	r5
    16ba:	6f 92       	push	r6
    16bc:	7f 92       	push	r7
    16be:	8f 92       	push	r8
    16c0:	9f 92       	push	r9
    16c2:	af 92       	push	r10
    16c4:	bf 92       	push	r11
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <loop+0x24>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <loop+0x26>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <loop+0x28>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	// Следим за кнопками
	button1Callback.tick();
    16e0:	8a e4       	ldi	r24, 0x4A	; 74
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <_ZN9OneButton4tickEv>
	button2Callback.tick();
    16e8:	89 e2       	ldi	r24, 0x29	; 41
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <_ZN9OneButton4tickEv>
	// Отображаем данные на экран
	displayAsMode();
    16f0:	0e 94 b8 09 	call	0x1370	; 0x1370 <_Z13displayAsModev>
	// Если в режиме измерений
	
	if(settings.isReadyToWork == MM_WORK) {
    16f4:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <settings>
    16f8:	88 23       	and	r24, r24
    16fa:	09 f4       	brne	.+2      	; 0x16fe <loop+0x4a>
    16fc:	c4 c1       	rjmp	.+904    	; 0x1a86 <loop+0x3d2>
		// получаем параметры
		getAdsParams();
    16fe:	0e 94 97 04 	call	0x92e	; 0x92e <_Z12getAdsParamsv>
		// и продолжаем получать пока не накопим 50 измерений
		if (adsChars.currentMeasurement < adsChars.measurementsCount) {
    1702:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <adsChars+0x3d>
    1706:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <adsChars+0x3c>
    170a:	89 17       	cp	r24, r25
    170c:	20 f4       	brcc	.+8      	; 0x1716 <loop+0x62>
			adsChars.currentMeasurement++;
    170e:	8f 5f       	subi	r24, 0xFF	; 255
    1710:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <adsChars+0x3d>
    1714:	b8 c1       	rjmp	.+880    	; 0x1a86 <loop+0x3d2>
		} else {
			// после накопления measurementsCount обновляем экран и смотрим на наличия межветковых замыканий
			lcdUpdateScreen = true;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
    171c:	0e 94 4c 22 	call	0x4498	; 0x4498 <millis>
    1720:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <__data_end>
    1724:	10 91 e1 01 	lds	r17, 0x01E1	; 0x8001e1 <__data_end+0x1>
    1728:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__data_end+0x2>
    172c:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__data_end+0x3>
    1730:	6b 01       	movw	r12, r22
    1732:	7c 01       	movw	r14, r24
    1734:	c0 1a       	sub	r12, r16
    1736:	d1 0a       	sbc	r13, r17
    1738:	e2 0a       	sbc	r14, r18
    173a:	f3 0a       	sbc	r15, r19
    173c:	c9 82       	std	Y+1, r12	; 0x01
    173e:	da 82       	std	Y+2, r13	; 0x02
    1740:	eb 82       	std	Y+3, r14	; 0x03
    1742:	fc 82       	std	Y+4, r15	; 0x04
    1744:	8f e4       	ldi	r24, 0x4F	; 79
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	8b ef       	ldi	r24, 0xFB	; 251
    174e:	e8 2e       	mov	r14, r24
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	f8 2e       	mov	r15, r24
    1754:	00 e0       	ldi	r16, 0x00	; 0
    1756:	11 e0       	ldi	r17, 0x01	; 1
    1758:	cc 24       	eor	r12, r12
    175a:	c3 94       	inc	r12
    175c:	d1 2c       	mov	r13, r1
			for (byte i = 0; i < 3; i++) {
    175e:	31 2c       	mov	r3, r1
				
				// вычисляем реальные значения напряжения, тока и идеального тока от измеренного напряжения и известного сопротивления
				adsChars.voltage[i] = adsChars.sumVoltage[i] / adsChars.measurementsCount * ads.voltageStep * settings.multiplierVoltage[i];
    1760:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <adsChars+0x3c>
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__floatsisf>
    176e:	2b 01       	movw	r4, r22
    1770:	3c 01       	movw	r6, r24
    1772:	9b 01       	movw	r18, r22
    1774:	ac 01       	movw	r20, r24
    1776:	ad 81       	ldd	r26, Y+5	; 0x05
    1778:	be 81       	ldd	r27, Y+6	; 0x06
    177a:	94 96       	adiw	r26, 0x24	; 36
    177c:	6d 91       	ld	r22, X+
    177e:	7d 91       	ld	r23, X+
    1780:	8d 91       	ld	r24, X+
    1782:	9c 91       	ld	r25, X
    1784:	97 97       	sbiw	r26, 0x27	; 39
    1786:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    178a:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <ads+0x18>
    178e:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <ads+0x19>
    1792:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <ads+0x1a>
    1796:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <ads+0x1b>
    179a:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    179e:	f7 01       	movw	r30, r14
    17a0:	25 89       	ldd	r18, Z+21	; 0x15
    17a2:	36 89       	ldd	r19, Z+22	; 0x16
    17a4:	47 89       	ldd	r20, Z+23	; 0x17
    17a6:	50 8d       	ldd	r21, Z+24	; 0x18
    17a8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    17ac:	4b 01       	movw	r8, r22
    17ae:	5c 01       	movw	r10, r24
    17b0:	ad 81       	ldd	r26, Y+5	; 0x05
    17b2:	be 81       	ldd	r27, Y+6	; 0x06
    17b4:	6d 93       	st	X+, r22
    17b6:	7d 93       	st	X+, r23
    17b8:	8d 93       	st	X+, r24
    17ba:	9c 93       	st	X, r25
    17bc:	13 97       	sbiw	r26, 0x03	; 3
				adsChars.measuredAmperage[i] = adsChars.sumMeasuredAmperage[i] / adsChars.measurementsCount * ads.amperageStep * settings.multiplierAmperage[i];
    17be:	a3 01       	movw	r20, r6
    17c0:	92 01       	movw	r18, r4
    17c2:	d0 96       	adiw	r26, 0x30	; 48
    17c4:	6d 91       	ld	r22, X+
    17c6:	7d 91       	ld	r23, X+
    17c8:	8d 91       	ld	r24, X+
    17ca:	9c 91       	ld	r25, X
    17cc:	d3 97       	sbiw	r26, 0x33	; 51
    17ce:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    17d2:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <ads+0x1c>
    17d6:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <ads+0x1d>
    17da:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <ads+0x1e>
    17de:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <ads+0x1f>
    17e2:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    17e6:	f7 01       	movw	r30, r14
    17e8:	21 a1       	ldd	r18, Z+33	; 0x21
    17ea:	32 a1       	ldd	r19, Z+34	; 0x22
    17ec:	43 a1       	ldd	r20, Z+35	; 0x23
    17ee:	54 a1       	ldd	r21, Z+36	; 0x24
    17f0:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    17f4:	ad 81       	ldd	r26, Y+5	; 0x05
    17f6:	be 81       	ldd	r27, Y+6	; 0x06
    17f8:	1c 96       	adiw	r26, 0x0c	; 12
    17fa:	6d 93       	st	X+, r22
    17fc:	7d 93       	st	X+, r23
    17fe:	8d 93       	st	X+, r24
    1800:	9c 93       	st	X, r25
    1802:	1f 97       	sbiw	r26, 0x0f	; 15
				adsChars.perfectAmperage[i] = adsChars.voltage[i] / settings.impedance[i];
    1804:	f7 01       	movw	r30, r14
    1806:	26 81       	ldd	r18, Z+6	; 0x06
    1808:	37 81       	ldd	r19, Z+7	; 0x07
    180a:	40 85       	ldd	r20, Z+8	; 0x08
    180c:	51 85       	ldd	r21, Z+9	; 0x09
    180e:	c5 01       	movw	r24, r10
    1810:	b4 01       	movw	r22, r8
    1812:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    1816:	ad 81       	ldd	r26, Y+5	; 0x05
    1818:	be 81       	ldd	r27, Y+6	; 0x06
    181a:	58 96       	adiw	r26, 0x18	; 24
    181c:	6d 93       	st	X+, r22
    181e:	7d 93       	st	X+, r23
    1820:	8d 93       	st	X+, r24
    1822:	9c 93       	st	X, r25
    1824:	5b 97       	sbiw	r26, 0x1b	; 27
				icError.curLvl[i] = getICLevelByWinding(i);
    1826:	83 2d       	mov	r24, r3
    1828:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_Z19getICLevelByWindingh>
    182c:	f8 01       	movw	r30, r16
    182e:	64 83       	std	Z+4, r22	; 0x04
    1830:	75 83       	std	Z+5, r23	; 0x05
    1832:	86 83       	std	Z+6, r24	; 0x06
    1834:	97 83       	std	Z+7, r25	; 0x07

				if (canSerial) {
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	ab 81       	ldd	r26, Y+3	; 0x03
    183c:	bc 81       	ldd	r27, Y+4	; 0x04
    183e:	89 3e       	cpi	r24, 0xE9	; 233
    1840:	93 40       	sbci	r25, 0x03	; 3
    1842:	a1 05       	cpc	r26, r1
    1844:	b1 05       	cpc	r27, r1
    1846:	08 f4       	brcc	.+2      	; 0x184a <loop+0x196>
    1848:	78 c0       	rjmp	.+240    	; 0x193a <loop+0x286>
					Serial.print(F("Winding |")); Serial.print((i + 1)); Serial.println(F("|"));
    184a:	67 e0       	ldi	r22, 0x07	; 7
    184c:	74 e0       	ldi	r23, 0x04	; 4
    184e:	89 e3       	ldi	r24, 0x39	; 57
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    1856:	4a e0       	ldi	r20, 0x0A	; 10
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	b6 01       	movw	r22, r12
    185c:	89 e3       	ldi	r24, 0x39	; 57
    185e:	93 e0       	ldi	r25, 0x03	; 3
    1860:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN5Print5printEii>
    1864:	65 e0       	ldi	r22, 0x05	; 5
    1866:	74 e0       	ldi	r23, 0x04	; 4
    1868:	89 e3       	ldi	r24, 0x39	; 57
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F("measured voltage  = "));  Serial.println(adsChars.voltage[i], 6);
    1870:	60 ef       	ldi	r22, 0xF0	; 240
    1872:	73 e0       	ldi	r23, 0x03	; 3
    1874:	89 e3       	ldi	r24, 0x39	; 57
    1876:	93 e0       	ldi	r25, 0x03	; 3
    1878:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    187c:	ad 81       	ldd	r26, Y+5	; 0x05
    187e:	be 81       	ldd	r27, Y+6	; 0x06
    1880:	4d 91       	ld	r20, X+
    1882:	5d 91       	ld	r21, X+
    1884:	6d 91       	ld	r22, X+
    1886:	7c 91       	ld	r23, X
    1888:	26 e0       	ldi	r18, 0x06	; 6
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	89 e3       	ldi	r24, 0x39	; 57
    188e:	93 e0       	ldi	r25, 0x03	; 3
    1890:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
					Serial.print(F("measured amperage = "));  Serial.println(adsChars.measuredAmperage[i], 6);
    1894:	6b ed       	ldi	r22, 0xDB	; 219
    1896:	73 e0       	ldi	r23, 0x03	; 3
    1898:	89 e3       	ldi	r24, 0x39	; 57
    189a:	93 e0       	ldi	r25, 0x03	; 3
    189c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    18a0:	ed 81       	ldd	r30, Y+5	; 0x05
    18a2:	fe 81       	ldd	r31, Y+6	; 0x06
    18a4:	44 85       	ldd	r20, Z+12	; 0x0c
    18a6:	55 85       	ldd	r21, Z+13	; 0x0d
    18a8:	66 85       	ldd	r22, Z+14	; 0x0e
    18aa:	77 85       	ldd	r23, Z+15	; 0x0f
    18ac:	26 e0       	ldi	r18, 0x06	; 6
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	89 e3       	ldi	r24, 0x39	; 57
    18b2:	93 e0       	ldi	r25, 0x03	; 3
    18b4:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
					Serial.print(F("perfect amperage  = ")); Serial.println(adsChars.perfectAmperage[i], 6);
    18b8:	66 ec       	ldi	r22, 0xC6	; 198
    18ba:	73 e0       	ldi	r23, 0x03	; 3
    18bc:	89 e3       	ldi	r24, 0x39	; 57
    18be:	93 e0       	ldi	r25, 0x03	; 3
    18c0:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    18c4:	ad 81       	ldd	r26, Y+5	; 0x05
    18c6:	be 81       	ldd	r27, Y+6	; 0x06
    18c8:	58 96       	adiw	r26, 0x18	; 24
    18ca:	4d 91       	ld	r20, X+
    18cc:	5d 91       	ld	r21, X+
    18ce:	6d 91       	ld	r22, X+
    18d0:	7c 91       	ld	r23, X
    18d2:	5b 97       	sbiw	r26, 0x1b	; 27
    18d4:	26 e0       	ldi	r18, 0x06	; 6
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	89 e3       	ldi	r24, 0x39	; 57
    18da:	93 e0       	ldi	r25, 0x03	; 3
    18dc:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
					Serial.print(F("error percent     = ")); Serial.println(icError.curLvl[i],2);
    18e0:	61 eb       	ldi	r22, 0xB1	; 177
    18e2:	73 e0       	ldi	r23, 0x03	; 3
    18e4:	89 e3       	ldi	r24, 0x39	; 57
    18e6:	93 e0       	ldi	r25, 0x03	; 3
    18e8:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    18ec:	f8 01       	movw	r30, r16
    18ee:	44 81       	ldd	r20, Z+4	; 0x04
    18f0:	55 81       	ldd	r21, Z+5	; 0x05
    18f2:	66 81       	ldd	r22, Z+6	; 0x06
    18f4:	77 81       	ldd	r23, Z+7	; 0x07
    18f6:	22 e0       	ldi	r18, 0x02	; 2
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	89 e3       	ldi	r24, 0x39	; 57
    18fc:	93 e0       	ldi	r25, 0x03	; 3
    18fe:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
					Serial.print(F("error diff        = ")); Serial.println(icError.diff[i],6);
    1902:	6c e9       	ldi	r22, 0x9C	; 156
    1904:	73 e0       	ldi	r23, 0x03	; 3
    1906:	89 e3       	ldi	r24, 0x39	; 57
    1908:	93 e0       	ldi	r25, 0x03	; 3
    190a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    190e:	d8 01       	movw	r26, r16
    1910:	93 96       	adiw	r26, 0x23	; 35
    1912:	4d 91       	ld	r20, X+
    1914:	5d 91       	ld	r21, X+
    1916:	6d 91       	ld	r22, X+
    1918:	7c 91       	ld	r23, X
    191a:	96 97       	sbiw	r26, 0x26	; 38
    191c:	26 e0       	ldi	r18, 0x06	; 6
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	89 e3       	ldi	r24, 0x39	; 57
    1922:	93 e0       	ldi	r25, 0x03	; 3
    1924:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
					if (i != 2) {
    1928:	b2 e0       	ldi	r27, 0x02	; 2
    192a:	3b 16       	cp	r3, r27
    192c:	31 f0       	breq	.+12     	; 0x193a <loop+0x286>
						Serial.println(F("---"));
    192e:	68 e9       	ldi	r22, 0x98	; 152
    1930:	73 e0       	ldi	r23, 0x03	; 3
    1932:	89 e3       	ldi	r24, 0x39	; 57
    1934:	93 e0       	ldi	r25, 0x03	; 3
    1936:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
			adsChars.currentMeasurement++;
		} else {
			// после накопления measurementsCount обновляем экран и смотрим на наличия межветковых замыканий
			lcdUpdateScreen = true;
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
			for (byte i = 0; i < 3; i++) {
    193a:	33 94       	inc	r3
    193c:	ed 81       	ldd	r30, Y+5	; 0x05
    193e:	fe 81       	ldd	r31, Y+6	; 0x06
    1940:	34 96       	adiw	r30, 0x04	; 4
    1942:	fe 83       	std	Y+6, r31	; 0x06
    1944:	ed 83       	std	Y+5, r30	; 0x05
    1946:	f4 e0       	ldi	r31, 0x04	; 4
    1948:	ef 0e       	add	r14, r31
    194a:	f1 1c       	adc	r15, r1
    194c:	0c 5f       	subi	r16, 0xFC	; 252
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	2f ef       	ldi	r18, 0xFF	; 255
    1952:	c2 1a       	sub	r12, r18
    1954:	d2 0a       	sbc	r13, r18
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	38 12       	cpse	r3, r24
    195a:	02 cf       	rjmp	.-508    	; 0x1760 <loop+0xac>
					if (i != 2) {
						Serial.println(F("---"));
					}
				}
			}
			if (canSerial) {
    195c:	c9 80       	ldd	r12, Y+1	; 0x01
    195e:	da 80       	ldd	r13, Y+2	; 0x02
    1960:	eb 80       	ldd	r14, Y+3	; 0x03
    1962:	fc 80       	ldd	r15, Y+4	; 0x04
    1964:	29 ee       	ldi	r18, 0xE9	; 233
    1966:	c2 16       	cp	r12, r18
    1968:	23 e0       	ldi	r18, 0x03	; 3
    196a:	d2 06       	cpc	r13, r18
    196c:	e1 04       	cpc	r14, r1
    196e:	f1 04       	cpc	r15, r1
    1970:	20 f1       	brcs	.+72     	; 0x19ba <loop+0x306>
				Serial.print(F("error full        = ")); Serial.println(icError.fullError, 5);
    1972:	63 e8       	ldi	r22, 0x83	; 131
    1974:	73 e0       	ldi	r23, 0x03	; 3
    1976:	89 e3       	ldi	r24, 0x39	; 57
    1978:	93 e0       	ldi	r25, 0x03	; 3
    197a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    197e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1982:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    1986:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
    198a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
    198e:	25 e0       	ldi	r18, 0x05	; 5
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	89 e3       	ldi	r24, 0x39	; 57
    1994:	93 e0       	ldi	r25, 0x03	; 3
    1996:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
				Serial.println(F("---end---"));
    199a:	69 e7       	ldi	r22, 0x79	; 121
    199c:	73 e0       	ldi	r23, 0x03	; 3
    199e:	89 e3       	ldi	r24, 0x39	; 57
    19a0:	93 e0       	ldi	r25, 0x03	; 3
    19a2:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
				serialUpdateStamp = millis();
    19a6:	0e 94 4c 22 	call	0x4498	; 0x4498 <millis>
    19aa:	60 93 e0 01 	sts	0x01E0, r22	; 0x8001e0 <__data_end>
    19ae:	70 93 e1 01 	sts	0x01E1, r23	; 0x8001e1 <__data_end+0x1>
    19b2:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end+0x2>
    19b6:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <__data_end+0x3>
			}
			initAvgVars();
    19ba:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z11initAvgVarsv>
	
			
			if (isFullErrorExists(adsChars.measuredAmperage, adsChars.voltage)) {
    19be:	6f e4       	ldi	r22, 0x4F	; 79
    19c0:	71 e0       	ldi	r23, 0x01	; 1
    19c2:	8b e5       	ldi	r24, 0x5B	; 91
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Z17isFullErrorExistsPfS_>
    19ca:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <__data_start+0x17>
    19ce:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <__data_start+0x18>
    19d2:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <__data_start+0x19>
    19d6:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <__data_start+0x1a>
    19da:	88 23       	and	r24, r24
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <loop+0x32c>
    19de:	41 c0       	rjmp	.+130    	; 0x1a62 <loop+0x3ae>
				if (icError.detectStamp == 0) {
    19e0:	45 2b       	or	r20, r21
    19e2:	46 2b       	or	r20, r22
    19e4:	47 2b       	or	r20, r23
    19e6:	81 f4       	brne	.+32     	; 0x1a08 <loop+0x354>
					Serial.println(F("Probably error exists"));
    19e8:	63 e6       	ldi	r22, 0x63	; 99
    19ea:	73 e0       	ldi	r23, 0x03	; 3
    19ec:	89 e3       	ldi	r24, 0x39	; 57
    19ee:	93 e0       	ldi	r25, 0x03	; 3
    19f0:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
					icError.detectStamp = millis();
    19f4:	0e 94 4c 22 	call	0x4498	; 0x4498 <millis>
    19f8:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <__data_start+0x17>
    19fc:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <__data_start+0x18>
    1a00:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <__data_start+0x19>
    1a04:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <__data_start+0x1a>
				}
				if (millis() - icError.detectStamp >= 10000) {
    1a08:	0e 94 4c 22 	call	0x4498	; 0x4498 <millis>
    1a0c:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <__data_start+0x17>
    1a10:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <__data_start+0x18>
    1a14:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <__data_start+0x19>
    1a18:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__data_start+0x1a>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	80 1b       	sub	r24, r16
    1a22:	91 0b       	sbc	r25, r17
    1a24:	a2 0b       	sbc	r26, r18
    1a26:	b3 0b       	sbc	r27, r19
    1a28:	80 31       	cpi	r24, 0x10	; 16
    1a2a:	97 42       	sbci	r25, 0x27	; 39
    1a2c:	a1 05       	cpc	r26, r1
    1a2e:	b1 05       	cpc	r27, r1
    1a30:	50 f1       	brcs	.+84     	; 0x1a86 <loop+0x3d2>
					if (!settings.isDebugMode) {
    1a32:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <settings+0x2d>
    1a36:	81 11       	cpse	r24, r1
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <loop+0x392>
						settings.isReadyToWork = MM_STOP;
    1a3a:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <settings>
						digitalWrite(RELAY, HIGH);
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	81 e1       	ldi	r24, 0x11	; 17
    1a42:	0e 94 64 23 	call	0x46c8	; 0x46c8 <digitalWrite>
					}
					
					Serial.println(F("WARNING!!! Measurement Stoped IC EXISTS!"));
    1a46:	6a e3       	ldi	r22, 0x3A	; 58
    1a48:	73 e0       	ldi	r23, 0x03	; 3
    1a4a:	89 e3       	ldi	r24, 0x39	; 57
    1a4c:	93 e0       	ldi	r25, 0x03	; 3
    1a4e:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
					digitalWrite(BEEPER, HIGH);
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	80 e1       	ldi	r24, 0x10	; 16
    1a56:	0e 94 64 23 	call	0x46c8	; 0x46c8 <digitalWrite>
					icError.hasIC = true;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_start+0x16>
    1a60:	12 c0       	rjmp	.+36     	; 0x1a86 <loop+0x3d2>
				}
			} else {
				if (icError.detectStamp != 0) {
    1a62:	45 2b       	or	r20, r21
    1a64:	46 2b       	or	r20, r22
    1a66:	47 2b       	or	r20, r23
    1a68:	31 f0       	breq	.+12     	; 0x1a76 <loop+0x3c2>
					Serial.println(F("ha-ha, it's joke. There are not exists critical error"));
    1a6a:	64 e0       	ldi	r22, 0x04	; 4
    1a6c:	73 e0       	ldi	r23, 0x03	; 3
    1a6e:	89 e3       	ldi	r24, 0x39	; 57
    1a70:	93 e0       	ldi	r25, 0x03	; 3
    1a72:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
				}
				icError.detectStamp = 0;
    1a76:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_start+0x17>
    1a7a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_start+0x18>
    1a7e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_start+0x19>
    1a82:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_start+0x1a>
			}
		}
	} 
}
    1a86:	26 96       	adiw	r28, 0x06	; 6
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	bf 90       	pop	r11
    1aa4:	af 90       	pop	r10
    1aa6:	9f 90       	pop	r9
    1aa8:	8f 90       	pop	r8
    1aaa:	7f 90       	pop	r7
    1aac:	6f 90       	pop	r6
    1aae:	5f 90       	pop	r5
    1ab0:	4f 90       	pop	r4
    1ab2:	3f 90       	pop	r3
    1ab4:	08 95       	ret

00001ab6 <_Z14setupImpedancev>:
}

/*
	Получение текущего значения сопротивления обмотки от измеренных значений напряжения и силы тока
*/
void setupImpedance() {
    1ab6:	2f 92       	push	r2
    1ab8:	3f 92       	push	r3
    1aba:	4f 92       	push	r4
    1abc:	5f 92       	push	r5
    1abe:	6f 92       	push	r6
    1ac0:	7f 92       	push	r7
    1ac2:	8f 92       	push	r8
    1ac4:	9f 92       	push	r9
    1ac6:	af 92       	push	r10
    1ac8:	bf 92       	push	r11
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	e0 97       	sbiw	r28, 0x30	; 48
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
	float _voltage[3] = {0, 0, 0};
    1aea:	1d a2       	std	Y+37, r1	; 0x25
    1aec:	1e a2       	std	Y+38, r1	; 0x26
    1aee:	1f a2       	std	Y+39, r1	; 0x27
    1af0:	18 a6       	std	Y+40, r1	; 0x28
    1af2:	19 a6       	std	Y+41, r1	; 0x29
    1af4:	1a a6       	std	Y+42, r1	; 0x2a
    1af6:	1b a6       	std	Y+43, r1	; 0x2b
    1af8:	1c a6       	std	Y+44, r1	; 0x2c
    1afa:	1d a6       	std	Y+45, r1	; 0x2d
    1afc:	1e a6       	std	Y+46, r1	; 0x2e
    1afe:	1f a6       	std	Y+47, r1	; 0x2f
    1b00:	18 aa       	std	Y+48, r1	; 0x30
	float _amperage[3] = {0, 0, 0};
    1b02:	19 8e       	std	Y+25, r1	; 0x19
    1b04:	1a 8e       	std	Y+26, r1	; 0x1a
    1b06:	1b 8e       	std	Y+27, r1	; 0x1b
    1b08:	1c 8e       	std	Y+28, r1	; 0x1c
    1b0a:	1d 8e       	std	Y+29, r1	; 0x1d
    1b0c:	1e 8e       	std	Y+30, r1	; 0x1e
    1b0e:	1f 8e       	std	Y+31, r1	; 0x1f
    1b10:	18 a2       	std	Y+32, r1	; 0x20
    1b12:	19 a2       	std	Y+33, r1	; 0x21
    1b14:	1a a2       	std	Y+34, r1	; 0x22
    1b16:	1b a2       	std	Y+35, r1	; 0x23
    1b18:	1c a2       	std	Y+36, r1	; 0x24
	float _sumImpedance[3] = {0, 0, 0};
	float _sumVoltage[3] = {0, 0, 0};
    1b1a:	1d 86       	std	Y+13, r1	; 0x0d
    1b1c:	1e 86       	std	Y+14, r1	; 0x0e
    1b1e:	1f 86       	std	Y+15, r1	; 0x0f
    1b20:	18 8a       	std	Y+16, r1	; 0x10
    1b22:	19 8a       	std	Y+17, r1	; 0x11
    1b24:	1a 8a       	std	Y+18, r1	; 0x12
    1b26:	1b 8a       	std	Y+19, r1	; 0x13
    1b28:	1c 8a       	std	Y+20, r1	; 0x14
    1b2a:	1d 8a       	std	Y+21, r1	; 0x15
    1b2c:	1e 8a       	std	Y+22, r1	; 0x16
    1b2e:	1f 8a       	std	Y+23, r1	; 0x17
    1b30:	18 8e       	std	Y+24, r1	; 0x18
	float _sumAamperage[3] = {0, 0, 0};
    1b32:	19 82       	std	Y+1, r1	; 0x01
    1b34:	1a 82       	std	Y+2, r1	; 0x02
    1b36:	1b 82       	std	Y+3, r1	; 0x03
    1b38:	1c 82       	std	Y+4, r1	; 0x04
    1b3a:	1d 82       	std	Y+5, r1	; 0x05
    1b3c:	1e 82       	std	Y+6, r1	; 0x06
    1b3e:	1f 82       	std	Y+7, r1	; 0x07
    1b40:	18 86       	std	Y+8, r1	; 0x08
    1b42:	19 86       	std	Y+9, r1	; 0x09
    1b44:	1a 86       	std	Y+10, r1	; 0x0a
    1b46:	1b 86       	std	Y+11, r1	; 0x0b
    1b48:	1c 86       	std	Y+12, r1	; 0x0c
	byte index = 1;
    1b4a:	01 e0       	ldi	r16, 0x01	; 1
    1b4c:	2e 01       	movw	r4, r28
    1b4e:	81 e3       	ldi	r24, 0x31	; 49
    1b50:	48 0e       	add	r4, r24
    1b52:	51 1c       	adc	r5, r1
	
	while(index < adsChars.measurementsCount) {
    1b54:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <adsChars+0x3c>
    1b58:	08 17       	cp	r16, r24
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <_Z14setupImpedancev+0xa8>
    1b5c:	60 c0       	rjmp	.+192    	; 0x1c1e <_Z14setupImpedancev+0x168>
    1b5e:	7e 01       	movw	r14, r28
    1b60:	95 e2       	ldi	r25, 0x25	; 37
    1b62:	e9 0e       	add	r14, r25
    1b64:	f1 1c       	adc	r15, r1
    1b66:	6e 01       	movw	r12, r28
    1b68:	e9 e1       	ldi	r30, 0x19	; 25
    1b6a:	ce 0e       	add	r12, r30
    1b6c:	d1 1c       	adc	r13, r1
    1b6e:	56 01       	movw	r10, r12
    1b70:	37 01       	movw	r6, r14
    1b72:	10 e0       	ldi	r17, 0x00	; 0
		for(byte i = 0; i < 3; i++) {
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
    1b74:	61 2f       	mov	r22, r17
    1b76:	80 e7       	ldi	r24, 0x70	; 112
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    1b7e:	bc 01       	movw	r22, r24
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__floatunsisf>
    1b88:	f3 01       	movw	r30, r6
    1b8a:	61 93       	st	Z+, r22
    1b8c:	71 93       	st	Z+, r23
    1b8e:	81 93       	st	Z+, r24
    1b90:	91 93       	st	Z+, r25
    1b92:	3f 01       	movw	r6, r30
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
    1b94:	61 2f       	mov	r22, r17
    1b96:	8b e6       	ldi	r24, 0x6B	; 107
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__floatunsisf>
    1ba8:	f5 01       	movw	r30, r10
    1baa:	61 93       	st	Z+, r22
    1bac:	71 93       	st	Z+, r23
    1bae:	81 93       	st	Z+, r24
    1bb0:	91 93       	st	Z+, r25
    1bb2:	5f 01       	movw	r10, r30
	float _sumVoltage[3] = {0, 0, 0};
	float _sumAamperage[3] = {0, 0, 0};
	byte index = 1;
	
	while(index < adsChars.measurementsCount) {
		for(byte i = 0; i < 3; i++) {
    1bb4:	1f 5f       	subi	r17, 0xFF	; 255
    1bb6:	13 30       	cpi	r17, 0x03	; 3
    1bb8:	e9 f6       	brne	.-70     	; 0x1b74 <_Z14setupImpedancev+0xbe>
    1bba:	3e 01       	movw	r6, r28
    1bbc:	fd e0       	ldi	r31, 0x0D	; 13
    1bbe:	6f 0e       	add	r6, r31
    1bc0:	71 1c       	adc	r7, r1
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	5c 01       	movw	r10, r24
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
		}
		
		for(byte i = 0; i < 3; i++) {
			_sumVoltage[i] += _voltage[i];
    1bc8:	f7 01       	movw	r30, r14
    1bca:	21 91       	ld	r18, Z+
    1bcc:	31 91       	ld	r19, Z+
    1bce:	41 91       	ld	r20, Z+
    1bd0:	51 91       	ld	r21, Z+
    1bd2:	7f 01       	movw	r14, r30
    1bd4:	f3 01       	movw	r30, r6
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
    1be2:	f3 01       	movw	r30, r6
    1be4:	61 93       	st	Z+, r22
    1be6:	71 93       	st	Z+, r23
    1be8:	81 93       	st	Z+, r24
    1bea:	91 93       	st	Z+, r25
    1bec:	3f 01       	movw	r6, r30
			_sumAamperage[i] += _amperage[i];
    1bee:	f6 01       	movw	r30, r12
    1bf0:	21 91       	ld	r18, Z+
    1bf2:	31 91       	ld	r19, Z+
    1bf4:	41 91       	ld	r20, Z+
    1bf6:	51 91       	ld	r21, Z+
    1bf8:	6f 01       	movw	r12, r30
    1bfa:	f5 01       	movw	r30, r10
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
    1c08:	f5 01       	movw	r30, r10
    1c0a:	61 93       	st	Z+, r22
    1c0c:	71 93       	st	Z+, r23
    1c0e:	81 93       	st	Z+, r24
    1c10:	91 93       	st	Z+, r25
    1c12:	5f 01       	movw	r10, r30
		for(byte i = 0; i < 3; i++) {
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
		}
		
		for(byte i = 0; i < 3; i++) {
    1c14:	e4 14       	cp	r14, r4
    1c16:	f5 04       	cpc	r15, r5
    1c18:	b9 f6       	brne	.-82     	; 0x1bc8 <_Z14setupImpedancev+0x112>
			_sumVoltage[i] += _voltage[i];
			_sumAamperage[i] += _amperage[i];
		}
		index++;
    1c1a:	0f 5f       	subi	r16, 0xFF	; 255
	float _sumImpedance[3] = {0, 0, 0};
	float _sumVoltage[3] = {0, 0, 0};
	float _sumAamperage[3] = {0, 0, 0};
	byte index = 1;
	
	while(index < adsChars.measurementsCount) {
    1c1c:	9b cf       	rjmp	.-202    	; 0x1b54 <_Z14setupImpedancev+0x9e>
			_sumAamperage[i] += _amperage[i];
		}
		index++;
	}
	
	Serial.println(F("Impedance setup"));
    1c1e:	68 e9       	ldi	r22, 0x98	; 152
    1c20:	71 e0       	ldi	r23, 0x01	; 1
    1c22:	89 e3       	ldi	r24, 0x39	; 57
    1c24:	93 e0       	ldi	r25, 0x03	; 3
    1c26:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c2a:	6e 01       	movw	r12, r28
    1c2c:	fd e0       	ldi	r31, 0x0D	; 13
    1c2e:	cf 0e       	add	r12, r31
    1c30:	d1 1c       	adc	r13, r1
    1c32:	0b ef       	ldi	r16, 0xFB	; 251
    1c34:	11 e0       	ldi	r17, 0x01	; 1
    1c36:	ce 01       	movw	r24, r28
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	1c 01       	movw	r2, r24
				
	for(byte i = 0; i < 3; i++) {
    1c3c:	f1 2c       	mov	r15, r1
		Serial.println(i);
    1c3e:	4a e0       	ldi	r20, 0x0A	; 10
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	6f 2d       	mov	r22, r15
    1c44:	89 e3       	ldi	r24, 0x39	; 57
    1c46:	93 e0       	ldi	r25, 0x03	; 3
    1c48:	0e 94 9a 20 	call	0x4134	; 0x4134 <_ZN5Print7printlnEhi>
		_voltage[i] = _sumVoltage[i] / adsChars.measurementsCount * ads.voltageStep * settings.multiplierVoltage[i];
    1c4c:	f6 01       	movw	r30, r12
    1c4e:	41 90       	ld	r4, Z+
    1c50:	51 90       	ld	r5, Z+
    1c52:	61 90       	ld	r6, Z+
    1c54:	71 90       	ld	r7, Z+
    1c56:	6f 01       	movw	r12, r30
    1c58:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <adsChars+0x3c>
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__floatsisf>
    1c66:	4b 01       	movw	r8, r22
    1c68:	5c 01       	movw	r10, r24
    1c6a:	9b 01       	movw	r18, r22
    1c6c:	ac 01       	movw	r20, r24
    1c6e:	c3 01       	movw	r24, r6
    1c70:	b2 01       	movw	r22, r4
    1c72:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    1c76:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <ads+0x18>
    1c7a:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <ads+0x19>
    1c7e:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <ads+0x1a>
    1c82:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <ads+0x1b>
    1c86:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	25 89       	ldd	r18, Z+21	; 0x15
    1c8e:	36 89       	ldd	r19, Z+22	; 0x16
    1c90:	47 89       	ldd	r20, Z+23	; 0x17
    1c92:	50 8d       	ldd	r21, Z+24	; 0x18
    1c94:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    1c98:	2b 01       	movw	r4, r22
    1c9a:	3c 01       	movw	r6, r24
		_amperage[i] = _sumAamperage[i] / adsChars.measurementsCount * ads.amperageStep * settings.multiplierAmperage[i];
    1c9c:	f1 01       	movw	r30, r2
    1c9e:	61 91       	ld	r22, Z+
    1ca0:	71 91       	ld	r23, Z+
    1ca2:	81 91       	ld	r24, Z+
    1ca4:	91 91       	ld	r25, Z+
    1ca6:	1f 01       	movw	r2, r30
    1ca8:	a5 01       	movw	r20, r10
    1caa:	94 01       	movw	r18, r8
    1cac:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    1cb0:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <ads+0x1c>
    1cb4:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <ads+0x1d>
    1cb8:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <ads+0x1e>
    1cbc:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <ads+0x1f>
    1cc0:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	21 a1       	ldd	r18, Z+33	; 0x21
    1cc8:	32 a1       	ldd	r19, Z+34	; 0x22
    1cca:	43 a1       	ldd	r20, Z+35	; 0x23
    1ccc:	54 a1       	ldd	r21, Z+36	; 0x24
    1cce:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    1cd2:	4b 01       	movw	r8, r22
    1cd4:	5c 01       	movw	r10, r24
		settings.impedance[i] = _voltage[i] / _amperage[i];
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	c3 01       	movw	r24, r6
    1cdc:	b2 01       	movw	r22, r4
    1cde:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	66 83       	std	Z+6, r22	; 0x06
    1ce6:	77 83       	std	Z+7, r23	; 0x07
    1ce8:	80 87       	std	Z+8, r24	; 0x08
    1cea:	91 87       	std	Z+9, r25	; 0x09
		Serial.print(F("V=")); Serial.println(_voltage[i], 5);
    1cec:	65 e9       	ldi	r22, 0x95	; 149
    1cee:	71 e0       	ldi	r23, 0x01	; 1
    1cf0:	89 e3       	ldi	r24, 0x39	; 57
    1cf2:	93 e0       	ldi	r25, 0x03	; 3
    1cf4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    1cf8:	25 e0       	ldi	r18, 0x05	; 5
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	b3 01       	movw	r22, r6
    1cfe:	a2 01       	movw	r20, r4
    1d00:	89 e3       	ldi	r24, 0x39	; 57
    1d02:	93 e0       	ldi	r25, 0x03	; 3
    1d04:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
		Serial.print(F("A=")); Serial.println(_amperage[i], 5);
    1d08:	62 e9       	ldi	r22, 0x92	; 146
    1d0a:	71 e0       	ldi	r23, 0x01	; 1
    1d0c:	89 e3       	ldi	r24, 0x39	; 57
    1d0e:	93 e0       	ldi	r25, 0x03	; 3
    1d10:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    1d14:	25 e0       	ldi	r18, 0x05	; 5
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	b5 01       	movw	r22, r10
    1d1a:	a4 01       	movw	r20, r8
    1d1c:	89 e3       	ldi	r24, 0x39	; 57
    1d1e:	93 e0       	ldi	r25, 0x03	; 3
    1d20:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
		Serial.print(F("R=")); Serial.println(settings.impedance[i], 5);
    1d24:	6f e8       	ldi	r22, 0x8F	; 143
    1d26:	71 e0       	ldi	r23, 0x01	; 1
    1d28:	89 e3       	ldi	r24, 0x39	; 57
    1d2a:	93 e0       	ldi	r25, 0x03	; 3
    1d2c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    1d30:	f8 01       	movw	r30, r16
    1d32:	46 81       	ldd	r20, Z+6	; 0x06
    1d34:	57 81       	ldd	r21, Z+7	; 0x07
    1d36:	60 85       	ldd	r22, Z+8	; 0x08
    1d38:	71 85       	ldd	r23, Z+9	; 0x09
    1d3a:	25 e0       	ldi	r18, 0x05	; 5
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	89 e3       	ldi	r24, 0x39	; 57
    1d40:	93 e0       	ldi	r25, 0x03	; 3
    1d42:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
		if (i == 2) {
    1d46:	f2 e0       	ldi	r31, 0x02	; 2
    1d48:	ff 12       	cpse	r15, r31
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <_Z14setupImpedancev+0x29c>
			Serial.println(F("---end---"));
    1d4c:	65 e8       	ldi	r22, 0x85	; 133
    1d4e:	71 e0       	ldi	r23, 0x01	; 1
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <_Z14setupImpedancev+0x2a0>
		} else {
			Serial.println(F("------"));
    1d52:	6e e7       	ldi	r22, 0x7E	; 126
    1d54:	71 e0       	ldi	r23, 0x01	; 1
    1d56:	89 e3       	ldi	r24, 0x39	; 57
    1d58:	93 e0       	ldi	r25, 0x03	; 3
    1d5a:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
		index++;
	}
	
	Serial.println(F("Impedance setup"));
				
	for(byte i = 0; i < 3; i++) {
    1d5e:	f3 94       	inc	r15
    1d60:	0c 5f       	subi	r16, 0xFC	; 252
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	f8 12       	cpse	r15, r24
    1d68:	6a cf       	rjmp	.-300    	; 0x1c3e <_Z14setupImpedancev+0x188>
			Serial.println(F("---end---"));
		} else {
			Serial.println(F("------"));
		}
	}
}
    1d6a:	e0 96       	adiw	r28, 0x30	; 48
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	7f 90       	pop	r7
    1d90:	6f 90       	pop	r6
    1d92:	5f 90       	pop	r5
    1d94:	4f 90       	pop	r4
    1d96:	3f 90       	pop	r3
    1d98:	2f 90       	pop	r2
    1d9a:	08 95       	ret

00001d9c <_Z21button1LongPressStartv>:
}

/*
	Обработчик длиннкого клика первой клавиши
*/
void button1LongPressStart() {
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
	// выбор множителя x1x10x100x0.1x0.01x0.001 в режимах установки множителя
	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
    1da4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    1da8:	9c ef       	ldi	r25, 0xFC	; 252
    1daa:	98 0f       	add	r25, r24
    1dac:	96 30       	cpi	r25, 0x06	; 6
    1dae:	58 f5       	brcc	.+86     	; 0x1e06 <_Z21button1LongPressStartv+0x6a>
		setDigit.curMultiplier = setDigit.curMultiplier >= 100.0f? 0.001f: setDigit.curMultiplier * 10.0f;
    1db0:	c0 90 f7 01 	lds	r12, 0x01F7	; 0x8001f7 <setDigit+0x4>
    1db4:	d0 90 f8 01 	lds	r13, 0x01F8	; 0x8001f8 <setDigit+0x5>
    1db8:	e0 90 f9 01 	lds	r14, 0x01F9	; 0x8001f9 <setDigit+0x6>
    1dbc:	f0 90 fa 01 	lds	r15, 0x01FA	; 0x8001fa <setDigit+0x7>
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	48 ec       	ldi	r20, 0xC8	; 200
    1dc6:	52 e4       	ldi	r21, 0x42	; 66
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b6 01       	movw	r22, r12
    1dcc:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
    1dd0:	87 ff       	sbrs	r24, 7
    1dd2:	09 c0       	rjmp	.+18     	; 0x1de6 <_Z21button1LongPressStartv+0x4a>
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	c7 01       	movw	r24, r14
    1dde:	b6 01       	movw	r22, r12
    1de0:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <_Z21button1LongPressStartv+0x52>
    1de6:	6f e6       	ldi	r22, 0x6F	; 111
    1de8:	72 e1       	ldi	r23, 0x12	; 18
    1dea:	83 e8       	ldi	r24, 0x83	; 131
    1dec:	9a e3       	ldi	r25, 0x3A	; 58
    1dee:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <setDigit+0x4>
    1df2:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <setDigit+0x5>
    1df6:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <setDigit+0x6>
    1dfa:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <setDigit+0x7>
		lcdUpdateScreen = true;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
		return;
    1e04:	20 c0       	rjmp	.+64     	; 0x1e46 <_Z21button1LongPressStartv+0xaa>
	}
	
	// получение текущих значений сопротивления в режимах установки импеданса
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
    1e06:	8a 30       	cpi	r24, 0x0A	; 10
    1e08:	99 f4       	brne	.+38     	; 0x1e30 <_Z21button1LongPressStartv+0x94>
		lcd.clear();
    1e0a:	87 ee       	ldi	r24, 0xE7	; 231
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN17LiquidCrystal_I2C5clearEv>
		lcd.print(F("Impedance setup"));
    1e12:	67 e5       	ldi	r22, 0x57	; 87
    1e14:	71 e0       	ldi	r23, 0x01	; 1
    1e16:	87 ee       	ldi	r24, 0xE7	; 231
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
		setupImpedance();
    1e1e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <_Z14setupImpedancev>
		lcd.clear();
    1e22:	87 ee       	ldi	r24, 0xE7	; 231
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN17LiquidCrystal_I2C5clearEv>
		modeWork.prev = 0;
    1e2a:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <modeWork+0x1>
    1e2e:	0b c0       	rjmp	.+22     	; 0x1e46 <_Z21button1LongPressStartv+0xaa>
		return;
	}
	
	// В режимах просмотра данных, длинный клик переводит в режим вопроса о продолжении измерений
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1e30:	93 ef       	ldi	r25, 0xF3	; 243
    1e32:	98 0f       	add	r25, r24
    1e34:	9a 30       	cpi	r25, 0x0A	; 10
    1e36:	10 f4       	brcc	.+4      	; 0x1e3c <_Z21button1LongPressStartv+0xa0>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
    1e38:	8e e1       	ldi	r24, 0x1E	; 30
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <_Z21button1LongPressStartv+0xa6>
		return;
	}
	
	// В ржеиме выбора о старте измерений - отклоенние вопроса
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1e3c:	8e 31       	cpi	r24, 0x1E	; 30
    1e3e:	19 f4       	brne	.+6      	; 0x1e46 <_Z21button1LongPressStartv+0xaa>
		modeWork.current = MW_SHOWING_START;
    1e40:	8d e0       	ldi	r24, 0x0D	; 13
    1e42:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
	}
}
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	df 90       	pop	r13
    1e4c:	cf 90       	pop	r12
    1e4e:	08 95       	ret

00001e50 <_Z12setEditValuev>:

/*
	Получение значений настройки в настроечную переменную для изменения во время настроек
*/
void setEditValue() {
	lcdUpdateScreen = true;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
	switch(modeWork.current) {
    1e56:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <modeWork>
    1e5a:	8e 2f       	mov	r24, r30
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	fc 01       	movw	r30, r24
    1e60:	31 97       	sbiw	r30, 0x01	; 1
    1e62:	e9 30       	cpi	r30, 0x09	; 9
    1e64:	f1 05       	cpc	r31, r1
    1e66:	08 f0       	brcs	.+2      	; 0x1e6a <_Z12setEditValuev+0x1a>
    1e68:	57 c0       	rjmp	.+174    	; 0x1f18 <_Z12setEditValuev+0xc8>
    1e6a:	e7 59       	subi	r30, 0x97	; 151
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			setDigit.value = settings.connectionType;
    1e72:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <settings+0x1>
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <_Z12setEditValuev+0x2c>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			setDigit.value = settings.currentAmperageGain;
    1e78:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <settings+0x13>
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__floatunsisf>
    1e86:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <setDigit>
    1e8a:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <setDigit+0x1>
    1e8e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <setDigit+0x2>
    1e92:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <setDigit+0x3>
			break;
    1e96:	40 c0       	rjmp	.+128    	; 0x1f18 <_Z12setEditValuev+0xc8>
		case MW_SETUP_GAIN_VOLTAGE:
			setDigit.value = settings.currentVoltageGain;
    1e98:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <settings+0x14>
    1e9c:	ef cf       	rjmp	.-34     	; 0x1e7c <_Z12setEditValuev+0x2c>
			break;			
		case MW_SETUP_MULT_VOLTAGE_AB:
			setDigit.value = settings.multiplierVoltage[0];
    1e9e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <settings+0x15>
    1ea2:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <settings+0x16>
    1ea6:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <settings+0x17>
    1eaa:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <settings+0x18>
    1eae:	2c c0       	rjmp	.+88     	; 0x1f08 <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			setDigit.value = settings.multiplierVoltage[1];
    1eb0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <settings+0x19>
    1eb4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <settings+0x1a>
    1eb8:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <settings+0x1b>
    1ebc:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <settings+0x1c>
    1ec0:	23 c0       	rjmp	.+70     	; 0x1f08 <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			setDigit.value = settings.multiplierVoltage[2];
    1ec2:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <settings+0x1d>
    1ec6:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <settings+0x1e>
    1eca:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <settings+0x1f>
    1ece:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <settings+0x20>
    1ed2:	1a c0       	rjmp	.+52     	; 0x1f08 <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			setDigit.value = settings.multiplierAmperage[0];
    1ed4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <settings+0x21>
    1ed8:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <settings+0x22>
    1edc:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <settings+0x23>
    1ee0:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <settings+0x24>
    1ee4:	11 c0       	rjmp	.+34     	; 0x1f08 <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			setDigit.value = settings.multiplierAmperage[1];
    1ee6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <settings+0x25>
    1eea:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <settings+0x26>
    1eee:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <settings+0x27>
    1ef2:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <settings+0x28>
    1ef6:	08 c0       	rjmp	.+16     	; 0x1f08 <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			setDigit.value = settings.multiplierAmperage[2];
    1ef8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <settings+0x29>
    1efc:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <settings+0x2a>
    1f00:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <settings+0x2b>
    1f04:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <settings+0x2c>
    1f08:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <setDigit>
    1f0c:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <setDigit+0x1>
    1f10:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <setDigit+0x2>
    1f14:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <setDigit+0x3>
			break;
	}
	setDigit.curMultiplier = 1.0f;
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e8       	ldi	r26, 0x80	; 128
    1f1e:	bf e3       	ldi	r27, 0x3F	; 63
    1f20:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <setDigit+0x4>
    1f24:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <setDigit+0x5>
    1f28:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <setDigit+0x6>
    1f2c:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <setDigit+0x7>
    1f30:	08 95       	ret

00001f32 <_Z12button2Clickv>:
}

/*
	Обработчика короткого клика второй клавиши
*/
void button2Click() {
    1f32:	cf 92       	push	r12
    1f34:	df 92       	push	r13
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	cf 93       	push	r28
	// Если мы в настройках сопротивления то обнуляем значения сопротивлений
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
    1f3c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    1f40:	8a 30       	cpi	r24, 0x0A	; 10
    1f42:	e1 f4       	brne	.+56     	; 0x1f7c <_Z12button2Clickv+0x4a>
		settings.impedance[0] = 0;
    1f44:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <settings+0x6>
    1f48:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <settings+0x7>
    1f4c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <settings+0x8>
    1f50:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <settings+0x9>
		settings.impedance[1] = 0;
    1f54:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <settings+0xa>
    1f58:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <settings+0xb>
    1f5c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <settings+0xc>
    1f60:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <settings+0xd>
		settings.impedance[2] = 0;
    1f64:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <settings+0xe>
    1f68:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <settings+0xf>
    1f6c:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <settings+0x10>
    1f70:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <settings+0x11>
		lcdUpdateScreen = true;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
		return;
    1f7a:	70 c0       	rjmp	.+224    	; 0x205c <_Z12button2Clickv+0x12a>
	}
	
	// В режиме предупреждения необходимости настроек - переводим в режим настроек
	if (modeWork.current == MW_NEED_SETUP) {
    1f7c:	81 11       	cpse	r24, r1
    1f7e:	0a c0       	rjmp	.+20     	; 0x1f94 <_Z12button2Clickv+0x62>
		lcdUpdateScreen = true;
    1f80:	c1 e0       	ldi	r28, 0x01	; 1
    1f82:	c0 93 e4 01 	sts	0x01E4, r28	; 0x8001e4 <lcdUpdateScreen>
		modeWork.current = MW_SETUP_START;
    1f86:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <modeWork>
		setEditValue();
    1f8a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_Z12setEditValuev>
		settings.isSetupMode = true;
    1f8e:	c0 93 0d 02 	sts	0x020D, r28	; 0x80020d <settings+0x12>
		return;
    1f92:	64 c0       	rjmp	.+200    	; 0x205c <_Z12button2Clickv+0x12a>
	}
		
	// Если режим настроек
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
    1f94:	9f ef       	ldi	r25, 0xFF	; 255
    1f96:	98 0f       	add	r25, r24
    1f98:	9a 30       	cpi	r25, 0x0A	; 10
    1f9a:	08 f0       	brcs	.+2      	; 0x1f9e <_Z12button2Clickv+0x6c>
    1f9c:	4e c0       	rjmp	.+156    	; 0x203a <_Z12button2Clickv+0x108>
		lcdUpdateScreen = true;
    1f9e:	91 e0       	ldi	r25, 0x01	; 1
    1fa0:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	c1 f4       	brne	.+48     	; 0x1fd8 <_Z12button2Clickv+0xa6>
			// режим выбора подключения - свапаем режим
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	a9 01       	movw	r20, r18
    1fae:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    1fb2:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    1fb6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    1fba:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    1fbe:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	21 f0       	breq	.+8      	; 0x1fce <_Z12button2Clickv+0x9c>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	dc 01       	movw	r26, r24
    1fcc:	2d c0       	rjmp	.+90     	; 0x2028 <_Z12button2Clickv+0xf6>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	bf e3       	ldi	r27, 0x3F	; 63
    1fd6:	28 c0       	rjmp	.+80     	; 0x2028 <_Z12button2Clickv+0xf6>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в меньшую сторону
			setDigit.value = setDigit.value > 0?  setDigit.value - 1: 0;
		}else {
			// Любой другой режим уменьшаем значение на величину curMultiplier
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    1fd8:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <setDigit+0x4>
    1fdc:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <setDigit+0x5>
    1fe0:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <setDigit+0x6>
    1fe4:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <setDigit+0x7>
    1fe8:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    1fec:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    1ff0:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    1ff4:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    1ff8:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
    1ffc:	6b 01       	movw	r12, r22
    1ffe:	7c 01       	movw	r14, r24
			if (setDigit.value < 0) {
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	a9 01       	movw	r20, r18
    2006:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    200a:	87 fd       	sbrc	r24, 7
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <_Z12button2Clickv+0xee>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в меньшую сторону
			setDigit.value = setDigit.value > 0?  setDigit.value - 1: 0;
		}else {
			// Любой другой режим уменьшаем значение на величину curMultiplier
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    200e:	c0 92 f3 01 	sts	0x01F3, r12	; 0x8001f3 <setDigit>
    2012:	d0 92 f4 01 	sts	0x01F4, r13	; 0x8001f4 <setDigit+0x1>
    2016:	e0 92 f5 01 	sts	0x01F5, r14	; 0x8001f5 <setDigit+0x2>
    201a:	f0 92 f6 01 	sts	0x01F6, r15	; 0x8001f6 <setDigit+0x3>
    201e:	1e c0       	rjmp	.+60     	; 0x205c <_Z12button2Clickv+0x12a>
			if (setDigit.value < 0) {
				setDigit.value = 999.999f;
    2020:	80 ef       	ldi	r24, 0xF0	; 240
    2022:	9f ef       	ldi	r25, 0xFF	; 255
    2024:	a9 e7       	ldi	r26, 0x79	; 121
    2026:	b4 e4       	ldi	r27, 0x44	; 68
    2028:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <setDigit>
    202c:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <setDigit+0x1>
    2030:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <setDigit+0x2>
    2034:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <setDigit+0x3>
    2038:	11 c0       	rjmp	.+34     	; 0x205c <_Z12button2Clickv+0x12a>
		}
		return;
	}
	
	// В режиме отображения данных листаем назад меню
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    203a:	23 ef       	ldi	r18, 0xF3	; 243
    203c:	28 0f       	add	r18, r24
    203e:	2a 30       	cpi	r18, 0x0A	; 10
    2040:	30 f4       	brcc	.+12     	; 0x204e <_Z12button2Clickv+0x11c>
		modeWork.current = modeWork.current == MW_SHOWING_START? MW_SHOWING_STOP: modeWork.current - 1;
    2042:	8d 30       	cpi	r24, 0x0D	; 13
    2044:	09 f4       	brne	.+2      	; 0x2048 <_Z12button2Clickv+0x116>
    2046:	96 e1       	ldi	r25, 0x16	; 22
    2048:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <modeWork>
		return;
    204c:	07 c0       	rjmp	.+14     	; 0x205c <_Z12button2Clickv+0x12a>
	}
	
	// Если вопрос о начале измерений, то клик его отклоняет
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    204e:	8e 31       	cpi	r24, 0x1E	; 30
    2050:	29 f4       	brne	.+10     	; 0x205c <_Z12button2Clickv+0x12a>
		modeWork.current = MW_SHOWING_START;
    2052:	8d e0       	ldi	r24, 0x0D	; 13
    2054:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
		settings.isReadyToWork = MM_STOP;
    2058:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <settings>
		return;
	}
}
    205c:	cf 91       	pop	r28
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	08 95       	ret

00002068 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>:
}

/*
	Установка степени усиления АЦП
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	ec 01       	movw	r28, r24
    2070:	16 2f       	mov	r17, r22
	Serial.print(F("ADS: "));
    2072:	6b e3       	ldi	r22, 0x3B	; 59
    2074:	71 e0       	ldi	r23, 0x01	; 1
    2076:	89 e3       	ldi	r24, 0x39	; 57
    2078:	93 e0       	ldi	r25, 0x03	; 3
    207a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
	switch(_index) {
    207e:	13 30       	cpi	r17, 0x03	; 3
    2080:	21 f1       	breq	.+72     	; 0x20ca <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x62>
    2082:	68 f4       	brcc	.+26     	; 0x209e <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x36>
    2084:	11 30       	cpi	r17, 0x01	; 1
    2086:	c1 f0       	breq	.+48     	; 0x20b8 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x50>
    2088:	12 30       	cpi	r17, 0x02	; 2
    208a:	89 f5       	brne	.+98     	; 0x20ee <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x86>
		case 1:
			Serial.println(F("GAIN_ONE"));
			_ads->setGain(GAIN_ONE);
			break;
		case 2:
			Serial.println(F("GAIN_TWO"));
    208c:	69 e2       	ldi	r22, 0x29	; 41
    208e:	71 e0       	ldi	r23, 0x01	; 1
    2090:	89 e3       	ldi	r24, 0x39	; 57
    2092:	93 e0       	ldi	r25, 0x03	; 3
    2094:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_TWO);
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	74 e0       	ldi	r23, 0x04	; 4
    209c:	30 c0       	rjmp	.+96     	; 0x20fe <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
/*
	Установка степени усиления АЦП
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	Serial.print(F("ADS: "));
	switch(_index) {
    209e:	14 30       	cpi	r17, 0x04	; 4
    20a0:	e9 f0       	breq	.+58     	; 0x20dc <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x74>
    20a2:	15 30       	cpi	r17, 0x05	; 5
    20a4:	21 f5       	brne	.+72     	; 0x20ee <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x86>
		case 4:
			Serial.println(F("GAIN_EIGHT"));
			_ads->setGain(GAIN_EIGHT);
			break;
		case 5:
			Serial.println(F("GAIN_SIXTEEN"));
    20a6:	67 e0       	ldi	r22, 0x07	; 7
    20a8:	71 e0       	ldi	r23, 0x01	; 1
    20aa:	89 e3       	ldi	r24, 0x39	; 57
    20ac:	93 e0       	ldi	r25, 0x03	; 3
    20ae:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_SIXTEEN);
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	7a e0       	ldi	r23, 0x0A	; 10
    20b6:	23 c0       	rjmp	.+70     	; 0x20fe <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	Serial.print(F("ADS: "));
	switch(_index) {
		case 1:
			Serial.println(F("GAIN_ONE"));
    20b8:	62 e3       	ldi	r22, 0x32	; 50
    20ba:	71 e0       	ldi	r23, 0x01	; 1
    20bc:	89 e3       	ldi	r24, 0x39	; 57
    20be:	93 e0       	ldi	r25, 0x03	; 3
    20c0:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_ONE);
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	72 e0       	ldi	r23, 0x02	; 2
    20c8:	1a c0       	rjmp	.+52     	; 0x20fe <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
		case 2:
			Serial.println(F("GAIN_TWO"));
			_ads->setGain(GAIN_TWO);
			break;
		case 3:
			Serial.println(F("GAIN_FOUR"));
    20ca:	6f e1       	ldi	r22, 0x1F	; 31
    20cc:	71 e0       	ldi	r23, 0x01	; 1
    20ce:	89 e3       	ldi	r24, 0x39	; 57
    20d0:	93 e0       	ldi	r25, 0x03	; 3
    20d2:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_FOUR);
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	76 e0       	ldi	r23, 0x06	; 6
    20da:	11 c0       	rjmp	.+34     	; 0x20fe <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
			break;
		case 4:
			Serial.println(F("GAIN_EIGHT"));
    20dc:	64 e1       	ldi	r22, 0x14	; 20
    20de:	71 e0       	ldi	r23, 0x01	; 1
    20e0:	89 e3       	ldi	r24, 0x39	; 57
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_EIGHT);
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	78 e0       	ldi	r23, 0x08	; 8
    20ec:	08 c0       	rjmp	.+16     	; 0x20fe <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
		case 5:
			Serial.println(F("GAIN_SIXTEEN"));
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			Serial.println(F("GAIN_TWOTHIRDS"));
    20ee:	68 ef       	ldi	r22, 0xF8	; 248
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	89 e3       	ldi	r24, 0x39	; 57
    20f4:	93 e0       	ldi	r25, 0x03	; 3
    20f6:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_TWOTHIRDS);
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	ce 01       	movw	r24, r28
			break;
	}
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
			Serial.println(F("GAIN_SIXTEEN"));
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			Serial.println(F("GAIN_TWOTHIRDS"));
			_ads->setGain(GAIN_TWOTHIRDS);
    2106:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>

0000210a <_Z18initAdsVoltageGainv>:
}

/*
	Инициализация усиления АЦП по напряжению
*/
void initAdsVoltageGain() {
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
	setAdsGainByIndex(&adsVoltage, settings.currentVoltageGain);
    210e:	cb ef       	ldi	r28, 0xFB	; 251
    2110:	d1 e0       	ldi	r29, 0x01	; 1
    2112:	6c 89       	ldd	r22, Y+20	; 0x14
    2114:	80 e7       	ldi	r24, 0x70	; 112
    2116:	92 e0       	ldi	r25, 0x02	; 2
    2118:	0e 94 34 10 	call	0x2068	; 0x2068 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.voltageStep = ads.gainStep[settings.currentVoltageGain] / 1000.0;
    211c:	ec 89       	ldd	r30, Y+20	; 0x14
    211e:	84 e0       	ldi	r24, 0x04	; 4
    2120:	e8 9f       	mul	r30, r24
    2122:	f0 01       	movw	r30, r0
    2124:	11 24       	eor	r1, r1
    2126:	e1 5d       	subi	r30, 0xD1	; 209
    2128:	fe 4f       	sbci	r31, 0xFE	; 254
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    213e:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <ads+0x18>
    2142:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <ads+0x19>
    2146:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <ads+0x1a>
    214a:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <ads+0x1b>
}
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	08 95       	ret

00002154 <_Z19initAdsAmperageGainv>:

/*
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
    2158:	cb ef       	ldi	r28, 0xFB	; 251
    215a:	d1 e0       	ldi	r29, 0x01	; 1
    215c:	6b 89       	ldd	r22, Y+19	; 0x13
    215e:	8b e6       	ldi	r24, 0x6B	; 107
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	0e 94 34 10 	call	0x2068	; 0x2068 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    2166:	eb 89       	ldd	r30, Y+19	; 0x13
    2168:	84 e0       	ldi	r24, 0x04	; 4
    216a:	e8 9f       	mul	r30, r24
    216c:	f0 01       	movw	r30, r0
    216e:	11 24       	eor	r1, r1
    2170:	e1 5d       	subi	r30, 0xD1	; 209
    2172:	fe 4f       	sbci	r31, 0xFE	; 254
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	4a e7       	ldi	r20, 0x7A	; 122
    217a:	54 e4       	ldi	r21, 0x44	; 68
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
    2188:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <ads+0x1c>
    218c:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <ads+0x1d>
    2190:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ads+0x1e>
    2194:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <ads+0x1f>
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	08 95       	ret

0000219e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    219e:	26 e0       	ldi	r18, 0x06	; 6
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	55 e2       	ldi	r21, 0x25	; 37
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	89 e3       	ldi	r24, 0x39	; 57
    21aa:	93 e0       	ldi	r25, 0x03	; 3
    21ac:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <_ZN14HardwareSerial5beginEmh>
bool isSingleErrorExists(float, float, byte);
void lcdPrintAmperageDiff(byte);

void setup() {
	Serial.begin(9600);
	Serial.println(F("Initialization..."));
    21b0:	6a e6       	ldi	r22, 0x6A	; 106
    21b2:	75 e0       	ldi	r23, 0x05	; 5
    21b4:	89 e3       	ldi	r24, 0x39	; 57
    21b6:	93 e0       	ldi	r25, 0x03	; 3
    21b8:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализация АЦП
	adsVoltage.setGain(GAIN_TWOTHIRDS);
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	70 e0       	ldi	r23, 0x00	; 0
    21c0:	80 e7       	ldi	r24, 0x70	; 112
    21c2:	92 e0       	ldi	r25, 0x02	; 2
    21c4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsVoltage.begin();
    21c8:	80 e7       	ldi	r24, 0x70	; 112
    21ca:	92 e0       	ldi	r25, 0x02	; 2
    21cc:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_ZN16Adafruit_ADS10155beginEv>
	adsAmperage.setGain(GAIN_TWOTHIRDS);
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	8b e6       	ldi	r24, 0x6B	; 107
    21d6:	92 e0       	ldi	r25, 0x02	; 2
    21d8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsAmperage.begin();
    21dc:	8b e6       	ldi	r24, 0x6B	; 107
    21de:	92 e0       	ldi	r25, 0x02	; 2
    21e0:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_ZN16Adafruit_ADS10155beginEv>
	// Инициализация LCD модуля
	lcd.init();
    21e4:	87 ee       	ldi	r24, 0xE7	; 231
    21e6:	91 e0       	ldi	r25, 0x01	; 1
    21e8:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    21ec:	87 ee       	ldi	r24, 0xE7	; 231
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    21f4:	87 ee       	ldi	r24, 0xE7	; 231
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN17LiquidCrystal_I2C5clearEv>
	Serial.println(F("LCD inited!"));
    21fc:	6e e5       	ldi	r22, 0x5E	; 94
    21fe:	75 e0       	ldi	r23, 0x05	; 5
    2200:	89 e3       	ldi	r24, 0x39	; 57
    2202:	93 e0       	ldi	r25, 0x03	; 3
    2204:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализая кнопок
	button1Callback.attachClick(button1Click);								// Установка callback функции на короткий клик
    2208:	6a e6       	ldi	r22, 0x6A	; 106
    220a:	73 e0       	ldi	r23, 0x03	; 3
    220c:	8a e4       	ldi	r24, 0x4A	; 74
    220e:	92 e0       	ldi	r25, 0x02	; 2
    2210:	0e 94 11 17 	call	0x2e22	; 0x2e22 <_ZN9OneButton11attachClickEPFvvE>
	button1Callback.attachLongPressStart(button1LongPressStart);			// Установка callback функции на длинный клик
    2214:	6e ec       	ldi	r22, 0xCE	; 206
    2216:	7e e0       	ldi	r23, 0x0E	; 14
    2218:	8a e4       	ldi	r24, 0x4A	; 74
    221a:	92 e0       	ldi	r25, 0x02	; 2
    221c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_ZN9OneButton20attachLongPressStartEPFvvE>
	button1Callback.setDebounceTicks(30);									// Время до идентификации клика в мс для нивилирования дребезга контактов
    2220:	6e e1       	ldi	r22, 0x1E	; 30
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	8a e4       	ldi	r24, 0x4A	; 74
    2226:	92 e0       	ldi	r25, 0x02	; 2
    2228:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_ZN9OneButton16setDebounceTicksEi>
	button1Callback.setClickTicks(200);										// Количество мс нажатия для того чтобы клик был идентифицирован
    222c:	68 ec       	ldi	r22, 0xC8	; 200
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	8a e4       	ldi	r24, 0x4A	; 74
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	0e 94 09 17 	call	0x2e12	; 0x2e12 <_ZN9OneButton13setClickTicksEi>
	button1Callback.setPressTicks(1000);									// Количество мс нажатия для идентификаци длинного клика
    2238:	68 ee       	ldi	r22, 0xE8	; 232
    223a:	73 e0       	ldi	r23, 0x03	; 3
    223c:	8a e4       	ldi	r24, 0x4A	; 74
    223e:	92 e0       	ldi	r25, 0x02	; 2
    2240:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 1 inited!"));
    2244:	6d e4       	ldi	r22, 0x4D	; 77
    2246:	75 e0       	ldi	r23, 0x05	; 5
    2248:	89 e3       	ldi	r24, 0x39	; 57
    224a:	93 e0       	ldi	r25, 0x03	; 3
    224c:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	button2Callback.attachClick(button2Click);
    2250:	69 e9       	ldi	r22, 0x99	; 153
    2252:	7f e0       	ldi	r23, 0x0F	; 15
    2254:	89 e2       	ldi	r24, 0x29	; 41
    2256:	92 e0       	ldi	r25, 0x02	; 2
    2258:	0e 94 11 17 	call	0x2e22	; 0x2e22 <_ZN9OneButton11attachClickEPFvvE>
	button2Callback.attachLongPressStart(button2LongPressStart);
    225c:	63 e8       	ldi	r22, 0x83	; 131
    225e:	74 e1       	ldi	r23, 0x14	; 20
    2260:	89 e2       	ldi	r24, 0x29	; 41
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_ZN9OneButton20attachLongPressStartEPFvvE>
	button2Callback.setDebounceTicks(30);
    2268:	6e e1       	ldi	r22, 0x1E	; 30
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	89 e2       	ldi	r24, 0x29	; 41
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_ZN9OneButton16setDebounceTicksEi>
	button2Callback.setClickTicks(200);
    2274:	68 ec       	ldi	r22, 0xC8	; 200
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	89 e2       	ldi	r24, 0x29	; 41
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <_ZN9OneButton13setClickTicksEi>
	button2Callback.setPressTicks(1000);
    2280:	68 ee       	ldi	r22, 0xE8	; 232
    2282:	73 e0       	ldi	r23, 0x03	; 3
    2284:	89 e2       	ldi	r24, 0x29	; 41
    2286:	92 e0       	ldi	r25, 0x02	; 2
    2288:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 2 inited!"));
    228c:	6c e3       	ldi	r22, 0x3C	; 60
    228e:	75 e0       	ldi	r23, 0x05	; 5
    2290:	89 e3       	ldi	r24, 0x39	; 57
    2292:	93 e0       	ldi	r25, 0x03	; 3
    2294:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализация старт-пакета данных
	if (eeprom_read_byte(&eeprom_first_start) != 100) {
    2298:	87 e2       	ldi	r24, 0x27	; 39
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <eeprom_read_byte>
    22a0:	84 36       	cpi	r24, 0x64	; 100
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <setup+0x108>
    22a4:	59 c0       	rjmp	.+178    	; 0x2358 <setup+0x1ba>
		eeprom_update_byte(&eeprom_connection_type, CONNECTION_TYPE_STAR);
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	86 e2       	ldi	r24, 0x26	; 38
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_amperage, 0);
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	85 e2       	ldi	r24, 0x25	; 37
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_voltage, 0);
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	84 e2       	ldi	r24, 0x24	; 36
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <eeprom_update_byte>
		eeprom_update_float(&eeprom_impedance_ab, 0);
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	ba 01       	movw	r22, r20
    22ca:	80 e2       	ldi	r24, 0x20	; 32
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_bc, 0);
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	ba 01       	movw	r22, r20
    22d8:	8c e1       	ldi	r24, 0x1C	; 28
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_ac, 0);
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	ba 01       	movw	r22, r20
    22e6:	88 e1       	ldi	r24, 0x18	; 24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ab, 0);
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	ba 01       	movw	r22, r20
    22f4:	84 e1       	ldi	r24, 0x14	; 20
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_bc, 0);
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	ba 01       	movw	r22, r20
    2302:	80 e1       	ldi	r24, 0x10	; 16
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ac, 0);
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	ba 01       	movw	r22, r20
    2310:	8c e0       	ldi	r24, 0x0C	; 12
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ab, 0);
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	ba 01       	movw	r22, r20
    231e:	88 e0       	ldi	r24, 0x08	; 8
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_bc, 0);
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	ba 01       	movw	r22, r20
    232c:	84 e0       	ldi	r24, 0x04	; 4
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ac, 0);
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	ba 01       	movw	r22, r20
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
		eeprom_update_byte(&eeprom_first_start, 100);
    2342:	64 e6       	ldi	r22, 0x64	; 100
    2344:	87 e2       	ldi	r24, 0x27	; 39
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <eeprom_update_byte>
		Serial.println(F("EEPROM first start writed!"));
    234c:	61 e2       	ldi	r22, 0x21	; 33
    234e:	75 e0       	ldi	r23, 0x05	; 5
    2350:	89 e3       	ldi	r24, 0x39	; 57
    2352:	93 e0       	ldi	r25, 0x03	; 3
    2354:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	// Теперь старт данные получаем из памяти при старте
	settings.currentAmperageGain = eeprom_read_byte(&eeprom_gain_amperage);
    2358:	85 e2       	ldi	r24, 0x25	; 37
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <eeprom_read_byte>
    2360:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <settings+0x13>
	settings.currentVoltageGain = eeprom_read_byte(&eeprom_gain_voltage);
    2364:	84 e2       	ldi	r24, 0x24	; 36
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <eeprom_read_byte>
    236c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <settings+0x14>
	settings.connectionType = eeprom_read_byte(&eeprom_connection_type);
    2370:	86 e2       	ldi	r24, 0x26	; 38
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <eeprom_read_byte>
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	81 11       	cpse	r24, r1
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <setup+0x1e2>
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <settings+0x1>
	settings.impedance[0] = eeprom_read_float(&eeprom_impedance_ab);
    2384:	80 e2       	ldi	r24, 0x20	; 32
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    238c:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <settings+0x6>
    2390:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <settings+0x7>
    2394:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <settings+0x8>
    2398:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <settings+0x9>
	settings.impedance[1] = eeprom_read_float(&eeprom_impedance_bc);
    239c:	8c e1       	ldi	r24, 0x1C	; 28
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    23a4:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <settings+0xa>
    23a8:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <settings+0xb>
    23ac:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <settings+0xc>
    23b0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <settings+0xd>
	settings.impedance[2] = eeprom_read_float(&eeprom_impedance_ac);
    23b4:	88 e1       	ldi	r24, 0x18	; 24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    23bc:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <settings+0xe>
    23c0:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <settings+0xf>
    23c4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <settings+0x10>
    23c8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <settings+0x11>
	settings.multiplierVoltage[0] = eeprom_read_float(&eeprom_voltage_mult_ab);
    23cc:	84 e1       	ldi	r24, 0x14	; 20
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    23d4:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <settings+0x15>
    23d8:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <settings+0x16>
    23dc:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <settings+0x17>
    23e0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <settings+0x18>
	settings.multiplierVoltage[1] = eeprom_read_float(&eeprom_voltage_mult_bc);
    23e4:	80 e1       	ldi	r24, 0x10	; 16
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    23ec:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <settings+0x19>
    23f0:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <settings+0x1a>
    23f4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <settings+0x1b>
    23f8:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <settings+0x1c>
	settings.multiplierVoltage[2] = eeprom_read_float(&eeprom_voltage_mult_ac);
    23fc:	8c e0       	ldi	r24, 0x0C	; 12
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    2404:	60 93 18 02 	sts	0x0218, r22	; 0x800218 <settings+0x1d>
    2408:	70 93 19 02 	sts	0x0219, r23	; 0x800219 <settings+0x1e>
    240c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <settings+0x1f>
    2410:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <settings+0x20>
	settings.multiplierAmperage[0] = eeprom_read_float(&eeprom_amperage_mult_ab);
    2414:	88 e0       	ldi	r24, 0x08	; 8
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    241c:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <settings+0x21>
    2420:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <settings+0x22>
    2424:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <settings+0x23>
    2428:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <settings+0x24>
	settings.multiplierAmperage[1] = eeprom_read_float(&eeprom_amperage_mult_bc);
    242c:	84 e0       	ldi	r24, 0x04	; 4
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    2434:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <settings+0x25>
    2438:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <settings+0x26>
    243c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <settings+0x27>
    2440:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <settings+0x28>
	settings.multiplierAmperage[2] = eeprom_read_float(&eeprom_amperage_mult_ac);
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <eeprom_read_dword>
    244c:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <settings+0x29>
    2450:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <settings+0x2a>
    2454:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <settings+0x2b>
    2458:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <settings+0x2c>
	Serial.println(F("EEPROM values:"));
    245c:	62 e1       	ldi	r22, 0x12	; 18
    245e:	75 e0       	ldi	r23, 0x05	; 5
    2460:	89 e3       	ldi	r24, 0x39	; 57
    2462:	93 e0       	ldi	r25, 0x03	; 3
    2464:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("gain_amperage: ")); Serial.println(settings.currentAmperageGain);
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	75 e0       	ldi	r23, 0x05	; 5
    246c:	89 e3       	ldi	r24, 0x39	; 57
    246e:	93 e0       	ldi	r25, 0x03	; 3
    2470:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    2474:	4a e0       	ldi	r20, 0x0A	; 10
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <settings+0x13>
    247c:	89 e3       	ldi	r24, 0x39	; 57
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	0e 94 9a 20 	call	0x4134	; 0x4134 <_ZN5Print7printlnEhi>
	Serial.print(F("gain_voltage: ")); Serial.println(settings.currentVoltageGain);
    2484:	63 ef       	ldi	r22, 0xF3	; 243
    2486:	74 e0       	ldi	r23, 0x04	; 4
    2488:	89 e3       	ldi	r24, 0x39	; 57
    248a:	93 e0       	ldi	r25, 0x03	; 3
    248c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    2490:	4a e0       	ldi	r20, 0x0A	; 10
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <settings+0x14>
    2498:	89 e3       	ldi	r24, 0x39	; 57
    249a:	93 e0       	ldi	r25, 0x03	; 3
    249c:	0e 94 9a 20 	call	0x4134	; 0x4134 <_ZN5Print7printlnEhi>
	Serial.print(F("connection_type: ")); Serial.println(settings.connectionType);
    24a0:	61 ee       	ldi	r22, 0xE1	; 225
    24a2:	74 e0       	ldi	r23, 0x04	; 4
    24a4:	89 e3       	ldi	r24, 0x39	; 57
    24a6:	93 e0       	ldi	r25, 0x03	; 3
    24a8:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    24ac:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <settings+0x1>
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	4a e0       	ldi	r20, 0x0A	; 10
    24b4:	50 e0       	ldi	r21, 0x00	; 0
    24b6:	89 e3       	ldi	r24, 0x39	; 57
    24b8:	93 e0       	ldi	r25, 0x03	; 3
    24ba:	0e 94 01 21 	call	0x4202	; 0x4202 <_ZN5Print7printlnEii>
	Serial.print(F("impedance_ab: ")); Serial.println(settings.impedance[0], 10);
    24be:	62 ed       	ldi	r22, 0xD2	; 210
    24c0:	74 e0       	ldi	r23, 0x04	; 4
    24c2:	89 e3       	ldi	r24, 0x39	; 57
    24c4:	93 e0       	ldi	r25, 0x03	; 3
    24c6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    24ca:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <settings+0x6>
    24ce:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <settings+0x7>
    24d2:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <settings+0x8>
    24d6:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <settings+0x9>
    24da:	2a e0       	ldi	r18, 0x0A	; 10
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	89 e3       	ldi	r24, 0x39	; 57
    24e0:	93 e0       	ldi	r25, 0x03	; 3
    24e2:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	Serial.print(F("impedance_bc: ")); Serial.println(settings.impedance[1], 10);
    24e6:	63 ec       	ldi	r22, 0xC3	; 195
    24e8:	74 e0       	ldi	r23, 0x04	; 4
    24ea:	89 e3       	ldi	r24, 0x39	; 57
    24ec:	93 e0       	ldi	r25, 0x03	; 3
    24ee:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    24f2:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <settings+0xa>
    24f6:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <settings+0xb>
    24fa:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <settings+0xc>
    24fe:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <settings+0xd>
    2502:	2a e0       	ldi	r18, 0x0A	; 10
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	89 e3       	ldi	r24, 0x39	; 57
    2508:	93 e0       	ldi	r25, 0x03	; 3
    250a:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	Serial.print(F("impedance_ac: ")); Serial.println(settings.impedance[2], 10);
    250e:	64 eb       	ldi	r22, 0xB4	; 180
    2510:	74 e0       	ldi	r23, 0x04	; 4
    2512:	89 e3       	ldi	r24, 0x39	; 57
    2514:	93 e0       	ldi	r25, 0x03	; 3
    2516:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    251a:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <settings+0xe>
    251e:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <settings+0xf>
    2522:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <settings+0x10>
    2526:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <settings+0x11>
    252a:	2a e0       	ldi	r18, 0x0A	; 10
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	89 e3       	ldi	r24, 0x39	; 57
    2530:	93 e0       	ldi	r25, 0x03	; 3
    2532:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_ab: ")); Serial.println(settings.multiplierVoltage[0], 3);
    2536:	62 ea       	ldi	r22, 0xA2	; 162
    2538:	74 e0       	ldi	r23, 0x04	; 4
    253a:	89 e3       	ldi	r24, 0x39	; 57
    253c:	93 e0       	ldi	r25, 0x03	; 3
    253e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    2542:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <settings+0x15>
    2546:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <settings+0x16>
    254a:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <settings+0x17>
    254e:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <settings+0x18>
    2552:	23 e0       	ldi	r18, 0x03	; 3
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	89 e3       	ldi	r24, 0x39	; 57
    2558:	93 e0       	ldi	r25, 0x03	; 3
    255a:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_bc: ")); Serial.println(settings.multiplierVoltage[1], 3);
    255e:	60 e9       	ldi	r22, 0x90	; 144
    2560:	74 e0       	ldi	r23, 0x04	; 4
    2562:	89 e3       	ldi	r24, 0x39	; 57
    2564:	93 e0       	ldi	r25, 0x03	; 3
    2566:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    256a:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <settings+0x19>
    256e:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <settings+0x1a>
    2572:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <settings+0x1b>
    2576:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <settings+0x1c>
    257a:	23 e0       	ldi	r18, 0x03	; 3
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	89 e3       	ldi	r24, 0x39	; 57
    2580:	93 e0       	ldi	r25, 0x03	; 3
    2582:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	Serial.print(F("voltage_mult_ac: ")); Serial.println(settings.multiplierVoltage[2], 3);
    2586:	6e e7       	ldi	r22, 0x7E	; 126
    2588:	74 e0       	ldi	r23, 0x04	; 4
    258a:	89 e3       	ldi	r24, 0x39	; 57
    258c:	93 e0       	ldi	r25, 0x03	; 3
    258e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    2592:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <settings+0x1d>
    2596:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <settings+0x1e>
    259a:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <settings+0x1f>
    259e:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <settings+0x20>
    25a2:	23 e0       	ldi	r18, 0x03	; 3
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	89 e3       	ldi	r24, 0x39	; 57
    25a8:	93 e0       	ldi	r25, 0x03	; 3
    25aa:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_ab: ")); Serial.println(settings.multiplierAmperage[0], 3);
    25ae:	6b e6       	ldi	r22, 0x6B	; 107
    25b0:	74 e0       	ldi	r23, 0x04	; 4
    25b2:	89 e3       	ldi	r24, 0x39	; 57
    25b4:	93 e0       	ldi	r25, 0x03	; 3
    25b6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    25ba:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <settings+0x21>
    25be:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <settings+0x22>
    25c2:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <settings+0x23>
    25c6:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <settings+0x24>
    25ca:	23 e0       	ldi	r18, 0x03	; 3
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	89 e3       	ldi	r24, 0x39	; 57
    25d0:	93 e0       	ldi	r25, 0x03	; 3
    25d2:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_bc: ")); Serial.println(settings.multiplierAmperage[1], 3);
    25d6:	68 e5       	ldi	r22, 0x58	; 88
    25d8:	74 e0       	ldi	r23, 0x04	; 4
    25da:	89 e3       	ldi	r24, 0x39	; 57
    25dc:	93 e0       	ldi	r25, 0x03	; 3
    25de:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    25e2:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <settings+0x25>
    25e6:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <settings+0x26>
    25ea:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <settings+0x27>
    25ee:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <settings+0x28>
    25f2:	23 e0       	ldi	r18, 0x03	; 3
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	89 e3       	ldi	r24, 0x39	; 57
    25f8:	93 e0       	ldi	r25, 0x03	; 3
    25fa:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	Serial.print(F("amperage_mult_ac: ")); Serial.println(settings.multiplierAmperage[2], 3);
    25fe:	65 e4       	ldi	r22, 0x45	; 69
    2600:	74 e0       	ldi	r23, 0x04	; 4
    2602:	89 e3       	ldi	r24, 0x39	; 57
    2604:	93 e0       	ldi	r25, 0x03	; 3
    2606:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    260a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <settings+0x29>
    260e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <settings+0x2a>
    2612:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <settings+0x2b>
    2616:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <settings+0x2c>
    261a:	23 e0       	ldi	r18, 0x03	; 3
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	89 e3       	ldi	r24, 0x39	; 57
    2620:	93 e0       	ldi	r25, 0x03	; 3
    2622:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN5Print7printlnEdi>
	
	initAdsVoltageGain();
    2626:	0e 94 85 10 	call	0x210a	; 0x210a <_Z18initAdsVoltageGainv>
	initAdsAmperageGain();
    262a:	0e 94 aa 10 	call	0x2154	; 0x2154 <_Z19initAdsAmperageGainv>
	
	settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    262e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <settings+0x1>
    2632:	88 23       	and	r24, r24
    2634:	29 f0       	breq	.+10     	; 0x2640 <setup+0x4a2>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 ea       	ldi	r26, 0xA0	; 160
    263c:	b0 e4       	ldi	r27, 0x40	; 64
    263e:	04 c0       	rjmp	.+8      	; 0x2648 <setup+0x4aa>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e2       	ldi	r26, 0x20	; 32
    2646:	b0 e4       	ldi	r27, 0x40	; 64
    2648:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <settings+0x2>
    264c:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <settings+0x3>
    2650:	a0 93 ff 01 	sts	0x01FF, r26	; 0x8001ff <settings+0x4>
    2654:	b0 93 00 02 	sts	0x0200, r27	; 0x800200 <settings+0x5>

	checkIsReadyToWork();
    2658:	0e 94 18 03 	call	0x630	; 0x630 <_Z18checkIsReadyToWorkv>
	
	// Инициализируем пищалку
	pinMode(RELAY, OUTPUT);
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	81 e1       	ldi	r24, 0x11	; 17
    2660:	0e 94 28 23 	call	0x4650	; 0x4650 <pinMode>
	pinMode(BEEPER, OUTPUT);
    2664:	61 e0       	ldi	r22, 0x01	; 1
    2666:	80 e1       	ldi	r24, 0x10	; 16
    2668:	0e 94 28 23 	call	0x4650	; 0x4650 <pinMode>
	pinMode(DEBUG, INPUT);
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	84 e0       	ldi	r24, 0x04	; 4
    2670:	0e 94 28 23 	call	0x4650	; 0x4650 <pinMode>
	digitalWrite(RELAY, LOW);
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	81 e1       	ldi	r24, 0x11	; 17
    2678:	0e 94 64 23 	call	0x46c8	; 0x46c8 <digitalWrite>
	digitalWrite(BEEPER, LOW);
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	80 e1       	ldi	r24, 0x10	; 16
    2680:	0e 94 64 23 	call	0x46c8	; 0x46c8 <digitalWrite>
	
	if (digitalRead(DEBUG) == HIGH) {
    2684:	84 e0       	ldi	r24, 0x04	; 4
    2686:	0e 94 93 23 	call	0x4726	; 0x4726 <digitalRead>
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	99 f4       	brne	.+38     	; 0x26b4 <setup+0x516>
		settings.isDebugMode = true;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <settings+0x2d>
		lcd.clear();
    2694:	87 ee       	ldi	r24, 0xE7	; 231
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN17LiquidCrystal_I2C5clearEv>
		lcd.print(F("Debug mode"));
    269c:	6a e3       	ldi	r22, 0x3A	; 58
    269e:	74 e0       	ldi	r23, 0x04	; 4
    26a0:	87 ee       	ldi	r24, 0xE7	; 231
    26a2:	91 e0       	ldi	r25, 0x01	; 1
    26a4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
		delay(1000);
    26a8:	68 ee       	ldi	r22, 0xE8	; 232
    26aa:	73 e0       	ldi	r23, 0x03	; 3
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 7d 22 	call	0x44fa	; 0x44fa <delay>
	}
	
	modeWork.prev = modeWork.current;
    26b4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    26b8:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <modeWork+0x1>
	initAvgVars();
    26bc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z11initAvgVarsv>
	Serial.println(F("Completed!"));
    26c0:	6f e2       	ldi	r22, 0x2F	; 47
    26c2:	74 e0       	ldi	r23, 0x04	; 4
    26c4:	89 e3       	ldi	r24, 0x39	; 57
    26c6:	93 e0       	ldi	r25, 0x03	; 3
    26c8:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Stand by..."));
    26cc:	63 e2       	ldi	r22, 0x23	; 35
    26ce:	74 e0       	ldi	r23, 0x04	; 4
    26d0:	89 e3       	ldi	r24, 0x39	; 57
    26d2:	93 e0       	ldi	r25, 0x03	; 3
    26d4:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
	displayStaticAsMode();
    26d8:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z19displayStaticAsModev>
	displayAsMode();
    26dc:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <_Z13displayAsModev>

000026e0 <_Z12saveSettingsv>:
}

/*
	Сохранение настроек при сменах режима
*/
void saveSettings() {
    26e0:	cf 92       	push	r12
    26e2:	df 92       	push	r13
    26e4:	ef 92       	push	r14
    26e6:	ff 92       	push	r15
    26e8:	cf 93       	push	r28
	switch(modeWork.current) {
    26ea:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <modeWork>
    26ee:	8e 2f       	mov	r24, r30
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	fc 01       	movw	r30, r24
    26f4:	31 97       	sbiw	r30, 0x01	; 1
    26f6:	ea 30       	cpi	r30, 0x0A	; 10
    26f8:	f1 05       	cpc	r31, r1
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <_Z12saveSettingsv+0x1e>
    26fc:	fe c0       	rjmp	.+508    	; 0x28fa <_Z12saveSettingsv+0x21a>
    26fe:	ee 58       	subi	r30, 0x8E	; 142
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			settings.connectionType = setDigit.value;
    2706:	c0 90 f3 01 	lds	r12, 0x01F3	; 0x8001f3 <setDigit>
    270a:	d0 90 f4 01 	lds	r13, 0x01F4	; 0x8001f4 <setDigit+0x1>
    270e:	e0 90 f5 01 	lds	r14, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2712:	f0 90 f6 01 	lds	r15, 0x01F6	; 0x8001f6 <setDigit+0x3>
    2716:	c1 e0       	ldi	r28, 0x01	; 1
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	a9 01       	movw	r20, r18
    271e:	c7 01       	movw	r24, r14
    2720:	b6 01       	movw	r22, r12
    2722:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    2726:	81 11       	cpse	r24, r1
    2728:	01 c0       	rjmp	.+2      	; 0x272c <_Z12saveSettingsv+0x4c>
    272a:	c0 e0       	ldi	r28, 0x00	; 0
    272c:	c0 93 fc 01 	sts	0x01FC, r28	; 0x8001fc <settings+0x1>
			settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	a9 01       	movw	r20, r18
    2736:	c7 01       	movw	r24, r14
    2738:	b6 01       	movw	r22, r12
    273a:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    273e:	81 11       	cpse	r24, r1
    2740:	05 c0       	rjmp	.+10     	; 0x274c <_Z12saveSettingsv+0x6c>
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a0 e2       	ldi	r26, 0x20	; 32
    2748:	b0 e4       	ldi	r27, 0x40	; 64
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <_Z12saveSettingsv+0x74>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 ea       	ldi	r26, 0xA0	; 160
    2752:	b0 e4       	ldi	r27, 0x40	; 64
    2754:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <settings+0x2>
    2758:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <settings+0x3>
    275c:	a0 93 ff 01 	sts	0x01FF, r26	; 0x8001ff <settings+0x4>
    2760:	b0 93 00 02 	sts	0x0200, r27	; 0x800200 <settings+0x5>
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
    2764:	6c 2f       	mov	r22, r28
    2766:	86 e2       	ldi	r24, 0x26	; 38
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	12 c0       	rjmp	.+36     	; 0x2790 <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
    276c:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    2770:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    2774:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2778:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    277c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__fixunssfsi>
    2780:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <settings+0x13>
			initAdsAmperageGain();
    2784:	0e 94 aa 10 	call	0x2154	; 0x2154 <_Z19initAdsAmperageGainv>
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    2788:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <settings+0x13>
    278c:	85 e2       	ldi	r24, 0x25	; 37
    278e:	90 e0       	ldi	r25, 0x00	; 0
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
			break;
	}
	
}
    2790:	cf 91       	pop	r28
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	df 90       	pop	r13
    2798:	cf 90       	pop	r12
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
			initAdsAmperageGain();
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    279a:	0c 94 f8 23 	jmp	0x47f0	; 0x47f0 <eeprom_update_byte>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			settings.currentVoltageGain = setDigit.value;
    279e:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    27a2:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    27a6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    27aa:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    27ae:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__fixunssfsi>
    27b2:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <settings+0x14>
			initAdsVoltageGain();
    27b6:	0e 94 85 10 	call	0x210a	; 0x210a <_Z18initAdsVoltageGainv>
			eeprom_update_byte(&eeprom_gain_voltage, settings.currentVoltageGain);
    27ba:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <settings+0x14>
    27be:	84 e2       	ldi	r24, 0x24	; 36
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	e6 cf       	rjmp	.-52     	; 0x2790 <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_IMPEDANCE:
			eeprom_update_float(&eeprom_impedance_ab, settings.impedance[0]);
    27c4:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <settings+0x6>
    27c8:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <settings+0x7>
    27cc:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <settings+0x8>
    27d0:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <settings+0x9>
    27d4:	80 e2       	ldi	r24, 0x20	; 32
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
			eeprom_update_float(&eeprom_impedance_bc, settings.impedance[1]);
    27dc:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <settings+0xa>
    27e0:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <settings+0xb>
    27e4:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <settings+0xc>
    27e8:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <settings+0xd>
    27ec:	8c e1       	ldi	r24, 0x1C	; 28
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 0a 24 	call	0x4814	; 0x4814 <eeprom_update_dword>
			eeprom_update_float(&eeprom_impedance_ac, settings.impedance[2]);
    27f4:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <settings+0xe>
    27f8:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <settings+0xf>
    27fc:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <settings+0x10>
    2800:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <settings+0x11>
    2804:	88 e1       	ldi	r24, 0x18	; 24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	71 c0       	rjmp	.+226    	; 0x28ec <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			settings.multiplierVoltage[0] = setDigit.value;
    280a:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    280e:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    2812:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2816:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    281a:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <settings+0x15>
    281e:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <settings+0x16>
    2822:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <settings+0x17>
    2826:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <settings+0x18>
			eeprom_update_float(&eeprom_voltage_mult_ab, settings.multiplierVoltage[0]);
    282a:	84 e1       	ldi	r24, 0x14	; 20
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	5e c0       	rjmp	.+188    	; 0x28ec <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			settings.multiplierVoltage[1] = setDigit.value;
    2830:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    2834:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    2838:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    283c:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    2840:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <settings+0x19>
    2844:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <settings+0x1a>
    2848:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <settings+0x1b>
    284c:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <settings+0x1c>
			eeprom_update_float(&eeprom_voltage_mult_bc, settings.multiplierVoltage[1]);
    2850:	80 e1       	ldi	r24, 0x10	; 16
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	4b c0       	rjmp	.+150    	; 0x28ec <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			settings.multiplierVoltage[2] = setDigit.value;
    2856:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    285a:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    285e:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2862:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    2866:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <settings+0x1d>
    286a:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <settings+0x1e>
    286e:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <settings+0x1f>
    2872:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <settings+0x20>
			eeprom_update_float(&eeprom_voltage_mult_ac, settings.multiplierVoltage[2]);
    2876:	8c e0       	ldi	r24, 0x0C	; 12
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	38 c0       	rjmp	.+112    	; 0x28ec <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			settings.multiplierAmperage[0] = setDigit.value;
    287c:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    2880:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    2884:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2888:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    288c:	40 93 1c 02 	sts	0x021C, r20	; 0x80021c <settings+0x21>
    2890:	50 93 1d 02 	sts	0x021D, r21	; 0x80021d <settings+0x22>
    2894:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <settings+0x23>
    2898:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <settings+0x24>
			eeprom_update_float(&eeprom_amperage_mult_ab, settings.multiplierAmperage[0]);
    289c:	88 e0       	ldi	r24, 0x08	; 8
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	25 c0       	rjmp	.+74     	; 0x28ec <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			settings.multiplierAmperage[1] = setDigit.value;
    28a2:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    28a6:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    28aa:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    28ae:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    28b2:	40 93 20 02 	sts	0x0220, r20	; 0x800220 <settings+0x25>
    28b6:	50 93 21 02 	sts	0x0221, r21	; 0x800221 <settings+0x26>
    28ba:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <settings+0x27>
    28be:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <settings+0x28>
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
    28c2:	84 e0       	ldi	r24, 0x04	; 4
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	12 c0       	rjmp	.+36     	; 0x28ec <_Z12saveSettingsv+0x20c>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
    28c8:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    28cc:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    28d0:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    28d4:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    28d8:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <settings+0x29>
    28dc:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <settings+0x2a>
    28e0:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <settings+0x2b>
    28e4:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <settings+0x2c>
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	
}
    28ec:	cf 91       	pop	r28
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	df 90       	pop	r13
    28f4:	cf 90       	pop	r12
			settings.multiplierAmperage[1] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    28f6:	0c 94 0a 24 	jmp	0x4814	; 0x4814 <eeprom_update_dword>
			break;
	}
	
}
    28fa:	cf 91       	pop	r28
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	cf 90       	pop	r12
    2904:	08 95       	ret

00002906 <_Z21button2LongPressStartv>:
}

/*
	Обработчик длинного клика второй клавиши
*/
void button2LongPressStart() {
    2906:	cf 93       	push	r28
	// При наличии замыкания отключает пищалку
	if (icError.hasIC) {
    2908:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_start+0x16>
    290c:	88 23       	and	r24, r24
    290e:	79 f0       	breq	.+30     	; 0x292e <_Z21button2LongPressStartv+0x28>
		digitalWrite(BEEPER, LOW);
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	80 e1       	ldi	r24, 0x10	; 16
    2914:	0e 94 64 23 	call	0x46c8	; 0x46c8 <digitalWrite>
		icError.hasIC = false;
    2918:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_start+0x16>
		icError.detectStamp = false;
    291c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_start+0x17>
    2920:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_start+0x18>
    2924:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_start+0x19>
    2928:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_start+0x1a>
		return;
    292c:	3e c0       	rjmp	.+124    	; 0x29aa <_Z21button2LongPressStartv+0xa4>
	}
	
	// В режиме предупреждения о необходимости натсроек ничего не делает
	if (modeWork.current == MW_NEED_SETUP) {
    292e:	c0 91 e5 01 	lds	r28, 0x01E5	; 0x8001e5 <modeWork>
    2932:	cc 23       	and	r28, r28
    2934:	d1 f1       	breq	.+116    	; 0x29aa <_Z21button2LongPressStartv+0xa4>
		return;
	}
	
	// В режиме отображения количества выхода за пределы измерений обнуляет их и средние значения
	if (modeWork.current == MW_SHOW_ERRORS_COUNTERS) {
    2936:	cd 30       	cpi	r28, 0x0D	; 13
    2938:	a1 f4       	brne	.+40     	; 0x2962 <_Z21button2LongPressStartv+0x5c>
		for(byte i = 0; i < 3; i++) {
			icError.criticalLvlCount[i] = 0;
    293a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_start+0x11>
    293e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_start+0x10>
    2942:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_start+0x13>
    2946:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_start+0x12>
    294a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_start+0x15>
    294e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_start+0x14>
		}
		initAvgVars();
    2952:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z11initAvgVarsv>
		modeWork.current = MW_SHOWING_START;
    2956:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <modeWork>
		lcdUpdateScreen = true;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
		return;
    2960:	24 c0       	rjmp	.+72     	; 0x29aa <_Z21button2LongPressStartv+0xa4>
	}
	
	// Перевод в режим настроек и выход из него
	if (settings.isSetupMode) {
    2962:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <settings+0x12>
    2966:	88 23       	and	r24, r24
    2968:	89 f0       	breq	.+34     	; 0x298c <_Z21button2LongPressStartv+0x86>
		if (modeWork.current == MW_SETUP_STOP) {
    296a:	ca 30       	cpi	r28, 0x0A	; 10
    296c:	29 f4       	brne	.+10     	; 0x2978 <_Z21button2LongPressStartv+0x72>
			saveSettings();
    296e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_Z12saveSettingsv>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    2972:	cf 91       	pop	r28
	
	// Перевод в режим настроек и выход из него
	if (settings.isSetupMode) {
		if (modeWork.current == MW_SETUP_STOP) {
			saveSettings();
			checkIsReadyToWork();
    2974:	0c 94 18 03 	jmp	0x630	; 0x630 <_Z18checkIsReadyToWorkv>
		} else {
			saveSettings();
    2978:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_Z12saveSettingsv>
			modeWork.current++;
    297c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    2980:	8f 5f       	subi	r24, 0xFF	; 255
    2982:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    2986:	cf 91       	pop	r28
			saveSettings();
			checkIsReadyToWork();
		} else {
			saveSettings();
			modeWork.current++;
			setEditValue();
    2988:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <_Z12setEditValuev>
		}
	} else {
		Serial.println(F("**Measurement Stoped!"));
    298c:	61 e4       	ldi	r22, 0x41	; 65
    298e:	71 e0       	ldi	r23, 0x01	; 1
    2990:	89 e3       	ldi	r24, 0x39	; 57
    2992:	93 e0       	ldi	r25, 0x03	; 3
    2994:	0e 94 2b 20 	call	0x4056	; 0x4056 <_ZN5Print7printlnEPK19__FlashStringHelper>
		settings.isReadyToWork = MM_STOP;
    2998:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <settings>
		modeWork.current = MW_SETUP_START;
    299c:	c1 e0       	ldi	r28, 0x01	; 1
    299e:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <modeWork>
		setEditValue();
    29a2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_Z12setEditValuev>
		settings.isSetupMode = true;
    29a6:	c0 93 0d 02 	sts	0x020D, r28	; 0x80020d <settings+0x12>
	}
}
    29aa:	cf 91       	pop	r28
    29ac:	08 95       	ret

000029ae <_GLOBAL__sub_I_eeprom_first_start>:
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
	| GAIN_SIXTEEN   | x16  |    0.256    | 0.0078125	 |
	------------------------------------------------------
*/

// Объекты работы с АЦП модулями
Adafruit_ADS1115 adsVoltage(0x48);			
    29b2:	68 e4       	ldi	r22, 0x48	; 72
    29b4:	80 e7       	ldi	r24, 0x70	; 112
    29b6:	92 e0       	ldi	r25, 0x02	; 2
    29b8:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 adsAmperage(0x49);
    29bc:	69 e4       	ldi	r22, 0x49	; 73
    29be:	8b e6       	ldi	r24, 0x6B	; 107
    29c0:	92 e0       	ldi	r25, 0x02	; 2
    29c2:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN16Adafruit_ADS1115C1Eh>
		В режиме измерения смена режима показа назад
	Динное нажатие:
		В режиме измерения в меню критических величин сбрасывает счетчик
		Переход в режим настроек/отображения измерений кроме режима критических величин
*/
OneButton button1Callback(BUTTON_1, false);
    29c6:	21 e0       	ldi	r18, 0x01	; 1
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	50 e0       	ldi	r21, 0x00	; 0
    29cc:	6e e0       	ldi	r22, 0x0E	; 14
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	8a e4       	ldi	r24, 0x4A	; 74
    29d2:	92 e0       	ldi	r25, 0x02	; 2
    29d4:	0e 94 d6 16 	call	0x2dac	; 0x2dac <_ZN9OneButtonC1Eiib>
OneButton button2Callback(BUTTON_2, false);
    29d8:	21 e0       	ldi	r18, 0x01	; 1
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	6f e0       	ldi	r22, 0x0F	; 15
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	89 e2       	ldi	r24, 0x29	; 41
    29e4:	92 e0       	ldi	r25, 0x02	; 2
    29e6:	0e 94 d6 16 	call	0x2dac	; 0x2dac <_ZN9OneButtonC1Eiib>
	currentAmperageGain - индекс усиления АЦП по току
	currentVoltageGain - индекс усиления АЦП по напряжению
	multiplierVoltage - множитель по напряжению для вычисления реального значения
	multiplierAmperage - множитель по току для вычисления реального значения
*/
struct Settings {
    29ea:	cb ef       	ldi	r28, 0xFB	; 251
    29ec:	d1 e0       	ldi	r29, 0x01	; 1
    29ee:	18 82       	st	Y, r1
    29f0:	19 82       	std	Y+1, r1	; 0x01
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e2       	ldi	r26, 0x20	; 32
    29f8:	b0 e4       	ldi	r27, 0x40	; 64
    29fa:	8a 83       	std	Y+2, r24	; 0x02
    29fc:	9b 83       	std	Y+3, r25	; 0x03
    29fe:	ac 83       	std	Y+4, r26	; 0x04
    2a00:	bd 83       	std	Y+5, r27	; 0x05
    2a02:	1e 82       	std	Y+6, r1	; 0x06
    2a04:	1f 82       	std	Y+7, r1	; 0x07
    2a06:	18 86       	std	Y+8, r1	; 0x08
    2a08:	19 86       	std	Y+9, r1	; 0x09
    2a0a:	1a 86       	std	Y+10, r1	; 0x0a
    2a0c:	1b 86       	std	Y+11, r1	; 0x0b
    2a0e:	1c 86       	std	Y+12, r1	; 0x0c
    2a10:	1d 86       	std	Y+13, r1	; 0x0d
    2a12:	1e 86       	std	Y+14, r1	; 0x0e
    2a14:	1f 86       	std	Y+15, r1	; 0x0f
    2a16:	18 8a       	std	Y+16, r1	; 0x10
    2a18:	19 8a       	std	Y+17, r1	; 0x11
    2a1a:	1b 8a       	std	Y+19, r1	; 0x13
    2a1c:	1c 8a       	std	Y+20, r1	; 0x14
    2a1e:	8c e0       	ldi	r24, 0x0C	; 12
    2a20:	ed e8       	ldi	r30, 0x8D	; 141
    2a22:	f1 e0       	ldi	r31, 0x01	; 1
    2a24:	a0 e1       	ldi	r26, 0x10	; 16
    2a26:	b2 e0       	ldi	r27, 0x02	; 2
    2a28:	01 90       	ld	r0, Z+
    2a2a:	0d 92       	st	X+, r0
    2a2c:	8a 95       	dec	r24
    2a2e:	e1 f7       	brne	.-8      	; 0x2a28 <_GLOBAL__sub_I_eeprom_first_start+0x7a>
    2a30:	8c e0       	ldi	r24, 0x0C	; 12
    2a32:	ed e8       	ldi	r30, 0x8D	; 141
    2a34:	f1 e0       	ldi	r31, 0x01	; 1
    2a36:	ac e1       	ldi	r26, 0x1C	; 28
    2a38:	b2 e0       	ldi	r27, 0x02	; 2
    2a3a:	01 90       	ld	r0, Z+
    2a3c:	0d 92       	st	X+, r0
    2a3e:	8a 95       	dec	r24
    2a40:	e1 f7       	brne	.-8      	; 0x2a3a <_GLOBAL__sub_I_eeprom_first_start+0x8c>
    2a42:	1d a6       	std	Y+45, r1	; 0x2d
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    2a44:	22 e0       	ldi	r18, 0x02	; 2
    2a46:	40 e1       	ldi	r20, 0x10	; 16
    2a48:	67 e2       	ldi	r22, 0x27	; 39
    2a4a:	87 ee       	ldi	r24, 0xE7	; 231
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    2a52:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <_ZN17LiquidCrystal_I2CC1Ehhh>

00002a56 <_ZN16Adafruit_ADS1115C1Eh>:
  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH, threshold << m_bitShift);

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    2a56:	fc 01       	movw	r30, r24
    2a58:	14 82       	std	Z+4, r1	; 0x04
    2a5a:	13 82       	std	Z+3, r1	; 0x03
    2a5c:	60 83       	st	Z, r22
    2a5e:	88 e0       	ldi	r24, 0x08	; 8
    2a60:	81 83       	std	Z+1, r24	; 0x01
    2a62:	12 82       	std	Z+2, r1	; 0x02
    2a64:	08 95       	ret

00002a66 <_ZN16Adafruit_ADS10155beginEv>:
    2a66:	83 ee       	ldi	r24, 0xE3	; 227
    2a68:	92 e0       	ldi	r25, 0x02	; 2
    2a6a:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <_ZN7TwoWire5beginEv>

00002a6e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    2a6e:	fc 01       	movw	r30, r24
    2a70:	74 83       	std	Z+4, r23	; 0x04
    2a72:	63 83       	std	Z+3, r22	; 0x03
    2a74:	08 95       	ret

00002a76 <_ZL13writeRegisterhhj>:
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	16 2f       	mov	r17, r22
    2a7e:	ea 01       	movw	r28, r20
    2a80:	68 2f       	mov	r22, r24
    2a82:	83 ee       	ldi	r24, 0xE3	; 227
    2a84:	92 e0       	ldi	r25, 0x02	; 2
    2a86:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN7TwoWire17beginTransmissionEh>
    2a8a:	61 2f       	mov	r22, r17
    2a8c:	83 ee       	ldi	r24, 0xE3	; 227
    2a8e:	92 e0       	ldi	r25, 0x02	; 2
    2a90:	0e 94 c3 1a 	call	0x3586	; 0x3586 <_ZN7TwoWire5writeEh>
    2a94:	6d 2f       	mov	r22, r29
    2a96:	83 ee       	ldi	r24, 0xE3	; 227
    2a98:	92 e0       	ldi	r25, 0x02	; 2
    2a9a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <_ZN7TwoWire5writeEh>
    2a9e:	6c 2f       	mov	r22, r28
    2aa0:	83 ee       	ldi	r24, 0xE3	; 227
    2aa2:	92 e0       	ldi	r25, 0x02	; 2
    2aa4:	0e 94 c3 1a 	call	0x3586	; 0x3586 <_ZN7TwoWire5writeEh>
    2aa8:	83 ee       	ldi	r24, 0xE3	; 227
    2aaa:	92 e0       	ldi	r25, 0x02	; 2
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <_ZN7TwoWire15endTransmissionEv>

00002ab6 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	18 2f       	mov	r17, r24
  Wire.beginTransmission(i2cAddress);
    2abe:	68 2f       	mov	r22, r24
    2ac0:	83 ee       	ldi	r24, 0xE3	; 227
    2ac2:	92 e0       	ldi	r25, 0x02	; 2
    2ac4:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN7TwoWire17beginTransmissionEh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	83 ee       	ldi	r24, 0xE3	; 227
    2acc:	92 e0       	ldi	r25, 0x02	; 2
    2ace:	0e 94 c3 1a 	call	0x3586	; 0x3586 <_ZN7TwoWire5writeEh>
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
    2ad2:	83 ee       	ldi	r24, 0xE3	; 227
    2ad4:	92 e0       	ldi	r25, 0x02	; 2
    2ad6:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
    2ada:	42 e0       	ldi	r20, 0x02	; 2
    2adc:	61 2f       	mov	r22, r17
    2ade:	83 ee       	ldi	r24, 0xE3	; 227
    2ae0:	92 e0       	ldi	r25, 0x02	; 2
    2ae2:	0e 94 95 1b 	call	0x372a	; 0x372a <_ZN7TwoWire11requestFromEhh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
  #if ARDUINO >= 100
  return Wire.read();
    2ae6:	83 ee       	ldi	r24, 0xE3	; 227
    2ae8:	92 e0       	ldi	r25, 0x02	; 2
    2aea:	0e 94 3c 1a 	call	0x3478	; 0x3478 <_ZN7TwoWire4readEv>
    2aee:	18 2f       	mov	r17, r24
    2af0:	83 ee       	ldi	r24, 0xE3	; 227
    2af2:	92 e0       	ldi	r25, 0x02	; 2
    2af4:	0e 94 3c 1a 	call	0x3478	; 0x3478 <_ZN7TwoWire4readEv>
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
  Wire.requestFrom(i2cAddress, (uint8_t)2);
  return ((i2cread() << 8) | i2cread());  
    2af8:	d1 2f       	mov	r29, r17
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	c2 2f       	mov	r28, r18
}
    2afe:	9e 01       	movw	r18, r28
    2b00:	28 2b       	or	r18, r24
    2b02:	c9 01       	movw	r24, r18
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	08 95       	ret

00002b0c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
  if (channel > 3)
    2b10:	64 30       	cpi	r22, 0x04	; 4
    2b12:	50 f5       	brcc	.+84     	; 0x2b68 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x5c>
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
    2b14:	fc 01       	movw	r30, r24
    2b16:	43 81       	ldd	r20, Z+3	; 0x03
    2b18:	54 81       	ldd	r21, Z+4	; 0x04

  // Set single-ended input channel
  switch (channel)
    2b1a:	62 30       	cpi	r22, 0x02	; 2
    2b1c:	51 f0       	breq	.+20     	; 0x2b32 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
    2b1e:	63 30       	cpi	r22, 0x03	; 3
    2b20:	59 f0       	breq	.+22     	; 0x2b38 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2c>
    2b22:	61 30       	cpi	r22, 0x01	; 1
    2b24:	19 f0       	breq	.+6      	; 0x2b2c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    2b26:	43 68       	ori	r20, 0x83	; 131
    2b28:	51 64       	ori	r21, 0x41	; 65
      break;
    2b2a:	08 c0       	rjmp	.+16     	; 0x2b3c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    2b2c:	43 68       	ori	r20, 0x83	; 131
    2b2e:	51 65       	ori	r21, 0x51	; 81
      break;
    2b30:	05 c0       	rjmp	.+10     	; 0x2b3c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    2b32:	43 68       	ori	r20, 0x83	; 131
    2b34:	51 66       	ori	r21, 0x61	; 97
      break;
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    2b38:	43 68       	ori	r20, 0x83	; 131
    2b3a:	51 67       	ori	r21, 0x71	; 113
    2b3c:	ec 01       	movw	r28, r24

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    2b3e:	50 68       	ori	r21, 0x80	; 128
    2b40:	61 e0       	ldi	r22, 0x01	; 1
    2b42:	88 81       	ld	r24, Y
    2b44:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZL13writeRegisterhhj>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
    2b48:	69 81       	ldd	r22, Y+1	; 0x01
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 7d 22 	call	0x44fa	; 0x44fa <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
    2b54:	88 81       	ld	r24, Y
    2b56:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZL12readRegisterhh.isra.0>
    2b5a:	0a 80       	ldd	r0, Y+2	; 0x02
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x56>
    2b5e:	96 95       	lsr	r25
    2b60:	87 95       	ror	r24
    2b62:	0a 94       	dec	r0
    2b64:	e2 f7       	brpl	.-8      	; 0x2b5e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x52>
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x60>
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	08 95       	ret

00002b78 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2b78:	08 95       	ret

00002b7a <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	13 82       	std	Z+3, r1	; 0x03
    2b7e:	12 82       	std	Z+2, r1	; 0x02
    2b80:	85 ea       	ldi	r24, 0xA5	; 165
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	80 83       	st	Z, r24
    2b88:	64 83       	std	Z+4, r22	; 0x04
    2b8a:	41 87       	std	Z+9, r20	; 0x09
    2b8c:	22 87       	std	Z+10, r18	; 0x0a
    2b8e:	13 86       	std	Z+11, r1	; 0x0b
    2b90:	08 95       	ret

00002b92 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	ec 01       	movw	r28, r24
    2b9a:	16 2f       	mov	r17, r22
    2b9c:	6c 81       	ldd	r22, Y+4	; 0x04
    2b9e:	83 ee       	ldi	r24, 0xE3	; 227
    2ba0:	92 e0       	ldi	r25, 0x02	; 2
    2ba2:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN7TwoWire17beginTransmissionEh>
    2ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba8:	61 2b       	or	r22, r17
    2baa:	83 ee       	ldi	r24, 0xE3	; 227
    2bac:	92 e0       	ldi	r25, 0x02	; 2
    2bae:	0e 94 c3 1a 	call	0x3586	; 0x3586 <_ZN7TwoWire5writeEh>
    2bb2:	83 ee       	ldi	r24, 0xE3	; 227
    2bb4:	92 e0       	ldi	r25, 0x02	; 2
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	1f 91       	pop	r17
    2bbc:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <_ZN7TwoWire15endTransmissionEv>

00002bc0 <_ZN17LiquidCrystal_I2C9backlightEv>:
    2bc0:	28 e0       	ldi	r18, 0x08	; 8
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	23 87       	std	Z+11, r18	; 0x0b
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
    2bc8:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002bcc <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	8c 01       	movw	r16, r24
    2bd4:	c6 2f       	mov	r28, r22
    2bd6:	64 60       	ori	r22, 0x04	; 4
    2bd8:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 b9 22 	call	0x4572	; 0x4572 <delayMicroseconds>
    2be4:	6c 2f       	mov	r22, r28
    2be6:	6b 7f       	andi	r22, 0xFB	; 251
    2be8:	c8 01       	movw	r24, r16
    2bea:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2bee:	82 e3       	ldi	r24, 0x32	; 50
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	cf 91       	pop	r28
    2bf4:	1f 91       	pop	r17
    2bf6:	0f 91       	pop	r16
    2bf8:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <delayMicroseconds>

00002bfc <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	ec 01       	movw	r28, r24
    2c04:	16 2f       	mov	r17, r22
    2c06:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2c0a:	61 2f       	mov	r22, r17
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002c18 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	8c 01       	movw	r16, r24
    2c22:	c6 2f       	mov	r28, r22
    2c24:	d4 2f       	mov	r29, r20
    2c26:	60 7f       	andi	r22, 0xF0	; 240
    2c28:	64 2b       	or	r22, r20
    2c2a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2c2e:	80 e1       	ldi	r24, 0x10	; 16
    2c30:	c8 9f       	mul	r28, r24
    2c32:	b0 01       	movw	r22, r0
    2c34:	11 24       	eor	r1, r1
    2c36:	6d 2b       	or	r22, r29
    2c38:	c8 01       	movw	r24, r16
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	1f 91       	pop	r17
    2c40:	0f 91       	pop	r16
    2c42:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002c46 <_ZN17LiquidCrystal_I2C7commandEh>:
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <_ZN17LiquidCrystal_I2C4sendEhh>

00002c4c <_ZN17LiquidCrystal_I2C5clearEv>:
    2c4c:	61 e0       	ldi	r22, 0x01	; 1
    2c4e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN17LiquidCrystal_I2C7commandEh>
    2c52:	80 ed       	ldi	r24, 0xD0	; 208
    2c54:	97 e0       	ldi	r25, 0x07	; 7
    2c56:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <delayMicroseconds>

00002c5a <_ZN17LiquidCrystal_I2C4homeEv>:
    2c5a:	62 e0       	ldi	r22, 0x02	; 2
    2c5c:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN17LiquidCrystal_I2C7commandEh>
    2c60:	80 ed       	ldi	r24, 0xD0	; 208
    2c62:	97 e0       	ldi	r25, 0x07	; 7
    2c64:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <delayMicroseconds>

00002c68 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	28 97       	sbiw	r28, 0x08	; 8
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	9c 01       	movw	r18, r24
    2c7e:	88 e0       	ldi	r24, 0x08	; 8
    2c80:	e9 e9       	ldi	r30, 0x99	; 153
    2c82:	f1 e0       	ldi	r31, 0x01	; 1
    2c84:	de 01       	movw	r26, r28
    2c86:	11 96       	adiw	r26, 0x01	; 1
    2c88:	01 90       	ld	r0, Z+
    2c8a:	0d 92       	st	X+, r0
    2c8c:	8a 95       	dec	r24
    2c8e:	e1 f7       	brne	.-8      	; 0x2c88 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2c90:	f9 01       	movw	r30, r18
    2c92:	80 85       	ldd	r24, Z+8	; 0x08
    2c94:	84 17       	cp	r24, r20
    2c96:	10 f4       	brcc	.+4      	; 0x2c9c <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2c98:	4f ef       	ldi	r20, 0xFF	; 255
    2c9a:	48 0f       	add	r20, r24
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	31 96       	adiw	r30, 0x01	; 1
    2ca0:	e4 0f       	add	r30, r20
    2ca2:	f1 1d       	adc	r31, r1
    2ca4:	e4 0f       	add	r30, r20
    2ca6:	f1 1d       	adc	r31, r1
    2ca8:	90 81       	ld	r25, Z
    2caa:	69 0f       	add	r22, r25
    2cac:	60 68       	ori	r22, 0x80	; 128
    2cae:	c9 01       	movw	r24, r18
    2cb0:	28 96       	adiw	r28, 0x08	; 8
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <_ZN17LiquidCrystal_I2C7commandEh>

00002cc4 <_ZN17LiquidCrystal_I2C7displayEv>:
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	66 81       	ldd	r22, Z+6	; 0x06
    2cc8:	26 2f       	mov	r18, r22
    2cca:	24 60       	ori	r18, 0x04	; 4
    2ccc:	26 83       	std	Z+6, r18	; 0x06
    2cce:	6c 60       	ori	r22, 0x0C	; 12
    2cd0:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <_ZN17LiquidCrystal_I2C7commandEh>

00002cd4 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	08 95       	ret

00002ce0 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2ce6:	42 30       	cpi	r20, 0x02	; 2
    2ce8:	18 f0       	brcs	.+6      	; 0x2cf0 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	88 60       	ori	r24, 0x08	; 8
    2cee:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2cf0:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2cf2:	22 23       	and	r18, r18
    2cf4:	29 f0       	breq	.+10     	; 0x2d00 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2cf6:	41 30       	cpi	r20, 0x01	; 1
    2cf8:	19 f4       	brne	.+6      	; 0x2d00 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	84 60       	ori	r24, 0x04	; 4
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2d00:	62 e3       	ldi	r22, 0x32	; 50
    2d02:	70 e0       	ldi	r23, 0x00	; 0
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 7d 22 	call	0x44fa	; 0x44fa <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0e:	ce 01       	movw	r24, r28
    2d10:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    2d14:	68 ee       	ldi	r22, 0xE8	; 232
    2d16:	73 e0       	ldi	r23, 0x03	; 3
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 7d 22 	call	0x44fa	; 0x44fa <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2d20:	60 e3       	ldi	r22, 0x30	; 48
    2d22:	ce 01       	movw	r24, r28
    2d24:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2d28:	84 e9       	ldi	r24, 0x94	; 148
    2d2a:	91 e1       	ldi	r25, 0x11	; 17
    2d2c:	0e 94 b9 22 	call	0x4572	; 0x4572 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2d30:	60 e3       	ldi	r22, 0x30	; 48
    2d32:	ce 01       	movw	r24, r28
    2d34:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2d38:	84 e9       	ldi	r24, 0x94	; 148
    2d3a:	91 e1       	ldi	r25, 0x11	; 17
    2d3c:	0e 94 b9 22 	call	0x4572	; 0x4572 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2d40:	60 e3       	ldi	r22, 0x30	; 48
    2d42:	ce 01       	movw	r24, r28
    2d44:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2d48:	86 e9       	ldi	r24, 0x96	; 150
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 b9 22 	call	0x4572	; 0x4572 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2d50:	60 e2       	ldi	r22, 0x20	; 32
    2d52:	ce 01       	movw	r24, r28
    2d54:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2d58:	6d 81       	ldd	r22, Y+5	; 0x05
    2d5a:	60 62       	ori	r22, 0x20	; 32
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2d62:	84 e0       	ldi	r24, 0x04	; 4
    2d64:	8e 83       	std	Y+6, r24	; 0x06
	display();
    2d66:	ce 01       	movw	r24, r28
    2d68:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2d72:	82 e0       	ldi	r24, 0x02	; 2
    2d74:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2d76:	66 e0       	ldi	r22, 0x06	; 6
    2d78:	ce 01       	movw	r24, r28
    2d7a:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    2d7e:	ce 01       	movw	r24, r28
  
}
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2d84:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <_ZN17LiquidCrystal_I2C4homeEv>

00002d88 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	ec 01       	movw	r28, r24
	Wire.begin();
    2d8e:	83 ee       	ldi	r24, 0xE3	; 227
    2d90:	92 e0       	ldi	r25, 0x02	; 2
    2d92:	0e 94 02 1b 	call	0x3604	; 0x3604 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2d96:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	4a 85       	ldd	r20, Y+10	; 0x0a
    2d9c:	69 85       	ldd	r22, Y+9	; 0x09
    2d9e:	ce 01       	movw	r24, r28
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2da4:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <_ZN17LiquidCrystal_I2C5beginEhhh>

00002da8 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2da8:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <_ZN17LiquidCrystal_I2C9init_privEv>

00002dac <_ZN9OneButtonC1Eiib>:

void OneButton::reset(void){
  _state = 0; // restart.
  _startTime = 0;
  _stopTime = 0;
  _isLongPressed = false;
    2dac:	fc 01       	movw	r30, r24
    2dae:	86 2f       	mov	r24, r22
    2db0:	a2 e3       	ldi	r26, 0x32	; 50
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	b3 83       	std	Z+3, r27	; 0x03
    2db6:	a2 83       	std	Z+2, r26	; 0x02
    2db8:	a8 e5       	ldi	r26, 0x58	; 88
    2dba:	b2 e0       	ldi	r27, 0x02	; 2
    2dbc:	b5 83       	std	Z+5, r27	; 0x05
    2dbe:	a4 83       	std	Z+4, r26	; 0x04
    2dc0:	a8 ee       	ldi	r26, 0xE8	; 232
    2dc2:	b3 e0       	ldi	r27, 0x03	; 3
    2dc4:	b7 83       	std	Z+7, r27	; 0x07
    2dc6:	a6 83       	std	Z+6, r26	; 0x06
    2dc8:	12 86       	std	Z+10, r1	; 0x0a
    2dca:	14 86       	std	Z+12, r1	; 0x0c
    2dcc:	13 86       	std	Z+11, r1	; 0x0b
    2dce:	16 86       	std	Z+14, r1	; 0x0e
    2dd0:	15 86       	std	Z+13, r1	; 0x0d
    2dd2:	10 8a       	std	Z+16, r1	; 0x10
    2dd4:	17 86       	std	Z+15, r1	; 0x0f
    2dd6:	12 8a       	std	Z+18, r1	; 0x12
    2dd8:	11 8a       	std	Z+17, r1	; 0x11
    2dda:	14 8a       	std	Z+20, r1	; 0x14
    2ddc:	13 8a       	std	Z+19, r1	; 0x13
    2dde:	16 8a       	std	Z+22, r1	; 0x16
    2de0:	15 8a       	std	Z+21, r1	; 0x15
    2de2:	10 8e       	std	Z+24, r1	; 0x18
    2de4:	17 8a       	std	Z+23, r1	; 0x17
    2de6:	60 83       	st	Z, r22
    2de8:	71 83       	std	Z+1, r23	; 0x01
    2dea:	45 2b       	or	r20, r21
    2dec:	19 f0       	breq	.+6      	; 0x2df4 <_ZN9OneButtonC1Eiib+0x48>
    2dee:	11 86       	std	Z+9, r1	; 0x09
    2df0:	10 86       	std	Z+8, r1	; 0x08
    2df2:	04 c0       	rjmp	.+8      	; 0x2dfc <_ZN9OneButtonC1Eiib+0x50>
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	50 e0       	ldi	r21, 0x00	; 0
    2df8:	51 87       	std	Z+9, r21	; 0x09
    2dfa:	40 87       	std	Z+8, r20	; 0x08
    2dfc:	22 23       	and	r18, r18
    2dfe:	11 f0       	breq	.+4      	; 0x2e04 <_ZN9OneButtonC1Eiib+0x58>
    2e00:	62 e0       	ldi	r22, 0x02	; 2
    2e02:	01 c0       	rjmp	.+2      	; 0x2e06 <_ZN9OneButtonC1Eiib+0x5a>
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	0c 94 28 23 	jmp	0x4650	; 0x4650 <pinMode>

00002e0a <_ZN9OneButton16setDebounceTicksEi>:
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	73 83       	std	Z+3, r23	; 0x03
    2e0e:	62 83       	std	Z+2, r22	; 0x02
    2e10:	08 95       	ret

00002e12 <_ZN9OneButton13setClickTicksEi>:
    2e12:	fc 01       	movw	r30, r24
    2e14:	75 83       	std	Z+5, r23	; 0x05
    2e16:	64 83       	std	Z+4, r22	; 0x04
    2e18:	08 95       	ret

00002e1a <_ZN9OneButton13setPressTicksEi>:
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	77 83       	std	Z+7, r23	; 0x07
    2e1e:	66 83       	std	Z+6, r22	; 0x06
    2e20:	08 95       	ret

00002e22 <_ZN9OneButton11attachClickEPFvvE>:
    2e22:	fc 01       	movw	r30, r24
    2e24:	74 87       	std	Z+12, r23	; 0x0c
    2e26:	63 87       	std	Z+11, r22	; 0x0b
    2e28:	08 95       	ret

00002e2a <_ZN9OneButton20attachLongPressStartEPFvvE>:
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	72 8b       	std	Z+18, r23	; 0x12
    2e2e:	61 8b       	std	Z+17, r22	; 0x11
    2e30:	08 95       	ret

00002e32 <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
    2e32:	cf 92       	push	r12
    2e34:	df 92       	push	r13
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	1f 93       	push	r17
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	ec 01       	movw	r28, r24
    2e42:	16 2f       	mov	r17, r22
  unsigned long now = millis(); // current (relative) time in msecs.
    2e44:	0e 94 4c 22 	call	0x4498	; 0x4498 <millis>
    2e48:	6b 01       	movw	r12, r22
    2e4a:	7c 01       	movw	r14, r24

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
    2e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	31 f4       	brne	.+12     	; 0x2e60 <_ZN9OneButton4tickEb+0x2e>
    if (activeLevel) {
    2e54:	11 23       	and	r17, r17
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <_ZN9OneButton4tickEb+0x28>
    2e58:	bc c0       	rjmp	.+376    	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
      _state = 1; // step to state 1
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	78 c0       	rjmp	.+240    	; 0x2f50 <_ZN9OneButton4tickEb+0x11e>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    2e60:	81 30       	cpi	r24, 0x01	; 1
    2e62:	91 05       	cpc	r25, r1
    2e64:	d9 f5       	brne	.+118    	; 0x2edc <_ZN9OneButton4tickEb+0xaa>
    2e66:	89 8d       	ldd	r24, Y+25	; 0x19
    2e68:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e6a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2e6c:	bc 8d       	ldd	r27, Y+28	; 0x1c

    if ((!activeLevel) &&
    2e6e:	b7 01       	movw	r22, r14
    2e70:	a6 01       	movw	r20, r12
    2e72:	48 1b       	sub	r20, r24
    2e74:	59 0b       	sbc	r21, r25
    2e76:	6a 0b       	sbc	r22, r26
    2e78:	7b 0b       	sbc	r23, r27
    2e7a:	11 11       	cpse	r17, r1
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <_ZN9OneButton4tickEb+0x6a>
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	a0 e0       	ldi	r26, 0x00	; 0
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	48 17       	cp	r20, r24
    2e88:	59 07       	cpc	r21, r25
    2e8a:	6a 07       	cpc	r22, r26
    2e8c:	7b 07       	cpc	r23, r27
    2e8e:	18 f4       	brcc	.+6      	; 0x2e96 <_ZN9OneButton4tickEb+0x64>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
    2e90:	18 8e       	std	Y+24, r1	; 0x18
    2e92:	1f 8a       	std	Y+23, r1	; 0x17
    2e94:	9e c0       	rjmp	.+316    	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
    2e96:	82 e0       	ldi	r24, 0x02	; 2
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	1d c0       	rjmp	.+58     	; 0x2ed6 <_ZN9OneButton4tickEb+0xa4>
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
    2e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea0:	a0 e0       	ldi	r26, 0x00	; 0
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	84 17       	cp	r24, r20
    2ea6:	95 07       	cpc	r25, r21
    2ea8:	a6 07       	cpc	r26, r22
    2eaa:	b7 07       	cpc	r27, r23
    2eac:	08 f0       	brcs	.+2      	; 0x2eb0 <_ZN9OneButton4tickEb+0x7e>
    2eae:	91 c0       	rjmp	.+290    	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true; // Keep track of long press state
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	8a 87       	std	Y+10, r24	; 0x0a
      if (_pressFunc)
    2eb4:	ef 85       	ldd	r30, Y+15	; 0x0f
    2eb6:	f8 89       	ldd	r31, Y+16	; 0x10
    2eb8:	30 97       	sbiw	r30, 0x00	; 0
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <_ZN9OneButton4tickEb+0x8c>
        _pressFunc();
    2ebc:	09 95       	icall
      if (_longPressStartFunc)
    2ebe:	e9 89       	ldd	r30, Y+17	; 0x11
    2ec0:	fa 89       	ldd	r31, Y+18	; 0x12
    2ec2:	30 97       	sbiw	r30, 0x00	; 0
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <_ZN9OneButton4tickEb+0x96>
        _longPressStartFunc();
    2ec6:	09 95       	icall
      if (_duringLongPressFunc)
    2ec8:	ed 89       	ldd	r30, Y+21	; 0x15
    2eca:	fe 89       	ldd	r31, Y+22	; 0x16
    2ecc:	30 97       	sbiw	r30, 0x00	; 0
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <_ZN9OneButton4tickEb+0xa0>
        _duringLongPressFunc();
    2ed0:	09 95       	icall
      _state = 6; // step to state 6
    2ed2:	86 e0       	ldi	r24, 0x06	; 6
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	98 8f       	std	Y+24, r25	; 0x18
    2ed8:	8f 8b       	std	Y+23, r24	; 0x17
    2eda:	68 c0       	rjmp	.+208    	; 0x2fac <_ZN9OneButton4tickEb+0x17a>
      _stopTime = now; // remember stopping time
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) {
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	91 05       	cpc	r25, r1
    2ee0:	f1 f5       	brne	.+124    	; 0x2f5e <_ZN9OneButton4tickEb+0x12c>
    // waiting for menu pin being pressed the second time or timeout.
    if (_doubleClickFunc == NULL ||
    2ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee6:	89 2b       	or	r24, r25
    2ee8:	99 f0       	breq	.+38     	; 0x2f10 <_ZN9OneButton4tickEb+0xde>
    2eea:	89 8d       	ldd	r24, Y+25	; 0x19
    2eec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2eee:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2ef0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2ef2:	b7 01       	movw	r22, r14
    2ef4:	a6 01       	movw	r20, r12
    2ef6:	48 1b       	sub	r20, r24
    2ef8:	59 0b       	sbc	r21, r25
    2efa:	6a 0b       	sbc	r22, r26
    2efc:	7b 0b       	sbc	r23, r27
    2efe:	8c 81       	ldd	r24, Y+4	; 0x04
    2f00:	9d 81       	ldd	r25, Y+5	; 0x05
    2f02:	a0 e0       	ldi	r26, 0x00	; 0
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	84 17       	cp	r24, r20
    2f08:	95 07       	cpc	r25, r21
    2f0a:	a6 07       	cpc	r26, r22
    2f0c:	b7 07       	cpc	r27, r23
    2f0e:	38 f4       	brcc	.+14     	; 0x2f1e <_ZN9OneButton4tickEb+0xec>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
    2f10:	eb 85       	ldd	r30, Y+11	; 0x0b
    2f12:	fc 85       	ldd	r31, Y+12	; 0x0c
    2f14:	30 97       	sbiw	r30, 0x00	; 0
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <_ZN9OneButton4tickEb+0xe8>
    2f18:	bb cf       	rjmp	.-138    	; 0x2e90 <_ZN9OneButton4tickEb+0x5e>
        _clickFunc();
    2f1a:	09 95       	icall
    2f1c:	b9 cf       	rjmp	.-142    	; 0x2e90 <_ZN9OneButton4tickEb+0x5e>
      _state = 0; // restart.

    } else if ((activeLevel) &&
    2f1e:	11 23       	and	r17, r17
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <_ZN9OneButton4tickEb+0xf2>
    2f22:	57 c0       	rjmp	.+174    	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
    2f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f28:	af 8d       	ldd	r26, Y+31	; 0x1f
    2f2a:	b8 a1       	ldd	r27, Y+32	; 0x20
    2f2c:	b7 01       	movw	r22, r14
    2f2e:	a6 01       	movw	r20, r12
    2f30:	48 1b       	sub	r20, r24
    2f32:	59 0b       	sbc	r21, r25
    2f34:	6a 0b       	sbc	r22, r26
    2f36:	7b 0b       	sbc	r23, r27
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3c:	a0 e0       	ldi	r26, 0x00	; 0
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	84 17       	cp	r24, r20
    2f42:	95 07       	cpc	r25, r21
    2f44:	a6 07       	cpc	r26, r22
    2f46:	b7 07       	cpc	r27, r23
    2f48:	08 f0       	brcs	.+2      	; 0x2f4c <_ZN9OneButton4tickEb+0x11a>
    2f4a:	43 c0       	rjmp	.+134    	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
    2f4c:	83 e0       	ldi	r24, 0x03	; 3
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	98 8f       	std	Y+24, r25	; 0x18
    2f52:	8f 8b       	std	Y+23, r24	; 0x17
      _startTime = now; // remember starting time
    2f54:	c9 8e       	std	Y+25, r12	; 0x19
    2f56:	da 8e       	std	Y+26, r13	; 0x1a
    2f58:	eb 8e       	std	Y+27, r14	; 0x1b
    2f5a:	fc 8e       	std	Y+28, r15	; 0x1c
    2f5c:	3a c0       	rjmp	.+116    	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    2f5e:	83 30       	cpi	r24, 0x03	; 3
    2f60:	91 05       	cpc	r25, r1
    2f62:	c1 f4       	brne	.+48     	; 0x2f94 <_ZN9OneButton4tickEb+0x162>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
    2f64:	11 11       	cpse	r17, r1
    2f66:	35 c0       	rjmp	.+106    	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
    2f68:	89 8d       	ldd	r24, Y+25	; 0x19
    2f6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f6c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2f6e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2f70:	b7 01       	movw	r22, r14
    2f72:	a6 01       	movw	r20, r12
    2f74:	48 1b       	sub	r20, r24
    2f76:	59 0b       	sbc	r21, r25
    2f78:	6a 0b       	sbc	r22, r26
    2f7a:	7b 0b       	sbc	r23, r27
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f80:	a0 e0       	ldi	r26, 0x00	; 0
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	84 17       	cp	r24, r20
    2f86:	95 07       	cpc	r25, r21
    2f88:	a6 07       	cpc	r26, r22
    2f8a:	b7 07       	cpc	r27, r23
    2f8c:	10 f5       	brcc	.+68     	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      // this was a 2 click sequence.
      if (_doubleClickFunc)
    2f8e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f90:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f92:	07 c0       	rjmp	.+14     	; 0x2fa2 <_ZN9OneButton4tickEb+0x170>
        _doubleClickFunc();
      _state = 0; // restart.
      _stopTime = now; // remember stopping time
    } // if

  } else if (_state == 6) {
    2f94:	06 97       	sbiw	r24, 0x06	; 6
    2f96:	e9 f4       	brne	.+58     	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
    2f98:	11 11       	cpse	r17, r1
    2f9a:	0d c0       	rjmp	.+26     	; 0x2fb6 <_ZN9OneButton4tickEb+0x184>
      _isLongPressed = false; // Keep track of long press state
    2f9c:	1a 86       	std	Y+10, r1	; 0x0a
      if (_longPressStopFunc)
    2f9e:	eb 89       	ldd	r30, Y+19	; 0x13
    2fa0:	fc 89       	ldd	r31, Y+20	; 0x14
    2fa2:	30 97       	sbiw	r30, 0x00	; 0
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <_ZN9OneButton4tickEb+0x176>
        _longPressStopFunc();
    2fa6:	09 95       	icall
      _state = 0; // restart.
    2fa8:	18 8e       	std	Y+24, r1	; 0x18
    2faa:	1f 8a       	std	Y+23, r1	; 0x17
      _stopTime = now; // remember stopping time
    2fac:	cd 8e       	std	Y+29, r12	; 0x1d
    2fae:	de 8e       	std	Y+30, r13	; 0x1e
    2fb0:	ef 8e       	std	Y+31, r14	; 0x1f
    2fb2:	f8 a2       	std	Y+32, r15	; 0x20
    2fb4:	0e c0       	rjmp	.+28     	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	8a 87       	std	Y+10, r24	; 0x0a
      if (_duringLongPressFunc)
    2fba:	ed 89       	ldd	r30, Y+21	; 0x15
    2fbc:	fe 89       	ldd	r31, Y+22	; 0x16
    2fbe:	30 97       	sbiw	r30, 0x00	; 0
    2fc0:	41 f0       	breq	.+16     	; 0x2fd2 <_ZN9OneButton4tickEb+0x1a0>
        _duringLongPressFunc();
    } // if

  } // if
} // OneButton.tick()
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	1f 91       	pop	r17
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	df 90       	pop	r13
    2fce:	cf 90       	pop	r12
      _stopTime = now; // remember stopping time
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
    2fd0:	09 94       	ijmp
    } // if

  } // if
} // OneButton.tick()
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	1f 91       	pop	r17
    2fd8:	ff 90       	pop	r15
    2fda:	ef 90       	pop	r14
    2fdc:	df 90       	pop	r13
    2fde:	cf 90       	pop	r12
    2fe0:	08 95       	ret

00002fe2 <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    2fe6:	ec 01       	movw	r28, r24
  if (_pin >= 0) {
    2fe8:	88 81       	ld	r24, Y
    2fea:	99 81       	ldd	r25, Y+1	; 0x01
    2fec:	97 fd       	sbrc	r25, 7
    2fee:	0e c0       	rjmp	.+28     	; 0x300c <_ZN9OneButton4tickEv+0x2a>
    tick(digitalRead(_pin) == _buttonPressed);
    2ff0:	0e 94 93 23 	call	0x4726	; 0x4726 <digitalRead>
    2ff4:	61 e0       	ldi	r22, 0x01	; 1
    2ff6:	28 85       	ldd	r18, Y+8	; 0x08
    2ff8:	39 85       	ldd	r19, Y+9	; 0x09
    2ffa:	28 17       	cp	r18, r24
    2ffc:	39 07       	cpc	r19, r25
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <_ZN9OneButton4tickEv+0x20>
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	ce 01       	movw	r24, r28
  }
}
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
    3008:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <_ZN9OneButton4tickEb>
  }
}
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	08 95       	ret

00003012 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3012:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_state>
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi_sendStop>
    301c:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <twi_inRepStart>
    3020:	61 e0       	ldi	r22, 0x01	; 1
    3022:	82 e1       	ldi	r24, 0x12	; 18
    3024:	0e 94 64 23 	call	0x46c8	; 0x46c8 <digitalWrite>
    3028:	61 e0       	ldi	r22, 0x01	; 1
    302a:	83 e1       	ldi	r24, 0x13	; 19
    302c:	0e 94 64 23 	call	0x46c8	; 0x46c8 <digitalWrite>
    3030:	e9 eb       	ldi	r30, 0xB9	; 185
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	8e 7f       	andi	r24, 0xFE	; 254
    3038:	80 83       	st	Z, r24
    303a:	80 81       	ld	r24, Z
    303c:	8d 7f       	andi	r24, 0xFD	; 253
    303e:	80 83       	st	Z, r24
    3040:	88 e4       	ldi	r24, 0x48	; 72
    3042:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3046:	85 e4       	ldi	r24, 0x45	; 69
    3048:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    304c:	08 95       	ret

0000304e <twi_readFrom>:
    304e:	41 32       	cpi	r20, 0x21	; 33
    3050:	08 f0       	brcs	.+2      	; 0x3054 <twi_readFrom+0x6>
    3052:	43 c0       	rjmp	.+134    	; 0x30da <twi_readFrom+0x8c>
    3054:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <twi_state>
    3058:	91 11       	cpse	r25, r1
    305a:	fc cf       	rjmp	.-8      	; 0x3054 <twi_readFrom+0x6>
    305c:	91 e0       	ldi	r25, 0x01	; 1
    305e:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi_state>
    3062:	20 93 e0 02 	sts	0x02E0, r18	; 0x8002e0 <twi_sendStop>
    3066:	2f ef       	ldi	r18, 0xFF	; 255
    3068:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <twi_error>
    306c:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <twi_masterBufferIndex>
    3070:	24 0f       	add	r18, r20
    3072:	20 93 b9 02 	sts	0x02B9, r18	; 0x8002b9 <twi_masterBufferLength>
    3076:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <twi_slarw>
    307a:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <twi_slarw>
    307e:	88 0f       	add	r24, r24
    3080:	89 2b       	or	r24, r25
    3082:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi_slarw>
    3086:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <twi_inRepStart>
    308a:	81 30       	cpi	r24, 0x01	; 1
    308c:	61 f4       	brne	.+24     	; 0x30a6 <twi_readFrom+0x58>
    308e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <twi_inRepStart>
    3092:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_slarw>
    3096:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    309a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    309e:	83 fd       	sbrc	r24, 3
    30a0:	f8 cf       	rjmp	.-16     	; 0x3092 <twi_readFrom+0x44>
    30a2:	85 ec       	ldi	r24, 0xC5	; 197
    30a4:	01 c0       	rjmp	.+2      	; 0x30a8 <twi_readFrom+0x5a>
    30a6:	85 ee       	ldi	r24, 0xE5	; 229
    30a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    30ac:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_state>
    30b0:	81 30       	cpi	r24, 0x01	; 1
    30b2:	e1 f3       	breq	.-8      	; 0x30ac <twi_readFrom+0x5e>
    30b4:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <twi_masterBufferIndex>
    30b8:	84 17       	cp	r24, r20
    30ba:	10 f4       	brcc	.+4      	; 0x30c0 <twi_readFrom+0x72>
    30bc:	40 91 ba 02 	lds	r20, 0x02BA	; 0x8002ba <twi_masterBufferIndex>
    30c0:	ab eb       	ldi	r26, 0xBB	; 187
    30c2:	b2 e0       	ldi	r27, 0x02	; 2
    30c4:	96 2f       	mov	r25, r22
    30c6:	fb 01       	movw	r30, r22
    30c8:	8e 2f       	mov	r24, r30
    30ca:	89 1b       	sub	r24, r25
    30cc:	84 17       	cp	r24, r20
    30ce:	18 f4       	brcc	.+6      	; 0x30d6 <twi_readFrom+0x88>
    30d0:	8d 91       	ld	r24, X+
    30d2:	81 93       	st	Z+, r24
    30d4:	f9 cf       	rjmp	.-14     	; 0x30c8 <twi_readFrom+0x7a>
    30d6:	84 2f       	mov	r24, r20
    30d8:	08 95       	ret
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	08 95       	ret

000030de <twi_writeTo>:
    30de:	0f 93       	push	r16
    30e0:	41 32       	cpi	r20, 0x21	; 33
    30e2:	08 f0       	brcs	.+2      	; 0x30e6 <twi_writeTo+0x8>
    30e4:	4a c0       	rjmp	.+148    	; 0x317a <twi_writeTo+0x9c>
    30e6:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <twi_state>
    30ea:	91 11       	cpse	r25, r1
    30ec:	fc cf       	rjmp	.-8      	; 0x30e6 <twi_writeTo+0x8>
    30ee:	32 e0       	ldi	r19, 0x02	; 2
    30f0:	30 93 e2 02 	sts	0x02E2, r19	; 0x8002e2 <twi_state>
    30f4:	00 93 e0 02 	sts	0x02E0, r16	; 0x8002e0 <twi_sendStop>
    30f8:	3f ef       	ldi	r19, 0xFF	; 255
    30fa:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <twi_error>
    30fe:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <twi_masterBufferIndex>
    3102:	40 93 b9 02 	sts	0x02B9, r20	; 0x8002b9 <twi_masterBufferLength>
    3106:	56 2f       	mov	r21, r22
    3108:	ab eb       	ldi	r26, 0xBB	; 187
    310a:	b2 e0       	ldi	r27, 0x02	; 2
    310c:	fb 01       	movw	r30, r22
    310e:	3e 2f       	mov	r19, r30
    3110:	35 1b       	sub	r19, r21
    3112:	34 17       	cp	r19, r20
    3114:	18 f4       	brcc	.+6      	; 0x311c <twi_writeTo+0x3e>
    3116:	31 91       	ld	r19, Z+
    3118:	3d 93       	st	X+, r19
    311a:	f9 cf       	rjmp	.-14     	; 0x310e <twi_writeTo+0x30>
    311c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi_slarw>
    3120:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <twi_slarw>
    3124:	88 0f       	add	r24, r24
    3126:	83 2b       	or	r24, r19
    3128:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi_slarw>
    312c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <twi_inRepStart>
    3130:	81 30       	cpi	r24, 0x01	; 1
    3132:	61 f4       	brne	.+24     	; 0x314c <twi_writeTo+0x6e>
    3134:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <twi_inRepStart>
    3138:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_slarw>
    313c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3140:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3144:	83 fd       	sbrc	r24, 3
    3146:	f8 cf       	rjmp	.-16     	; 0x3138 <twi_writeTo+0x5a>
    3148:	85 ec       	ldi	r24, 0xC5	; 197
    314a:	01 c0       	rjmp	.+2      	; 0x314e <twi_writeTo+0x70>
    314c:	85 ee       	ldi	r24, 0xE5	; 229
    314e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3152:	22 23       	and	r18, r18
    3154:	21 f0       	breq	.+8      	; 0x315e <twi_writeTo+0x80>
    3156:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_state>
    315a:	82 30       	cpi	r24, 0x02	; 2
    315c:	d1 f3       	breq	.-12     	; 0x3152 <twi_writeTo+0x74>
    315e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <twi_error>
    3162:	8f 3f       	cpi	r24, 0xFF	; 255
    3164:	79 f0       	breq	.+30     	; 0x3184 <twi_writeTo+0xa6>
    3166:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <twi_error>
    316a:	80 32       	cpi	r24, 0x20	; 32
    316c:	41 f0       	breq	.+16     	; 0x317e <twi_writeTo+0xa0>
    316e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <twi_error>
    3172:	80 33       	cpi	r24, 0x30	; 48
    3174:	31 f0       	breq	.+12     	; 0x3182 <twi_writeTo+0xa4>
    3176:	94 e0       	ldi	r25, 0x04	; 4
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <twi_writeTo+0xa6>
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	03 c0       	rjmp	.+6      	; 0x3184 <twi_writeTo+0xa6>
    317e:	92 e0       	ldi	r25, 0x02	; 2
    3180:	01 c0       	rjmp	.+2      	; 0x3184 <twi_writeTo+0xa6>
    3182:	93 e0       	ldi	r25, 0x03	; 3
    3184:	89 2f       	mov	r24, r25
    3186:	0f 91       	pop	r16
    3188:	08 95       	ret

0000318a <twi_transmit>:
    318a:	40 91 97 02 	lds	r20, 0x0297	; 0x800297 <twi_txBufferLength>
    318e:	26 2f       	mov	r18, r22
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	24 0f       	add	r18, r20
    3194:	31 1d       	adc	r19, r1
    3196:	21 32       	cpi	r18, 0x21	; 33
    3198:	31 05       	cpc	r19, r1
    319a:	dc f4       	brge	.+54     	; 0x31d2 <twi_transmit+0x48>
    319c:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <twi_state>
    31a0:	24 30       	cpi	r18, 0x04	; 4
    31a2:	c9 f4       	brne	.+50     	; 0x31d6 <twi_transmit+0x4c>
    31a4:	fc 01       	movw	r30, r24
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	86 17       	cp	r24, r22
    31ac:	58 f4       	brcc	.+22     	; 0x31c4 <twi_transmit+0x3a>
    31ae:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <twi_txBufferLength>
    31b2:	21 91       	ld	r18, Z+
    31b4:	dc 01       	movw	r26, r24
    31b6:	a7 56       	subi	r26, 0x67	; 103
    31b8:	bd 4f       	sbci	r27, 0xFD	; 253
    31ba:	a3 0f       	add	r26, r19
    31bc:	b1 1d       	adc	r27, r1
    31be:	2c 93       	st	X, r18
    31c0:	01 96       	adiw	r24, 0x01	; 1
    31c2:	f3 cf       	rjmp	.-26     	; 0x31aa <twi_transmit+0x20>
    31c4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <twi_txBufferLength>
    31c8:	68 0f       	add	r22, r24
    31ca:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <twi_txBufferLength>
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	08 95       	ret
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	08 95       	ret
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	08 95       	ret

000031da <twi_attachSlaveRxEvent>:
    31da:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <twi_onSlaveReceive+0x1>
    31de:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <twi_onSlaveReceive>
    31e2:	08 95       	ret

000031e4 <twi_attachSlaveTxEvent>:
    31e4:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <twi_onSlaveTransmit+0x1>
    31e8:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <twi_onSlaveTransmit>
    31ec:	08 95       	ret

000031ee <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    31ee:	85 ed       	ldi	r24, 0xD5	; 213
    31f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    31f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    31f8:	84 fd       	sbrc	r24, 4
    31fa:	fc cf       	rjmp	.-8      	; 0x31f4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    31fc:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_state>
    3200:	08 95       	ret

00003202 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3202:	85 ec       	ldi	r24, 0xC5	; 197
    3204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3208:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_state>
    320c:	08 95       	ret

0000320e <__vector_24>:
}

ISR(TWI_vect)
{
    320e:	1f 92       	push	r1
    3210:	0f 92       	push	r0
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	0f 92       	push	r0
    3216:	11 24       	eor	r1, r1
    3218:	2f 93       	push	r18
    321a:	3f 93       	push	r19
    321c:	4f 93       	push	r20
    321e:	5f 93       	push	r21
    3220:	6f 93       	push	r22
    3222:	7f 93       	push	r23
    3224:	8f 93       	push	r24
    3226:	9f 93       	push	r25
    3228:	af 93       	push	r26
    322a:	bf 93       	push	r27
    322c:	ef 93       	push	r30
    322e:	ff 93       	push	r31
  switch(TW_STATUS){
    3230:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3234:	88 7f       	andi	r24, 0xF8	; 248
    3236:	80 36       	cpi	r24, 0x60	; 96
    3238:	09 f4       	brne	.+2      	; 0x323c <__vector_24+0x2e>
    323a:	9e c0       	rjmp	.+316    	; 0x3378 <__vector_24+0x16a>
    323c:	78 f5       	brcc	.+94     	; 0x329c <__vector_24+0x8e>
    323e:	88 32       	cpi	r24, 0x28	; 40
    3240:	09 f4       	brne	.+2      	; 0x3244 <__vector_24+0x36>
    3242:	5d c0       	rjmp	.+186    	; 0x32fe <__vector_24+0xf0>
    3244:	90 f4       	brcc	.+36     	; 0x326a <__vector_24+0x5c>
    3246:	80 31       	cpi	r24, 0x10	; 16
    3248:	09 f4       	brne	.+2      	; 0x324c <__vector_24+0x3e>
    324a:	56 c0       	rjmp	.+172    	; 0x32f8 <__vector_24+0xea>
    324c:	38 f4       	brcc	.+14     	; 0x325c <__vector_24+0x4e>
    324e:	88 23       	and	r24, r24
    3250:	09 f4       	brne	.+2      	; 0x3254 <__vector_24+0x46>
    3252:	f5 c0       	rjmp	.+490    	; 0x343e <__vector_24+0x230>
    3254:	88 30       	cpi	r24, 0x08	; 8
    3256:	09 f4       	brne	.+2      	; 0x325a <__vector_24+0x4c>
    3258:	4f c0       	rjmp	.+158    	; 0x32f8 <__vector_24+0xea>
    325a:	f5 c0       	rjmp	.+490    	; 0x3446 <__vector_24+0x238>
    325c:	88 31       	cpi	r24, 0x18	; 24
    325e:	09 f4       	brne	.+2      	; 0x3262 <__vector_24+0x54>
    3260:	4e c0       	rjmp	.+156    	; 0x32fe <__vector_24+0xf0>
    3262:	80 32       	cpi	r24, 0x20	; 32
    3264:	09 f4       	brne	.+2      	; 0x3268 <__vector_24+0x5a>
    3266:	5f c0       	rjmp	.+190    	; 0x3326 <__vector_24+0x118>
    3268:	ee c0       	rjmp	.+476    	; 0x3446 <__vector_24+0x238>
    326a:	80 34       	cpi	r24, 0x40	; 64
    326c:	09 f4       	brne	.+2      	; 0x3270 <__vector_24+0x62>
    326e:	6a c0       	rjmp	.+212    	; 0x3344 <__vector_24+0x136>
    3270:	58 f4       	brcc	.+22     	; 0x3288 <__vector_24+0x7a>
    3272:	80 33       	cpi	r24, 0x30	; 48
    3274:	09 f4       	brne	.+2      	; 0x3278 <__vector_24+0x6a>
    3276:	57 c0       	rjmp	.+174    	; 0x3326 <__vector_24+0x118>
    3278:	88 33       	cpi	r24, 0x38	; 56
    327a:	09 f0       	breq	.+2      	; 0x327e <__vector_24+0x70>
    327c:	e4 c0       	rjmp	.+456    	; 0x3446 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    327e:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <twi_error>
      twi_releaseBus();
    3282:	0e 94 01 19 	call	0x3202	; 0x3202 <twi_releaseBus>
      break;
    3286:	df c0       	rjmp	.+446    	; 0x3446 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3288:	80 35       	cpi	r24, 0x50	; 80
    328a:	09 f4       	brne	.+2      	; 0x328e <__vector_24+0x80>
    328c:	4f c0       	rjmp	.+158    	; 0x332c <__vector_24+0x11e>
    328e:	88 35       	cpi	r24, 0x58	; 88
    3290:	09 f4       	brne	.+2      	; 0x3294 <__vector_24+0x86>
    3292:	5d c0       	rjmp	.+186    	; 0x334e <__vector_24+0x140>
    3294:	88 34       	cpi	r24, 0x48	; 72
    3296:	09 f0       	breq	.+2      	; 0x329a <__vector_24+0x8c>
    3298:	d6 c0       	rjmp	.+428    	; 0x3446 <__vector_24+0x238>
    329a:	d3 c0       	rjmp	.+422    	; 0x3442 <__vector_24+0x234>
    329c:	88 39       	cpi	r24, 0x98	; 152
    329e:	09 f4       	brne	.+2      	; 0x32a2 <__vector_24+0x94>
    32a0:	c4 c0       	rjmp	.+392    	; 0x342a <__vector_24+0x21c>
    32a2:	a8 f4       	brcc	.+42     	; 0x32ce <__vector_24+0xc0>
    32a4:	88 37       	cpi	r24, 0x78	; 120
    32a6:	09 f4       	brne	.+2      	; 0x32aa <__vector_24+0x9c>
    32a8:	67 c0       	rjmp	.+206    	; 0x3378 <__vector_24+0x16a>
    32aa:	38 f4       	brcc	.+14     	; 0x32ba <__vector_24+0xac>
    32ac:	88 36       	cpi	r24, 0x68	; 104
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <__vector_24+0xa4>
    32b0:	63 c0       	rjmp	.+198    	; 0x3378 <__vector_24+0x16a>
    32b2:	80 37       	cpi	r24, 0x70	; 112
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <__vector_24+0xaa>
    32b6:	60 c0       	rjmp	.+192    	; 0x3378 <__vector_24+0x16a>
    32b8:	c6 c0       	rjmp	.+396    	; 0x3446 <__vector_24+0x238>
    32ba:	88 38       	cpi	r24, 0x88	; 136
    32bc:	09 f4       	brne	.+2      	; 0x32c0 <__vector_24+0xb2>
    32be:	b5 c0       	rjmp	.+362    	; 0x342a <__vector_24+0x21c>
    32c0:	80 39       	cpi	r24, 0x90	; 144
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <__vector_24+0xb8>
    32c4:	5f c0       	rjmp	.+190    	; 0x3384 <__vector_24+0x176>
    32c6:	80 38       	cpi	r24, 0x80	; 128
    32c8:	09 f0       	breq	.+2      	; 0x32cc <__vector_24+0xbe>
    32ca:	bd c0       	rjmp	.+378    	; 0x3446 <__vector_24+0x238>
    32cc:	5b c0       	rjmp	.+182    	; 0x3384 <__vector_24+0x176>
    32ce:	80 3b       	cpi	r24, 0xB0	; 176
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <__vector_24+0xc6>
    32d2:	83 c0       	rjmp	.+262    	; 0x33da <__vector_24+0x1cc>
    32d4:	38 f4       	brcc	.+14     	; 0x32e4 <__vector_24+0xd6>
    32d6:	80 3a       	cpi	r24, 0xA0	; 160
    32d8:	09 f4       	brne	.+2      	; 0x32dc <__vector_24+0xce>
    32da:	66 c0       	rjmp	.+204    	; 0x33a8 <__vector_24+0x19a>
    32dc:	88 3a       	cpi	r24, 0xA8	; 168
    32de:	09 f4       	brne	.+2      	; 0x32e2 <__vector_24+0xd4>
    32e0:	7c c0       	rjmp	.+248    	; 0x33da <__vector_24+0x1cc>
    32e2:	b1 c0       	rjmp	.+354    	; 0x3446 <__vector_24+0x238>
    32e4:	80 3c       	cpi	r24, 0xC0	; 192
    32e6:	09 f4       	brne	.+2      	; 0x32ea <__vector_24+0xdc>
    32e8:	a4 c0       	rjmp	.+328    	; 0x3432 <__vector_24+0x224>
    32ea:	88 3c       	cpi	r24, 0xC8	; 200
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <__vector_24+0xe2>
    32ee:	a1 c0       	rjmp	.+322    	; 0x3432 <__vector_24+0x224>
    32f0:	88 3b       	cpi	r24, 0xB8	; 184
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <__vector_24+0xe8>
    32f4:	87 c0       	rjmp	.+270    	; 0x3404 <__vector_24+0x1f6>
    32f6:	a7 c0       	rjmp	.+334    	; 0x3446 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    32f8:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_slarw>
    32fc:	10 c0       	rjmp	.+32     	; 0x331e <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    32fe:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <twi_masterBufferIndex>
    3302:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <twi_masterBufferLength>
    3306:	98 17       	cp	r25, r24
    3308:	70 f5       	brcc	.+92     	; 0x3366 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    330a:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <twi_masterBufferIndex>
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	8e 0f       	add	r24, r30
    3312:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <twi_masterBufferIndex>
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	e5 54       	subi	r30, 0x45	; 69
    331a:	fd 4f       	sbci	r31, 0xFD	; 253
    331c:	80 81       	ld	r24, Z
    331e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3322:	85 ec       	ldi	r24, 0xC5	; 197
    3324:	83 c0       	rjmp	.+262    	; 0x342c <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3326:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <twi_error>
    332a:	8b c0       	rjmp	.+278    	; 0x3442 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    332c:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <twi_masterBufferIndex>
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	8e 0f       	add	r24, r30
    3334:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <twi_masterBufferIndex>
    3338:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	e5 54       	subi	r30, 0x45	; 69
    3340:	fd 4f       	sbci	r31, 0xFD	; 253
    3342:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3344:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <twi_masterBufferIndex>
    3348:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <twi_masterBufferLength>
    334c:	6b c0       	rjmp	.+214    	; 0x3424 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    334e:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <twi_masterBufferIndex>
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	8e 0f       	add	r24, r30
    3356:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <twi_masterBufferIndex>
    335a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	e5 54       	subi	r30, 0x45	; 69
    3362:	fd 4f       	sbci	r31, 0xFD	; 253
    3364:	80 83       	st	Z, r24
	if (twi_sendStop)
    3366:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <twi_sendStop>
    336a:	81 11       	cpse	r24, r1
    336c:	6a c0       	rjmp	.+212    	; 0x3442 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3374:	84 ea       	ldi	r24, 0xA4	; 164
    3376:	5e c0       	rjmp	.+188    	; 0x3434 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3378:	83 e0       	ldi	r24, 0x03	; 3
    337a:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    337e:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <twi_rxBufferIndex>
    3382:	cf cf       	rjmp	.-98     	; 0x3322 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3384:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <twi_rxBufferIndex>
    3388:	80 32       	cpi	r24, 0x20	; 32
    338a:	08 f0       	brcs	.+2      	; 0x338e <__vector_24+0x180>
    338c:	4e c0       	rjmp	.+156    	; 0x342a <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    338e:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <twi_rxBufferIndex>
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	8e 0f       	add	r24, r30
    3396:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <twi_rxBufferIndex>
    339a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	e9 58       	subi	r30, 0x89	; 137
    33a2:	fd 4f       	sbci	r31, 0xFD	; 253
    33a4:	80 83       	st	Z, r24
    33a6:	bd cf       	rjmp	.-134    	; 0x3322 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    33a8:	0e 94 01 19 	call	0x3202	; 0x3202 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    33ac:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <twi_rxBufferIndex>
    33b0:	80 32       	cpi	r24, 0x20	; 32
    33b2:	30 f4       	brcc	.+12     	; 0x33c0 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    33b4:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <twi_rxBufferIndex>
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	e9 58       	subi	r30, 0x89	; 137
    33bc:	fd 4f       	sbci	r31, 0xFD	; 253
    33be:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    33c0:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <twi_rxBufferIndex>
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <twi_onSlaveReceive>
    33ca:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <twi_onSlaveReceive+0x1>
    33ce:	87 e7       	ldi	r24, 0x77	; 119
    33d0:	92 e0       	ldi	r25, 0x02	; 2
    33d2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    33d4:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <twi_rxBufferIndex>
      break;
    33d8:	36 c0       	rjmp	.+108    	; 0x3446 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    33da:	84 e0       	ldi	r24, 0x04	; 4
    33dc:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    33e0:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    33e4:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    33e8:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <twi_onSlaveTransmit>
    33ec:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <twi_onSlaveTransmit+0x1>
    33f0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    33f2:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <twi_txBufferLength>
    33f6:	81 11       	cpse	r24, r1
    33f8:	05 c0       	rjmp	.+10     	; 0x3404 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3400:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3404:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <twi_txBufferIndex>
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	8e 0f       	add	r24, r30
    340c:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <twi_txBufferIndex>
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	e7 56       	subi	r30, 0x67	; 103
    3414:	fd 4f       	sbci	r31, 0xFD	; 253
    3416:	80 81       	ld	r24, Z
    3418:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    341c:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <twi_txBufferIndex>
    3420:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <twi_txBufferLength>
    3424:	98 17       	cp	r25, r24
    3426:	08 f4       	brcc	.+2      	; 0x342a <__vector_24+0x21c>
    3428:	7c cf       	rjmp	.-264    	; 0x3322 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    342a:	85 e8       	ldi	r24, 0x85	; 133
    342c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3430:	0a c0       	rjmp	.+20     	; 0x3446 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3432:	85 ec       	ldi	r24, 0xC5	; 197
    3434:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3438:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_state>
      break;
    343c:	04 c0       	rjmp	.+8      	; 0x3446 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    343e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <twi_error>
      twi_stop();
    3442:	0e 94 f7 18 	call	0x31ee	; 0x31ee <twi_stop>
      break;
  }
}
    3446:	ff 91       	pop	r31
    3448:	ef 91       	pop	r30
    344a:	bf 91       	pop	r27
    344c:	af 91       	pop	r26
    344e:	9f 91       	pop	r25
    3450:	8f 91       	pop	r24
    3452:	7f 91       	pop	r23
    3454:	6f 91       	pop	r22
    3456:	5f 91       	pop	r21
    3458:	4f 91       	pop	r20
    345a:	3f 91       	pop	r19
    345c:	2f 91       	pop	r18
    345e:	0f 90       	pop	r0
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	0f 90       	pop	r0
    3464:	1f 90       	pop	r1
    3466:	18 95       	reti

00003468 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3468:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZN7TwoWire14rxBufferLengthE>
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <_ZN7TwoWire13rxBufferIndexE>
    3472:	82 1b       	sub	r24, r18
    3474:	91 09       	sbc	r25, r1
    3476:	08 95       	ret

00003478 <_ZN7TwoWire4readEv>:
    3478:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_ZN7TwoWire13rxBufferIndexE>
    347c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZN7TwoWire14rxBufferLengthE>
    3480:	98 17       	cp	r25, r24
    3482:	50 f4       	brcc	.+20     	; 0x3498 <_ZN7TwoWire4readEv+0x20>
    3484:	e9 2f       	mov	r30, r25
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	e7 5e       	subi	r30, 0xE7	; 231
    348a:	fc 4f       	sbci	r31, 0xFC	; 252
    348c:	20 81       	ld	r18, Z
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	9f 5f       	subi	r25, 0xFF	; 255
    3492:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <_ZN7TwoWire13rxBufferIndexE>
    3496:	02 c0       	rjmp	.+4      	; 0x349c <_ZN7TwoWire4readEv+0x24>
    3498:	2f ef       	ldi	r18, 0xFF	; 255
    349a:	3f ef       	ldi	r19, 0xFF	; 255
    349c:	c9 01       	movw	r24, r18
    349e:	08 95       	ret

000034a0 <_ZN7TwoWire4peekEv>:
    34a0:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <_ZN7TwoWire13rxBufferIndexE>
    34a4:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZN7TwoWire14rxBufferLengthE>
    34a8:	e8 17       	cp	r30, r24
    34aa:	30 f4       	brcc	.+12     	; 0x34b8 <_ZN7TwoWire4peekEv+0x18>
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	e7 5e       	subi	r30, 0xE7	; 231
    34b0:	fc 4f       	sbci	r31, 0xFC	; 252
    34b2:	80 81       	ld	r24, Z
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	08 95       	ret
    34b8:	8f ef       	ldi	r24, 0xFF	; 255
    34ba:	9f ef       	ldi	r25, 0xFF	; 255
    34bc:	08 95       	ret

000034be <_ZN7TwoWire5flushEv>:
    34be:	08 95       	ret

000034c0 <_ZN7TwoWire16onReceiveServiceEPhi>:
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	ec 01       	movw	r28, r24
    34c6:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <_ZN7TwoWire14user_onReceiveE>
    34ca:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <_ZN7TwoWire14user_onReceiveE+0x1>
    34ce:	30 97       	sbiw	r30, 0x00	; 0
    34d0:	f1 f0       	breq	.+60     	; 0x350e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    34d2:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_ZN7TwoWire13rxBufferIndexE>
    34d6:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZN7TwoWire14rxBufferLengthE>
    34da:	98 17       	cp	r25, r24
    34dc:	c0 f0       	brcs	.+48     	; 0x350e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	29 2f       	mov	r18, r25
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	26 17       	cp	r18, r22
    34e6:	37 07       	cpc	r19, r23
    34e8:	54 f4       	brge	.+20     	; 0x34fe <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    34ea:	de 01       	movw	r26, r28
    34ec:	a2 0f       	add	r26, r18
    34ee:	b3 1f       	adc	r27, r19
    34f0:	4c 91       	ld	r20, X
    34f2:	d9 01       	movw	r26, r18
    34f4:	a7 5e       	subi	r26, 0xE7	; 231
    34f6:	bc 4f       	sbci	r27, 0xFC	; 252
    34f8:	4c 93       	st	X, r20
    34fa:	9f 5f       	subi	r25, 0xFF	; 255
    34fc:	f1 cf       	rjmp	.-30     	; 0x34e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    34fe:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_ZN7TwoWire13rxBufferIndexE>
    3502:	60 93 17 03 	sts	0x0317, r22	; 0x800317 <_ZN7TwoWire14rxBufferLengthE>
    3506:	cb 01       	movw	r24, r22
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	09 94       	ijmp
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	08 95       	ret

00003514 <_ZN7TwoWire16onRequestServiceEv>:
    3514:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <_ZN7TwoWire14user_onRequestE>
    3518:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <_ZN7TwoWire14user_onRequestE+0x1>
    351c:	30 97       	sbiw	r30, 0x00	; 0
    351e:	29 f0       	breq	.+10     	; 0x352a <_ZN7TwoWire16onRequestServiceEv+0x16>
    3520:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <_ZN7TwoWire13txBufferIndexE>
    3524:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <_ZN7TwoWire14txBufferLengthE>
    3528:	09 94       	ijmp
    352a:	08 95       	ret

0000352c <_ZN7TwoWire5writeEPKhj>:
    352c:	cf 92       	push	r12
    352e:	df 92       	push	r13
    3530:	ef 92       	push	r14
    3532:	ff 92       	push	r15
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	7c 01       	movw	r14, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8a 01       	movw	r16, r20
    3542:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <_ZN7TwoWire12transmittingE>
    3546:	22 23       	and	r18, r18
    3548:	89 f0       	breq	.+34     	; 0x356c <_ZN7TwoWire5writeEPKhj+0x40>
    354a:	eb 01       	movw	r28, r22
    354c:	6b 01       	movw	r12, r22
    354e:	c4 0e       	add	r12, r20
    3550:	d5 1e       	adc	r13, r21
    3552:	cc 15       	cp	r28, r12
    3554:	dd 05       	cpc	r29, r13
    3556:	69 f0       	breq	.+26     	; 0x3572 <_ZN7TwoWire5writeEPKhj+0x46>
    3558:	69 91       	ld	r22, Y+
    355a:	d7 01       	movw	r26, r14
    355c:	ed 91       	ld	r30, X+
    355e:	fc 91       	ld	r31, X
    3560:	01 90       	ld	r0, Z+
    3562:	f0 81       	ld	r31, Z
    3564:	e0 2d       	mov	r30, r0
    3566:	c7 01       	movw	r24, r14
    3568:	09 95       	icall
    356a:	f3 cf       	rjmp	.-26     	; 0x3552 <_ZN7TwoWire5writeEPKhj+0x26>
    356c:	64 2f       	mov	r22, r20
    356e:	0e 94 c5 18 	call	0x318a	; 0x318a <twi_transmit>
    3572:	c8 01       	movw	r24, r16
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	ff 90       	pop	r15
    357e:	ef 90       	pop	r14
    3580:	df 90       	pop	r13
    3582:	cf 90       	pop	r12
    3584:	08 95       	ret

00003586 <_ZN7TwoWire5writeEh>:
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	1f 92       	push	r1
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	69 83       	std	Y+1, r22	; 0x01
    3592:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <_ZN7TwoWire12transmittingE>
    3596:	22 23       	and	r18, r18
    3598:	d1 f0       	breq	.+52     	; 0x35ce <_ZN7TwoWire5writeEh+0x48>
    359a:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <_ZN7TwoWire14txBufferLengthE>
    359e:	20 32       	cpi	r18, 0x20	; 32
    35a0:	40 f0       	brcs	.+16     	; 0x35b2 <_ZN7TwoWire5writeEh+0x2c>
    35a2:	21 e0       	ldi	r18, 0x01	; 1
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	fc 01       	movw	r30, r24
    35a8:	33 83       	std	Z+3, r19	; 0x03
    35aa:	22 83       	std	Z+2, r18	; 0x02
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	15 c0       	rjmp	.+42     	; 0x35dc <_ZN7TwoWire5writeEh+0x56>
    35b2:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <_ZN7TwoWire13txBufferIndexE>
    35b6:	e8 2f       	mov	r30, r24
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	ea 50       	subi	r30, 0x0A	; 10
    35bc:	fd 4f       	sbci	r31, 0xFD	; 253
    35be:	99 81       	ldd	r25, Y+1	; 0x01
    35c0:	90 83       	st	Z, r25
    35c2:	8f 5f       	subi	r24, 0xFF	; 255
    35c4:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZN7TwoWire13txBufferIndexE>
    35c8:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <_ZN7TwoWire14txBufferLengthE>
    35cc:	05 c0       	rjmp	.+10     	; 0x35d8 <_ZN7TwoWire5writeEh+0x52>
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	ce 01       	movw	r24, r28
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	0e 94 c5 18 	call	0x318a	; 0x318a <twi_transmit>
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	0f 90       	pop	r0
    35de:	df 91       	pop	r29
    35e0:	cf 91       	pop	r28
    35e2:	08 95       	ret

000035e4 <_ZN7TwoWireC1Ev>:
    35e4:	fc 01       	movw	r30, r24
    35e6:	13 82       	std	Z+3, r1	; 0x03
    35e8:	12 82       	std	Z+2, r1	; 0x02
    35ea:	88 ee       	ldi	r24, 0xE8	; 232
    35ec:	93 e0       	ldi	r25, 0x03	; 3
    35ee:	a0 e0       	ldi	r26, 0x00	; 0
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	84 83       	std	Z+4, r24	; 0x04
    35f4:	95 83       	std	Z+5, r25	; 0x05
    35f6:	a6 83       	std	Z+6, r26	; 0x06
    35f8:	b7 83       	std	Z+7, r27	; 0x07
    35fa:	81 eb       	ldi	r24, 0xB1	; 177
    35fc:	91 e0       	ldi	r25, 0x01	; 1
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	08 95       	ret

00003604 <_ZN7TwoWire5beginEv>:
    3604:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_ZN7TwoWire13rxBufferIndexE>
    3608:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <_ZN7TwoWire14rxBufferLengthE>
    360c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <_ZN7TwoWire13txBufferIndexE>
    3610:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <_ZN7TwoWire14txBufferLengthE>
    3614:	0e 94 09 18 	call	0x3012	; 0x3012 <twi_init>
    3618:	8a e8       	ldi	r24, 0x8A	; 138
    361a:	9a e1       	ldi	r25, 0x1A	; 26
    361c:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <twi_attachSlaveTxEvent>
    3620:	80 e6       	ldi	r24, 0x60	; 96
    3622:	9a e1       	ldi	r25, 0x1A	; 26
    3624:	0c 94 ed 18 	jmp	0x31da	; 0x31da <twi_attachSlaveRxEvent>

00003628 <_ZN7TwoWire17beginTransmissionEh>:
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZN7TwoWire12transmittingE>
    362e:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <_ZN7TwoWire9txAddressE>
    3632:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <_ZN7TwoWire13txBufferIndexE>
    3636:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <_ZN7TwoWire14txBufferLengthE>
    363a:	08 95       	ret

0000363c <_ZN7TwoWire15endTransmissionEh>:
    363c:	0f 93       	push	r16
    363e:	06 2f       	mov	r16, r22
    3640:	21 e0       	ldi	r18, 0x01	; 1
    3642:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <_ZN7TwoWire14txBufferLengthE>
    3646:	66 ef       	ldi	r22, 0xF6	; 246
    3648:	72 e0       	ldi	r23, 0x02	; 2
    364a:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN7TwoWire9txAddressE>
    364e:	0e 94 6f 18 	call	0x30de	; 0x30de <twi_writeTo>
    3652:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <_ZN7TwoWire13txBufferIndexE>
    3656:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <_ZN7TwoWire14txBufferLengthE>
    365a:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <_ZN7TwoWire12transmittingE>
    365e:	0f 91       	pop	r16
    3660:	08 95       	ret

00003662 <_ZN7TwoWire11requestFromEhhmhh>:
    3662:	4f 92       	push	r4
    3664:	5f 92       	push	r5
    3666:	6f 92       	push	r6
    3668:	7f 92       	push	r7
    366a:	af 92       	push	r10
    366c:	bf 92       	push	r11
    366e:	cf 92       	push	r12
    3670:	ef 92       	push	r14
    3672:	ff 92       	push	r15
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	5c 01       	movw	r10, r24
    367e:	f6 2e       	mov	r15, r22
    3680:	d4 2f       	mov	r29, r20
    3682:	28 01       	movw	r4, r16
    3684:	39 01       	movw	r6, r18
    3686:	ee 20       	and	r14, r14
    3688:	21 f1       	breq	.+72     	; 0x36d2 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    368a:	0e 94 14 1b 	call	0x3628	; 0x3628 <_ZN7TwoWire17beginTransmissionEh>
    368e:	ce 2d       	mov	r28, r14
    3690:	c4 30       	cpi	r28, 0x04	; 4
    3692:	08 f0       	brcs	.+2      	; 0x3696 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3694:	c3 e0       	ldi	r28, 0x03	; 3
    3696:	c1 50       	subi	r28, 0x01	; 1
    3698:	c0 f0       	brcs	.+48     	; 0x36ca <_ZN7TwoWire11requestFromEhhmhh+0x68>
    369a:	28 e0       	ldi	r18, 0x08	; 8
    369c:	c2 9f       	mul	r28, r18
    369e:	c0 01       	movw	r24, r0
    36a0:	11 24       	eor	r1, r1
    36a2:	a3 01       	movw	r20, r6
    36a4:	92 01       	movw	r18, r4
    36a6:	04 c0       	rjmp	.+8      	; 0x36b0 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    36a8:	56 95       	lsr	r21
    36aa:	47 95       	ror	r20
    36ac:	37 95       	ror	r19
    36ae:	27 95       	ror	r18
    36b0:	8a 95       	dec	r24
    36b2:	d2 f7       	brpl	.-12     	; 0x36a8 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    36b4:	ca 01       	movw	r24, r20
    36b6:	b9 01       	movw	r22, r18
    36b8:	d5 01       	movw	r26, r10
    36ba:	ed 91       	ld	r30, X+
    36bc:	fc 91       	ld	r31, X
    36be:	01 90       	ld	r0, Z+
    36c0:	f0 81       	ld	r31, Z
    36c2:	e0 2d       	mov	r30, r0
    36c4:	c5 01       	movw	r24, r10
    36c6:	09 95       	icall
    36c8:	e6 cf       	rjmp	.-52     	; 0x3696 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	c5 01       	movw	r24, r10
    36ce:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN7TwoWire15endTransmissionEh>
    36d2:	4d 2f       	mov	r20, r29
    36d4:	d1 32       	cpi	r29, 0x21	; 33
    36d6:	08 f0       	brcs	.+2      	; 0x36da <_ZN7TwoWire11requestFromEhhmhh+0x78>
    36d8:	40 e2       	ldi	r20, 0x20	; 32
    36da:	2c 2d       	mov	r18, r12
    36dc:	69 e1       	ldi	r22, 0x19	; 25
    36de:	73 e0       	ldi	r23, 0x03	; 3
    36e0:	8f 2d       	mov	r24, r15
    36e2:	0e 94 27 18 	call	0x304e	; 0x304e <twi_readFrom>
    36e6:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_ZN7TwoWire13rxBufferIndexE>
    36ea:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZN7TwoWire14rxBufferLengthE>
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	0f 91       	pop	r16
    36f6:	ff 90       	pop	r15
    36f8:	ef 90       	pop	r14
    36fa:	cf 90       	pop	r12
    36fc:	bf 90       	pop	r11
    36fe:	af 90       	pop	r10
    3700:	7f 90       	pop	r7
    3702:	6f 90       	pop	r6
    3704:	5f 90       	pop	r5
    3706:	4f 90       	pop	r4
    3708:	08 95       	ret

0000370a <_ZN7TwoWire11requestFromEhhh>:
    370a:	cf 92       	push	r12
    370c:	ef 92       	push	r14
    370e:	0f 93       	push	r16
    3710:	1f 93       	push	r17
    3712:	c2 2e       	mov	r12, r18
    3714:	e1 2c       	mov	r14, r1
    3716:	00 e0       	ldi	r16, 0x00	; 0
    3718:	10 e0       	ldi	r17, 0x00	; 0
    371a:	98 01       	movw	r18, r16
    371c:	0e 94 31 1b 	call	0x3662	; 0x3662 <_ZN7TwoWire11requestFromEhhmhh>
    3720:	1f 91       	pop	r17
    3722:	0f 91       	pop	r16
    3724:	ef 90       	pop	r14
    3726:	cf 90       	pop	r12
    3728:	08 95       	ret

0000372a <_ZN7TwoWire11requestFromEhh>:
    372a:	21 e0       	ldi	r18, 0x01	; 1
    372c:	0c 94 85 1b 	jmp	0x370a	; 0x370a <_ZN7TwoWire11requestFromEhhh>

00003730 <_ZN7TwoWire15endTransmissionEv>:
    3730:	61 e0       	ldi	r22, 0x01	; 1
    3732:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <_ZN7TwoWire15endTransmissionEh>

00003736 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3736:	83 ee       	ldi	r24, 0xE3	; 227
    3738:	92 e0       	ldi	r25, 0x02	; 2
    373a:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <_ZN7TwoWireC1Ev>

0000373e <__subsf3>:
    373e:	50 58       	subi	r21, 0x80	; 128

00003740 <__addsf3>:
    3740:	bb 27       	eor	r27, r27
    3742:	aa 27       	eor	r26, r26
    3744:	0e 94 b7 1b 	call	0x376e	; 0x376e <__addsf3x>
    3748:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__fp_round>
    374c:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__fp_pscA>
    3750:	38 f0       	brcs	.+14     	; 0x3760 <__addsf3+0x20>
    3752:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fp_pscB>
    3756:	20 f0       	brcs	.+8      	; 0x3760 <__addsf3+0x20>
    3758:	39 f4       	brne	.+14     	; 0x3768 <__addsf3+0x28>
    375a:	9f 3f       	cpi	r25, 0xFF	; 255
    375c:	19 f4       	brne	.+6      	; 0x3764 <__addsf3+0x24>
    375e:	26 f4       	brtc	.+8      	; 0x3768 <__addsf3+0x28>
    3760:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__fp_nan>
    3764:	0e f4       	brtc	.+2      	; 0x3768 <__addsf3+0x28>
    3766:	e0 95       	com	r30
    3768:	e7 fb       	bst	r30, 7
    376a:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__fp_inf>

0000376e <__addsf3x>:
    376e:	e9 2f       	mov	r30, r25
    3770:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__fp_split3>
    3774:	58 f3       	brcs	.-42     	; 0x374c <__addsf3+0xc>
    3776:	ba 17       	cp	r27, r26
    3778:	62 07       	cpc	r22, r18
    377a:	73 07       	cpc	r23, r19
    377c:	84 07       	cpc	r24, r20
    377e:	95 07       	cpc	r25, r21
    3780:	20 f0       	brcs	.+8      	; 0x378a <__addsf3x+0x1c>
    3782:	79 f4       	brne	.+30     	; 0x37a2 <__addsf3x+0x34>
    3784:	a6 f5       	brtc	.+104    	; 0x37ee <__addsf3x+0x80>
    3786:	0c 94 64 1d 	jmp	0x3ac8	; 0x3ac8 <__fp_zero>
    378a:	0e f4       	brtc	.+2      	; 0x378e <__addsf3x+0x20>
    378c:	e0 95       	com	r30
    378e:	0b 2e       	mov	r0, r27
    3790:	ba 2f       	mov	r27, r26
    3792:	a0 2d       	mov	r26, r0
    3794:	0b 01       	movw	r0, r22
    3796:	b9 01       	movw	r22, r18
    3798:	90 01       	movw	r18, r0
    379a:	0c 01       	movw	r0, r24
    379c:	ca 01       	movw	r24, r20
    379e:	a0 01       	movw	r20, r0
    37a0:	11 24       	eor	r1, r1
    37a2:	ff 27       	eor	r31, r31
    37a4:	59 1b       	sub	r21, r25
    37a6:	99 f0       	breq	.+38     	; 0x37ce <__addsf3x+0x60>
    37a8:	59 3f       	cpi	r21, 0xF9	; 249
    37aa:	50 f4       	brcc	.+20     	; 0x37c0 <__addsf3x+0x52>
    37ac:	50 3e       	cpi	r21, 0xE0	; 224
    37ae:	68 f1       	brcs	.+90     	; 0x380a <__addsf3x+0x9c>
    37b0:	1a 16       	cp	r1, r26
    37b2:	f0 40       	sbci	r31, 0x00	; 0
    37b4:	a2 2f       	mov	r26, r18
    37b6:	23 2f       	mov	r18, r19
    37b8:	34 2f       	mov	r19, r20
    37ba:	44 27       	eor	r20, r20
    37bc:	58 5f       	subi	r21, 0xF8	; 248
    37be:	f3 cf       	rjmp	.-26     	; 0x37a6 <__addsf3x+0x38>
    37c0:	46 95       	lsr	r20
    37c2:	37 95       	ror	r19
    37c4:	27 95       	ror	r18
    37c6:	a7 95       	ror	r26
    37c8:	f0 40       	sbci	r31, 0x00	; 0
    37ca:	53 95       	inc	r21
    37cc:	c9 f7       	brne	.-14     	; 0x37c0 <__addsf3x+0x52>
    37ce:	7e f4       	brtc	.+30     	; 0x37ee <__addsf3x+0x80>
    37d0:	1f 16       	cp	r1, r31
    37d2:	ba 0b       	sbc	r27, r26
    37d4:	62 0b       	sbc	r22, r18
    37d6:	73 0b       	sbc	r23, r19
    37d8:	84 0b       	sbc	r24, r20
    37da:	ba f0       	brmi	.+46     	; 0x380a <__addsf3x+0x9c>
    37dc:	91 50       	subi	r25, 0x01	; 1
    37de:	a1 f0       	breq	.+40     	; 0x3808 <__addsf3x+0x9a>
    37e0:	ff 0f       	add	r31, r31
    37e2:	bb 1f       	adc	r27, r27
    37e4:	66 1f       	adc	r22, r22
    37e6:	77 1f       	adc	r23, r23
    37e8:	88 1f       	adc	r24, r24
    37ea:	c2 f7       	brpl	.-16     	; 0x37dc <__addsf3x+0x6e>
    37ec:	0e c0       	rjmp	.+28     	; 0x380a <__addsf3x+0x9c>
    37ee:	ba 0f       	add	r27, r26
    37f0:	62 1f       	adc	r22, r18
    37f2:	73 1f       	adc	r23, r19
    37f4:	84 1f       	adc	r24, r20
    37f6:	48 f4       	brcc	.+18     	; 0x380a <__addsf3x+0x9c>
    37f8:	87 95       	ror	r24
    37fa:	77 95       	ror	r23
    37fc:	67 95       	ror	r22
    37fe:	b7 95       	ror	r27
    3800:	f7 95       	ror	r31
    3802:	9e 3f       	cpi	r25, 0xFE	; 254
    3804:	08 f0       	brcs	.+2      	; 0x3808 <__addsf3x+0x9a>
    3806:	b0 cf       	rjmp	.-160    	; 0x3768 <__addsf3+0x28>
    3808:	93 95       	inc	r25
    380a:	88 0f       	add	r24, r24
    380c:	08 f0       	brcs	.+2      	; 0x3810 <__addsf3x+0xa2>
    380e:	99 27       	eor	r25, r25
    3810:	ee 0f       	add	r30, r30
    3812:	97 95       	ror	r25
    3814:	87 95       	ror	r24
    3816:	08 95       	ret

00003818 <__cmpsf2>:
    3818:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__fp_cmp>
    381c:	08 f4       	brcc	.+2      	; 0x3820 <__cmpsf2+0x8>
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	08 95       	ret

00003822 <__divsf3>:
    3822:	0e 94 25 1c 	call	0x384a	; 0x384a <__divsf3x>
    3826:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__fp_round>
    382a:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fp_pscB>
    382e:	58 f0       	brcs	.+22     	; 0x3846 <__divsf3+0x24>
    3830:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__fp_pscA>
    3834:	40 f0       	brcs	.+16     	; 0x3846 <__divsf3+0x24>
    3836:	29 f4       	brne	.+10     	; 0x3842 <__divsf3+0x20>
    3838:	5f 3f       	cpi	r21, 0xFF	; 255
    383a:	29 f0       	breq	.+10     	; 0x3846 <__divsf3+0x24>
    383c:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__fp_inf>
    3840:	51 11       	cpse	r21, r1
    3842:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__fp_szero>
    3846:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__fp_nan>

0000384a <__divsf3x>:
    384a:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__fp_split3>
    384e:	68 f3       	brcs	.-38     	; 0x382a <__divsf3+0x8>

00003850 <__divsf3_pse>:
    3850:	99 23       	and	r25, r25
    3852:	b1 f3       	breq	.-20     	; 0x3840 <__divsf3+0x1e>
    3854:	55 23       	and	r21, r21
    3856:	91 f3       	breq	.-28     	; 0x383c <__divsf3+0x1a>
    3858:	95 1b       	sub	r25, r21
    385a:	55 0b       	sbc	r21, r21
    385c:	bb 27       	eor	r27, r27
    385e:	aa 27       	eor	r26, r26
    3860:	62 17       	cp	r22, r18
    3862:	73 07       	cpc	r23, r19
    3864:	84 07       	cpc	r24, r20
    3866:	38 f0       	brcs	.+14     	; 0x3876 <__divsf3_pse+0x26>
    3868:	9f 5f       	subi	r25, 0xFF	; 255
    386a:	5f 4f       	sbci	r21, 0xFF	; 255
    386c:	22 0f       	add	r18, r18
    386e:	33 1f       	adc	r19, r19
    3870:	44 1f       	adc	r20, r20
    3872:	aa 1f       	adc	r26, r26
    3874:	a9 f3       	breq	.-22     	; 0x3860 <__divsf3_pse+0x10>
    3876:	35 d0       	rcall	.+106    	; 0x38e2 <__divsf3_pse+0x92>
    3878:	0e 2e       	mov	r0, r30
    387a:	3a f0       	brmi	.+14     	; 0x388a <__divsf3_pse+0x3a>
    387c:	e0 e8       	ldi	r30, 0x80	; 128
    387e:	32 d0       	rcall	.+100    	; 0x38e4 <__divsf3_pse+0x94>
    3880:	91 50       	subi	r25, 0x01	; 1
    3882:	50 40       	sbci	r21, 0x00	; 0
    3884:	e6 95       	lsr	r30
    3886:	00 1c       	adc	r0, r0
    3888:	ca f7       	brpl	.-14     	; 0x387c <__divsf3_pse+0x2c>
    388a:	2b d0       	rcall	.+86     	; 0x38e2 <__divsf3_pse+0x92>
    388c:	fe 2f       	mov	r31, r30
    388e:	29 d0       	rcall	.+82     	; 0x38e2 <__divsf3_pse+0x92>
    3890:	66 0f       	add	r22, r22
    3892:	77 1f       	adc	r23, r23
    3894:	88 1f       	adc	r24, r24
    3896:	bb 1f       	adc	r27, r27
    3898:	26 17       	cp	r18, r22
    389a:	37 07       	cpc	r19, r23
    389c:	48 07       	cpc	r20, r24
    389e:	ab 07       	cpc	r26, r27
    38a0:	b0 e8       	ldi	r27, 0x80	; 128
    38a2:	09 f0       	breq	.+2      	; 0x38a6 <__divsf3_pse+0x56>
    38a4:	bb 0b       	sbc	r27, r27
    38a6:	80 2d       	mov	r24, r0
    38a8:	bf 01       	movw	r22, r30
    38aa:	ff 27       	eor	r31, r31
    38ac:	93 58       	subi	r25, 0x83	; 131
    38ae:	5f 4f       	sbci	r21, 0xFF	; 255
    38b0:	3a f0       	brmi	.+14     	; 0x38c0 <__divsf3_pse+0x70>
    38b2:	9e 3f       	cpi	r25, 0xFE	; 254
    38b4:	51 05       	cpc	r21, r1
    38b6:	78 f0       	brcs	.+30     	; 0x38d6 <__divsf3_pse+0x86>
    38b8:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__fp_inf>
    38bc:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__fp_szero>
    38c0:	5f 3f       	cpi	r21, 0xFF	; 255
    38c2:	e4 f3       	brlt	.-8      	; 0x38bc <__divsf3_pse+0x6c>
    38c4:	98 3e       	cpi	r25, 0xE8	; 232
    38c6:	d4 f3       	brlt	.-12     	; 0x38bc <__divsf3_pse+0x6c>
    38c8:	86 95       	lsr	r24
    38ca:	77 95       	ror	r23
    38cc:	67 95       	ror	r22
    38ce:	b7 95       	ror	r27
    38d0:	f7 95       	ror	r31
    38d2:	9f 5f       	subi	r25, 0xFF	; 255
    38d4:	c9 f7       	brne	.-14     	; 0x38c8 <__divsf3_pse+0x78>
    38d6:	88 0f       	add	r24, r24
    38d8:	91 1d       	adc	r25, r1
    38da:	96 95       	lsr	r25
    38dc:	87 95       	ror	r24
    38de:	97 f9       	bld	r25, 7
    38e0:	08 95       	ret
    38e2:	e1 e0       	ldi	r30, 0x01	; 1
    38e4:	66 0f       	add	r22, r22
    38e6:	77 1f       	adc	r23, r23
    38e8:	88 1f       	adc	r24, r24
    38ea:	bb 1f       	adc	r27, r27
    38ec:	62 17       	cp	r22, r18
    38ee:	73 07       	cpc	r23, r19
    38f0:	84 07       	cpc	r24, r20
    38f2:	ba 07       	cpc	r27, r26
    38f4:	20 f0       	brcs	.+8      	; 0x38fe <__divsf3_pse+0xae>
    38f6:	62 1b       	sub	r22, r18
    38f8:	73 0b       	sbc	r23, r19
    38fa:	84 0b       	sbc	r24, r20
    38fc:	ba 0b       	sbc	r27, r26
    38fe:	ee 1f       	adc	r30, r30
    3900:	88 f7       	brcc	.-30     	; 0x38e4 <__divsf3_pse+0x94>
    3902:	e0 95       	com	r30
    3904:	08 95       	ret

00003906 <__fixsfsi>:
    3906:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__fixunssfsi>
    390a:	68 94       	set
    390c:	b1 11       	cpse	r27, r1
    390e:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__fp_szero>
    3912:	08 95       	ret

00003914 <__fixunssfsi>:
    3914:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__fp_splitA>
    3918:	88 f0       	brcs	.+34     	; 0x393c <__fixunssfsi+0x28>
    391a:	9f 57       	subi	r25, 0x7F	; 127
    391c:	98 f0       	brcs	.+38     	; 0x3944 <__fixunssfsi+0x30>
    391e:	b9 2f       	mov	r27, r25
    3920:	99 27       	eor	r25, r25
    3922:	b7 51       	subi	r27, 0x17	; 23
    3924:	b0 f0       	brcs	.+44     	; 0x3952 <__fixunssfsi+0x3e>
    3926:	e1 f0       	breq	.+56     	; 0x3960 <__fixunssfsi+0x4c>
    3928:	66 0f       	add	r22, r22
    392a:	77 1f       	adc	r23, r23
    392c:	88 1f       	adc	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	1a f0       	brmi	.+6      	; 0x3938 <__fixunssfsi+0x24>
    3932:	ba 95       	dec	r27
    3934:	c9 f7       	brne	.-14     	; 0x3928 <__fixunssfsi+0x14>
    3936:	14 c0       	rjmp	.+40     	; 0x3960 <__fixunssfsi+0x4c>
    3938:	b1 30       	cpi	r27, 0x01	; 1
    393a:	91 f0       	breq	.+36     	; 0x3960 <__fixunssfsi+0x4c>
    393c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <__fp_zero>
    3940:	b1 e0       	ldi	r27, 0x01	; 1
    3942:	08 95       	ret
    3944:	0c 94 64 1d 	jmp	0x3ac8	; 0x3ac8 <__fp_zero>
    3948:	67 2f       	mov	r22, r23
    394a:	78 2f       	mov	r23, r24
    394c:	88 27       	eor	r24, r24
    394e:	b8 5f       	subi	r27, 0xF8	; 248
    3950:	39 f0       	breq	.+14     	; 0x3960 <__fixunssfsi+0x4c>
    3952:	b9 3f       	cpi	r27, 0xF9	; 249
    3954:	cc f3       	brlt	.-14     	; 0x3948 <__fixunssfsi+0x34>
    3956:	86 95       	lsr	r24
    3958:	77 95       	ror	r23
    395a:	67 95       	ror	r22
    395c:	b3 95       	inc	r27
    395e:	d9 f7       	brne	.-10     	; 0x3956 <__fixunssfsi+0x42>
    3960:	3e f4       	brtc	.+14     	; 0x3970 <__fixunssfsi+0x5c>
    3962:	90 95       	com	r25
    3964:	80 95       	com	r24
    3966:	70 95       	com	r23
    3968:	61 95       	neg	r22
    396a:	7f 4f       	sbci	r23, 0xFF	; 255
    396c:	8f 4f       	sbci	r24, 0xFF	; 255
    396e:	9f 4f       	sbci	r25, 0xFF	; 255
    3970:	08 95       	ret

00003972 <__floatunsisf>:
    3972:	e8 94       	clt
    3974:	09 c0       	rjmp	.+18     	; 0x3988 <__floatsisf+0x12>

00003976 <__floatsisf>:
    3976:	97 fb       	bst	r25, 7
    3978:	3e f4       	brtc	.+14     	; 0x3988 <__floatsisf+0x12>
    397a:	90 95       	com	r25
    397c:	80 95       	com	r24
    397e:	70 95       	com	r23
    3980:	61 95       	neg	r22
    3982:	7f 4f       	sbci	r23, 0xFF	; 255
    3984:	8f 4f       	sbci	r24, 0xFF	; 255
    3986:	9f 4f       	sbci	r25, 0xFF	; 255
    3988:	99 23       	and	r25, r25
    398a:	a9 f0       	breq	.+42     	; 0x39b6 <__floatsisf+0x40>
    398c:	f9 2f       	mov	r31, r25
    398e:	96 e9       	ldi	r25, 0x96	; 150
    3990:	bb 27       	eor	r27, r27
    3992:	93 95       	inc	r25
    3994:	f6 95       	lsr	r31
    3996:	87 95       	ror	r24
    3998:	77 95       	ror	r23
    399a:	67 95       	ror	r22
    399c:	b7 95       	ror	r27
    399e:	f1 11       	cpse	r31, r1
    39a0:	f8 cf       	rjmp	.-16     	; 0x3992 <__floatsisf+0x1c>
    39a2:	fa f4       	brpl	.+62     	; 0x39e2 <__floatsisf+0x6c>
    39a4:	bb 0f       	add	r27, r27
    39a6:	11 f4       	brne	.+4      	; 0x39ac <__floatsisf+0x36>
    39a8:	60 ff       	sbrs	r22, 0
    39aa:	1b c0       	rjmp	.+54     	; 0x39e2 <__floatsisf+0x6c>
    39ac:	6f 5f       	subi	r22, 0xFF	; 255
    39ae:	7f 4f       	sbci	r23, 0xFF	; 255
    39b0:	8f 4f       	sbci	r24, 0xFF	; 255
    39b2:	9f 4f       	sbci	r25, 0xFF	; 255
    39b4:	16 c0       	rjmp	.+44     	; 0x39e2 <__floatsisf+0x6c>
    39b6:	88 23       	and	r24, r24
    39b8:	11 f0       	breq	.+4      	; 0x39be <__floatsisf+0x48>
    39ba:	96 e9       	ldi	r25, 0x96	; 150
    39bc:	11 c0       	rjmp	.+34     	; 0x39e0 <__floatsisf+0x6a>
    39be:	77 23       	and	r23, r23
    39c0:	21 f0       	breq	.+8      	; 0x39ca <__floatsisf+0x54>
    39c2:	9e e8       	ldi	r25, 0x8E	; 142
    39c4:	87 2f       	mov	r24, r23
    39c6:	76 2f       	mov	r23, r22
    39c8:	05 c0       	rjmp	.+10     	; 0x39d4 <__floatsisf+0x5e>
    39ca:	66 23       	and	r22, r22
    39cc:	71 f0       	breq	.+28     	; 0x39ea <__floatsisf+0x74>
    39ce:	96 e8       	ldi	r25, 0x86	; 134
    39d0:	86 2f       	mov	r24, r22
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	2a f0       	brmi	.+10     	; 0x39e2 <__floatsisf+0x6c>
    39d8:	9a 95       	dec	r25
    39da:	66 0f       	add	r22, r22
    39dc:	77 1f       	adc	r23, r23
    39de:	88 1f       	adc	r24, r24
    39e0:	da f7       	brpl	.-10     	; 0x39d8 <__floatsisf+0x62>
    39e2:	88 0f       	add	r24, r24
    39e4:	96 95       	lsr	r25
    39e6:	87 95       	ror	r24
    39e8:	97 f9       	bld	r25, 7
    39ea:	08 95       	ret

000039ec <__fp_cmp>:
    39ec:	99 0f       	add	r25, r25
    39ee:	00 08       	sbc	r0, r0
    39f0:	55 0f       	add	r21, r21
    39f2:	aa 0b       	sbc	r26, r26
    39f4:	e0 e8       	ldi	r30, 0x80	; 128
    39f6:	fe ef       	ldi	r31, 0xFE	; 254
    39f8:	16 16       	cp	r1, r22
    39fa:	17 06       	cpc	r1, r23
    39fc:	e8 07       	cpc	r30, r24
    39fe:	f9 07       	cpc	r31, r25
    3a00:	c0 f0       	brcs	.+48     	; 0x3a32 <__fp_cmp+0x46>
    3a02:	12 16       	cp	r1, r18
    3a04:	13 06       	cpc	r1, r19
    3a06:	e4 07       	cpc	r30, r20
    3a08:	f5 07       	cpc	r31, r21
    3a0a:	98 f0       	brcs	.+38     	; 0x3a32 <__fp_cmp+0x46>
    3a0c:	62 1b       	sub	r22, r18
    3a0e:	73 0b       	sbc	r23, r19
    3a10:	84 0b       	sbc	r24, r20
    3a12:	95 0b       	sbc	r25, r21
    3a14:	39 f4       	brne	.+14     	; 0x3a24 <__fp_cmp+0x38>
    3a16:	0a 26       	eor	r0, r26
    3a18:	61 f0       	breq	.+24     	; 0x3a32 <__fp_cmp+0x46>
    3a1a:	23 2b       	or	r18, r19
    3a1c:	24 2b       	or	r18, r20
    3a1e:	25 2b       	or	r18, r21
    3a20:	21 f4       	brne	.+8      	; 0x3a2a <__fp_cmp+0x3e>
    3a22:	08 95       	ret
    3a24:	0a 26       	eor	r0, r26
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <__fp_cmp+0x3e>
    3a28:	a1 40       	sbci	r26, 0x01	; 1
    3a2a:	a6 95       	lsr	r26
    3a2c:	8f ef       	ldi	r24, 0xFF	; 255
    3a2e:	81 1d       	adc	r24, r1
    3a30:	81 1d       	adc	r24, r1
    3a32:	08 95       	ret

00003a34 <__fp_inf>:
    3a34:	97 f9       	bld	r25, 7
    3a36:	9f 67       	ori	r25, 0x7F	; 127
    3a38:	80 e8       	ldi	r24, 0x80	; 128
    3a3a:	70 e0       	ldi	r23, 0x00	; 0
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	08 95       	ret

00003a40 <__fp_nan>:
    3a40:	9f ef       	ldi	r25, 0xFF	; 255
    3a42:	80 ec       	ldi	r24, 0xC0	; 192
    3a44:	08 95       	ret

00003a46 <__fp_pscA>:
    3a46:	00 24       	eor	r0, r0
    3a48:	0a 94       	dec	r0
    3a4a:	16 16       	cp	r1, r22
    3a4c:	17 06       	cpc	r1, r23
    3a4e:	18 06       	cpc	r1, r24
    3a50:	09 06       	cpc	r0, r25
    3a52:	08 95       	ret

00003a54 <__fp_pscB>:
    3a54:	00 24       	eor	r0, r0
    3a56:	0a 94       	dec	r0
    3a58:	12 16       	cp	r1, r18
    3a5a:	13 06       	cpc	r1, r19
    3a5c:	14 06       	cpc	r1, r20
    3a5e:	05 06       	cpc	r0, r21
    3a60:	08 95       	ret

00003a62 <__fp_round>:
    3a62:	09 2e       	mov	r0, r25
    3a64:	03 94       	inc	r0
    3a66:	00 0c       	add	r0, r0
    3a68:	11 f4       	brne	.+4      	; 0x3a6e <__fp_round+0xc>
    3a6a:	88 23       	and	r24, r24
    3a6c:	52 f0       	brmi	.+20     	; 0x3a82 <__fp_round+0x20>
    3a6e:	bb 0f       	add	r27, r27
    3a70:	40 f4       	brcc	.+16     	; 0x3a82 <__fp_round+0x20>
    3a72:	bf 2b       	or	r27, r31
    3a74:	11 f4       	brne	.+4      	; 0x3a7a <__fp_round+0x18>
    3a76:	60 ff       	sbrs	r22, 0
    3a78:	04 c0       	rjmp	.+8      	; 0x3a82 <__fp_round+0x20>
    3a7a:	6f 5f       	subi	r22, 0xFF	; 255
    3a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a80:	9f 4f       	sbci	r25, 0xFF	; 255
    3a82:	08 95       	ret

00003a84 <__fp_split3>:
    3a84:	57 fd       	sbrc	r21, 7
    3a86:	90 58       	subi	r25, 0x80	; 128
    3a88:	44 0f       	add	r20, r20
    3a8a:	55 1f       	adc	r21, r21
    3a8c:	59 f0       	breq	.+22     	; 0x3aa4 <__fp_splitA+0x10>
    3a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a90:	71 f0       	breq	.+28     	; 0x3aae <__fp_splitA+0x1a>
    3a92:	47 95       	ror	r20

00003a94 <__fp_splitA>:
    3a94:	88 0f       	add	r24, r24
    3a96:	97 fb       	bst	r25, 7
    3a98:	99 1f       	adc	r25, r25
    3a9a:	61 f0       	breq	.+24     	; 0x3ab4 <__fp_splitA+0x20>
    3a9c:	9f 3f       	cpi	r25, 0xFF	; 255
    3a9e:	79 f0       	breq	.+30     	; 0x3abe <__fp_splitA+0x2a>
    3aa0:	87 95       	ror	r24
    3aa2:	08 95       	ret
    3aa4:	12 16       	cp	r1, r18
    3aa6:	13 06       	cpc	r1, r19
    3aa8:	14 06       	cpc	r1, r20
    3aaa:	55 1f       	adc	r21, r21
    3aac:	f2 cf       	rjmp	.-28     	; 0x3a92 <__fp_split3+0xe>
    3aae:	46 95       	lsr	r20
    3ab0:	f1 df       	rcall	.-30     	; 0x3a94 <__fp_splitA>
    3ab2:	08 c0       	rjmp	.+16     	; 0x3ac4 <__fp_splitA+0x30>
    3ab4:	16 16       	cp	r1, r22
    3ab6:	17 06       	cpc	r1, r23
    3ab8:	18 06       	cpc	r1, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	f1 cf       	rjmp	.-30     	; 0x3aa0 <__fp_splitA+0xc>
    3abe:	86 95       	lsr	r24
    3ac0:	71 05       	cpc	r23, r1
    3ac2:	61 05       	cpc	r22, r1
    3ac4:	08 94       	sec
    3ac6:	08 95       	ret

00003ac8 <__fp_zero>:
    3ac8:	e8 94       	clt

00003aca <__fp_szero>:
    3aca:	bb 27       	eor	r27, r27
    3acc:	66 27       	eor	r22, r22
    3ace:	77 27       	eor	r23, r23
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	97 f9       	bld	r25, 7
    3ad4:	08 95       	ret

00003ad6 <__gesf2>:
    3ad6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__fp_cmp>
    3ada:	08 f4       	brcc	.+2      	; 0x3ade <__gesf2+0x8>
    3adc:	8f ef       	ldi	r24, 0xFF	; 255
    3ade:	08 95       	ret

00003ae0 <__mulsf3>:
    3ae0:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__mulsf3x>
    3ae4:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__fp_round>
    3ae8:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__fp_pscA>
    3aec:	38 f0       	brcs	.+14     	; 0x3afc <__mulsf3+0x1c>
    3aee:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fp_pscB>
    3af2:	20 f0       	brcs	.+8      	; 0x3afc <__mulsf3+0x1c>
    3af4:	95 23       	and	r25, r21
    3af6:	11 f0       	breq	.+4      	; 0x3afc <__mulsf3+0x1c>
    3af8:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__fp_inf>
    3afc:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__fp_nan>
    3b00:	11 24       	eor	r1, r1
    3b02:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__fp_szero>

00003b06 <__mulsf3x>:
    3b06:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__fp_split3>
    3b0a:	70 f3       	brcs	.-36     	; 0x3ae8 <__mulsf3+0x8>

00003b0c <__mulsf3_pse>:
    3b0c:	95 9f       	mul	r25, r21
    3b0e:	c1 f3       	breq	.-16     	; 0x3b00 <__mulsf3+0x20>
    3b10:	95 0f       	add	r25, r21
    3b12:	50 e0       	ldi	r21, 0x00	; 0
    3b14:	55 1f       	adc	r21, r21
    3b16:	62 9f       	mul	r22, r18
    3b18:	f0 01       	movw	r30, r0
    3b1a:	72 9f       	mul	r23, r18
    3b1c:	bb 27       	eor	r27, r27
    3b1e:	f0 0d       	add	r31, r0
    3b20:	b1 1d       	adc	r27, r1
    3b22:	63 9f       	mul	r22, r19
    3b24:	aa 27       	eor	r26, r26
    3b26:	f0 0d       	add	r31, r0
    3b28:	b1 1d       	adc	r27, r1
    3b2a:	aa 1f       	adc	r26, r26
    3b2c:	64 9f       	mul	r22, r20
    3b2e:	66 27       	eor	r22, r22
    3b30:	b0 0d       	add	r27, r0
    3b32:	a1 1d       	adc	r26, r1
    3b34:	66 1f       	adc	r22, r22
    3b36:	82 9f       	mul	r24, r18
    3b38:	22 27       	eor	r18, r18
    3b3a:	b0 0d       	add	r27, r0
    3b3c:	a1 1d       	adc	r26, r1
    3b3e:	62 1f       	adc	r22, r18
    3b40:	73 9f       	mul	r23, r19
    3b42:	b0 0d       	add	r27, r0
    3b44:	a1 1d       	adc	r26, r1
    3b46:	62 1f       	adc	r22, r18
    3b48:	83 9f       	mul	r24, r19
    3b4a:	a0 0d       	add	r26, r0
    3b4c:	61 1d       	adc	r22, r1
    3b4e:	22 1f       	adc	r18, r18
    3b50:	74 9f       	mul	r23, r20
    3b52:	33 27       	eor	r19, r19
    3b54:	a0 0d       	add	r26, r0
    3b56:	61 1d       	adc	r22, r1
    3b58:	23 1f       	adc	r18, r19
    3b5a:	84 9f       	mul	r24, r20
    3b5c:	60 0d       	add	r22, r0
    3b5e:	21 1d       	adc	r18, r1
    3b60:	82 2f       	mov	r24, r18
    3b62:	76 2f       	mov	r23, r22
    3b64:	6a 2f       	mov	r22, r26
    3b66:	11 24       	eor	r1, r1
    3b68:	9f 57       	subi	r25, 0x7F	; 127
    3b6a:	50 40       	sbci	r21, 0x00	; 0
    3b6c:	9a f0       	brmi	.+38     	; 0x3b94 <__mulsf3_pse+0x88>
    3b6e:	f1 f0       	breq	.+60     	; 0x3bac <__mulsf3_pse+0xa0>
    3b70:	88 23       	and	r24, r24
    3b72:	4a f0       	brmi	.+18     	; 0x3b86 <__mulsf3_pse+0x7a>
    3b74:	ee 0f       	add	r30, r30
    3b76:	ff 1f       	adc	r31, r31
    3b78:	bb 1f       	adc	r27, r27
    3b7a:	66 1f       	adc	r22, r22
    3b7c:	77 1f       	adc	r23, r23
    3b7e:	88 1f       	adc	r24, r24
    3b80:	91 50       	subi	r25, 0x01	; 1
    3b82:	50 40       	sbci	r21, 0x00	; 0
    3b84:	a9 f7       	brne	.-22     	; 0x3b70 <__mulsf3_pse+0x64>
    3b86:	9e 3f       	cpi	r25, 0xFE	; 254
    3b88:	51 05       	cpc	r21, r1
    3b8a:	80 f0       	brcs	.+32     	; 0x3bac <__mulsf3_pse+0xa0>
    3b8c:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__fp_inf>
    3b90:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__fp_szero>
    3b94:	5f 3f       	cpi	r21, 0xFF	; 255
    3b96:	e4 f3       	brlt	.-8      	; 0x3b90 <__mulsf3_pse+0x84>
    3b98:	98 3e       	cpi	r25, 0xE8	; 232
    3b9a:	d4 f3       	brlt	.-12     	; 0x3b90 <__mulsf3_pse+0x84>
    3b9c:	86 95       	lsr	r24
    3b9e:	77 95       	ror	r23
    3ba0:	67 95       	ror	r22
    3ba2:	b7 95       	ror	r27
    3ba4:	f7 95       	ror	r31
    3ba6:	e7 95       	ror	r30
    3ba8:	9f 5f       	subi	r25, 0xFF	; 255
    3baa:	c1 f7       	brne	.-16     	; 0x3b9c <__mulsf3_pse+0x90>
    3bac:	fe 2b       	or	r31, r30
    3bae:	88 0f       	add	r24, r24
    3bb0:	91 1d       	adc	r25, r1
    3bb2:	96 95       	lsr	r25
    3bb4:	87 95       	ror	r24
    3bb6:	97 f9       	bld	r25, 7
    3bb8:	08 95       	ret

00003bba <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3bba:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3bbc:	91 8d       	ldd	r25, Z+25	; 0x19
    3bbe:	22 8d       	ldd	r18, Z+26	; 0x1a
    3bc0:	89 2f       	mov	r24, r25
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	80 5c       	subi	r24, 0xC0	; 192
    3bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc8:	82 1b       	sub	r24, r18
    3bca:	91 09       	sbc	r25, r1
}
    3bcc:	8f 73       	andi	r24, 0x3F	; 63
    3bce:	99 27       	eor	r25, r25
    3bd0:	08 95       	ret

00003bd2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3bd2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3bd4:	91 8d       	ldd	r25, Z+25	; 0x19
    3bd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bd8:	98 17       	cp	r25, r24
    3bda:	31 f0       	breq	.+12     	; 0x3be8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3bdc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bde:	e8 0f       	add	r30, r24
    3be0:	f1 1d       	adc	r31, r1
    3be2:	85 8d       	ldd	r24, Z+29	; 0x1d
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3be8:	8f ef       	ldi	r24, 0xFF	; 255
    3bea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3bec:	08 95       	ret

00003bee <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3bee:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3bf0:	91 8d       	ldd	r25, Z+25	; 0x19
    3bf2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bf4:	98 17       	cp	r25, r24
    3bf6:	61 f0       	breq	.+24     	; 0x3c10 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3bf8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bfa:	df 01       	movw	r26, r30
    3bfc:	a8 0f       	add	r26, r24
    3bfe:	b1 1d       	adc	r27, r1
    3c00:	5d 96       	adiw	r26, 0x1d	; 29
    3c02:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3c04:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c06:	9f 5f       	subi	r25, 0xFF	; 255
    3c08:	9f 73       	andi	r25, 0x3F	; 63
    3c0a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3c10:	8f ef       	ldi	r24, 0xFF	; 255
    3c12:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3c14:	08 95       	ret

00003c16 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3c16:	fc 01       	movw	r30, r24
    3c18:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3c1a:	44 8d       	ldd	r20, Z+28	; 0x1c
    3c1c:	25 2f       	mov	r18, r21
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	84 2f       	mov	r24, r20
    3c22:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3c24:	82 1b       	sub	r24, r18
    3c26:	93 0b       	sbc	r25, r19
    3c28:	54 17       	cp	r21, r20
    3c2a:	10 f0       	brcs	.+4      	; 0x3c30 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3c2c:	cf 96       	adiw	r24, 0x3f	; 63
    3c2e:	08 95       	ret
  return tail - head - 1;
    3c30:	01 97       	sbiw	r24, 0x01	; 1
}
    3c32:	08 95       	ret

00003c34 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3c34:	86 e7       	ldi	r24, 0x76	; 118
    3c36:	9f e1       	ldi	r25, 0x1F	; 31
    3c38:	89 2b       	or	r24, r25
    3c3a:	49 f0       	breq	.+18     	; 0x3c4e <_Z14serialEventRunv+0x1a>
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	89 2b       	or	r24, r25
    3c42:	29 f0       	breq	.+10     	; 0x3c4e <_Z14serialEventRunv+0x1a>
    3c44:	0e 94 76 1f 	call	0x3eec	; 0x3eec <_Z17Serial0_availablev>
    3c48:	81 11       	cpse	r24, r1
    3c4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3c4e:	08 95       	ret

00003c50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3c50:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3c52:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c54:	df 01       	movw	r26, r30
    3c56:	a8 0f       	add	r26, r24
    3c58:	b1 1d       	adc	r27, r1
    3c5a:	a3 5a       	subi	r26, 0xA3	; 163
    3c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c5e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3c60:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	01 96       	adiw	r24, 0x01	; 1
    3c66:	8f 73       	andi	r24, 0x3F	; 63
    3c68:	99 27       	eor	r25, r25
    3c6a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3c6c:	a6 89       	ldd	r26, Z+22	; 0x16
    3c6e:	b7 89       	ldd	r27, Z+23	; 0x17
    3c70:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3c72:	a0 89       	ldd	r26, Z+16	; 0x10
    3c74:	b1 89       	ldd	r27, Z+17	; 0x11
    3c76:	8c 91       	ld	r24, X
    3c78:	83 70       	andi	r24, 0x03	; 3
    3c7a:	80 64       	ori	r24, 0x40	; 64
    3c7c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3c7e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c80:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c82:	98 13       	cpse	r25, r24
    3c84:	06 c0       	rjmp	.+12     	; 0x3c92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3c86:	02 88       	ldd	r0, Z+18	; 0x12
    3c88:	f3 89       	ldd	r31, Z+19	; 0x13
    3c8a:	e0 2d       	mov	r30, r0
    3c8c:	80 81       	ld	r24, Z
    3c8e:	8f 7d       	andi	r24, 0xDF	; 223
    3c90:	80 83       	st	Z, r24
    3c92:	08 95       	ret

00003c94 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3c94:	ef 92       	push	r14
    3c96:	ff 92       	push	r15
    3c98:	0f 93       	push	r16
    3c9a:	1f 93       	push	r17
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	ec 01       	movw	r28, r24
  _written = true;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3ca6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ca8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3caa:	98 13       	cpse	r25, r24
    3cac:	05 c0       	rjmp	.+10     	; 0x3cb8 <_ZN14HardwareSerial5writeEh+0x24>
    3cae:	e8 89       	ldd	r30, Y+16	; 0x10
    3cb0:	f9 89       	ldd	r31, Y+17	; 0x11
    3cb2:	80 81       	ld	r24, Z
    3cb4:	85 fd       	sbrc	r24, 5
    3cb6:	26 c0       	rjmp	.+76     	; 0x3d04 <_ZN14HardwareSerial5writeEh+0x70>
    3cb8:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3cba:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3cbc:	10 e0       	ldi	r17, 0x00	; 0
    3cbe:	0f 5f       	subi	r16, 0xFF	; 255
    3cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc2:	0f 73       	andi	r16, 0x3F	; 63
    3cc4:	11 27       	eor	r17, r17
    3cc6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3cc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3cca:	e8 12       	cpse	r14, r24
    3ccc:	0c c0       	rjmp	.+24     	; 0x3ce6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	07 fc       	sbrc	r0, 7
    3cd2:	fa cf       	rjmp	.-12     	; 0x3cc8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3cd4:	e8 89       	ldd	r30, Y+16	; 0x10
    3cd6:	f9 89       	ldd	r31, Y+17	; 0x11
    3cd8:	80 81       	ld	r24, Z
    3cda:	85 ff       	sbrs	r24, 5
    3cdc:	f5 cf       	rjmp	.-22     	; 0x3cc8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3cde:	ce 01       	movw	r24, r28
    3ce0:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3ce4:	f1 cf       	rjmp	.-30     	; 0x3cc8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e8 0f       	add	r30, r24
    3cec:	f1 1d       	adc	r31, r1
    3cee:	e3 5a       	subi	r30, 0xA3	; 163
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3cf4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3cf6:	f8 94       	cli
    _tx_buffer_head = i;
    3cf8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3cfa:	ea 89       	ldd	r30, Y+18	; 0x12
    3cfc:	fb 89       	ldd	r31, Y+19	; 0x13
    3cfe:	80 81       	ld	r24, Z
    3d00:	80 62       	ori	r24, 0x20	; 32
    3d02:	0a c0       	rjmp	.+20     	; 0x3d18 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3d04:	9f b7       	in	r25, 0x3f	; 63
    3d06:	f8 94       	cli
      *_udr = c;
    3d08:	ee 89       	ldd	r30, Y+22	; 0x16
    3d0a:	ff 89       	ldd	r31, Y+23	; 0x17
    3d0c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3d0e:	e8 89       	ldd	r30, Y+16	; 0x10
    3d10:	f9 89       	ldd	r31, Y+17	; 0x11
    3d12:	80 81       	ld	r24, Z
    3d14:	83 70       	andi	r24, 0x03	; 3
    3d16:	80 64       	ori	r24, 0x40	; 64
    3d18:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3d1a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	ff 90       	pop	r15
    3d2a:	ef 90       	pop	r14
    3d2c:	08 95       	ret

00003d2e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3d2e:	cf 93       	push	r28
    3d30:	df 93       	push	r29
    3d32:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3d34:	88 8d       	ldd	r24, Y+24	; 0x18
    3d36:	88 23       	and	r24, r24
    3d38:	c9 f0       	breq	.+50     	; 0x3d6c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3d3a:	ea 89       	ldd	r30, Y+18	; 0x12
    3d3c:	fb 89       	ldd	r31, Y+19	; 0x13
    3d3e:	80 81       	ld	r24, Z
    3d40:	85 fd       	sbrc	r24, 5
    3d42:	05 c0       	rjmp	.+10     	; 0x3d4e <_ZN14HardwareSerial5flushEv+0x20>
    3d44:	a8 89       	ldd	r26, Y+16	; 0x10
    3d46:	b9 89       	ldd	r27, Y+17	; 0x11
    3d48:	8c 91       	ld	r24, X
    3d4a:	86 fd       	sbrc	r24, 6
    3d4c:	0f c0       	rjmp	.+30     	; 0x3d6c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3d4e:	0f b6       	in	r0, 0x3f	; 63
    3d50:	07 fc       	sbrc	r0, 7
    3d52:	f5 cf       	rjmp	.-22     	; 0x3d3e <_ZN14HardwareSerial5flushEv+0x10>
    3d54:	80 81       	ld	r24, Z
    3d56:	85 ff       	sbrs	r24, 5
    3d58:	f2 cf       	rjmp	.-28     	; 0x3d3e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3d5a:	a8 89       	ldd	r26, Y+16	; 0x10
    3d5c:	b9 89       	ldd	r27, Y+17	; 0x11
    3d5e:	8c 91       	ld	r24, X
    3d60:	85 ff       	sbrs	r24, 5
    3d62:	ed cf       	rjmp	.-38     	; 0x3d3e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3d64:	ce 01       	movw	r24, r28
    3d66:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3d6a:	e7 cf       	rjmp	.-50     	; 0x3d3a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	08 95       	ret

00003d72 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3d72:	cf 92       	push	r12
    3d74:	df 92       	push	r13
    3d76:	ef 92       	push	r14
    3d78:	ff 92       	push	r15
    3d7a:	1f 93       	push	r17
    3d7c:	cf 93       	push	r28
    3d7e:	df 93       	push	r29
    3d80:	ec 01       	movw	r28, r24
    3d82:	6a 01       	movw	r12, r20
    3d84:	7b 01       	movw	r14, r22
    3d86:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3d88:	e8 89       	ldd	r30, Y+16	; 0x10
    3d8a:	f9 89       	ldd	r31, Y+17	; 0x11
    3d8c:	82 e0       	ldi	r24, 0x02	; 2
    3d8e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3d90:	41 15       	cp	r20, r1
    3d92:	51 4e       	sbci	r21, 0xE1	; 225
    3d94:	61 05       	cpc	r22, r1
    3d96:	71 05       	cpc	r23, r1
    3d98:	b1 f0       	breq	.+44     	; 0x3dc6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3d9a:	60 e0       	ldi	r22, 0x00	; 0
    3d9c:	79 e0       	ldi	r23, 0x09	; 9
    3d9e:	8d e3       	ldi	r24, 0x3D	; 61
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	a7 01       	movw	r20, r14
    3da4:	96 01       	movw	r18, r12
    3da6:	0e 94 c2 23 	call	0x4784	; 0x4784 <__udivmodsi4>
    3daa:	da 01       	movw	r26, r20
    3dac:	c9 01       	movw	r24, r18
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	a1 09       	sbc	r26, r1
    3db2:	b1 09       	sbc	r27, r1
    3db4:	b6 95       	lsr	r27
    3db6:	a7 95       	ror	r26
    3db8:	97 95       	ror	r25
    3dba:	87 95       	ror	r24
    3dbc:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3dbe:	21 15       	cp	r18, r1
    3dc0:	80 e1       	ldi	r24, 0x10	; 16
    3dc2:	38 07       	cpc	r19, r24
    3dc4:	a8 f0       	brcs	.+42     	; 0x3df0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3dc6:	e8 89       	ldd	r30, Y+16	; 0x10
    3dc8:	f9 89       	ldd	r31, Y+17	; 0x11
    3dca:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3dcc:	60 e8       	ldi	r22, 0x80	; 128
    3dce:	74 e8       	ldi	r23, 0x84	; 132
    3dd0:	8e e1       	ldi	r24, 0x1E	; 30
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	a7 01       	movw	r20, r14
    3dd6:	96 01       	movw	r18, r12
    3dd8:	0e 94 c2 23 	call	0x4784	; 0x4784 <__udivmodsi4>
    3ddc:	da 01       	movw	r26, r20
    3dde:	c9 01       	movw	r24, r18
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	a1 09       	sbc	r26, r1
    3de4:	b1 09       	sbc	r27, r1
    3de6:	b6 95       	lsr	r27
    3de8:	a7 95       	ror	r26
    3dea:	97 95       	ror	r25
    3dec:	87 95       	ror	r24
    3dee:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3df0:	ec 85       	ldd	r30, Y+12	; 0x0c
    3df2:	fd 85       	ldd	r31, Y+13	; 0x0d
    3df4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3df6:	ee 85       	ldd	r30, Y+14	; 0x0e
    3df8:	ff 85       	ldd	r31, Y+15	; 0x0f
    3dfa:	20 83       	st	Z, r18

  _written = false;
    3dfc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3dfe:	ec 89       	ldd	r30, Y+20	; 0x14
    3e00:	fd 89       	ldd	r31, Y+21	; 0x15
    3e02:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3e04:	ea 89       	ldd	r30, Y+18	; 0x12
    3e06:	fb 89       	ldd	r31, Y+19	; 0x13
    3e08:	80 81       	ld	r24, Z
    3e0a:	80 61       	ori	r24, 0x10	; 16
    3e0c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3e0e:	ea 89       	ldd	r30, Y+18	; 0x12
    3e10:	fb 89       	ldd	r31, Y+19	; 0x13
    3e12:	80 81       	ld	r24, Z
    3e14:	88 60       	ori	r24, 0x08	; 8
    3e16:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3e18:	ea 89       	ldd	r30, Y+18	; 0x12
    3e1a:	fb 89       	ldd	r31, Y+19	; 0x13
    3e1c:	80 81       	ld	r24, Z
    3e1e:	80 68       	ori	r24, 0x80	; 128
    3e20:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3e22:	ea 89       	ldd	r30, Y+18	; 0x12
    3e24:	fb 89       	ldd	r31, Y+19	; 0x13
    3e26:	80 81       	ld	r24, Z
    3e28:	8f 7d       	andi	r24, 0xDF	; 223
    3e2a:	80 83       	st	Z, r24
}
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	ff 90       	pop	r15
    3e34:	ef 90       	pop	r14
    3e36:	df 90       	pop	r13
    3e38:	cf 90       	pop	r12
    3e3a:	08 95       	ret

00003e3c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3e3c:	1f 92       	push	r1
    3e3e:	0f 92       	push	r0
    3e40:	0f b6       	in	r0, 0x3f	; 63
    3e42:	0f 92       	push	r0
    3e44:	11 24       	eor	r1, r1
    3e46:	2f 93       	push	r18
    3e48:	8f 93       	push	r24
    3e4a:	9f 93       	push	r25
    3e4c:	ef 93       	push	r30
    3e4e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3e50:	e0 91 49 03 	lds	r30, 0x0349	; 0x800349 <Serial+0x10>
    3e54:	f0 91 4a 03 	lds	r31, 0x034A	; 0x80034a <Serial+0x11>
    3e58:	80 81       	ld	r24, Z
    3e5a:	e0 91 4f 03 	lds	r30, 0x034F	; 0x80034f <Serial+0x16>
    3e5e:	f0 91 50 03 	lds	r31, 0x0350	; 0x800350 <Serial+0x17>
    3e62:	82 fd       	sbrc	r24, 2
    3e64:	12 c0       	rjmp	.+36     	; 0x3e8a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3e66:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3e68:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <Serial+0x19>
    3e6c:	8f 5f       	subi	r24, 0xFF	; 255
    3e6e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3e70:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <Serial+0x1a>
    3e74:	82 17       	cp	r24, r18
    3e76:	51 f0       	breq	.+20     	; 0x3e8c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3e78:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <Serial+0x19>
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	e7 5c       	subi	r30, 0xC7	; 199
    3e80:	fc 4f       	sbci	r31, 0xFC	; 252
    3e82:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3e84:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <Serial+0x19>
    3e88:	01 c0       	rjmp	.+2      	; 0x3e8c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3e8a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3e8c:	ff 91       	pop	r31
    3e8e:	ef 91       	pop	r30
    3e90:	9f 91       	pop	r25
    3e92:	8f 91       	pop	r24
    3e94:	2f 91       	pop	r18
    3e96:	0f 90       	pop	r0
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	0f 90       	pop	r0
    3e9c:	1f 90       	pop	r1
    3e9e:	18 95       	reti

00003ea0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3ea0:	1f 92       	push	r1
    3ea2:	0f 92       	push	r0
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	0f 92       	push	r0
    3ea8:	11 24       	eor	r1, r1
    3eaa:	2f 93       	push	r18
    3eac:	3f 93       	push	r19
    3eae:	4f 93       	push	r20
    3eb0:	5f 93       	push	r21
    3eb2:	6f 93       	push	r22
    3eb4:	7f 93       	push	r23
    3eb6:	8f 93       	push	r24
    3eb8:	9f 93       	push	r25
    3eba:	af 93       	push	r26
    3ebc:	bf 93       	push	r27
    3ebe:	ef 93       	push	r30
    3ec0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3ec2:	89 e3       	ldi	r24, 0x39	; 57
    3ec4:	93 e0       	ldi	r25, 0x03	; 3
    3ec6:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3eca:	ff 91       	pop	r31
    3ecc:	ef 91       	pop	r30
    3ece:	bf 91       	pop	r27
    3ed0:	af 91       	pop	r26
    3ed2:	9f 91       	pop	r25
    3ed4:	8f 91       	pop	r24
    3ed6:	7f 91       	pop	r23
    3ed8:	6f 91       	pop	r22
    3eda:	5f 91       	pop	r21
    3edc:	4f 91       	pop	r20
    3ede:	3f 91       	pop	r19
    3ee0:	2f 91       	pop	r18
    3ee2:	0f 90       	pop	r0
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	0f 90       	pop	r0
    3ee8:	1f 90       	pop	r1
    3eea:	18 95       	reti

00003eec <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3eec:	89 e3       	ldi	r24, 0x39	; 57
    3eee:	93 e0       	ldi	r25, 0x03	; 3
    3ef0:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZN14HardwareSerial9availableEv>
    3ef4:	21 e0       	ldi	r18, 0x01	; 1
    3ef6:	89 2b       	or	r24, r25
    3ef8:	09 f4       	brne	.+2      	; 0x3efc <_Z17Serial0_availablev+0x10>
    3efa:	20 e0       	ldi	r18, 0x00	; 0
}
    3efc:	82 2f       	mov	r24, r18
    3efe:	08 95       	ret

00003f00 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3f00:	e9 e3       	ldi	r30, 0x39	; 57
    3f02:	f3 e0       	ldi	r31, 0x03	; 3
    3f04:	13 82       	std	Z+3, r1	; 0x03
    3f06:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3f08:	88 ee       	ldi	r24, 0xE8	; 232
    3f0a:	93 e0       	ldi	r25, 0x03	; 3
    3f0c:	a0 e0       	ldi	r26, 0x00	; 0
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	84 83       	std	Z+4, r24	; 0x04
    3f12:	95 83       	std	Z+5, r25	; 0x05
    3f14:	a6 83       	std	Z+6, r26	; 0x06
    3f16:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3f18:	83 ec       	ldi	r24, 0xC3	; 195
    3f1a:	91 e0       	ldi	r25, 0x01	; 1
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	80 83       	st	Z, r24
    3f20:	85 ec       	ldi	r24, 0xC5	; 197
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	95 87       	std	Z+13, r25	; 0x0d
    3f26:	84 87       	std	Z+12, r24	; 0x0c
    3f28:	84 ec       	ldi	r24, 0xC4	; 196
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	97 87       	std	Z+15, r25	; 0x0f
    3f2e:	86 87       	std	Z+14, r24	; 0x0e
    3f30:	80 ec       	ldi	r24, 0xC0	; 192
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	91 8b       	std	Z+17, r25	; 0x11
    3f36:	80 8b       	std	Z+16, r24	; 0x10
    3f38:	81 ec       	ldi	r24, 0xC1	; 193
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	93 8b       	std	Z+19, r25	; 0x13
    3f3e:	82 8b       	std	Z+18, r24	; 0x12
    3f40:	82 ec       	ldi	r24, 0xC2	; 194
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	95 8b       	std	Z+21, r25	; 0x15
    3f46:	84 8b       	std	Z+20, r24	; 0x14
    3f48:	86 ec       	ldi	r24, 0xC6	; 198
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	97 8b       	std	Z+23, r25	; 0x17
    3f4e:	86 8b       	std	Z+22, r24	; 0x16
    3f50:	11 8e       	std	Z+25, r1	; 0x19
    3f52:	12 8e       	std	Z+26, r1	; 0x1a
    3f54:	13 8e       	std	Z+27, r1	; 0x1b
    3f56:	14 8e       	std	Z+28, r1	; 0x1c
    3f58:	08 95       	ret

00003f5a <initVariant>:
    3f5a:	08 95       	ret

00003f5c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3f5c:	0e 94 c4 22 	call	0x4588	; 0x4588 <init>

	initVariant();
    3f60:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3f64:	0e 94 cf 10 	call	0x219e	; 0x219e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3f68:	ca e1       	ldi	r28, 0x1A	; 26
    3f6a:	de e1       	ldi	r29, 0x1E	; 30
#endif
	
	setup();
    
	for (;;) {
		loop();
    3f6c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <loop>
		if (serialEventRun) serialEventRun();
    3f70:	20 97       	sbiw	r28, 0x00	; 0
    3f72:	e1 f3       	breq	.-8      	; 0x3f6c <main+0x10>
    3f74:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <_Z14serialEventRunv>
    3f78:	f9 cf       	rjmp	.-14     	; 0x3f6c <main+0x10>

00003f7a <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3f7a:	cf 92       	push	r12
    3f7c:	df 92       	push	r13
    3f7e:	ef 92       	push	r14
    3f80:	ff 92       	push	r15
    3f82:	0f 93       	push	r16
    3f84:	1f 93       	push	r17
    3f86:	cf 93       	push	r28
    3f88:	df 93       	push	r29
    3f8a:	6c 01       	movw	r12, r24
    3f8c:	7a 01       	movw	r14, r20
    3f8e:	8b 01       	movw	r16, r22
    3f90:	c0 e0       	ldi	r28, 0x00	; 0
    3f92:	d0 e0       	ldi	r29, 0x00	; 0
    3f94:	ce 15       	cp	r28, r14
    3f96:	df 05       	cpc	r29, r15
    3f98:	81 f0       	breq	.+32     	; 0x3fba <_ZN5Print5writeEPKhj+0x40>
    3f9a:	d8 01       	movw	r26, r16
    3f9c:	6d 91       	ld	r22, X+
    3f9e:	8d 01       	movw	r16, r26
    3fa0:	d6 01       	movw	r26, r12
    3fa2:	ed 91       	ld	r30, X+
    3fa4:	fc 91       	ld	r31, X
    3fa6:	01 90       	ld	r0, Z+
    3fa8:	f0 81       	ld	r31, Z
    3faa:	e0 2d       	mov	r30, r0
    3fac:	c6 01       	movw	r24, r12
    3fae:	09 95       	icall
    3fb0:	89 2b       	or	r24, r25
    3fb2:	11 f0       	breq	.+4      	; 0x3fb8 <_ZN5Print5writeEPKhj+0x3e>
    3fb4:	21 96       	adiw	r28, 0x01	; 1
    3fb6:	ee cf       	rjmp	.-36     	; 0x3f94 <_ZN5Print5writeEPKhj+0x1a>
    3fb8:	7e 01       	movw	r14, r28
    3fba:	c7 01       	movw	r24, r14
    3fbc:	df 91       	pop	r29
    3fbe:	cf 91       	pop	r28
    3fc0:	1f 91       	pop	r17
    3fc2:	0f 91       	pop	r16
    3fc4:	ff 90       	pop	r15
    3fc6:	ef 90       	pop	r14
    3fc8:	df 90       	pop	r13
    3fca:	cf 90       	pop	r12
    3fcc:	08 95       	ret

00003fce <_ZN5Print5writeEPKc>:
    3fce:	61 15       	cp	r22, r1
    3fd0:	71 05       	cpc	r23, r1
    3fd2:	79 f0       	breq	.+30     	; 0x3ff2 <_ZN5Print5writeEPKc+0x24>
    3fd4:	fb 01       	movw	r30, r22
    3fd6:	01 90       	ld	r0, Z+
    3fd8:	00 20       	and	r0, r0
    3fda:	e9 f7       	brne	.-6      	; 0x3fd6 <_ZN5Print5writeEPKc+0x8>
    3fdc:	31 97       	sbiw	r30, 0x01	; 1
    3fde:	af 01       	movw	r20, r30
    3fe0:	46 1b       	sub	r20, r22
    3fe2:	57 0b       	sbc	r21, r23
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	ed 91       	ld	r30, X+
    3fe8:	fc 91       	ld	r31, X
    3fea:	02 80       	ldd	r0, Z+2	; 0x02
    3fec:	f3 81       	ldd	r31, Z+3	; 0x03
    3fee:	e0 2d       	mov	r30, r0
    3ff0:	09 94       	ijmp
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	08 95       	ret

00003ff8 <_ZN5Print5printEPK19__FlashStringHelper>:
    3ff8:	ef 92       	push	r14
    3ffa:	ff 92       	push	r15
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	8c 01       	movw	r16, r24
    4006:	7b 01       	movw	r14, r22
    4008:	c0 e0       	ldi	r28, 0x00	; 0
    400a:	d0 e0       	ldi	r29, 0x00	; 0
    400c:	f7 01       	movw	r30, r14
    400e:	ec 0f       	add	r30, r28
    4010:	fd 1f       	adc	r31, r29
    4012:	64 91       	lpm	r22, Z
    4014:	66 23       	and	r22, r22
    4016:	61 f0       	breq	.+24     	; 0x4030 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4018:	d8 01       	movw	r26, r16
    401a:	ed 91       	ld	r30, X+
    401c:	fc 91       	ld	r31, X
    401e:	01 90       	ld	r0, Z+
    4020:	f0 81       	ld	r31, Z
    4022:	e0 2d       	mov	r30, r0
    4024:	c8 01       	movw	r24, r16
    4026:	09 95       	icall
    4028:	89 2b       	or	r24, r25
    402a:	11 f0       	breq	.+4      	; 0x4030 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    402c:	21 96       	adiw	r28, 0x01	; 1
    402e:	ee cf       	rjmp	.-36     	; 0x400c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    4030:	ce 01       	movw	r24, r28
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	1f 91       	pop	r17
    4038:	0f 91       	pop	r16
    403a:	ff 90       	pop	r15
    403c:	ef 90       	pop	r14
    403e:	08 95       	ret

00004040 <_ZN5Print5printEc>:
    4040:	dc 01       	movw	r26, r24
    4042:	ed 91       	ld	r30, X+
    4044:	fc 91       	ld	r31, X
    4046:	01 90       	ld	r0, Z+
    4048:	f0 81       	ld	r31, Z
    404a:	e0 2d       	mov	r30, r0
    404c:	09 94       	ijmp

0000404e <_ZN5Print7printlnEv>:
    404e:	61 ed       	ldi	r22, 0xD1	; 209
    4050:	71 e0       	ldi	r23, 0x01	; 1
    4052:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <_ZN5Print5writeEPKc>

00004056 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	ec 01       	movw	r28, r24
    4060:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_ZN5Print5printEPK19__FlashStringHelper>
    4064:	8c 01       	movw	r16, r24
    4066:	ce 01       	movw	r24, r28
    4068:	0e 94 27 20 	call	0x404e	; 0x404e <_ZN5Print7printlnEv>
    406c:	80 0f       	add	r24, r16
    406e:	91 1f       	adc	r25, r17
    4070:	df 91       	pop	r29
    4072:	cf 91       	pop	r28
    4074:	1f 91       	pop	r17
    4076:	0f 91       	pop	r16
    4078:	08 95       	ret

0000407a <_ZN5Print11printNumberEmh>:
    407a:	8f 92       	push	r8
    407c:	9f 92       	push	r9
    407e:	af 92       	push	r10
    4080:	bf 92       	push	r11
    4082:	ef 92       	push	r14
    4084:	ff 92       	push	r15
    4086:	0f 93       	push	r16
    4088:	1f 93       	push	r17
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	a1 97       	sbiw	r28, 0x21	; 33
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	f8 94       	cli
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	cd bf       	out	0x3d, r28	; 61
    409e:	7c 01       	movw	r14, r24
    40a0:	fa 01       	movw	r30, r20
    40a2:	cb 01       	movw	r24, r22
    40a4:	19 a2       	std	Y+33, r1	; 0x21
    40a6:	22 30       	cpi	r18, 0x02	; 2
    40a8:	08 f4       	brcc	.+2      	; 0x40ac <_ZN5Print11printNumberEmh+0x32>
    40aa:	2a e0       	ldi	r18, 0x0A	; 10
    40ac:	8e 01       	movw	r16, r28
    40ae:	0f 5d       	subi	r16, 0xDF	; 223
    40b0:	1f 4f       	sbci	r17, 0xFF	; 255
    40b2:	82 2e       	mov	r8, r18
    40b4:	91 2c       	mov	r9, r1
    40b6:	a1 2c       	mov	r10, r1
    40b8:	b1 2c       	mov	r11, r1
    40ba:	bf 01       	movw	r22, r30
    40bc:	a5 01       	movw	r20, r10
    40be:	94 01       	movw	r18, r8
    40c0:	0e 94 c2 23 	call	0x4784	; 0x4784 <__udivmodsi4>
    40c4:	f9 01       	movw	r30, r18
    40c6:	ca 01       	movw	r24, r20
    40c8:	01 50       	subi	r16, 0x01	; 1
    40ca:	11 09       	sbc	r17, r1
    40cc:	6a 30       	cpi	r22, 0x0A	; 10
    40ce:	10 f4       	brcc	.+4      	; 0x40d4 <_ZN5Print11printNumberEmh+0x5a>
    40d0:	60 5d       	subi	r22, 0xD0	; 208
    40d2:	01 c0       	rjmp	.+2      	; 0x40d6 <_ZN5Print11printNumberEmh+0x5c>
    40d4:	69 5c       	subi	r22, 0xC9	; 201
    40d6:	d8 01       	movw	r26, r16
    40d8:	6c 93       	st	X, r22
    40da:	23 2b       	or	r18, r19
    40dc:	24 2b       	or	r18, r20
    40de:	25 2b       	or	r18, r21
    40e0:	61 f7       	brne	.-40     	; 0x40ba <_ZN5Print11printNumberEmh+0x40>
    40e2:	b8 01       	movw	r22, r16
    40e4:	c7 01       	movw	r24, r14
    40e6:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <_ZN5Print5writeEPKc>
    40ea:	a1 96       	adiw	r28, 0x21	; 33
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	f8 94       	cli
    40f0:	de bf       	out	0x3e, r29	; 62
    40f2:	0f be       	out	0x3f, r0	; 63
    40f4:	cd bf       	out	0x3d, r28	; 61
    40f6:	df 91       	pop	r29
    40f8:	cf 91       	pop	r28
    40fa:	1f 91       	pop	r17
    40fc:	0f 91       	pop	r16
    40fe:	ff 90       	pop	r15
    4100:	ef 90       	pop	r14
    4102:	bf 90       	pop	r11
    4104:	af 90       	pop	r10
    4106:	9f 90       	pop	r9
    4108:	8f 90       	pop	r8
    410a:	08 95       	ret

0000410c <_ZN5Print5printEmi>:
    410c:	21 15       	cp	r18, r1
    410e:	31 05       	cpc	r19, r1
    4110:	41 f4       	brne	.+16     	; 0x4122 <_ZN5Print5printEmi+0x16>
    4112:	dc 01       	movw	r26, r24
    4114:	ed 91       	ld	r30, X+
    4116:	fc 91       	ld	r31, X
    4118:	01 90       	ld	r0, Z+
    411a:	f0 81       	ld	r31, Z
    411c:	e0 2d       	mov	r30, r0
    411e:	64 2f       	mov	r22, r20
    4120:	09 94       	ijmp
    4122:	0c 94 3d 20 	jmp	0x407a	; 0x407a <_ZN5Print11printNumberEmh>

00004126 <_ZN5Print5printEhi>:
    4126:	9a 01       	movw	r18, r20
    4128:	46 2f       	mov	r20, r22
    412a:	50 e0       	ldi	r21, 0x00	; 0
    412c:	60 e0       	ldi	r22, 0x00	; 0
    412e:	70 e0       	ldi	r23, 0x00	; 0
    4130:	0c 94 86 20 	jmp	0x410c	; 0x410c <_ZN5Print5printEmi>

00004134 <_ZN5Print7printlnEhi>:
    4134:	0f 93       	push	r16
    4136:	1f 93       	push	r17
    4138:	cf 93       	push	r28
    413a:	df 93       	push	r29
    413c:	ec 01       	movw	r28, r24
    413e:	0e 94 93 20 	call	0x4126	; 0x4126 <_ZN5Print5printEhi>
    4142:	8c 01       	movw	r16, r24
    4144:	ce 01       	movw	r24, r28
    4146:	0e 94 27 20 	call	0x404e	; 0x404e <_ZN5Print7printlnEv>
    414a:	80 0f       	add	r24, r16
    414c:	91 1f       	adc	r25, r17
    414e:	df 91       	pop	r29
    4150:	cf 91       	pop	r28
    4152:	1f 91       	pop	r17
    4154:	0f 91       	pop	r16
    4156:	08 95       	ret

00004158 <_ZN5Print5printEji>:
    4158:	9a 01       	movw	r18, r20
    415a:	ab 01       	movw	r20, r22
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	70 e0       	ldi	r23, 0x00	; 0
    4160:	0c 94 86 20 	jmp	0x410c	; 0x410c <_ZN5Print5printEmi>

00004164 <_ZN5Print5printEli>:
    4164:	cf 92       	push	r12
    4166:	df 92       	push	r13
    4168:	ef 92       	push	r14
    416a:	ff 92       	push	r15
    416c:	0f 93       	push	r16
    416e:	1f 93       	push	r17
    4170:	cf 93       	push	r28
    4172:	df 93       	push	r29
    4174:	21 15       	cp	r18, r1
    4176:	31 05       	cpc	r19, r1
    4178:	81 f4       	brne	.+32     	; 0x419a <_ZN5Print5printEli+0x36>
    417a:	dc 01       	movw	r26, r24
    417c:	ed 91       	ld	r30, X+
    417e:	fc 91       	ld	r31, X
    4180:	01 90       	ld	r0, Z+
    4182:	f0 81       	ld	r31, Z
    4184:	e0 2d       	mov	r30, r0
    4186:	64 2f       	mov	r22, r20
    4188:	df 91       	pop	r29
    418a:	cf 91       	pop	r28
    418c:	1f 91       	pop	r17
    418e:	0f 91       	pop	r16
    4190:	ff 90       	pop	r15
    4192:	ef 90       	pop	r14
    4194:	df 90       	pop	r13
    4196:	cf 90       	pop	r12
    4198:	09 94       	ijmp
    419a:	2a 30       	cpi	r18, 0x0A	; 10
    419c:	31 05       	cpc	r19, r1
    419e:	01 f5       	brne	.+64     	; 0x41e0 <_ZN5Print5printEli+0x7c>
    41a0:	77 ff       	sbrs	r23, 7
    41a2:	1d c0       	rjmp	.+58     	; 0x41de <_ZN5Print5printEli+0x7a>
    41a4:	6a 01       	movw	r12, r20
    41a6:	7b 01       	movw	r14, r22
    41a8:	ec 01       	movw	r28, r24
    41aa:	6d e2       	ldi	r22, 0x2D	; 45
    41ac:	0e 94 20 20 	call	0x4040	; 0x4040 <_ZN5Print5printEc>
    41b0:	8c 01       	movw	r16, r24
    41b2:	44 27       	eor	r20, r20
    41b4:	55 27       	eor	r21, r21
    41b6:	ba 01       	movw	r22, r20
    41b8:	4c 19       	sub	r20, r12
    41ba:	5d 09       	sbc	r21, r13
    41bc:	6e 09       	sbc	r22, r14
    41be:	7f 09       	sbc	r23, r15
    41c0:	2a e0       	ldi	r18, 0x0A	; 10
    41c2:	ce 01       	movw	r24, r28
    41c4:	0e 94 3d 20 	call	0x407a	; 0x407a <_ZN5Print11printNumberEmh>
    41c8:	80 0f       	add	r24, r16
    41ca:	91 1f       	adc	r25, r17
    41cc:	df 91       	pop	r29
    41ce:	cf 91       	pop	r28
    41d0:	1f 91       	pop	r17
    41d2:	0f 91       	pop	r16
    41d4:	ff 90       	pop	r15
    41d6:	ef 90       	pop	r14
    41d8:	df 90       	pop	r13
    41da:	cf 90       	pop	r12
    41dc:	08 95       	ret
    41de:	2a e0       	ldi	r18, 0x0A	; 10
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	1f 91       	pop	r17
    41e6:	0f 91       	pop	r16
    41e8:	ff 90       	pop	r15
    41ea:	ef 90       	pop	r14
    41ec:	df 90       	pop	r13
    41ee:	cf 90       	pop	r12
    41f0:	0c 94 3d 20 	jmp	0x407a	; 0x407a <_ZN5Print11printNumberEmh>

000041f4 <_ZN5Print5printEii>:
    41f4:	9a 01       	movw	r18, r20
    41f6:	ab 01       	movw	r20, r22
    41f8:	77 0f       	add	r23, r23
    41fa:	66 0b       	sbc	r22, r22
    41fc:	77 0b       	sbc	r23, r23
    41fe:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <_ZN5Print5printEli>

00004202 <_ZN5Print7printlnEii>:
    4202:	0f 93       	push	r16
    4204:	1f 93       	push	r17
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	ec 01       	movw	r28, r24
    420c:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN5Print5printEii>
    4210:	8c 01       	movw	r16, r24
    4212:	ce 01       	movw	r24, r28
    4214:	0e 94 27 20 	call	0x404e	; 0x404e <_ZN5Print7printlnEv>
    4218:	80 0f       	add	r24, r16
    421a:	91 1f       	adc	r25, r17
    421c:	df 91       	pop	r29
    421e:	cf 91       	pop	r28
    4220:	1f 91       	pop	r17
    4222:	0f 91       	pop	r16
    4224:	08 95       	ret

00004226 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    4226:	7f 92       	push	r7
    4228:	8f 92       	push	r8
    422a:	9f 92       	push	r9
    422c:	af 92       	push	r10
    422e:	bf 92       	push	r11
    4230:	cf 92       	push	r12
    4232:	df 92       	push	r13
    4234:	ef 92       	push	r14
    4236:	ff 92       	push	r15
    4238:	0f 93       	push	r16
    423a:	1f 93       	push	r17
    423c:	cf 93       	push	r28
    423e:	df 93       	push	r29
    4240:	8c 01       	movw	r16, r24
    4242:	6a 01       	movw	r12, r20
    4244:	7b 01       	movw	r14, r22
    4246:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    4248:	9a 01       	movw	r18, r20
    424a:	ab 01       	movw	r20, r22
    424c:	c7 01       	movw	r24, r14
    424e:	b6 01       	movw	r22, r12
    4250:	0e 94 bd 23 	call	0x477a	; 0x477a <__unordsf2>
    4254:	88 23       	and	r24, r24
    4256:	19 f0       	breq	.+6      	; 0x425e <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4258:	64 ed       	ldi	r22, 0xD4	; 212
    425a:	71 e0       	ldi	r23, 0x01	; 1
    425c:	27 c0       	rjmp	.+78     	; 0x42ac <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    425e:	46 01       	movw	r8, r12
    4260:	57 01       	movw	r10, r14
    4262:	e8 94       	clt
    4264:	b7 f8       	bld	r11, 7
    4266:	2f ef       	ldi	r18, 0xFF	; 255
    4268:	3f ef       	ldi	r19, 0xFF	; 255
    426a:	4f e7       	ldi	r20, 0x7F	; 127
    426c:	5f e7       	ldi	r21, 0x7F	; 127
    426e:	c5 01       	movw	r24, r10
    4270:	b4 01       	movw	r22, r8
    4272:	0e 94 bd 23 	call	0x477a	; 0x477a <__unordsf2>
    4276:	81 11       	cpse	r24, r1
    4278:	0d c0       	rjmp	.+26     	; 0x4294 <_ZN5Print10printFloatEdh+0x6e>
    427a:	2f ef       	ldi	r18, 0xFF	; 255
    427c:	3f ef       	ldi	r19, 0xFF	; 255
    427e:	4f e7       	ldi	r20, 0x7F	; 127
    4280:	5f e7       	ldi	r21, 0x7F	; 127
    4282:	c5 01       	movw	r24, r10
    4284:	b4 01       	movw	r22, r8
    4286:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    428a:	18 16       	cp	r1, r24
    428c:	1c f4       	brge	.+6      	; 0x4294 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    428e:	68 ed       	ldi	r22, 0xD8	; 216
    4290:	71 e0       	ldi	r23, 0x01	; 1
    4292:	0c c0       	rjmp	.+24     	; 0x42ac <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    4294:	2f ef       	ldi	r18, 0xFF	; 255
    4296:	3f ef       	ldi	r19, 0xFF	; 255
    4298:	4f e7       	ldi	r20, 0x7F	; 127
    429a:	5f e4       	ldi	r21, 0x4F	; 79
    429c:	c7 01       	movw	r24, r14
    429e:	b6 01       	movw	r22, r12
    42a0:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__gesf2>
    42a4:	18 16       	cp	r1, r24
    42a6:	94 f4       	brge	.+36     	; 0x42cc <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    42a8:	6c ed       	ldi	r22, 0xDC	; 220
    42aa:	71 e0       	ldi	r23, 0x01	; 1
    42ac:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    42ae:	df 91       	pop	r29
    42b0:	cf 91       	pop	r28
    42b2:	1f 91       	pop	r17
    42b4:	0f 91       	pop	r16
    42b6:	ff 90       	pop	r15
    42b8:	ef 90       	pop	r14
    42ba:	df 90       	pop	r13
    42bc:	cf 90       	pop	r12
    42be:	bf 90       	pop	r11
    42c0:	af 90       	pop	r10
    42c2:	9f 90       	pop	r9
    42c4:	8f 90       	pop	r8
    42c6:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    42c8:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    42cc:	2f ef       	ldi	r18, 0xFF	; 255
    42ce:	3f ef       	ldi	r19, 0xFF	; 255
    42d0:	4f e7       	ldi	r20, 0x7F	; 127
    42d2:	5f ec       	ldi	r21, 0xCF	; 207
    42d4:	c7 01       	movw	r24, r14
    42d6:	b6 01       	movw	r22, r12
    42d8:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    42dc:	87 fd       	sbrc	r24, 7
    42de:	e4 cf       	rjmp	.-56     	; 0x42a8 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	a9 01       	movw	r20, r18
    42e6:	c7 01       	movw	r24, r14
    42e8:	b6 01       	movw	r22, r12
    42ea:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__cmpsf2>
    42ee:	87 ff       	sbrs	r24, 7
    42f0:	0a c0       	rjmp	.+20     	; 0x4306 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    42f2:	6d e2       	ldi	r22, 0x2D	; 45
    42f4:	c8 01       	movw	r24, r16
    42f6:	0e 94 20 20 	call	0x4040	; 0x4040 <_ZN5Print5printEc>
    42fa:	ec 01       	movw	r28, r24
     number = -number;
    42fc:	f7 fa       	bst	r15, 7
    42fe:	f0 94       	com	r15
    4300:	f7 f8       	bld	r15, 7
    4302:	f0 94       	com	r15
    4304:	02 c0       	rjmp	.+4      	; 0x430a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4306:	c0 e0       	ldi	r28, 0x00	; 0
    4308:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    430a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    430c:	60 e0       	ldi	r22, 0x00	; 0
    430e:	70 e0       	ldi	r23, 0x00	; 0
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    4314:	7b 14       	cp	r7, r11
    4316:	41 f0       	breq	.+16     	; 0x4328 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	40 e2       	ldi	r20, 0x20	; 32
    431e:	51 e4       	ldi	r21, 0x41	; 65
    4320:	0e 94 11 1c 	call	0x3822	; 0x3822 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4324:	b3 94       	inc	r11
    4326:	f6 cf       	rjmp	.-20     	; 0x4314 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    4328:	a7 01       	movw	r20, r14
    432a:	96 01       	movw	r18, r12
    432c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__addsf3>
    4330:	6b 01       	movw	r12, r22
    4332:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4334:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__fixunssfsi>
    4338:	4b 01       	movw	r8, r22
    433a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    433c:	2a e0       	ldi	r18, 0x0A	; 10
    433e:	ab 01       	movw	r20, r22
    4340:	bc 01       	movw	r22, r24
    4342:	c8 01       	movw	r24, r16
    4344:	0e 94 3d 20 	call	0x407a	; 0x407a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    4348:	c8 0f       	add	r28, r24
    434a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    434c:	77 20       	and	r7, r7
    434e:	b9 f1       	breq	.+110    	; 0x43be <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4350:	c5 01       	movw	r24, r10
    4352:	b4 01       	movw	r22, r8
    4354:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__floatunsisf>
    4358:	9b 01       	movw	r18, r22
    435a:	ac 01       	movw	r20, r24
    435c:	c7 01       	movw	r24, r14
    435e:	b6 01       	movw	r22, r12
    4360:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
    4364:	6b 01       	movw	r12, r22
    4366:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    4368:	6e e2       	ldi	r22, 0x2E	; 46
    436a:	c8 01       	movw	r24, r16
    436c:	0e 94 20 20 	call	0x4040	; 0x4040 <_ZN5Print5printEc>
    4370:	c8 0f       	add	r28, r24
    4372:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e2       	ldi	r20, 0x20	; 32
    437a:	51 e4       	ldi	r21, 0x41	; 65
    437c:	c7 01       	movw	r24, r14
    437e:	b6 01       	movw	r22, r12
    4380:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3>
    4384:	4b 01       	movw	r8, r22
    4386:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    4388:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__fixunssfsi>
    438c:	6b 01       	movw	r12, r22
    438e:	7c 01       	movw	r14, r24
    n += print(toPrint);
    4390:	4a e0       	ldi	r20, 0x0A	; 10
    4392:	50 e0       	ldi	r21, 0x00	; 0
    4394:	c8 01       	movw	r24, r16
    4396:	0e 94 ac 20 	call	0x4158	; 0x4158 <_ZN5Print5printEji>
    439a:	c8 0f       	add	r28, r24
    439c:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    439e:	b6 01       	movw	r22, r12
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	0e 94 b9 1c 	call	0x3972	; 0x3972 <__floatunsisf>
    43a8:	9b 01       	movw	r18, r22
    43aa:	ac 01       	movw	r20, r24
    43ac:	c5 01       	movw	r24, r10
    43ae:	b4 01       	movw	r22, r8
    43b0:	0e 94 9f 1b 	call	0x373e	; 0x373e <__subsf3>
    43b4:	6b 01       	movw	r12, r22
    43b6:	7c 01       	movw	r14, r24
    43b8:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    43ba:	71 10       	cpse	r7, r1
    43bc:	db cf       	rjmp	.-74     	; 0x4374 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    43be:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    43c0:	df 91       	pop	r29
    43c2:	cf 91       	pop	r28
    43c4:	1f 91       	pop	r17
    43c6:	0f 91       	pop	r16
    43c8:	ff 90       	pop	r15
    43ca:	ef 90       	pop	r14
    43cc:	df 90       	pop	r13
    43ce:	cf 90       	pop	r12
    43d0:	bf 90       	pop	r11
    43d2:	af 90       	pop	r10
    43d4:	9f 90       	pop	r9
    43d6:	8f 90       	pop	r8
    43d8:	7f 90       	pop	r7
    43da:	08 95       	ret

000043dc <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    43dc:	0c 94 13 21 	jmp	0x4226	; 0x4226 <_ZN5Print10printFloatEdh>

000043e0 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    43e0:	0f 93       	push	r16
    43e2:	1f 93       	push	r17
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    43ea:	0e 94 13 21 	call	0x4226	; 0x4226 <_ZN5Print10printFloatEdh>
    43ee:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    43f0:	ce 01       	movw	r24, r28
    43f2:	0e 94 27 20 	call	0x404e	; 0x404e <_ZN5Print7printlnEv>
  return n;
}
    43f6:	80 0f       	add	r24, r16
    43f8:	91 1f       	adc	r25, r17
    43fa:	df 91       	pop	r29
    43fc:	cf 91       	pop	r28
    43fe:	1f 91       	pop	r17
    4400:	0f 91       	pop	r16
    4402:	08 95       	ret

00004404 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4404:	1f 92       	push	r1
    4406:	0f 92       	push	r0
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	0f 92       	push	r0
    440c:	11 24       	eor	r1, r1
    440e:	2f 93       	push	r18
    4410:	3f 93       	push	r19
    4412:	8f 93       	push	r24
    4414:	9f 93       	push	r25
    4416:	af 93       	push	r26
    4418:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    441a:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <timer0_millis>
    441e:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <timer0_millis+0x1>
    4422:	a0 91 d9 03 	lds	r26, 0x03D9	; 0x8003d9 <timer0_millis+0x2>
    4426:	b0 91 da 03 	lds	r27, 0x03DA	; 0x8003da <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    442a:	30 91 d6 03 	lds	r19, 0x03D6	; 0x8003d6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    442e:	23 e0       	ldi	r18, 0x03	; 3
    4430:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4432:	2d 37       	cpi	r18, 0x7D	; 125
    4434:	20 f4       	brcc	.+8      	; 0x443e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4436:	01 96       	adiw	r24, 0x01	; 1
    4438:	a1 1d       	adc	r26, r1
    443a:	b1 1d       	adc	r27, r1
    443c:	05 c0       	rjmp	.+10     	; 0x4448 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    443e:	26 e8       	ldi	r18, 0x86	; 134
    4440:	23 0f       	add	r18, r19
		m += 1;
    4442:	02 96       	adiw	r24, 0x02	; 2
    4444:	a1 1d       	adc	r26, r1
    4446:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4448:	20 93 d6 03 	sts	0x03D6, r18	; 0x8003d6 <timer0_fract>
	timer0_millis = m;
    444c:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <timer0_millis>
    4450:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <timer0_millis+0x1>
    4454:	a0 93 d9 03 	sts	0x03D9, r26	; 0x8003d9 <timer0_millis+0x2>
    4458:	b0 93 da 03 	sts	0x03DA, r27	; 0x8003da <timer0_millis+0x3>
	timer0_overflow_count++;
    445c:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <timer0_overflow_count>
    4460:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <timer0_overflow_count+0x1>
    4464:	a0 91 dd 03 	lds	r26, 0x03DD	; 0x8003dd <timer0_overflow_count+0x2>
    4468:	b0 91 de 03 	lds	r27, 0x03DE	; 0x8003de <timer0_overflow_count+0x3>
    446c:	01 96       	adiw	r24, 0x01	; 1
    446e:	a1 1d       	adc	r26, r1
    4470:	b1 1d       	adc	r27, r1
    4472:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <timer0_overflow_count>
    4476:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <timer0_overflow_count+0x1>
    447a:	a0 93 dd 03 	sts	0x03DD, r26	; 0x8003dd <timer0_overflow_count+0x2>
    447e:	b0 93 de 03 	sts	0x03DE, r27	; 0x8003de <timer0_overflow_count+0x3>
}
    4482:	bf 91       	pop	r27
    4484:	af 91       	pop	r26
    4486:	9f 91       	pop	r25
    4488:	8f 91       	pop	r24
    448a:	3f 91       	pop	r19
    448c:	2f 91       	pop	r18
    448e:	0f 90       	pop	r0
    4490:	0f be       	out	0x3f, r0	; 63
    4492:	0f 90       	pop	r0
    4494:	1f 90       	pop	r1
    4496:	18 95       	reti

00004498 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4498:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    449a:	f8 94       	cli
	m = timer0_millis;
    449c:	60 91 d7 03 	lds	r22, 0x03D7	; 0x8003d7 <timer0_millis>
    44a0:	70 91 d8 03 	lds	r23, 0x03D8	; 0x8003d8 <timer0_millis+0x1>
    44a4:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <timer0_millis+0x2>
    44a8:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <timer0_millis+0x3>
	SREG = oldSREG;
    44ac:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    44ae:	08 95       	ret

000044b0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    44b0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    44b2:	f8 94       	cli
	m = timer0_overflow_count;
    44b4:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <timer0_overflow_count>
    44b8:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <timer0_overflow_count+0x1>
    44bc:	a0 91 dd 03 	lds	r26, 0x03DD	; 0x8003dd <timer0_overflow_count+0x2>
    44c0:	b0 91 de 03 	lds	r27, 0x03DE	; 0x8003de <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    44c4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    44c6:	a8 9b       	sbis	0x15, 0	; 21
    44c8:	05 c0       	rjmp	.+10     	; 0x44d4 <micros+0x24>
    44ca:	2f 3f       	cpi	r18, 0xFF	; 255
    44cc:	19 f0       	breq	.+6      	; 0x44d4 <micros+0x24>
		m++;
    44ce:	01 96       	adiw	r24, 0x01	; 1
    44d0:	a1 1d       	adc	r26, r1
    44d2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    44d4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    44d6:	ba 2f       	mov	r27, r26
    44d8:	a9 2f       	mov	r26, r25
    44da:	98 2f       	mov	r25, r24
    44dc:	88 27       	eor	r24, r24
    44de:	82 0f       	add	r24, r18
    44e0:	91 1d       	adc	r25, r1
    44e2:	a1 1d       	adc	r26, r1
    44e4:	b1 1d       	adc	r27, r1
    44e6:	bc 01       	movw	r22, r24
    44e8:	cd 01       	movw	r24, r26
    44ea:	42 e0       	ldi	r20, 0x02	; 2
    44ec:	66 0f       	add	r22, r22
    44ee:	77 1f       	adc	r23, r23
    44f0:	88 1f       	adc	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	4a 95       	dec	r20
    44f6:	d1 f7       	brne	.-12     	; 0x44ec <micros+0x3c>
}
    44f8:	08 95       	ret

000044fa <delay>:

void delay(unsigned long ms)
{
    44fa:	8f 92       	push	r8
    44fc:	9f 92       	push	r9
    44fe:	af 92       	push	r10
    4500:	bf 92       	push	r11
    4502:	cf 92       	push	r12
    4504:	df 92       	push	r13
    4506:	ef 92       	push	r14
    4508:	ff 92       	push	r15
    450a:	6b 01       	movw	r12, r22
    450c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    450e:	0e 94 58 22 	call	0x44b0	; 0x44b0 <micros>
    4512:	4b 01       	movw	r8, r22
    4514:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4516:	c1 14       	cp	r12, r1
    4518:	d1 04       	cpc	r13, r1
    451a:	e1 04       	cpc	r14, r1
    451c:	f1 04       	cpc	r15, r1
    451e:	01 f1       	breq	.+64     	; 0x4560 <delay+0x66>
		yield();
    4520:	0e 94 bc 23 	call	0x4778	; 0x4778 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4524:	0e 94 58 22 	call	0x44b0	; 0x44b0 <micros>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	88 19       	sub	r24, r8
    452e:	99 09       	sbc	r25, r9
    4530:	aa 09       	sbc	r26, r10
    4532:	bb 09       	sbc	r27, r11
    4534:	88 3e       	cpi	r24, 0xE8	; 232
    4536:	93 40       	sbci	r25, 0x03	; 3
    4538:	a1 05       	cpc	r26, r1
    453a:	b1 05       	cpc	r27, r1
    453c:	60 f3       	brcs	.-40     	; 0x4516 <delay+0x1c>
			ms--;
    453e:	21 e0       	ldi	r18, 0x01	; 1
    4540:	c2 1a       	sub	r12, r18
    4542:	d1 08       	sbc	r13, r1
    4544:	e1 08       	sbc	r14, r1
    4546:	f1 08       	sbc	r15, r1
			start += 1000;
    4548:	88 ee       	ldi	r24, 0xE8	; 232
    454a:	88 0e       	add	r8, r24
    454c:	83 e0       	ldi	r24, 0x03	; 3
    454e:	98 1e       	adc	r9, r24
    4550:	a1 1c       	adc	r10, r1
    4552:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4554:	c1 14       	cp	r12, r1
    4556:	d1 04       	cpc	r13, r1
    4558:	e1 04       	cpc	r14, r1
    455a:	f1 04       	cpc	r15, r1
    455c:	19 f7       	brne	.-58     	; 0x4524 <delay+0x2a>
    455e:	db cf       	rjmp	.-74     	; 0x4516 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    4560:	ff 90       	pop	r15
    4562:	ef 90       	pop	r14
    4564:	df 90       	pop	r13
    4566:	cf 90       	pop	r12
    4568:	bf 90       	pop	r11
    456a:	af 90       	pop	r10
    456c:	9f 90       	pop	r9
    456e:	8f 90       	pop	r8
    4570:	08 95       	ret

00004572 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4572:	82 30       	cpi	r24, 0x02	; 2
    4574:	91 05       	cpc	r25, r1
    4576:	38 f0       	brcs	.+14     	; 0x4586 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4578:	88 0f       	add	r24, r24
    457a:	99 1f       	adc	r25, r25
    457c:	88 0f       	add	r24, r24
    457e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4580:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4582:	01 97       	sbiw	r24, 0x01	; 1
    4584:	f1 f7       	brne	.-4      	; 0x4582 <delayMicroseconds+0x10>
    4586:	08 95       	ret

00004588 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4588:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    458a:	84 b5       	in	r24, 0x24	; 36
    458c:	82 60       	ori	r24, 0x02	; 2
    458e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4590:	84 b5       	in	r24, 0x24	; 36
    4592:	81 60       	ori	r24, 0x01	; 1
    4594:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4596:	85 b5       	in	r24, 0x25	; 37
    4598:	82 60       	ori	r24, 0x02	; 2
    459a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    459c:	85 b5       	in	r24, 0x25	; 37
    459e:	81 60       	ori	r24, 0x01	; 1
    45a0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    45a2:	ee e6       	ldi	r30, 0x6E	; 110
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	80 81       	ld	r24, Z
    45a8:	81 60       	ori	r24, 0x01	; 1
    45aa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    45ac:	e1 e8       	ldi	r30, 0x81	; 129
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    45b2:	80 81       	ld	r24, Z
    45b4:	82 60       	ori	r24, 0x02	; 2
    45b6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    45b8:	80 81       	ld	r24, Z
    45ba:	81 60       	ori	r24, 0x01	; 1
    45bc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    45be:	e0 e8       	ldi	r30, 0x80	; 128
    45c0:	f0 e0       	ldi	r31, 0x00	; 0
    45c2:	80 81       	ld	r24, Z
    45c4:	81 60       	ori	r24, 0x01	; 1
    45c6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    45c8:	e1 eb       	ldi	r30, 0xB1	; 177
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	80 81       	ld	r24, Z
    45ce:	84 60       	ori	r24, 0x04	; 4
    45d0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    45d2:	e0 eb       	ldi	r30, 0xB0	; 176
    45d4:	f0 e0       	ldi	r31, 0x00	; 0
    45d6:	80 81       	ld	r24, Z
    45d8:	81 60       	ori	r24, 0x01	; 1
    45da:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    45dc:	ea e7       	ldi	r30, 0x7A	; 122
    45de:	f0 e0       	ldi	r31, 0x00	; 0
    45e0:	80 81       	ld	r24, Z
    45e2:	84 60       	ori	r24, 0x04	; 4
    45e4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    45e6:	80 81       	ld	r24, Z
    45e8:	82 60       	ori	r24, 0x02	; 2
    45ea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    45ec:	80 81       	ld	r24, Z
    45ee:	81 60       	ori	r24, 0x01	; 1
    45f0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    45f2:	80 81       	ld	r24, Z
    45f4:	80 68       	ori	r24, 0x80	; 128
    45f6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    45f8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    45fc:	08 95       	ret

000045fe <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    45fe:	83 30       	cpi	r24, 0x03	; 3
    4600:	81 f0       	breq	.+32     	; 0x4622 <turnOffPWM+0x24>
    4602:	28 f4       	brcc	.+10     	; 0x460e <turnOffPWM+0x10>
    4604:	81 30       	cpi	r24, 0x01	; 1
    4606:	99 f0       	breq	.+38     	; 0x462e <turnOffPWM+0x30>
    4608:	82 30       	cpi	r24, 0x02	; 2
    460a:	a1 f0       	breq	.+40     	; 0x4634 <turnOffPWM+0x36>
    460c:	08 95       	ret
    460e:	87 30       	cpi	r24, 0x07	; 7
    4610:	a9 f0       	breq	.+42     	; 0x463c <turnOffPWM+0x3e>
    4612:	88 30       	cpi	r24, 0x08	; 8
    4614:	b9 f0       	breq	.+46     	; 0x4644 <turnOffPWM+0x46>
    4616:	84 30       	cpi	r24, 0x04	; 4
    4618:	d1 f4       	brne	.+52     	; 0x464e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    461a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    461e:	8f 7d       	andi	r24, 0xDF	; 223
    4620:	03 c0       	rjmp	.+6      	; 0x4628 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4622:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4626:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4628:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    462c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    462e:	84 b5       	in	r24, 0x24	; 36
    4630:	8f 77       	andi	r24, 0x7F	; 127
    4632:	02 c0       	rjmp	.+4      	; 0x4638 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4634:	84 b5       	in	r24, 0x24	; 36
    4636:	8f 7d       	andi	r24, 0xDF	; 223
    4638:	84 bd       	out	0x24, r24	; 36
    463a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    463c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4640:	8f 77       	andi	r24, 0x7F	; 127
    4642:	03 c0       	rjmp	.+6      	; 0x464a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4644:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4648:	8f 7d       	andi	r24, 0xDF	; 223
    464a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    464e:	08 95       	ret

00004650 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	fc 01       	movw	r30, r24
    4658:	e0 57       	subi	r30, 0x70	; 112
    465a:	fa 4f       	sbci	r31, 0xFA	; 250
    465c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    465e:	fc 01       	movw	r30, r24
    4660:	ec 55       	subi	r30, 0x5C	; 92
    4662:	fa 4f       	sbci	r31, 0xFA	; 250
    4664:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4666:	88 23       	and	r24, r24
    4668:	61 f1       	breq	.+88     	; 0x46c2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	88 0f       	add	r24, r24
    466e:	99 1f       	adc	r25, r25
    4670:	fc 01       	movw	r30, r24
    4672:	e4 53       	subi	r30, 0x34	; 52
    4674:	fa 4f       	sbci	r31, 0xFA	; 250
    4676:	c5 91       	lpm	r28, Z+
    4678:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    467a:	fc 01       	movw	r30, r24
    467c:	ee 53       	subi	r30, 0x3E	; 62
    467e:	fa 4f       	sbci	r31, 0xFA	; 250
    4680:	a5 91       	lpm	r26, Z+
    4682:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4684:	61 11       	cpse	r22, r1
    4686:	09 c0       	rjmp	.+18     	; 0x469a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4688:	9f b7       	in	r25, 0x3f	; 63
                cli();
    468a:	f8 94       	cli
		*reg &= ~bit;
    468c:	88 81       	ld	r24, Y
    468e:	20 95       	com	r18
    4690:	82 23       	and	r24, r18
    4692:	88 83       	st	Y, r24
		*out &= ~bit;
    4694:	ec 91       	ld	r30, X
    4696:	2e 23       	and	r18, r30
    4698:	0b c0       	rjmp	.+22     	; 0x46b0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    469a:	62 30       	cpi	r22, 0x02	; 2
    469c:	61 f4       	brne	.+24     	; 0x46b6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    469e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    46a0:	f8 94       	cli
		*reg &= ~bit;
    46a2:	88 81       	ld	r24, Y
    46a4:	32 2f       	mov	r19, r18
    46a6:	30 95       	com	r19
    46a8:	83 23       	and	r24, r19
    46aa:	88 83       	st	Y, r24
		*out |= bit;
    46ac:	ec 91       	ld	r30, X
    46ae:	2e 2b       	or	r18, r30
    46b0:	2c 93       	st	X, r18
		SREG = oldSREG;
    46b2:	9f bf       	out	0x3f, r25	; 63
    46b4:	06 c0       	rjmp	.+12     	; 0x46c2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    46b6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    46b8:	f8 94       	cli
		*reg |= bit;
    46ba:	e8 81       	ld	r30, Y
    46bc:	2e 2b       	or	r18, r30
    46be:	28 83       	st	Y, r18
		SREG = oldSREG;
    46c0:	8f bf       	out	0x3f, r24	; 63
	}
}
    46c2:	df 91       	pop	r29
    46c4:	cf 91       	pop	r28
    46c6:	08 95       	ret

000046c8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    46c8:	1f 93       	push	r17
    46ca:	cf 93       	push	r28
    46cc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    46ce:	28 2f       	mov	r18, r24
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	f9 01       	movw	r30, r18
    46d4:	e4 58       	subi	r30, 0x84	; 132
    46d6:	fa 4f       	sbci	r31, 0xFA	; 250
    46d8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    46da:	f9 01       	movw	r30, r18
    46dc:	e0 57       	subi	r30, 0x70	; 112
    46de:	fa 4f       	sbci	r31, 0xFA	; 250
    46e0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    46e2:	f9 01       	movw	r30, r18
    46e4:	ec 55       	subi	r30, 0x5C	; 92
    46e6:	fa 4f       	sbci	r31, 0xFA	; 250
    46e8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    46ea:	cc 23       	and	r28, r28
    46ec:	c1 f0       	breq	.+48     	; 0x471e <digitalWrite+0x56>
    46ee:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    46f0:	81 11       	cpse	r24, r1
    46f2:	0e 94 ff 22 	call	0x45fe	; 0x45fe <turnOffPWM>

	out = portOutputRegister(port);
    46f6:	ec 2f       	mov	r30, r28
    46f8:	f0 e0       	ldi	r31, 0x00	; 0
    46fa:	ee 0f       	add	r30, r30
    46fc:	ff 1f       	adc	r31, r31
    46fe:	ee 53       	subi	r30, 0x3E	; 62
    4700:	fa 4f       	sbci	r31, 0xFA	; 250
    4702:	a5 91       	lpm	r26, Z+
    4704:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4706:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4708:	f8 94       	cli

	if (val == LOW) {
    470a:	11 11       	cpse	r17, r1
    470c:	04 c0       	rjmp	.+8      	; 0x4716 <digitalWrite+0x4e>
		*out &= ~bit;
    470e:	8c 91       	ld	r24, X
    4710:	d0 95       	com	r29
    4712:	d8 23       	and	r29, r24
    4714:	02 c0       	rjmp	.+4      	; 0x471a <digitalWrite+0x52>
	} else {
		*out |= bit;
    4716:	ec 91       	ld	r30, X
    4718:	de 2b       	or	r29, r30
    471a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    471c:	9f bf       	out	0x3f, r25	; 63
}
    471e:	df 91       	pop	r29
    4720:	cf 91       	pop	r28
    4722:	1f 91       	pop	r17
    4724:	08 95       	ret

00004726 <digitalRead>:

int digitalRead(uint8_t pin)
{
    4726:	cf 93       	push	r28
    4728:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    472a:	28 2f       	mov	r18, r24
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	f9 01       	movw	r30, r18
    4730:	e4 58       	subi	r30, 0x84	; 132
    4732:	fa 4f       	sbci	r31, 0xFA	; 250
    4734:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4736:	f9 01       	movw	r30, r18
    4738:	e0 57       	subi	r30, 0x70	; 112
    473a:	fa 4f       	sbci	r31, 0xFA	; 250
    473c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    473e:	f9 01       	movw	r30, r18
    4740:	ec 55       	subi	r30, 0x5C	; 92
    4742:	fa 4f       	sbci	r31, 0xFA	; 250
    4744:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    4746:	cc 23       	and	r28, r28
    4748:	91 f0       	breq	.+36     	; 0x476e <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    474a:	81 11       	cpse	r24, r1
    474c:	0e 94 ff 22 	call	0x45fe	; 0x45fe <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    4750:	ec 2f       	mov	r30, r28
    4752:	f0 e0       	ldi	r31, 0x00	; 0
    4754:	ee 0f       	add	r30, r30
    4756:	ff 1f       	adc	r31, r31
    4758:	e8 54       	subi	r30, 0x48	; 72
    475a:	fa 4f       	sbci	r31, 0xFA	; 250
    475c:	a5 91       	lpm	r26, Z+
    475e:	b4 91       	lpm	r27, Z
    4760:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4762:	ed 23       	and	r30, r29
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	21 f4       	brne	.+8      	; 0x4772 <digitalRead+0x4c>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	02 c0       	rjmp	.+4      	; 0x4772 <digitalRead+0x4c>
    476e:	80 e0       	ldi	r24, 0x00	; 0
    4770:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	08 95       	ret

00004778 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4778:	08 95       	ret

0000477a <__unordsf2>:
    477a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__fp_cmp>
    477e:	88 0b       	sbc	r24, r24
    4780:	99 0b       	sbc	r25, r25
    4782:	08 95       	ret

00004784 <__udivmodsi4>:
    4784:	a1 e2       	ldi	r26, 0x21	; 33
    4786:	1a 2e       	mov	r1, r26
    4788:	aa 1b       	sub	r26, r26
    478a:	bb 1b       	sub	r27, r27
    478c:	fd 01       	movw	r30, r26
    478e:	0d c0       	rjmp	.+26     	; 0x47aa <__udivmodsi4_ep>

00004790 <__udivmodsi4_loop>:
    4790:	aa 1f       	adc	r26, r26
    4792:	bb 1f       	adc	r27, r27
    4794:	ee 1f       	adc	r30, r30
    4796:	ff 1f       	adc	r31, r31
    4798:	a2 17       	cp	r26, r18
    479a:	b3 07       	cpc	r27, r19
    479c:	e4 07       	cpc	r30, r20
    479e:	f5 07       	cpc	r31, r21
    47a0:	20 f0       	brcs	.+8      	; 0x47aa <__udivmodsi4_ep>
    47a2:	a2 1b       	sub	r26, r18
    47a4:	b3 0b       	sbc	r27, r19
    47a6:	e4 0b       	sbc	r30, r20
    47a8:	f5 0b       	sbc	r31, r21

000047aa <__udivmodsi4_ep>:
    47aa:	66 1f       	adc	r22, r22
    47ac:	77 1f       	adc	r23, r23
    47ae:	88 1f       	adc	r24, r24
    47b0:	99 1f       	adc	r25, r25
    47b2:	1a 94       	dec	r1
    47b4:	69 f7       	brne	.-38     	; 0x4790 <__udivmodsi4_loop>
    47b6:	60 95       	com	r22
    47b8:	70 95       	com	r23
    47ba:	80 95       	com	r24
    47bc:	90 95       	com	r25
    47be:	9b 01       	movw	r18, r22
    47c0:	ac 01       	movw	r20, r24
    47c2:	bd 01       	movw	r22, r26
    47c4:	cf 01       	movw	r24, r30
    47c6:	08 95       	ret

000047c8 <__tablejump2__>:
    47c8:	ee 0f       	add	r30, r30
    47ca:	ff 1f       	adc	r31, r31
    47cc:	05 90       	lpm	r0, Z+
    47ce:	f4 91       	lpm	r31, Z
    47d0:	e0 2d       	mov	r30, r0
    47d2:	09 94       	ijmp

000047d4 <eeprom_read_byte>:
    47d4:	f9 99       	sbic	0x1f, 1	; 31
    47d6:	fe cf       	rjmp	.-4      	; 0x47d4 <eeprom_read_byte>
    47d8:	92 bd       	out	0x22, r25	; 34
    47da:	81 bd       	out	0x21, r24	; 33
    47dc:	f8 9a       	sbi	0x1f, 0	; 31
    47de:	99 27       	eor	r25, r25
    47e0:	80 b5       	in	r24, 0x20	; 32
    47e2:	08 95       	ret

000047e4 <eeprom_read_dword>:
    47e4:	a6 e1       	ldi	r26, 0x16	; 22
    47e6:	b0 e0       	ldi	r27, 0x00	; 0
    47e8:	44 e0       	ldi	r20, 0x04	; 4
    47ea:	50 e0       	ldi	r21, 0x00	; 0
    47ec:	0c 94 18 24 	jmp	0x4830	; 0x4830 <eeprom_read_blraw>

000047f0 <eeprom_update_byte>:
    47f0:	26 2f       	mov	r18, r22

000047f2 <eeprom_update_r18>:
    47f2:	f9 99       	sbic	0x1f, 1	; 31
    47f4:	fe cf       	rjmp	.-4      	; 0x47f2 <eeprom_update_r18>
    47f6:	92 bd       	out	0x22, r25	; 34
    47f8:	81 bd       	out	0x21, r24	; 33
    47fa:	f8 9a       	sbi	0x1f, 0	; 31
    47fc:	01 97       	sbiw	r24, 0x01	; 1
    47fe:	00 b4       	in	r0, 0x20	; 32
    4800:	02 16       	cp	r0, r18
    4802:	39 f0       	breq	.+14     	; 0x4812 <eeprom_update_r18+0x20>
    4804:	1f ba       	out	0x1f, r1	; 31
    4806:	20 bd       	out	0x20, r18	; 32
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	f8 94       	cli
    480c:	fa 9a       	sbi	0x1f, 2	; 31
    480e:	f9 9a       	sbi	0x1f, 1	; 31
    4810:	0f be       	out	0x3f, r0	; 63
    4812:	08 95       	ret

00004814 <eeprom_update_dword>:
    4814:	03 96       	adiw	r24, 0x03	; 3
    4816:	27 2f       	mov	r18, r23
    4818:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <eeprom_update_r18>
    481c:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <eeprom_update_byte>
    4820:	25 2f       	mov	r18, r21
    4822:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <eeprom_update_r18>
    4826:	24 2f       	mov	r18, r20
    4828:	0c 94 f9 23 	jmp	0x47f2	; 0x47f2 <eeprom_update_r18>

0000482c <eeprom_read_block>:
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22

00004830 <eeprom_read_blraw>:
    4830:	fc 01       	movw	r30, r24
    4832:	f9 99       	sbic	0x1f, 1	; 31
    4834:	fe cf       	rjmp	.-4      	; 0x4832 <eeprom_read_blraw+0x2>
    4836:	06 c0       	rjmp	.+12     	; 0x4844 <eeprom_read_blraw+0x14>
    4838:	f2 bd       	out	0x22, r31	; 34
    483a:	e1 bd       	out	0x21, r30	; 33
    483c:	f8 9a       	sbi	0x1f, 0	; 31
    483e:	31 96       	adiw	r30, 0x01	; 1
    4840:	00 b4       	in	r0, 0x20	; 32
    4842:	0d 92       	st	X+, r0
    4844:	41 50       	subi	r20, 0x01	; 1
    4846:	50 40       	sbci	r21, 0x00	; 0
    4848:	b8 f7       	brcc	.-18     	; 0x4838 <eeprom_read_blraw+0x8>
    484a:	08 95       	ret

0000484c <_exit>:
    484c:	f8 94       	cli

0000484e <__stop_program>:
    484e:	ff cf       	rjmp	.-2      	; 0x484e <__stop_program>
