
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00003782  00003836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003782  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000214  008001ec  008001ec  00003922  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  00003922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000394a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000397c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000810  00000000  00000000  000039c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000fc25  00000000  00000000  000041d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d7b  00000000  00000000  00013df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004497  00000000  00000000  00016b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001538  00000000  00000000  0001b008  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003ff3  00000000  00000000  0001c540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f54  00000000  00000000  00020533  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  00026487  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__ctors_end>
       4:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
       8:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
       c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      10:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      14:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      18:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      1c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      20:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      24:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      28:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      2c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      30:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      34:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      38:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      3c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      40:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__vector_16>
      44:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      48:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__vector_18>
      4c:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__vector_19>
      50:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      54:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      58:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      5c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      60:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__vector_24>
      64:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__bad_interrupt>
      68:	af 04       	cpc	r10, r15
      6a:	12 04       	cpc	r1, r2
      6c:	15 04       	cpc	r1, r5
      6e:	18 04       	cpc	r1, r8
      70:	24 04       	cpc	r2, r4
      72:	27 04       	cpc	r2, r7
      74:	2a 04       	cpc	r2, r10
      76:	2d 04       	cpc	r2, r13
      78:	30 04       	cpc	r3, r0
      7a:	33 04       	cpc	r3, r3
      7c:	1b 04       	cpc	r1, r11
      7e:	1e 04       	cpc	r1, r14
      80:	21 04       	cpc	r2, r1
      82:	36 04       	cpc	r3, r6
      84:	5d 04       	cpc	r5, r13
      86:	84 04       	cpc	r8, r4
      88:	87 04       	cpc	r8, r7
      8a:	8a 04       	cpc	r8, r10
      8c:	92 04       	cpc	r9, r2
      8e:	95 04       	cpc	r9, r5
      90:	98 04       	cpc	r9, r8
      92:	a0 04       	cpc	r10, r0
      94:	54 06       	cpc	r5, r20
      96:	71 06       	cpc	r7, r17
      98:	71 06       	cpc	r7, r17
      9a:	73 06       	cpc	r7, r19
      9c:	73 06       	cpc	r7, r19
      9e:	73 06       	cpc	r7, r19
      a0:	73 06       	cpc	r7, r19
      a2:	73 06       	cpc	r7, r19
      a4:	73 06       	cpc	r7, r19
      a6:	73 06       	cpc	r7, r19
      a8:	73 06       	cpc	r7, r19
      aa:	73 06       	cpc	r7, r19
      ac:	9f 06       	cpc	r9, r31
      ae:	b7 06       	cpc	r11, r23
      b0:	cf 06       	cpc	r12, r31
      b2:	d1 06       	cpc	r13, r17
      b4:	d4 06       	cpc	r13, r20
      b6:	d6 06       	cpc	r13, r22
      b8:	d8 06       	cpc	r13, r24
      ba:	da 06       	cpc	r13, r26
      bc:	27 08       	sbc	r2, r7
      be:	2a 08       	sbc	r2, r10
      c0:	3a 08       	sbc	r3, r10
      c2:	58 08       	sbc	r5, r8
      c4:	61 08       	sbc	r6, r1
      c6:	6a 08       	sbc	r6, r10
      c8:	73 08       	sbc	r7, r3
      ca:	7c 08       	sbc	r7, r12
      cc:	85 08       	sbc	r8, r5
      ce:	3d 08       	sbc	r3, r13
      d0:	46 08       	sbc	r4, r6
      d2:	4f 08       	sbc	r4, r15
      d4:	49 0b       	sbc	r20, r25
      d6:	7c 0b       	sbc	r23, r28
      d8:	95 0b       	sbc	r25, r21
      da:	e1 0b       	sbc	r30, r17
      dc:	f4 0b       	sbc	r31, r20
      de:	07 0c       	add	r0, r7
      e0:	1a 0c       	add	r1, r10
      e2:	2d 0c       	add	r2, r13
      e4:	40 0c       	add	r4, r0
      e6:	a8 0b       	sbc	r26, r24
      e8:	bb 0b       	sbc	r27, r27
      ea:	ce 0b       	sbc	r28, r30

000000ec <__trampolines_end>:
      ec:	20 00       	.word	0x0020	; ????

000000ee <_ZZ22showStaticWindingCharsvE3__c_1>:
      ee:	45 3d 00                                            E=.

000000f1 <_ZZ22showStaticWindingCharsvE3__c_0>:
      f1:	56 3d 00                                            V=.

000000f4 <_ZZ22showStaticWindingCharsvE3__c>:
      f4:	49 3d 00                                            I=.

000000f7 <_ZZ22showWindingCharsValueshE3__c_0>:
      f7:	25 00                                               %.

000000f9 <_ZZ22showWindingCharsValueshE3__c>:
      f9:	2b 00                                               +.

000000fb <_ZZ18showStaticAmperagevE3__c_0>:
      fb:	4d 00                                               M.

000000fd <_ZZ18showStaticAmperagevE3__c>:
      fd:	50 00                                               P.

000000ff <_ZZ19displayStaticAsModevE3__c_28>:
      ff:	53 65 74 75 70 20 72 65 71 75 69 72 65 64 00        Setup required.

0000010e <_ZZ19displayStaticAsModevE3__c_27>:
     10e:	4f 6f 6f 6f 70 73 21 00                             Oooops!.

00000116 <_ZZ19displayStaticAsModevE3__c_26>:
     116:	42 31 3d 77 6f 72 6b 3b 20 42 32 3d 73 74 6f 70     B1=work; B2=stop
	...

00000127 <_ZZ19displayStaticAsModevE3__c_25>:
     127:	4d 65 61 73 75 72 65 6d 65 6e 74 00                 Measurement.

00000133 <_ZZ19displayStaticAsModevE3__c_24>:
     133:	41 43 00                                            AC.

00000136 <_ZZ19displayStaticAsModevE3__c_23>:
     136:	42 43 00                                            BC.

00000139 <_ZZ19displayStaticAsModevE3__c_22>:
     139:	41 42 00                                            AB.

0000013c <_ZZ19displayStaticAsModevE3__c_21>:
     13c:	41 43 00                                            AC.

0000013f <_ZZ19displayStaticAsModevE3__c_20>:
     13f:	42 43 00                                            BC.

00000142 <_ZZ19displayStaticAsModevE3__c_19>:
     142:	41 42 00                                            AB.

00000145 <_ZZ19displayStaticAsModevE3__c_18>:
     145:	65 25 00                                            e%.

00000148 <_ZZ19displayStaticAsModevE3__c_17>:
     148:	49 33 3d 00                                         I3=.

0000014c <_ZZ19displayStaticAsModevE3__c_16>:
     14c:	49 32 3d 00                                         I2=.

00000150 <_ZZ19displayStaticAsModevE3__c_15>:
     150:	49 31 3d 00                                         I1=.

00000154 <_ZZ19displayStaticAsModevE3__c_14>:
     154:	41 43 3d 00                                         AC=.

00000158 <_ZZ19displayStaticAsModevE3__c_13>:
     158:	42 43 3d 00                                         BC=.

0000015c <_ZZ19displayStaticAsModevE3__c_12>:
     15c:	41 42 3d 00                                         AB=.

00000160 <_ZZ19displayStaticAsModevE3__c_11>:
     160:	45 43 6f 75 6e 74 00                                ECount.

00000167 <_ZZ19displayStaticAsModevE3__c_10>:
     167:	41 6d 20 41 43 00                                   Am AC.

0000016d <_ZZ19displayStaticAsModevE3__c_9>:
     16d:	41 6d 20 42 43 00                                   Am BC.

00000173 <_ZZ19displayStaticAsModevE3__c_8>:
     173:	41 6d 20 41 42 00                                   Am AB.

00000179 <_ZZ19displayStaticAsModevE3__c_7>:
     179:	56 6d 20 41 43 00                                   Vm AC.

0000017f <_ZZ19displayStaticAsModevE3__c_6>:
     17f:	56 6d 20 42 43 00                                   Vm BC.

00000185 <_ZZ19displayStaticAsModevE3__c_5>:
     185:	56 6d 20 41 42 00                                   Vm AB.

0000018b <_ZZ19displayStaticAsModevE3__c_4>:
     18b:	52 33 20 41 43 00                                   R3 AC.

00000191 <_ZZ19displayStaticAsModevE3__c_3>:
     191:	52 32 20 42 43 00                                   R2 BC.

00000197 <_ZZ19displayStaticAsModevE3__c_2>:
     197:	52 31 20 41 42 00                                   R1 AB.

0000019d <_ZZ19displayStaticAsModevE3__c_1>:
     19d:	56 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     V gain maxV/step
	...

000001ae <_ZZ19displayStaticAsModevE3__c_0>:
     1ae:	41 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     A gain maxV/step
	...

000001bf <_ZZ19displayStaticAsModevE3__c>:
     1bf:	43 6f 6e 6e 65 63 74 69 6f 6e 20 74 79 70 65 00     Connection type.

000001cf <_ZZ19lcdPrintCriticalLvlhE3__c>:
     1cf:	2b 00                                               +.

000001d1 <_ZZ27lcdPrinRoundedCurErrorLevelhE3__c>:
     1d1:	2b 00                                               +.

000001d3 <_ZZ13displayAsModevE3__c_1>:
     1d3:	78 00                                               x.

000001d5 <_ZZ13displayAsModevE3__c_0>:
     1d5:	54 72 69 61 6e 67 6c 65 00                          Triangle.

000001de <_ZZ13displayAsModevE3__c>:
     1de:	53 74 61 72 00                                      Star.

000001e3 <_ZZ12showGainInfovE3__c_4>:
     1e3:	30 2e 32 35 36 20 30 2e 30 30 37 38 31 32 35 00     0.256 0.0078125.

000001f3 <_ZZ12showGainInfovE3__c_3>:
     1f3:	30 2e 35 31 32 20 30 2e 30 31 35 36 32 35 00        0.512 0.015625.

00000202 <_ZZ12showGainInfovE3__c_2>:
     202:	30 2e 35 31 32 20 30 2e 30 33 31 32 35 00           0.512 0.03125.

00000210 <_ZZ12showGainInfovE3__c_1>:
     210:	31 2e 30 32 34 20 30 2e 30 36 32 35 00              1.024 0.0625.

0000021d <_ZZ12showGainInfovE3__c_0>:
     21d:	34 2e 30 39 36 20 30 2e 31 32 35 00                 4.096 0.125.

00000229 <_ZZ12showGainInfovE3__c>:
     229:	36 2e 31 34 34 20 30 2e 31 38 37 35 00              6.144 0.1875.

00000236 <digital_pin_to_timer_PGM>:
     236:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     246:	00 00 00 00                                         ....

0000024a <digital_pin_to_bit_mask_PGM>:
     24a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     25a:	04 08 10 20                                         ... 

0000025e <digital_pin_to_port_PGM>:
     25e:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     26e:	03 03 03 03                                         ....

00000272 <port_to_input_PGM>:
     272:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000027c <port_to_output_PGM>:
     27c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000286 <port_to_mode_PGM>:
     286:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000290 <__ctors_start>:
     290:	b2 0c       	add	r11, r2
     292:	71 13       	cpse	r23, r17
     294:	56 17       	cp	r21, r22

00000296 <__ctors_end>:
     296:	11 24       	eor	r1, r1
     298:	1f be       	out	0x3f, r1	; 63
     29a:	cf ef       	ldi	r28, 0xFF	; 255
     29c:	d8 e0       	ldi	r29, 0x08	; 8
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	cd bf       	out	0x3d, r28	; 61

000002a2 <__do_copy_data>:
     2a2:	11 e0       	ldi	r17, 0x01	; 1
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b1 e0       	ldi	r27, 0x01	; 1
     2a8:	e2 e8       	ldi	r30, 0x82	; 130
     2aa:	f7 e3       	ldi	r31, 0x37	; 55
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <__do_copy_data+0x10>
     2ae:	05 90       	lpm	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	ac 3e       	cpi	r26, 0xEC	; 236
     2b4:	b1 07       	cpc	r27, r17
     2b6:	d9 f7       	brne	.-10     	; 0x2ae <__do_copy_data+0xc>

000002b8 <__do_clear_bss>:
     2b8:	24 e0       	ldi	r18, 0x04	; 4
     2ba:	ac ee       	ldi	r26, 0xEC	; 236
     2bc:	b1 e0       	ldi	r27, 0x01	; 1
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <.do_clear_bss_start>

000002c0 <.do_clear_bss_loop>:
     2c0:	1d 92       	st	X+, r1

000002c2 <.do_clear_bss_start>:
     2c2:	a0 30       	cpi	r26, 0x00	; 0
     2c4:	b2 07       	cpc	r27, r18
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <.do_clear_bss_loop>

000002c8 <__do_global_ctors>:
     2c8:	11 e0       	ldi	r17, 0x01	; 1
     2ca:	cb e4       	ldi	r28, 0x4B	; 75
     2cc:	d1 e0       	ldi	r29, 0x01	; 1
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <__do_global_ctors+0x10>
     2d0:	21 97       	sbiw	r28, 0x01	; 1
     2d2:	fe 01       	movw	r30, r28
     2d4:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__tablejump2__>
     2d8:	c8 34       	cpi	r28, 0x48	; 72
     2da:	d1 07       	cpc	r29, r17
     2dc:	c9 f7       	brne	.-14     	; 0x2d0 <__do_global_ctors+0x8>
     2de:	0e 94 84 17 	call	0x2f08	; 0x2f08 <main>
     2e2:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <_exit>

000002e6 <__bad_interrupt>:
     2e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ea <_Z18checkIsReadyToWorkv>:
		if (!(divImpedance[i] >= lowBound && divImpedance[i] <= highBound)) {
			return true;
		}
	}
	return false;
}
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	c3 e2       	ldi	r28, 0x23	; 35
     2f0:	d2 e0       	ldi	r29, 0x02	; 2
     2f2:	69 91       	ld	r22, Y+
     2f4:	79 91       	ld	r23, Y+
     2f6:	89 91       	ld	r24, Y+
     2f8:	99 91       	ld	r25, Y+
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	a9 01       	movw	r20, r18
     300:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     304:	88 23       	and	r24, r24
     306:	e1 f0       	breq	.+56     	; 0x340 <_Z18checkIsReadyToWorkv+0x56>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	a9 01       	movw	r20, r18
     30e:	6f 89       	ldd	r22, Y+23	; 0x17
     310:	78 8d       	ldd	r23, Y+24	; 0x18
     312:	89 8d       	ldd	r24, Y+25	; 0x19
     314:	9a 8d       	ldd	r25, Y+26	; 0x1a
     316:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     31a:	88 23       	and	r24, r24
     31c:	89 f0       	breq	.+34     	; 0x340 <_Z18checkIsReadyToWorkv+0x56>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	a9 01       	movw	r20, r18
     324:	6b 85       	ldd	r22, Y+11	; 0x0b
     326:	7c 85       	ldd	r23, Y+12	; 0x0c
     328:	8d 85       	ldd	r24, Y+13	; 0x0d
     32a:	9e 85       	ldd	r25, Y+14	; 0x0e
     32c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     330:	88 23       	and	r24, r24
     332:	31 f0       	breq	.+12     	; 0x340 <_Z18checkIsReadyToWorkv+0x56>
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	cf 32       	cpi	r28, 0x2F	; 47
     338:	d8 07       	cpc	r29, r24
     33a:	d9 f6       	brne	.-74     	; 0x2f2 <_Z18checkIsReadyToWorkv+0x8>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	01 c0       	rjmp	.+2      	; 0x342 <_Z18checkIsReadyToWorkv+0x58>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <settings+0x12>
     346:	88 23       	and	r24, r24
     348:	31 f0       	breq	.+12     	; 0x356 <_Z18checkIsReadyToWorkv+0x6c>
     34a:	85 e1       	ldi	r24, 0x15	; 21
     34c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <modeWork>
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret
     356:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <modeWork>
     35a:	62 e7       	ldi	r22, 0x72	; 114
     35c:	71 e0       	ldi	r23, 0x01	; 1
     35e:	8a e5       	ldi	r24, 0x5A	; 90
     360:	93 e0       	ldi	r25, 0x03	; 3
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	0c 94 01 18 	jmp	0x3002	; 0x3002 <_ZN5Print7printlnEPKc>

0000036a <_Z12getAdsParamsv>:
     36a:	2f 92       	push	r2
     36c:	3f 92       	push	r3
     36e:	4f 92       	push	r4
     370:	5f 92       	push	r5
     372:	6f 92       	push	r6
     374:	7f 92       	push	r7
     376:	8f 92       	push	r8
     378:	9f 92       	push	r9
     37a:	af 92       	push	r10
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	a1 97       	sbiw	r28, 0x21	; 33
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	1d 86       	std	Y+13, r1	; 0x0d
     3a0:	1e 86       	std	Y+14, r1	; 0x0e
     3a2:	1f 86       	std	Y+15, r1	; 0x0f
     3a4:	18 8a       	std	Y+16, r1	; 0x10
     3a6:	19 8a       	std	Y+17, r1	; 0x11
     3a8:	1a 8a       	std	Y+18, r1	; 0x12
     3aa:	1b 8a       	std	Y+19, r1	; 0x13
     3ac:	1c 8a       	std	Y+20, r1	; 0x14
     3ae:	1d 8a       	std	Y+21, r1	; 0x15
     3b0:	1e 8a       	std	Y+22, r1	; 0x16
     3b2:	1f 8a       	std	Y+23, r1	; 0x17
     3b4:	18 8e       	std	Y+24, r1	; 0x18
     3b6:	19 82       	std	Y+1, r1	; 0x01
     3b8:	1a 82       	std	Y+2, r1	; 0x02
     3ba:	1b 82       	std	Y+3, r1	; 0x03
     3bc:	1c 82       	std	Y+4, r1	; 0x04
     3be:	1d 82       	std	Y+5, r1	; 0x05
     3c0:	1e 82       	std	Y+6, r1	; 0x06
     3c2:	1f 82       	std	Y+7, r1	; 0x07
     3c4:	18 86       	std	Y+8, r1	; 0x08
     3c6:	19 86       	std	Y+9, r1	; 0x09
     3c8:	1a 86       	std	Y+10, r1	; 0x0a
     3ca:	1b 86       	std	Y+11, r1	; 0x0b
     3cc:	1c 86       	std	Y+12, r1	; 0x0c
     3ce:	1e 01       	movw	r2, r28
     3d0:	8d e0       	ldi	r24, 0x0D	; 13
     3d2:	28 0e       	add	r2, r24
     3d4:	31 1c       	adc	r3, r1
     3d6:	de 01       	movw	r26, r28
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	ba 8f       	std	Y+26, r27	; 0x1a
     3dc:	a9 8f       	std	Y+25, r26	; 0x19
     3de:	7d 01       	movw	r14, r26
     3e0:	61 01       	movw	r12, r2
     3e2:	10 e0       	ldi	r17, 0x00	; 0
     3e4:	61 2f       	mov	r22, r17
     3e6:	81 e9       	ldi	r24, 0x91	; 145
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     3ee:	bc 01       	movw	r22, r24
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
     3f8:	f6 01       	movw	r30, r12
     3fa:	61 93       	st	Z+, r22
     3fc:	71 93       	st	Z+, r23
     3fe:	81 93       	st	Z+, r24
     400:	91 93       	st	Z+, r25
     402:	6f 01       	movw	r12, r30
     404:	61 2f       	mov	r22, r17
     406:	8c e8       	ldi	r24, 0x8C	; 140
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     40e:	bc 01       	movw	r22, r24
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
     418:	d7 01       	movw	r26, r14
     41a:	6d 93       	st	X+, r22
     41c:	7d 93       	st	X+, r23
     41e:	8d 93       	st	X+, r24
     420:	9d 93       	st	X+, r25
     422:	7d 01       	movw	r14, r26
     424:	1f 5f       	subi	r17, 0xFF	; 255
     426:	13 30       	cpi	r17, 0x03	; 3
     428:	e9 f6       	brne	.-70     	; 0x3e4 <_Z12getAdsParamsv+0x7a>
     42a:	40 90 18 01 	lds	r4, 0x0118	; 0x800118 <__data_start+0x18>
     42e:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <__data_start+0x19>
     432:	60 90 1a 01 	lds	r6, 0x011A	; 0x80011a <__data_start+0x1a>
     436:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <__data_start+0x1b>
     43a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_start+0x1c>
     43e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_start+0x1d>
     442:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <__data_start+0x1e>
     446:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <__data_start+0x1f>
     44a:	8e 8f       	std	Y+30, r24	; 0x1e
     44c:	9f 8f       	std	Y+31, r25	; 0x1f
     44e:	a8 a3       	std	Y+32, r26	; 0x20
     450:	b9 a3       	std	Y+33, r27	; 0x21
     452:	00 e2       	ldi	r16, 0x20	; 32
     454:	11 e0       	ldi	r17, 0x01	; 1
     456:	3d 8e       	std	Y+29, r3	; 0x1d
     458:	2c 8e       	std	Y+28, r2	; 0x1c
     45a:	1b 8e       	std	Y+27, r1	; 0x1b
     45c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     45e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     460:	6d 91       	ld	r22, X+
     462:	7d 91       	ld	r23, X+
     464:	8d 91       	ld	r24, X+
     466:	9d 91       	ld	r25, X+
     468:	bd 8f       	std	Y+29, r27	; 0x1d
     46a:	ac 8f       	std	Y+28, r26	; 0x1c
     46c:	a3 01       	movw	r20, r6
     46e:	92 01       	movw	r18, r4
     470:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     474:	4b 01       	movw	r8, r22
     476:	5c 01       	movw	r10, r24
     478:	f1 01       	movw	r30, r2
     47a:	61 93       	st	Z+, r22
     47c:	71 93       	st	Z+, r23
     47e:	81 93       	st	Z+, r24
     480:	91 93       	st	Z+, r25
     482:	1f 01       	movw	r2, r30
     484:	a9 8d       	ldd	r26, Y+25	; 0x19
     486:	ba 8d       	ldd	r27, Y+26	; 0x1a
     488:	2d 91       	ld	r18, X+
     48a:	3d 91       	ld	r19, X+
     48c:	4d 91       	ld	r20, X+
     48e:	5c 91       	ld	r21, X
     490:	6e 8d       	ldd	r22, Y+30	; 0x1e
     492:	7f 8d       	ldd	r23, Y+31	; 0x1f
     494:	88 a1       	ldd	r24, Y+32	; 0x20
     496:	99 a1       	ldd	r25, Y+33	; 0x21
     498:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     49c:	6b 01       	movw	r12, r22
     49e:	7c 01       	movw	r14, r24
     4a0:	e9 8d       	ldd	r30, Y+25	; 0x19
     4a2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     4a4:	61 93       	st	Z+, r22
     4a6:	71 93       	st	Z+, r23
     4a8:	81 93       	st	Z+, r24
     4aa:	91 93       	st	Z+, r25
     4ac:	fa 8f       	std	Y+26, r31	; 0x1a
     4ae:	e9 8f       	std	Y+25, r30	; 0x19
     4b0:	a5 01       	movw	r20, r10
     4b2:	94 01       	movw	r18, r8
     4b4:	d8 01       	movw	r26, r16
     4b6:	94 96       	adiw	r26, 0x24	; 36
     4b8:	6d 91       	ld	r22, X+
     4ba:	7d 91       	ld	r23, X+
     4bc:	8d 91       	ld	r24, X+
     4be:	9c 91       	ld	r25, X
     4c0:	97 97       	sbiw	r26, 0x27	; 39
     4c2:	0e 94 76 13 	call	0x26ec	; 0x26ec <__addsf3>
     4c6:	f8 01       	movw	r30, r16
     4c8:	64 a3       	std	Z+36, r22	; 0x24
     4ca:	75 a3       	std	Z+37, r23	; 0x25
     4cc:	86 a3       	std	Z+38, r24	; 0x26
     4ce:	97 a3       	std	Z+39, r25	; 0x27
     4d0:	a7 01       	movw	r20, r14
     4d2:	96 01       	movw	r18, r12
     4d4:	60 a9       	ldd	r22, Z+48	; 0x30
     4d6:	71 a9       	ldd	r23, Z+49	; 0x31
     4d8:	82 a9       	ldd	r24, Z+50	; 0x32
     4da:	93 a9       	ldd	r25, Z+51	; 0x33
     4dc:	0e 94 76 13 	call	0x26ec	; 0x26ec <__addsf3>
     4e0:	d8 01       	movw	r26, r16
     4e2:	d0 96       	adiw	r26, 0x30	; 48
     4e4:	6d 93       	st	X+, r22
     4e6:	7d 93       	st	X+, r23
     4e8:	8d 93       	st	X+, r24
     4ea:	9c 93       	st	X, r25
     4ec:	d3 97       	sbiw	r26, 0x33	; 51
     4ee:	bb 8d       	ldd	r27, Y+27	; 0x1b
     4f0:	bf 5f       	subi	r27, 0xFF	; 255
     4f2:	bb 8f       	std	Y+27, r27	; 0x1b
     4f4:	0c 5f       	subi	r16, 0xFC	; 252
     4f6:	1f 4f       	sbci	r17, 0xFF	; 255
     4f8:	b3 30       	cpi	r27, 0x03	; 3
     4fa:	09 f0       	breq	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fc:	af cf       	rjmp	.-162    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     4fe:	a1 96       	adiw	r28, 0x21	; 33
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	df 90       	pop	r13
     518:	cf 90       	pop	r12
     51a:	bf 90       	pop	r11
     51c:	af 90       	pop	r10
     51e:	9f 90       	pop	r9
     520:	8f 90       	pop	r8
     522:	7f 90       	pop	r7
     524:	6f 90       	pop	r6
     526:	5f 90       	pop	r5
     528:	4f 90       	pop	r4
     52a:	3f 90       	pop	r3
     52c:	2f 90       	pop	r2
     52e:	08 95       	ret

00000530 <_Z11initAvgVarsv>:
     530:	e4 e4       	ldi	r30, 0x44	; 68
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	11 92       	st	Z+, r1
     536:	11 92       	st	Z+, r1
     538:	11 92       	st	Z+, r1
     53a:	11 92       	st	Z+, r1
     53c:	10 86       	std	Z+8, r1	; 0x08
     53e:	11 86       	std	Z+9, r1	; 0x09
     540:	12 86       	std	Z+10, r1	; 0x0a
     542:	13 86       	std	Z+11, r1	; 0x0b
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	e0 35       	cpi	r30, 0x50	; 80
     548:	f8 07       	cpc	r31, r24
     54a:	a1 f7       	brne	.-24     	; 0x534 <_Z11initAvgVarsv+0x4>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <adsChars+0x3d>
     552:	08 95       	ret

00000554 <_Z12button1Clickv>:
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <modeWork>
     560:	9f ef       	ldi	r25, 0xFF	; 255
     562:	98 0f       	add	r25, r24
     564:	9c 30       	cpi	r25, 0x0C	; 12
     566:	08 f0       	brcs	.+2      	; 0x56a <_Z12button1Clickv+0x16>
     568:	7d c0       	rjmp	.+250    	; 0x664 <_Z12button1Clickv+0x110>
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <__data_end>
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	01 f5       	brne	.+64     	; 0x5b4 <_Z12button1Clickv+0x60>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	a9 01       	movw	r20, r18
     57a:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <setDigit>
     57e:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <setDigit+0x1>
     582:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <setDigit+0x2>
     586:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <setDigit+0x3>
     58a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     58e:	88 23       	and	r24, r24
     590:	21 f0       	breq	.+8      	; 0x59a <_Z12button1Clickv+0x46>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	dc 01       	movw	r26, r24
     598:	04 c0       	rjmp	.+8      	; 0x5a2 <_Z12button1Clickv+0x4e>
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	a0 e8       	ldi	r26, 0x80	; 128
     5a0:	bf e3       	ldi	r27, 0x3F	; 63
     5a2:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <setDigit>
     5a6:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <setDigit+0x1>
     5aa:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <setDigit+0x2>
     5ae:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <setDigit+0x3>
     5b2:	72 c0       	rjmp	.+228    	; 0x698 <_Z12button1Clickv+0x144>
     5b4:	82 50       	subi	r24, 0x02	; 2
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	38 f5       	brcc	.+78     	; 0x608 <_Z12button1Clickv+0xb4>
     5ba:	c0 90 fb 01 	lds	r12, 0x01FB	; 0x8001fb <setDigit>
     5be:	d0 90 fc 01 	lds	r13, 0x01FC	; 0x8001fc <setDigit+0x1>
     5c2:	e0 90 fd 01 	lds	r14, 0x01FD	; 0x8001fd <setDigit+0x2>
     5c6:	f0 90 fe 01 	lds	r15, 0x01FE	; 0x8001fe <setDigit+0x3>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 ea       	ldi	r20, 0xA0	; 160
     5d0:	50 e4       	ldi	r21, 0x40	; 64
     5d2:	c7 01       	movw	r24, r14
     5d4:	b6 01       	movw	r22, r12
     5d6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     5da:	88 23       	and	r24, r24
     5dc:	49 f0       	breq	.+18     	; 0x5f0 <_Z12button1Clickv+0x9c>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e8       	ldi	r20, 0x80	; 128
     5e4:	5f e3       	ldi	r21, 0x3F	; 63
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	0e 94 76 13 	call	0x26ec	; 0x26ec <__addsf3>
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <_Z12button1Clickv+0xa2>
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	cb 01       	movw	r24, r22
     5f6:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <setDigit>
     5fa:	70 93 fc 01 	sts	0x01FC, r23	; 0x8001fc <setDigit+0x1>
     5fe:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <setDigit+0x2>
     602:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <setDigit+0x3>
     606:	48 c0       	rjmp	.+144    	; 0x698 <_Z12button1Clickv+0x144>
     608:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <setDigit+0x4>
     60c:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <setDigit+0x5>
     610:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <setDigit+0x6>
     614:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <setDigit+0x7>
     618:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <setDigit>
     61c:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <setDigit+0x1>
     620:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <setDigit+0x2>
     624:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <setDigit+0x3>
     628:	0e 94 76 13 	call	0x26ec	; 0x26ec <__addsf3>
     62c:	6b 01       	movw	r12, r22
     62e:	7c 01       	movw	r14, r24
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	4a e7       	ldi	r20, 0x7A	; 122
     636:	54 e4       	ldi	r21, 0x44	; 68
     638:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__gesf2>
     63c:	87 ff       	sbrs	r24, 7
     63e:	09 c0       	rjmp	.+18     	; 0x652 <_Z12button1Clickv+0xfe>
     640:	c0 92 fb 01 	sts	0x01FB, r12	; 0x8001fb <setDigit>
     644:	d0 92 fc 01 	sts	0x01FC, r13	; 0x8001fc <setDigit+0x1>
     648:	e0 92 fd 01 	sts	0x01FD, r14	; 0x8001fd <setDigit+0x2>
     64c:	f0 92 fe 01 	sts	0x01FE, r15	; 0x8001fe <setDigit+0x3>
     650:	23 c0       	rjmp	.+70     	; 0x698 <_Z12button1Clickv+0x144>
     652:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <setDigit>
     656:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <setDigit+0x1>
     65a:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <setDigit+0x2>
     65e:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <setDigit+0x3>
     662:	1a c0       	rjmp	.+52     	; 0x698 <_Z12button1Clickv+0x144>
     664:	93 ef       	ldi	r25, 0xF3	; 243
     666:	98 0f       	add	r25, r24
     668:	98 30       	cpi	r25, 0x08	; 8
     66a:	40 f4       	brcc	.+16     	; 0x67c <_Z12button1Clickv+0x128>
     66c:	84 31       	cpi	r24, 0x14	; 20
     66e:	11 f0       	breq	.+4      	; 0x674 <_Z12button1Clickv+0x120>
     670:	8f 5f       	subi	r24, 0xFF	; 255
     672:	01 c0       	rjmp	.+2      	; 0x676 <_Z12button1Clickv+0x122>
     674:	8d e0       	ldi	r24, 0x0D	; 13
     676:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <modeWork>
     67a:	0e c0       	rjmp	.+28     	; 0x698 <_Z12button1Clickv+0x144>
     67c:	85 31       	cpi	r24, 0x15	; 21
     67e:	61 f4       	brne	.+24     	; 0x698 <_Z12button1Clickv+0x144>
     680:	8d e0       	ldi	r24, 0x0D	; 13
     682:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <modeWork>
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <settings>
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	0c 94 98 02 	jmp	0x530	; 0x530 <_Z11initAvgVarsv>
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	08 95       	ret

000006a2 <_Z27lcdPrinRoundedCurErrorLevelh>:
			showWindingCharsValues(2);
			break;
	}
}

void lcdPrinRoundedCurErrorLevel(byte _num) {
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
	if (icError.curLvl[_num] < 1000) {
     6aa:	24 e0       	ldi	r18, 0x04	; 4
     6ac:	82 9f       	mul	r24, r18
     6ae:	c0 01       	movw	r24, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	fc 01       	movw	r30, r24
     6b4:	ed 5f       	subi	r30, 0xFD	; 253
     6b6:	fd 4f       	sbci	r31, 0xFD	; 253
     6b8:	c0 80       	ld	r12, Z
     6ba:	d1 80       	ldd	r13, Z+1	; 0x01
     6bc:	e2 80       	ldd	r14, Z+2	; 0x02
     6be:	f3 80       	ldd	r15, Z+3	; 0x03
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	4a e7       	ldi	r20, 0x7A	; 122
     6c6:	54 e4       	ldi	r21, 0x44	; 68
     6c8:	c7 01       	movw	r24, r14
     6ca:	b6 01       	movw	r22, r12
     6cc:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     6d0:	87 ff       	sbrs	r24, 7
     6d2:	24 c0       	rjmp	.+72     	; 0x71c <_Z27lcdPrinRoundedCurErrorLevelh+0x7a>
		lcd.print(round(icError.curLvl[_num]));
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	a9 01       	movw	r20, r18
     6da:	c7 01       	movw	r24, r14
     6dc:	b6 01       	movw	r22, r12
     6de:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__gesf2>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	87 fd       	sbrc	r24, 7
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <_Z27lcdPrinRoundedCurErrorLevelh+0x56>
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 76 13 	call	0x26ec	; 0x26ec <__addsf3>
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <_Z27lcdPrinRoundedCurErrorLevelh+0x5e>
     6f8:	c7 01       	movw	r24, r14
     6fa:	b6 01       	movw	r22, r12
     6fc:	0e 94 75 13 	call	0x26ea	; 0x26ea <__subsf3>
     700:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__fixsfsi>
     704:	2a e0       	ldi	r18, 0x0A	; 10
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	ab 01       	movw	r20, r22
     70a:	bc 01       	movw	r22, r24
     70c:	8f ee       	ldi	r24, 0xEF	; 239
     70e:	91 e0       	ldi	r25, 0x01	; 1
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	cf 90       	pop	r12
	}
}

void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
     718:	0c 94 6f 18 	jmp	0x30de	; 0x30de <_ZN5Print5printEli>
	} else {
		lcd.print(999);
     71c:	4a e0       	ldi	r20, 0x0A	; 10
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	67 ee       	ldi	r22, 0xE7	; 231
     722:	73 e0       	ldi	r23, 0x03	; 3
     724:	8f ee       	ldi	r24, 0xEF	; 239
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	0e 94 b7 18 	call	0x316e	; 0x316e <_ZN5Print5printEii>
		lcd.print(F("+"));
     72c:	61 ed       	ldi	r22, 0xD1	; 209
     72e:	71 e0       	ldi	r23, 0x01	; 1
     730:	8f ee       	ldi	r24, 0xEF	; 239
     732:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
	} else {
		lcd.print(999);
		lcd.print(F("+"));
     73c:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>

00000740 <_Z19lcdPrintCriticalLvlh>:
	}
}

void lcdPrintCriticalLvl(byte _num) {
	if (icError.criticalLvlCount[_num] < 1000) {
     740:	24 e0       	ldi	r18, 0x04	; 4
     742:	82 9f       	mul	r24, r18
     744:	c0 01       	movw	r24, r0
     746:	11 24       	eor	r1, r1
     748:	fc 01       	movw	r30, r24
     74a:	e1 5f       	subi	r30, 0xF1	; 241
     74c:	fd 4f       	sbci	r31, 0xFD	; 253
     74e:	40 81       	ld	r20, Z
     750:	51 81       	ldd	r21, Z+1	; 0x01
     752:	62 81       	ldd	r22, Z+2	; 0x02
     754:	73 81       	ldd	r23, Z+3	; 0x03
     756:	48 3e       	cpi	r20, 0xE8	; 232
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	58 07       	cpc	r21, r24
     75c:	61 05       	cpc	r22, r1
     75e:	71 05       	cpc	r23, r1
     760:	30 f4       	brcc	.+12     	; 0x76e <_Z19lcdPrintCriticalLvlh+0x2e>
		lcd.print(icError.criticalLvlCount[_num]);
     762:	2a e0       	ldi	r18, 0x0A	; 10
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	8f ee       	ldi	r24, 0xEF	; 239
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <_ZN5Print5printEmi>
	} else {
		lcd.print(999);
     76e:	4a e0       	ldi	r20, 0x0A	; 10
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	67 ee       	ldi	r22, 0xE7	; 231
     774:	73 e0       	ldi	r23, 0x03	; 3
     776:	8f ee       	ldi	r24, 0xEF	; 239
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 b7 18 	call	0x316e	; 0x316e <_ZN5Print5printEii>
		lcd.print(F("+"));
     77e:	6f ec       	ldi	r22, 0xCF	; 207
     780:	71 e0       	ldi	r23, 0x01	; 1
     782:	8f ee       	ldi	r24, 0xEF	; 239
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>

0000078a <_Z18showStaticAmperagev>:
	}
}


void showStaticAmperage() {
	lcd.setCursor(3, 0);
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	63 e0       	ldi	r22, 0x03	; 3
     78e:	8f ee       	ldi	r24, 0xEF	; 239
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("P"));
     796:	6d ef       	ldi	r22, 0xFD	; 253
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	8f ee       	ldi	r24, 0xEF	; 239
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	8f ee       	ldi	r24, 0xEF	; 239
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("M"));
     7ae:	6b ef       	ldi	r22, 0xFB	; 251
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	8f ee       	ldi	r24, 0xEF	; 239
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>

000007ba <_Z22showStaticWindingCharsv>:
}


// CR measured|perfect
void showStaticWindingChars() {
	lcd.setCursor(4, 0);
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	64 e0       	ldi	r22, 0x04	; 4
     7be:	8f ee       	ldi	r24, 0xEF	; 239
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("I="));
     7c6:	64 ef       	ldi	r22, 0xF4	; 244
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	8f ee       	ldi	r24, 0xEF	; 239
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     7d2:	41 e0       	ldi	r20, 0x01	; 1
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	8f ee       	ldi	r24, 0xEF	; 239
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("V="));
     7de:	61 ef       	ldi	r22, 0xF1	; 241
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	8f ee       	ldi	r24, 0xEF	; 239
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(8, 1);
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	68 e0       	ldi	r22, 0x08	; 8
     7ee:	8f ee       	ldi	r24, 0xEF	; 239
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("E="));
     7f6:	6e ee       	ldi	r22, 0xEE	; 238
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	8f ee       	ldi	r24, 0xEF	; 239
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>

00000802 <_Z19displayStaticAsModev>:
		lcd.print(F("+"));
	}
}

void displayStaticAsMode() {
	lcd.clear();
     802:	8f ee       	ldi	r24, 0xEF	; 239
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_ZN17LiquidCrystal_I2C5clearEv>
	switch(modeWork.current) {
     80a:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <modeWork>
     80e:	8e 2f       	mov	r24, r30
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	86 31       	cpi	r24, 0x16	; 22
     814:	91 05       	cpc	r25, r1
     816:	08 f0       	brcs	.+2      	; 0x81a <_Z19displayStaticAsModev+0x18>
     818:	b4 c0       	rjmp	.+360    	; 0x982 <__stack+0x83>
     81a:	fc 01       	movw	r30, r24
     81c:	ec 5c       	subi	r30, 0xCC	; 204
     81e:	ff 4f       	sbci	r31, 0xFF	; 255
     820:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcd.print(F("Connection type"));
     824:	6f eb       	ldi	r22, 0xBF	; 191
     826:	71 e0       	ldi	r23, 0x01	; 1
     828:	a8 c0       	rjmp	.+336    	; 0x97a <__stack+0x7b>
		break;
		case MW_SETUP_GAIN_AMPERAGE:
			lcd.print(F("A gain maxV/step"));
     82a:	6e ea       	ldi	r22, 0xAE	; 174
     82c:	71 e0       	ldi	r23, 0x01	; 1
     82e:	a5 c0       	rjmp	.+330    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			lcd.print(F("V gain maxV/step"));
     830:	6d e9       	ldi	r22, 0x9D	; 157
     832:	71 e0       	ldi	r23, 0x01	; 1
     834:	a2 c0       	rjmp	.+324    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_IMPEDANCE_AB:
			lcd.print(F("R1 AB"));
     836:	67 e9       	ldi	r22, 0x97	; 151
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	9f c0       	rjmp	.+318    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			lcd.print(F("R2 BC"));
     83c:	61 e9       	ldi	r22, 0x91	; 145
     83e:	71 e0       	ldi	r23, 0x01	; 1
     840:	9c c0       	rjmp	.+312    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			lcd.print(F("R3 AC"));
     842:	6b e8       	ldi	r22, 0x8B	; 139
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	99 c0       	rjmp	.+306    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			lcd.print(F("Vm AB"));
     848:	65 e8       	ldi	r22, 0x85	; 133
     84a:	71 e0       	ldi	r23, 0x01	; 1
     84c:	96 c0       	rjmp	.+300    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			lcd.print(F("Vm BC"));
     84e:	6f e7       	ldi	r22, 0x7F	; 127
     850:	71 e0       	ldi	r23, 0x01	; 1
     852:	93 c0       	rjmp	.+294    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			lcd.print(F("Vm AC"));
     854:	69 e7       	ldi	r22, 0x79	; 121
     856:	71 e0       	ldi	r23, 0x01	; 1
     858:	90 c0       	rjmp	.+288    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			lcd.print(F("Am AB"));
     85a:	63 e7       	ldi	r22, 0x73	; 115
     85c:	71 e0       	ldi	r23, 0x01	; 1
     85e:	8d c0       	rjmp	.+282    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			lcd.print(F("Am BC"));
     860:	6d e6       	ldi	r22, 0x6D	; 109
     862:	71 e0       	ldi	r23, 0x01	; 1
     864:	8a c0       	rjmp	.+276    	; 0x97a <__stack+0x7b>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcd.print(F("Am AC"));
     866:	67 e6       	ldi	r22, 0x67	; 103
     868:	71 e0       	ldi	r23, 0x01	; 1
     86a:	87 c0       	rjmp	.+270    	; 0x97a <__stack+0x7b>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcd.print(F("ECount"));
     86c:	60 e6       	ldi	r22, 0x60	; 96
     86e:	71 e0       	ldi	r23, 0x01	; 1
     870:	8f ee       	ldi	r24, 0xEF	; 239
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	68 e0       	ldi	r22, 0x08	; 8
     87c:	8f ee       	ldi	r24, 0xEF	; 239
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AB="));
     884:	6c e5       	ldi	r22, 0x5C	; 92
     886:	71 e0       	ldi	r23, 0x01	; 1
     888:	8f ee       	ldi	r24, 0xEF	; 239
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	8f ee       	ldi	r24, 0xEF	; 239
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("BC="));
     89c:	68 e5       	ldi	r22, 0x58	; 88
     89e:	71 e0       	ldi	r23, 0x01	; 1
     8a0:	8f ee       	ldi	r24, 0xEF	; 239
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 1);
     8a8:	41 e0       	ldi	r20, 0x01	; 1
     8aa:	68 e0       	ldi	r22, 0x08	; 8
     8ac:	8f ee       	ldi	r24, 0xEF	; 239
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AC="));
     8b4:	64 e5       	ldi	r22, 0x54	; 84
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	60 c0       	rjmp	.+192    	; 0x97a <__stack+0x7b>
			break;
		case MW_SHOW_ERRORS:
			lcd.print(F("I1="));
     8ba:	60 e5       	ldi	r22, 0x50	; 80
     8bc:	71 e0       	ldi	r23, 0x01	; 1
     8be:	8f ee       	ldi	r24, 0xEF	; 239
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	68 e0       	ldi	r22, 0x08	; 8
     8ca:	8f ee       	ldi	r24, 0xEF	; 239
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I2="));
     8d2:	6c e4       	ldi	r22, 0x4C	; 76
     8d4:	71 e0       	ldi	r23, 0x01	; 1
     8d6:	8f ee       	ldi	r24, 0xEF	; 239
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	8f ee       	ldi	r24, 0xEF	; 239
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I3="));
     8ea:	68 e4       	ldi	r22, 0x48	; 72
     8ec:	71 e0       	ldi	r23, 0x01	; 1
     8ee:	8f ee       	ldi	r24, 0xEF	; 239
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(14, 1);
     8f6:	41 e0       	ldi	r20, 0x01	; 1
     8f8:	6e e0       	ldi	r22, 0x0E	; 14
     8fa:	8f ee       	ldi	r24, 0xEF	; 239
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("e%"));
     902:	65 e4       	ldi	r22, 0x45	; 69
     904:	71 e0       	ldi	r23, 0x01	; 1
     906:	39 c0       	rjmp	.+114    	; 0x97a <__stack+0x7b>
			break;
		case MW_SHOW_AMPERAGE_AB:
			lcd.print(F("AB"));
     908:	62 e4       	ldi	r22, 0x42	; 66
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	05 c0       	rjmp	.+10     	; 0x918 <__stack+0x19>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_BC:
			lcd.print(F("BC"));
     90e:	6f e3       	ldi	r22, 0x3F	; 63
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_AC:
			lcd.print(F("AC"));
     914:	6c e3       	ldi	r22, 0x3C	; 60
     916:	71 e0       	ldi	r23, 0x01	; 1
     918:	8f ee       	ldi	r24, 0xEF	; 239
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticAmperage();
     920:	0c 94 c5 03 	jmp	0x78a	; 0x78a <_Z18showStaticAmperagev>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			lcd.print(F("AB"));
     924:	69 e3       	ldi	r22, 0x39	; 57
     926:	71 e0       	ldi	r23, 0x01	; 1
     928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0x35>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			lcd.print(F("BC"));
     92a:	66 e3       	ldi	r22, 0x36	; 54
     92c:	71 e0       	ldi	r23, 0x01	; 1
     92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			lcd.print(F("AC"));
     930:	63 e3       	ldi	r22, 0x33	; 51
     932:	71 e0       	ldi	r23, 0x01	; 1
     934:	8f ee       	ldi	r24, 0xEF	; 239
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticWindingChars();
     93c:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_Z22showStaticWindingCharsv>
			break;
		case MW_CONTROLL_MEASUREMENT:
			lcd.print(F("Measurement"));
     940:	67 e2       	ldi	r22, 0x27	; 39
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	8f ee       	ldi	r24, 0xEF	; 239
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	8f ee       	ldi	r24, 0xEF	; 239
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("B1=work; B2=stop"));
     958:	66 e1       	ldi	r22, 0x16	; 22
     95a:	71 e0       	ldi	r23, 0x01	; 1
     95c:	0e c0       	rjmp	.+28     	; 0x97a <__stack+0x7b>
			break;
		case MW_NEED_SETUP:
			lcd.print(F("Oooops!"));
     95e:	6e e0       	ldi	r22, 0x0E	; 14
     960:	71 e0       	ldi	r23, 0x01	; 1
     962:	8f ee       	ldi	r24, 0xEF	; 239
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     96a:	41 e0       	ldi	r20, 0x01	; 1
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	8f ee       	ldi	r24, 0xEF	; 239
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("Setup required"));
     976:	6f ef       	ldi	r22, 0xFF	; 255
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	8f ee       	ldi	r24, 0xEF	; 239
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
     982:	08 95       	ret

00000984 <_Z12lcdClearCellhhh>:
	lcd.print(F("E="));
}

//
// очистка поля значения от старых данных
void lcdClearCell(byte col, byte row, byte rowLength) {                
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	d8 2f       	mov	r29, r24
     98e:	16 2f       	mov	r17, r22
     990:	04 2f       	mov	r16, r20
	lcd.setCursor(col, row);                                        
     992:	46 2f       	mov	r20, r22
     994:	68 2f       	mov	r22, r24
     996:	8f ee       	ldi	r24, 0xEF	; 239
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	for (byte i = 0; i < rowLength; i++) {                             
     99e:	c0 e0       	ldi	r28, 0x00	; 0
     9a0:	c0 17       	cp	r28, r16
     9a2:	41 f0       	breq	.+16     	; 0x9b4 <_Z12lcdClearCellhhh+0x30>
		lcd.print(F(" "));
     9a4:	6c ee       	ldi	r22, 0xEC	; 236
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	8f ee       	ldi	r24, 0xEF	; 239
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>

//
// очистка поля значения от старых данных
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
     9b0:	cf 5f       	subi	r28, 0xFF	; 255
     9b2:	f6 cf       	rjmp	.-20     	; 0x9a0 <_Z12lcdClearCellhhh+0x1c>
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     9b4:	41 2f       	mov	r20, r17
     9b6:	6d 2f       	mov	r22, r29
     9b8:	8f ee       	ldi	r24, 0xEF	; 239
     9ba:	91 e0       	ldi	r25, 0x01	; 1
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
     9c4:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>

000009c8 <_Z12showGainInfov>:
	}
	return false;
}

void showGainInfo() {
	lcdClearCell(0, 1, 16);
     9c8:	40 e1       	ldi	r20, 0x10	; 16
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
	switch((int)setDigit.value) {
     9d2:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <setDigit>
     9d6:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <setDigit+0x1>
     9da:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <setDigit+0x2>
     9de:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <setDigit+0x3>
     9e2:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__fixsfsi>
     9e6:	62 30       	cpi	r22, 0x02	; 2
     9e8:	71 05       	cpc	r23, r1
     9ea:	b1 f0       	breq	.+44     	; 0xa18 <_Z12showGainInfov+0x50>
     9ec:	3c f4       	brge	.+14     	; 0x9fc <_Z12showGainInfov+0x34>
     9ee:	61 15       	cp	r22, r1
     9f0:	71 05       	cpc	r23, r1
     9f2:	61 f0       	breq	.+24     	; 0xa0c <_Z12showGainInfov+0x44>
     9f4:	61 30       	cpi	r22, 0x01	; 1
     9f6:	71 05       	cpc	r23, r1
     9f8:	61 f0       	breq	.+24     	; 0xa12 <_Z12showGainInfov+0x4a>
     9fa:	08 95       	ret
     9fc:	64 30       	cpi	r22, 0x04	; 4
     9fe:	71 05       	cpc	r23, r1
     a00:	89 f0       	breq	.+34     	; 0xa24 <_Z12showGainInfov+0x5c>
     a02:	6c f0       	brlt	.+26     	; 0xa1e <_Z12showGainInfov+0x56>
     a04:	65 30       	cpi	r22, 0x05	; 5
     a06:	71 05       	cpc	r23, r1
     a08:	81 f0       	breq	.+32     	; 0xa2a <_Z12showGainInfov+0x62>
     a0a:	08 95       	ret
		case 0:
			lcd.print(F("6.144 0.1875"));
     a0c:	69 e2       	ldi	r22, 0x29	; 41
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	0e c0       	rjmp	.+28     	; 0xa2e <_Z12showGainInfov+0x66>
			break;
		case 1:
			lcd.print(F("4.096 0.125"));
     a12:	6d e1       	ldi	r22, 0x1D	; 29
     a14:	72 e0       	ldi	r23, 0x02	; 2
     a16:	0b c0       	rjmp	.+22     	; 0xa2e <_Z12showGainInfov+0x66>
			break;
		case 2:
			lcd.print(F("1.024 0.0625"));
     a18:	60 e1       	ldi	r22, 0x10	; 16
     a1a:	72 e0       	ldi	r23, 0x02	; 2
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <_Z12showGainInfov+0x66>
			break;
		case 3:
			lcd.print(F("0.512 0.03125"));
     a1e:	62 e0       	ldi	r22, 0x02	; 2
     a20:	72 e0       	ldi	r23, 0x02	; 2
     a22:	05 c0       	rjmp	.+10     	; 0xa2e <_Z12showGainInfov+0x66>
			break;
		case 4:
			lcd.print(F("0.512 0.015625"));
     a24:	63 ef       	ldi	r22, 0xF3	; 243
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <_Z12showGainInfov+0x66>
			break;
		case 5:
			lcd.print(F("0.256 0.0078125"));
     a2a:	63 ee       	ldi	r22, 0xE3	; 227
     a2c:	71 e0       	ldi	r23, 0x01	; 1
     a2e:	8f ee       	ldi	r24, 0xEF	; 239
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>

00000a36 <_Z17showAmperageCharsh>:
			lcd.print(F("Setup required"));
			break;
	}
}

void showAmperageChars(byte _num) {
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	c8 2f       	mov	r28, r24
	lcdClearCell(6, 0, 9);
     a48:	49 e0       	ldi	r20, 0x09	; 9
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	86 e0       	ldi	r24, 0x06	; 6
     a4e:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
     a52:	d0 e0       	ldi	r29, 0x00	; 0
     a54:	8e 01       	movw	r16, r28
     a56:	0d 5f       	subi	r16, 0xFD	; 253
     a58:	1f 4f       	sbci	r17, 0xFF	; 255
     a5a:	f8 01       	movw	r30, r16
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	e0 5e       	subi	r30, 0xE0	; 224
     a66:	fe 4f       	sbci	r31, 0xFE	; 254
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	40 e2       	ldi	r20, 0x20	; 32
     a6e:	51 e4       	ldi	r21, 0x41	; 65
     a70:	60 81       	ld	r22, Z
     a72:	71 81       	ldd	r23, Z+1	; 0x01
     a74:	82 81       	ldd	r24, Z+2	; 0x02
     a76:	93 81       	ldd	r25, Z+3	; 0x03
     a78:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     a7c:	26 96       	adiw	r28, 0x06	; 6
     a7e:	87 fd       	sbrc	r24, 7
     a80:	15 c0       	rjmp	.+42     	; 0xaac <_Z17showAmperageCharsh+0x76>
		roundedSign = 9;
	} else if (adsChars.perfectAmperage[_num] < 100) {
     a82:	fe 01       	movw	r30, r28
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	e0 5e       	subi	r30, 0xE0	; 224
     a8e:	fe 4f       	sbci	r31, 0xFE	; 254
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	48 ec       	ldi	r20, 0xC8	; 200
     a96:	52 e4       	ldi	r21, 0x42	; 66
     a98:	60 81       	ld	r22, Z
     a9a:	71 81       	ldd	r23, Z+1	; 0x01
     a9c:	82 81       	ldd	r24, Z+2	; 0x02
     a9e:	93 81       	ldd	r25, Z+3	; 0x03
     aa0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     aa4:	87 fd       	sbrc	r24, 7
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <_Z17showAmperageCharsh+0x7a>
		roundedSign = 8;
	} else {
		roundedSign = 5;
     aa8:	25 e0       	ldi	r18, 0x05	; 5
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <_Z17showAmperageCharsh+0x7c>

void showAmperageChars(byte _num) {
	lcdClearCell(6, 0, 9);
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 9;
     aac:	29 e0       	ldi	r18, 0x09	; 9
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <_Z17showAmperageCharsh+0x7c>
	} else if (adsChars.perfectAmperage[_num] < 100) {
		roundedSign = 8;
     ab0:	28 e0       	ldi	r18, 0x08	; 8
	} else {
		roundedSign = 5;
	}
	lcd.print(adsChars.perfectAmperage[_num], roundedSign);
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	cc 0f       	add	r28, r28
     ab6:	dd 1f       	adc	r29, r29
     ab8:	cc 0f       	add	r28, r28
     aba:	dd 1f       	adc	r29, r29
     abc:	c0 5e       	subi	r28, 0xE0	; 224
     abe:	de 4f       	sbci	r29, 0xFE	; 254
     ac0:	48 81       	ld	r20, Y
     ac2:	59 81       	ldd	r21, Y+1	; 0x01
     ac4:	6a 81       	ldd	r22, Y+2	; 0x02
     ac6:	7b 81       	ldd	r23, Y+3	; 0x03
     ac8:	8f ee       	ldi	r24, 0xEF	; 239
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 99 19 	call	0x3332	; 0x3332 <_ZN5Print5printEdi>
	
	
	lcdClearCell(5, 1, 9);
     ad0:	49 e0       	ldi	r20, 0x09	; 9
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	85 e0       	ldi	r24, 0x05	; 5
     ad6:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
	if (adsChars.measuredAmperage[_num] < 10) {
     ada:	00 0f       	add	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	00 0f       	add	r16, r16
     ae0:	11 1f       	adc	r17, r17
     ae2:	f8 01       	movw	r30, r16
     ae4:	e0 5e       	subi	r30, 0xE0	; 224
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	c0 80       	ld	r12, Z
     aea:	d1 80       	ldd	r13, Z+1	; 0x01
     aec:	e2 80       	ldd	r14, Z+2	; 0x02
     aee:	f3 80       	ldd	r15, Z+3	; 0x03
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e2       	ldi	r20, 0x20	; 32
     af6:	51 e4       	ldi	r21, 0x41	; 65
     af8:	c7 01       	movw	r24, r14
     afa:	b6 01       	movw	r22, r12
     afc:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     b00:	87 fd       	sbrc	r24, 7
     b02:	0c c0       	rjmp	.+24     	; 0xb1c <_Z17showAmperageCharsh+0xe6>
		roundedSign = 9;
	} else if (adsChars.measuredAmperage[_num] < 100) {
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	48 ec       	ldi	r20, 0xC8	; 200
     b0a:	52 e4       	ldi	r21, 0x42	; 66
     b0c:	c7 01       	movw	r24, r14
     b0e:	b6 01       	movw	r22, r12
     b10:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     b14:	87 fd       	sbrc	r24, 7
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <_Z17showAmperageCharsh+0xea>
		roundedSign = 8;
	} else {
		roundedSign = 5;
     b18:	25 e0       	ldi	r18, 0x05	; 5
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <_Z17showAmperageCharsh+0xec>
	lcd.print(adsChars.perfectAmperage[_num], roundedSign);
	
	
	lcdClearCell(5, 1, 9);
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 9;
     b1c:	29 e0       	ldi	r18, 0x09	; 9
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <_Z17showAmperageCharsh+0xec>
	} else if (adsChars.measuredAmperage[_num] < 100) {
		roundedSign = 8;
     b20:	28 e0       	ldi	r18, 0x08	; 8
	} else {
		roundedSign = 5;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.measuredAmperage[_num], roundedSign);
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	b7 01       	movw	r22, r14
     b26:	a6 01       	movw	r20, r12
     b28:	8f ee       	ldi	r24, 0xEF	; 239
     b2a:	91 e0       	ldi	r25, 0x01	; 1
		} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
		roundedSign = 8;
	} else {
		roundedSign = 5;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.measuredAmperage[_num], roundedSign);
     b3c:	0c 94 99 19 	jmp	0x3332	; 0x3332 <_ZN5Print5printEdi>

00000b40 <_Z22showWindingCharsValuesh>:
	lcd.print(F("P"));
	lcd.setCursor(0, 1);
	lcd.print(F("M"));
}

void showWindingCharsValues(byte _num) {
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	c8 2f       	mov	r28, r24
	lcdClearCell(6, 0, 10);
     b4e:	4a e0       	ldi	r20, 0x0A	; 10
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	86 e0       	ldi	r24, 0x06	; 6
     b54:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
     b58:	d0 e0       	ldi	r29, 0x00	; 0
     b5a:	fe 01       	movw	r30, r28
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	e4 5d       	subi	r30, 0xD4	; 212
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	c0 80       	ld	r12, Z
     b6a:	d1 80       	ldd	r13, Z+1	; 0x01
     b6c:	e2 80       	ldd	r14, Z+2	; 0x02
     b6e:	f3 80       	ldd	r15, Z+3	; 0x03
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e2       	ldi	r20, 0x20	; 32
     b76:	51 e4       	ldi	r21, 0x41	; 65
     b78:	c7 01       	movw	r24, r14
     b7a:	b6 01       	movw	r22, r12
     b7c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     b80:	87 fd       	sbrc	r24, 7
     b82:	0c c0       	rjmp	.+24     	; 0xb9c <_Z22showWindingCharsValuesh+0x5c>
		roundedSign = 8;
	} else if (adsChars.measuredAmperage[_num] < 100) {
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	48 ec       	ldi	r20, 0xC8	; 200
     b8a:	52 e4       	ldi	r21, 0x42	; 66
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     b94:	87 fd       	sbrc	r24, 7
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <_Z22showWindingCharsValuesh+0x60>
		roundedSign = 7;
	} else {
		roundedSign = 4;
     b98:	24 e0       	ldi	r18, 0x04	; 4
     b9a:	03 c0       	rjmp	.+6      	; 0xba2 <_Z22showWindingCharsValuesh+0x62>

void showWindingCharsValues(byte _num) {
	lcdClearCell(6, 0, 10);
	byte roundedSign = 2;
	if (adsChars.measuredAmperage[_num] < 10) {
		roundedSign = 8;
     b9c:	28 e0       	ldi	r18, 0x08	; 8
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <_Z22showWindingCharsValuesh+0x62>
	} else if (adsChars.measuredAmperage[_num] < 100) {
		roundedSign = 7;
     ba0:	27 e0       	ldi	r18, 0x07	; 7
	} else {
		roundedSign = 4;
	}
	lcd.print(adsChars.measuredAmperage[_num], roundedSign);
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	b7 01       	movw	r22, r14
     ba6:	a6 01       	movw	r20, r12
     ba8:	8f ee       	ldi	r24, 0xEF	; 239
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 99 19 	call	0x3332	; 0x3332 <_ZN5Print5printEdi>
	
	
	lcdClearCell(2, 1, 8);
     bb0:	48 e0       	ldi	r20, 0x08	; 8
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
	if (adsChars.voltage[_num] < 100) {
     bba:	cc 0f       	add	r28, r28
     bbc:	dd 1f       	adc	r29, r29
     bbe:	cc 0f       	add	r28, r28
     bc0:	dd 1f       	adc	r29, r29
     bc2:	fe 01       	movw	r30, r28
     bc4:	e0 5e       	subi	r30, 0xE0	; 224
     bc6:	fe 4f       	sbci	r31, 0xFE	; 254
     bc8:	c0 80       	ld	r12, Z
     bca:	d1 80       	ldd	r13, Z+1	; 0x01
     bcc:	e2 80       	ldd	r14, Z+2	; 0x02
     bce:	f3 80       	ldd	r15, Z+3	; 0x03
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	48 ec       	ldi	r20, 0xC8	; 200
     bd6:	52 e4       	ldi	r21, 0x42	; 66
     bd8:	c7 01       	movw	r24, r14
     bda:	b6 01       	movw	r22, r12
     bdc:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     be0:	87 fd       	sbrc	r24, 7
     be2:	0c c0       	rjmp	.+24     	; 0xbfc <_Z22showWindingCharsValuesh+0xbc>
		roundedSign = 2;
	} else if (adsChars.voltage[_num] < 1000) {
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4a e7       	ldi	r20, 0x7A	; 122
     bea:	54 e4       	ldi	r21, 0x44	; 68
     bec:	c7 01       	movw	r24, r14
     bee:	b6 01       	movw	r22, r12
     bf0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     bf4:	87 ff       	sbrs	r24, 7
     bf6:	27 c0       	rjmp	.+78     	; 0xc46 <_Z22showWindingCharsValuesh+0x106>
		roundedSign = 1;
     bf8:	21 e0       	ldi	r18, 0x01	; 1
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <_Z22showWindingCharsValuesh+0xbe>
	lcd.print(adsChars.measuredAmperage[_num], roundedSign);
	
	
	lcdClearCell(2, 1, 8);
	if (adsChars.voltage[_num] < 100) {
		roundedSign = 2;
     bfc:	22 e0       	ldi	r18, 0x02	; 2
		roundedSign = 1;
	} else {
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	b7 01       	movw	r22, r14
     c02:	a6 01       	movw	r20, r12
     c04:	8f ee       	ldi	r24, 0xEF	; 239
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 99 19 	call	0x3332	; 0x3332 <_ZN5Print5printEdi>
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
     c0c:	45 e0       	ldi	r20, 0x05	; 5
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	8a e0       	ldi	r24, 0x0A	; 10
     c12:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
	lcd.print(icError.curLvl[_num], 1);
     c16:	cd 5f       	subi	r28, 0xFD	; 253
     c18:	dd 4f       	sbci	r29, 0xFD	; 253
     c1a:	48 81       	ld	r20, Y
     c1c:	59 81       	ldd	r21, Y+1	; 0x01
     c1e:	6a 81       	ldd	r22, Y+2	; 0x02
     c20:	7b 81       	ldd	r23, Y+3	; 0x03
     c22:	21 e0       	ldi	r18, 0x01	; 1
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	8f ee       	ldi	r24, 0xEF	; 239
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 99 19 	call	0x3332	; 0x3332 <_ZN5Print5printEdi>
	lcd.print(F("%"));
     c2e:	67 ef       	ldi	r22, 0xF7	; 247
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	8f ee       	ldi	r24, 0xEF	; 239
     c34:	91 e0       	ldi	r25, 0x01	; 1
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
	lcd.print(icError.curLvl[_num], 1);
	lcd.print(F("%"));
     c42:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
	} else {
		lcd.print(999);
     c46:	4a e0       	ldi	r20, 0x0A	; 10
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	67 ee       	ldi	r22, 0xE7	; 231
     c4c:	73 e0       	ldi	r23, 0x03	; 3
     c4e:	8f ee       	ldi	r24, 0xEF	; 239
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 b7 18 	call	0x316e	; 0x316e <_ZN5Print5printEii>
		lcd.print(F("+"));
     c56:	69 ef       	ldi	r22, 0xF9	; 249
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	8f ee       	ldi	r24, 0xEF	; 239
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
     c62:	d4 cf       	rjmp	.-88     	; 0xc0c <_Z22showWindingCharsValuesh+0xcc>

00000c64 <_Z13displayAsModev>:
			break;
	}
}

void displayAsMode() {
	if (modeWork.current != modeWork.prev) {
     c64:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <modeWork>
     c68:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <modeWork+0x1>
     c6c:	89 17       	cp	r24, r25
     c6e:	39 f0       	breq	.+14     	; 0xc7e <_Z13displayAsModev+0x1a>
		modeWork.prev = modeWork.current;
     c70:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <modeWork+0x1>
		lcdUpdateScreen = true;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
		displayStaticAsMode();
     c7a:	0e 94 01 04 	call	0x802	; 0x802 <_Z19displayStaticAsModev>
	}
	if (!lcdUpdateScreen) {
     c7e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
     c82:	88 23       	and	r24, r24
     c84:	09 f4       	brne	.+2      	; 0xc88 <_Z13displayAsModev+0x24>
     c86:	99 c0       	rjmp	.+306    	; 0xdba <_Z13displayAsModev+0x156>
		return;
	} 
	lcdUpdateScreen = false;
     c88:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__data_end>
	
	switch(modeWork.current) {
     c8c:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <modeWork>
     c90:	8e 2f       	mov	r24, r30
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	fc 01       	movw	r30, r24
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	e4 31       	cpi	r30, 0x14	; 20
     c9a:	f1 05       	cpc	r31, r1
     c9c:	08 f0       	brcs	.+2      	; 0xca0 <_Z13displayAsModev+0x3c>
     c9e:	8d c0       	rjmp	.+282    	; 0xdba <_Z13displayAsModev+0x156>
     ca0:	e6 5b       	subi	r30, 0xB6	; 182
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			lcdClearCell(0, 1, 8);
     ca8:	48 e0       	ldi	r20, 0x08	; 8
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			if (setDigit.value == CONNECTION_TYPE_STAR) {
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	a9 01       	movw	r20, r18
     cb8:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <setDigit>
     cbc:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <setDigit+0x1>
     cc0:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <setDigit+0x2>
     cc4:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <setDigit+0x3>
     cc8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     ccc:	81 11       	cpse	r24, r1
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <_Z13displayAsModev+0x72>
				lcd.print(F("Star"));
     cd0:	6e ed       	ldi	r22, 0xDE	; 222
     cd2:	71 e0       	ldi	r23, 0x01	; 1
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <_Z13displayAsModev+0x76>
			} else {
				lcd.print(F("Triangle"));
     cd6:	65 ed       	ldi	r22, 0xD5	; 213
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	8f ee       	ldi	r24, 0xEF	; 239
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			}
			break;
		case MW_SETUP_GAIN_AMPERAGE:
		case MW_SETUP_GAIN_VOLTAGE:
			showGainInfo();
     ce2:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_Z12showGainInfov>
		case MW_SETUP_MULT_VOLTAGE_BC:
		case MW_SETUP_MULT_VOLTAGE_AC:
		case MW_SETUP_MULT_AMPERAGE_AB:
		case MW_SETUP_MULT_AMPERAGE_BC:
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcdClearCell(7, 0, 8);
     ce6:	48 e0       	ldi	r20, 0x08	; 8
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			lcd.print(F("x"));
     cf0:	63 ed       	ldi	r22, 0xD3	; 211
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	8f ee       	ldi	r24, 0xEF	; 239
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(setDigit.curMultiplier, 3);
     cfc:	40 91 ff 01 	lds	r20, 0x01FF	; 0x8001ff <setDigit+0x4>
     d00:	50 91 00 02 	lds	r21, 0x0200	; 0x800200 <setDigit+0x5>
     d04:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <setDigit+0x6>
     d08:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <setDigit+0x7>
     d0c:	23 e0       	ldi	r18, 0x03	; 3
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	8f ee       	ldi	r24, 0xEF	; 239
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 99 19 	call	0x3332	; 0x3332 <_ZN5Print5printEdi>
			lcdClearCell(0, 1, 16);
     d18:	40 e1       	ldi	r20, 0x10	; 16
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			lcd.print(setDigit.value, 3);
     d22:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
     d26:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
     d2a:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
     d2e:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
     d32:	23 e0       	ldi	r18, 0x03	; 3
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	8f ee       	ldi	r24, 0xEF	; 239
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0c 94 99 19 	jmp	0x3332	; 0x3332 <_ZN5Print5printEdi>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcdClearCell(11, 0, 4);
     d3e:	44 e0       	ldi	r20, 0x04	; 4
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	8b e0       	ldi	r24, 0x0B	; 11
     d44:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(0);
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	0e 94 a0 03 	call	0x740	; 0x740 <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(3, 1, 4);
     d4e:	44 e0       	ldi	r20, 0x04	; 4
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(1);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	0e 94 a0 03 	call	0x740	; 0x740 <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(11, 1, 4);
     d5e:	44 e0       	ldi	r20, 0x04	; 4
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	8b e0       	ldi	r24, 0x0B	; 11
     d64:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(2);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	0c 94 a0 03 	jmp	0x740	; 0x740 <_Z19lcdPrintCriticalLvlh>
			break;
		case MW_SHOW_ERRORS:
			lcdClearCell(3, 0, 5);
     d6e:	45 e0       	ldi	r20, 0x05	; 5
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(0);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(11, 0, 5);
     d7e:	45 e0       	ldi	r20, 0x05	; 5
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	8b e0       	ldi	r24, 0x0B	; 11
     d84:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(1);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(3, 1, 5);
     d8e:	45 e0       	ldi	r20, 0x05	; 5
     d90:	61 e0       	ldi	r22, 0x01	; 1
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	0e 94 c2 04 	call	0x984	; 0x984 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(2);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_Z27lcdPrinRoundedCurErrorLevelh>
			break;
		case MW_SHOW_AMPERAGE_AB:
			showAmperageChars(0);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <_Z13displayAsModev+0x140>
			break;
		case MW_SHOW_AMPERAGE_BC:
			showAmperageChars(1);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <_Z17showAmperageCharsh>
			break;
		case MW_SHOW_AMPERAGE_AC:
			showAmperageChars(2);
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	fc cf       	rjmp	.-8      	; 0xda4 <_Z13displayAsModev+0x140>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			showWindingCharsValues(0);
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <_Z13displayAsModev+0x152>
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			showWindingCharsValues(1);
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <_Z13displayAsModev+0x152>
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			showWindingCharsValues(2);
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <_Z22showWindingCharsValuesh>
     dba:	08 95       	ret

00000dbc <loop>:
		modeWork.current = MW_NEED_SETUP;
		Serial.println("Need setup params");
	}
}

void loop() {
     dbc:	4f 92       	push	r4
     dbe:	5f 92       	push	r5
     dc0:	6f 92       	push	r6
     dc2:	7f 92       	push	r7
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
	button1Callback.tick();
     dd6:	8b e6       	ldi	r24, 0x6B	; 107
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <_ZN9OneButton4tickEv>
	button2Callback.tick();
     dde:	8a e4       	ldi	r24, 0x4A	; 74
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <_ZN9OneButton4tickEv>
	displayAsMode();
     de6:	0e 94 32 06 	call	0xc64	; 0xc64 <_Z13displayAsModev>
	if(settings.isReadyToWork == MM_WORK) {
     dea:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <settings>
     dee:	88 23       	and	r24, r24
     df0:	09 f4       	brne	.+2      	; 0xdf4 <loop+0x38>
     df2:	5c c0       	rjmp	.+184    	; 0xeac <loop+0xf0>
		getAdsParams();
     df4:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z12getAdsParamsv>
		if (adsChars.currentMeasurement < adsChars.measurementsCount) {
     df8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <adsChars+0x3d>
     dfc:	c0 90 5c 01 	lds	r12, 0x015C	; 0x80015c <adsChars+0x3c>
     e00:	8c 15       	cp	r24, r12
     e02:	20 f4       	brcc	.+8      	; 0xe0c <loop+0x50>
			adsChars.currentMeasurement++;
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <adsChars+0x3d>
     e0a:	50 c0       	rjmp	.+160    	; 0xeac <loop+0xf0>
		} else {
			lcdUpdateScreen = true;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
     e12:	c0 e2       	ldi	r28, 0x20	; 32
     e14:	d1 e0       	ldi	r29, 0x01	; 1
     e16:	0d e1       	ldi	r16, 0x1D	; 29
     e18:	12 e0       	ldi	r17, 0x02	; 2
			for (byte i = 0; i < 3; i++) {
     e1a:	b1 2c       	mov	r11, r1
				adsChars.voltage[i] = adsChars.sumVoltage[i] / adsChars.measurementsCount * settings.multiplierVoltage[i];
     e1c:	d1 2c       	mov	r13, r1
     e1e:	e1 2c       	mov	r14, r1
     e20:	f1 2c       	mov	r15, r1
     e22:	c7 01       	movw	r24, r14
     e24:	b6 01       	movw	r22, r12
     e26:	0e 94 91 14 	call	0x2922	; 0x2922 <__floatsisf>
     e2a:	2b 01       	movw	r4, r22
     e2c:	3c 01       	movw	r6, r24
     e2e:	9b 01       	movw	r18, r22
     e30:	ac 01       	movw	r20, r24
     e32:	6c a1       	ldd	r22, Y+36	; 0x24
     e34:	7d a1       	ldd	r23, Y+37	; 0x25
     e36:	8e a1       	ldd	r24, Y+38	; 0x26
     e38:	9f a1       	ldd	r25, Y+39	; 0x27
     e3a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__divsf3>
     e3e:	f8 01       	movw	r30, r16
     e40:	25 89       	ldd	r18, Z+21	; 0x15
     e42:	36 89       	ldd	r19, Z+22	; 0x16
     e44:	47 89       	ldd	r20, Z+23	; 0x17
     e46:	50 8d       	ldd	r21, Z+24	; 0x18
     e48:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     e4c:	68 83       	st	Y, r22
     e4e:	79 83       	std	Y+1, r23	; 0x01
     e50:	8a 83       	std	Y+2, r24	; 0x02
     e52:	9b 83       	std	Y+3, r25	; 0x03
				adsChars.measuredAmperage[i] = adsChars.sumMeasuredAmperage[i] / adsChars.measurementsCount * settings.multiplierAmperage[i];
     e54:	a3 01       	movw	r20, r6
     e56:	92 01       	movw	r18, r4
     e58:	68 a9       	ldd	r22, Y+48	; 0x30
     e5a:	79 a9       	ldd	r23, Y+49	; 0x31
     e5c:	8a a9       	ldd	r24, Y+50	; 0x32
     e5e:	9b a9       	ldd	r25, Y+51	; 0x33
     e60:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__divsf3>
     e64:	f8 01       	movw	r30, r16
     e66:	21 a1       	ldd	r18, Z+33	; 0x21
     e68:	32 a1       	ldd	r19, Z+34	; 0x22
     e6a:	43 a1       	ldd	r20, Z+35	; 0x23
     e6c:	54 a1       	ldd	r21, Z+36	; 0x24
     e6e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     e72:	6c 87       	std	Y+12, r22	; 0x0c
     e74:	7d 87       	std	Y+13, r23	; 0x0d
     e76:	8e 87       	std	Y+14, r24	; 0x0e
     e78:	9f 87       	std	Y+15, r25	; 0x0f
		getAdsParams();
		if (adsChars.currentMeasurement < adsChars.measurementsCount) {
			adsChars.currentMeasurement++;
		} else {
			lcdUpdateScreen = true;
			for (byte i = 0; i < 3; i++) {
     e7a:	b3 94       	inc	r11
     e7c:	24 96       	adiw	r28, 0x04	; 4
     e7e:	0c 5f       	subi	r16, 0xFC	; 252
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	f3 e0       	ldi	r31, 0x03	; 3
     e84:	bf 12       	cpse	r11, r31
     e86:	cd cf       	rjmp	.-102    	; 0xe22 <loop+0x66>
				adsChars.voltage[i] = adsChars.sumVoltage[i] / adsChars.measurementsCount * settings.multiplierVoltage[i];
				adsChars.measuredAmperage[i] = adsChars.sumMeasuredAmperage[i] / adsChars.measurementsCount * settings.multiplierAmperage[i];
			/*	impedance.measured[i] = impedance.sumMeasured[i] / adsChars.measurementsCount;
				icError.curLvl[i] = getICLevel(impedance.measured[i], i);*/
			}
			initAvgVars();
     e88:	0e 94 98 02 	call	0x530	; 0x530 <_Z11initAvgVarsv>
				//	icError.hasAsymmetry = isErrorsAsymmetric(impedance.measured);
					isHasIC = true;
					break;
				}
			}
			if (!icError.hasAsymmetry) {
     e8c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <icError+0x18>
     e90:	88 23       	and	r24, r24
     e92:	61 f0       	breq	.+24     	; 0xeac <loop+0xf0>
				isHasIC = false;
			} else {
				settings.isReadyToWork = MM_STOP;
     e94:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <settings>
				modeWork.current = MW_SHOW_ERRORS_COUNTERS;
     e98:	8d e0       	ldi	r24, 0x0D	; 13
     e9a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <modeWork>
				digitalWrite(BEEPER, HIGH);
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	80 e1       	ldi	r24, 0x10	; 16
     ea2:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <digitalWrite>
				icError.hasIC = true;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <icError+0x19>
			}
		}
	} 
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	7f 90       	pop	r7
     ec0:	6f 90       	pop	r6
     ec2:	5f 90       	pop	r5
     ec4:	4f 90       	pop	r4
     ec6:	08 95       	ret

00000ec8 <_Z31getCurrentWindingImpedanceValuev>:
	}
	lcd.setCursor(col, row);                                          
}


float getCurrentWindingImpedanceValue() {
     ec8:	8f 92       	push	r8
     eca:	9f 92       	push	r9
     ecc:	af 92       	push	r10
     ece:	bf 92       	push	r11
     ed0:	cf 92       	push	r12
     ed2:	df 92       	push	r13
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
	byte _windingIndex = 0;
	float _voltage = 0;
	float _amperage = 0;
	
	switch(modeWork.current){
     ede:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <modeWork>
     ee2:	8b 30       	cpi	r24, 0x0B	; 11
     ee4:	21 f0       	breq	.+8      	; 0xeee <_Z31getCurrentWindingImpedanceValuev+0x26>
     ee6:	8c 30       	cpi	r24, 0x0C	; 12
     ee8:	21 f4       	brne	.+8      	; 0xef2 <_Z31getCurrentWindingImpedanceValuev+0x2a>
		break;
		case MW_SETUP_IMPEDANCE_BC:
		_windingIndex = 1;
		break;
		case MW_SETUP_IMPEDANCE_AC:
		_windingIndex = 2;
     eea:	c2 e0       	ldi	r28, 0x02	; 2
		break;
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <_Z31getCurrentWindingImpedanceValuev+0x2c>
	switch(modeWork.current){
		case MW_SETUP_IMPEDANCE_AB:
		_windingIndex = 0;
		break;
		case MW_SETUP_IMPEDANCE_BC:
		_windingIndex = 1;
     eee:	c1 e0       	ldi	r28, 0x01	; 1
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <_Z31getCurrentWindingImpedanceValuev+0x2c>
	lcd.setCursor(col, row);                                          
}


float getCurrentWindingImpedanceValue() {
	byte _windingIndex = 0;
     ef2:	c0 e0       	ldi	r28, 0x00	; 0
		case MW_SETUP_IMPEDANCE_AC:
		_windingIndex = 2;
		break;
	}

	_voltage = adsVoltage.readADC_SingleEnded(_windingIndex);
     ef4:	6c 2f       	mov	r22, r28
     ef6:	81 e9       	ldi	r24, 0x91	; 145
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     efe:	8c 01       	movw	r16, r24
	_amperage = adsAmperage.readADC_SingleEnded(_windingIndex);
     f00:	6c 2f       	mov	r22, r28
     f02:	8c e8       	ldi	r24, 0x8C	; 140
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     f0a:	bc 01       	movw	r22, r24
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>

	_voltage *= ads.voltageStep;
     f14:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <__data_start+0x18>
     f18:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <__data_start+0x19>
     f1c:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <__data_start+0x1a>
     f20:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <__data_start+0x1b>
	_amperage *= ads.amperageStep;
     f24:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_start+0x1c>
     f28:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_start+0x1d>
     f2c:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_start+0x1e>
     f30:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <__data_start+0x1f>
     f34:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     f38:	6b 01       	movw	r12, r22
     f3a:	7c 01       	movw	r14, r24
	
	return _amperage == 0? 0: _voltage / _amperage /** multiplier.coef[_windingIndex]*/;
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	a9 01       	movw	r20, r18
     f42:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     f46:	88 23       	and	r24, r24
     f48:	71 f0       	breq	.+28     	; 0xf66 <_Z31getCurrentWindingImpedanceValuev+0x9e>
		case MW_SETUP_IMPEDANCE_AC:
		_windingIndex = 2;
		break;
	}

	_voltage = adsVoltage.readADC_SingleEnded(_windingIndex);
     f4a:	b8 01       	movw	r22, r16
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
	_amperage = adsAmperage.readADC_SingleEnded(_windingIndex);

	_voltage *= ads.voltageStep;
	_amperage *= ads.amperageStep;
	
	return _amperage == 0? 0: _voltage / _amperage /** multiplier.coef[_windingIndex]*/;
     f54:	a5 01       	movw	r20, r10
     f56:	94 01       	movw	r18, r8
     f58:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     f5c:	a7 01       	movw	r20, r14
     f5e:	96 01       	movw	r18, r12
     f60:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__divsf3>
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <_Z31getCurrentWindingImpedanceValuev+0xa4>
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	cb 01       	movw	r24, r22
}
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	08 95       	ret

00000f84 <_Z21button1LongPressStartv>:
		settings.isReadyToWork = MM_STOP;
		return;
	}
}

void button1LongPressStart() {
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
     f8c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <modeWork>
     f90:	9c ef       	ldi	r25, 0xFC	; 252
     f92:	98 0f       	add	r25, r24
     f94:	96 30       	cpi	r25, 0x06	; 6
     f96:	40 f5       	brcc	.+80     	; 0xfe8 <_Z21button1LongPressStartv+0x64>
		// выбор множителя x1x10x100x0.1x0.01x0.001
		setDigit.curMultiplier = setDigit.curMultiplier >= 100.0f? 0.001f: setDigit.curMultiplier * 10.0f;
     f98:	c0 90 ff 01 	lds	r12, 0x01FF	; 0x8001ff <setDigit+0x4>
     f9c:	d0 90 00 02 	lds	r13, 0x0200	; 0x800200 <setDigit+0x5>
     fa0:	e0 90 01 02 	lds	r14, 0x0201	; 0x800201 <setDigit+0x6>
     fa4:	f0 90 02 02 	lds	r15, 0x0202	; 0x800202 <setDigit+0x7>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	48 ec       	ldi	r20, 0xC8	; 200
     fae:	52 e4       	ldi	r21, 0x42	; 66
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__gesf2>
     fb8:	87 ff       	sbrs	r24, 7
     fba:	09 c0       	rjmp	.+18     	; 0xfce <_Z21button1LongPressStartv+0x4a>
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e2       	ldi	r20, 0x20	; 32
     fc2:	51 e4       	ldi	r21, 0x41	; 65
     fc4:	c7 01       	movw	r24, r14
     fc6:	b6 01       	movw	r22, r12
     fc8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <_Z21button1LongPressStartv+0x52>
     fce:	6f e6       	ldi	r22, 0x6F	; 111
     fd0:	72 e1       	ldi	r23, 0x12	; 18
     fd2:	83 e8       	ldi	r24, 0x83	; 131
     fd4:	9a e3       	ldi	r25, 0x3A	; 58
     fd6:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <setDigit+0x4>
     fda:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <setDigit+0x5>
     fde:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <setDigit+0x6>
     fe2:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <setDigit+0x7>
     fe6:	0e c0       	rjmp	.+28     	; 0x1004 <_Z21button1LongPressStartv+0x80>
		lcdUpdateScreen = true;
		return;
	}
	
	if (modeWork.current >= MW_SETUP_IMPEDANCE_AB && modeWork.current <= MW_SETUP_IMPEDANCE_AC) {
     fe8:	96 ef       	ldi	r25, 0xF6	; 246
     fea:	98 0f       	add	r25, r24
     fec:	93 30       	cpi	r25, 0x03	; 3
     fee:	70 f4       	brcc	.+28     	; 0x100c <_Z21button1LongPressStartv+0x88>
		setDigit.value = getCurrentWindingImpedanceValue();
     ff0:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z31getCurrentWindingImpedanceValuev>
     ff4:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <setDigit>
     ff8:	70 93 fc 01 	sts	0x01FC, r23	; 0x8001fc <setDigit+0x1>
     ffc:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <setDigit+0x2>
    1000:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <setDigit+0x3>
		lcdUpdateScreen = true;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
    100a:	0b c0       	rjmp	.+22     	; 0x1022 <_Z21button1LongPressStartv+0x9e>
		return;
	}
	
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    100c:	93 ef       	ldi	r25, 0xF3	; 243
    100e:	98 0f       	add	r25, r24
    1010:	98 30       	cpi	r25, 0x08	; 8
    1012:	10 f4       	brcc	.+4      	; 0x1018 <_Z21button1LongPressStartv+0x94>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
    1014:	85 e1       	ldi	r24, 0x15	; 21
    1016:	03 c0       	rjmp	.+6      	; 0x101e <_Z21button1LongPressStartv+0x9a>
		return;
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1018:	85 31       	cpi	r24, 0x15	; 21
    101a:	19 f4       	brne	.+6      	; 0x1022 <_Z21button1LongPressStartv+0x9e>
		modeWork.current = MW_SHOWING_START;
    101c:	8d e0       	ldi	r24, 0x0D	; 13
    101e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <modeWork>
	}
}
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	08 95       	ret

0000102c <_Z12setEditValuev>:
		settings.isSetupMode = true;
	}
}

void setEditValue() {
	lcdUpdateScreen = true;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
	switch(modeWork.current) {
    1032:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <modeWork>
    1036:	8e 2f       	mov	r24, r30
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	fc 01       	movw	r30, r24
    103c:	31 97       	sbiw	r30, 0x01	; 1
    103e:	ec 30       	cpi	r30, 0x0C	; 12
    1040:	f1 05       	cpc	r31, r1
    1042:	08 f0       	brcs	.+2      	; 0x1046 <_Z12setEditValuev+0x1a>
    1044:	72 c0       	rjmp	.+228    	; 0x112a <_Z12setEditValuev+0xfe>
    1046:	e2 5a       	subi	r30, 0xA2	; 162
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			setDigit.value = settings.connectionType;
    104e:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <settings+0x1>
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <_Z12setEditValuev+0x2c>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			setDigit.value = settings.currentAmperageGain;
    1054:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <settings+0x13>
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
    1062:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <setDigit>
    1066:	70 93 fc 01 	sts	0x01FC, r23	; 0x8001fc <setDigit+0x1>
    106a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <setDigit+0x2>
    106e:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <setDigit+0x3>
			break;
    1072:	5b c0       	rjmp	.+182    	; 0x112a <_Z12setEditValuev+0xfe>
		case MW_SETUP_GAIN_VOLTAGE:
			setDigit.value = settings.currentVoltageGain;
    1074:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <settings+0x14>
    1078:	ef cf       	rjmp	.-34     	; 0x1058 <_Z12setEditValuev+0x2c>
			break;			
		case MW_SETUP_IMPEDANCE_AB:
			setDigit.value = settings.impedance[0];
    107a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <settings+0x6>
    107e:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <settings+0x7>
    1082:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <settings+0x8>
    1086:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <settings+0x9>
    108a:	47 c0       	rjmp	.+142    	; 0x111a <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			setDigit.value = settings.impedance[1];
    108c:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <settings+0xa>
    1090:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <settings+0xb>
    1094:	a0 91 29 02 	lds	r26, 0x0229	; 0x800229 <settings+0xc>
    1098:	b0 91 2a 02 	lds	r27, 0x022A	; 0x80022a <settings+0xd>
    109c:	3e c0       	rjmp	.+124    	; 0x111a <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			setDigit.value = settings.impedance[2];
    109e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <settings+0xe>
    10a2:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <settings+0xf>
    10a6:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <settings+0x10>
    10aa:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <settings+0x11>
    10ae:	35 c0       	rjmp	.+106    	; 0x111a <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			setDigit.value = settings.multiplierVoltage[0];
    10b0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <settings+0x15>
    10b4:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <settings+0x16>
    10b8:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <settings+0x17>
    10bc:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <settings+0x18>
    10c0:	2c c0       	rjmp	.+88     	; 0x111a <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			setDigit.value = settings.multiplierVoltage[1];
    10c2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <settings+0x19>
    10c6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <settings+0x1a>
    10ca:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <settings+0x1b>
    10ce:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <settings+0x1c>
    10d2:	23 c0       	rjmp	.+70     	; 0x111a <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			setDigit.value = settings.multiplierVoltage[2];
    10d4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <settings+0x1d>
    10d8:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <settings+0x1e>
    10dc:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <settings+0x1f>
    10e0:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <settings+0x20>
    10e4:	1a c0       	rjmp	.+52     	; 0x111a <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			setDigit.value = settings.multiplierAmperage[0];
    10e6:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <settings+0x21>
    10ea:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <settings+0x22>
    10ee:	a0 91 40 02 	lds	r26, 0x0240	; 0x800240 <settings+0x23>
    10f2:	b0 91 41 02 	lds	r27, 0x0241	; 0x800241 <settings+0x24>
    10f6:	11 c0       	rjmp	.+34     	; 0x111a <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			setDigit.value = settings.multiplierAmperage[1];
    10f8:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <settings+0x25>
    10fc:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <settings+0x26>
    1100:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <settings+0x27>
    1104:	b0 91 45 02 	lds	r27, 0x0245	; 0x800245 <settings+0x28>
    1108:	08 c0       	rjmp	.+16     	; 0x111a <_Z12setEditValuev+0xee>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			setDigit.value = settings.multiplierAmperage[2];
    110a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <settings+0x29>
    110e:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <settings+0x2a>
    1112:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <settings+0x2b>
    1116:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <settings+0x2c>
    111a:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <setDigit>
    111e:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <setDigit+0x1>
    1122:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <setDigit+0x2>
    1126:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <setDigit+0x3>
			break;
	}
	setDigit.curMultiplier = 1.0f;
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e8       	ldi	r26, 0x80	; 128
    1130:	bf e3       	ldi	r27, 0x3F	; 63
    1132:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <setDigit+0x4>
    1136:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <setDigit+0x5>
    113a:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <setDigit+0x6>
    113e:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <setDigit+0x7>
    1142:	08 95       	ret

00001144 <_Z12button2Clickv>:
		initAvgVars();
		return;
	}
}

void button2Click() {
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	cf 93       	push	r28
	if (modeWork.current == MW_NEED_SETUP) {
    114e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <modeWork>
    1152:	81 11       	cpse	r24, r1
    1154:	0a c0       	rjmp	.+20     	; 0x116a <_Z12button2Clickv+0x26>
		lcdUpdateScreen = true;
    1156:	c1 e0       	ldi	r28, 0x01	; 1
    1158:	c0 93 ec 01 	sts	0x01EC, r28	; 0x8001ec <__data_end>
		modeWork.current = MW_SETUP_START;
    115c:	c0 93 ed 01 	sts	0x01ED, r28	; 0x8001ed <modeWork>
		setEditValue();
    1160:	0e 94 16 08 	call	0x102c	; 0x102c <_Z12setEditValuev>
		settings.isSetupMode = true;
    1164:	c0 93 2f 02 	sts	0x022F, r28	; 0x80022f <settings+0x12>
		return;
    1168:	8e c0       	rjmp	.+284    	; 0x1286 <_Z12button2Clickv+0x142>
	}
		
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	98 0f       	add	r25, r24
    116e:	9c 30       	cpi	r25, 0x0C	; 12
    1170:	08 f0       	brcs	.+2      	; 0x1174 <_Z12button2Clickv+0x30>
    1172:	78 c0       	rjmp	.+240    	; 0x1264 <_Z12button2Clickv+0x120>
		lcdUpdateScreen = true;
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <__data_end>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	c1 f4       	brne	.+48     	; 0x11ae <_Z12button2Clickv+0x6a>
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <setDigit>
    1188:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <setDigit+0x1>
    118c:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <setDigit+0x2>
    1190:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <setDigit+0x3>
    1194:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    1198:	88 23       	and	r24, r24
    119a:	21 f0       	breq	.+8      	; 0x11a4 <_Z12button2Clickv+0x60>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	dc 01       	movw	r26, r24
    11a2:	57 c0       	rjmp	.+174    	; 0x1252 <_Z12button2Clickv+0x10e>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a0 e8       	ldi	r26, 0x80	; 128
    11aa:	bf e3       	ldi	r27, 0x3F	; 63
    11ac:	52 c0       	rjmp	.+164    	; 0x1252 <_Z12button2Clickv+0x10e>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
    11ae:	82 50       	subi	r24, 0x02	; 2
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	38 f5       	brcc	.+78     	; 0x1202 <_Z12button2Clickv+0xbe>
			setDigit.value = setDigit.value == 0? 5: setDigit.value - 1;
    11b4:	c0 90 fb 01 	lds	r12, 0x01FB	; 0x8001fb <setDigit>
    11b8:	d0 90 fc 01 	lds	r13, 0x01FC	; 0x8001fc <setDigit+0x1>
    11bc:	e0 90 fd 01 	lds	r14, 0x01FD	; 0x8001fd <setDigit+0x2>
    11c0:	f0 90 fe 01 	lds	r15, 0x01FE	; 0x8001fe <setDigit+0x3>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	c7 01       	movw	r24, r14
    11cc:	b6 01       	movw	r22, r12
    11ce:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	49 f0       	breq	.+18     	; 0x11e8 <_Z12button2Clickv+0xa4>
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e8       	ldi	r20, 0x80	; 128
    11dc:	5f e3       	ldi	r21, 0x3F	; 63
    11de:	c7 01       	movw	r24, r14
    11e0:	b6 01       	movw	r22, r12
    11e2:	0e 94 75 13 	call	0x26ea	; 0x26ea <__subsf3>
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <_Z12button2Clickv+0xac>
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	80 ea       	ldi	r24, 0xA0	; 160
    11ee:	90 e4       	ldi	r25, 0x40	; 64
    11f0:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <setDigit>
    11f4:	70 93 fc 01 	sts	0x01FC, r23	; 0x8001fc <setDigit+0x1>
    11f8:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <setDigit+0x2>
    11fc:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <setDigit+0x3>
    1200:	42 c0       	rjmp	.+132    	; 0x1286 <_Z12button2Clickv+0x142>
		}else {
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    1202:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <setDigit+0x4>
    1206:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <setDigit+0x5>
    120a:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <setDigit+0x6>
    120e:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <setDigit+0x7>
    1212:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <setDigit>
    1216:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <setDigit+0x1>
    121a:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <setDigit+0x2>
    121e:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <setDigit+0x3>
    1222:	0e 94 75 13 	call	0x26ea	; 0x26ea <__subsf3>
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
			if (setDigit.value < 0) {
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	a9 01       	movw	r20, r18
    1230:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    1234:	87 fd       	sbrc	r24, 7
    1236:	09 c0       	rjmp	.+18     	; 0x124a <_Z12button2Clickv+0x106>
		if (modeWork.current == MW_SETUP_CONNECTION_TYPE) {
			setDigit.value = setDigit.value == CONNECTION_TYPE_STAR? CONNECTION_TYPE_TRIANGLE: CONNECTION_TYPE_STAR; 
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			setDigit.value = setDigit.value == 0? 5: setDigit.value - 1;
		}else {
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    1238:	c0 92 fb 01 	sts	0x01FB, r12	; 0x8001fb <setDigit>
    123c:	d0 92 fc 01 	sts	0x01FC, r13	; 0x8001fc <setDigit+0x1>
    1240:	e0 92 fd 01 	sts	0x01FD, r14	; 0x8001fd <setDigit+0x2>
    1244:	f0 92 fe 01 	sts	0x01FE, r15	; 0x8001fe <setDigit+0x3>
    1248:	1e c0       	rjmp	.+60     	; 0x1286 <_Z12button2Clickv+0x142>
			if (setDigit.value < 0) {
				setDigit.value = 999.999f;
    124a:	80 ef       	ldi	r24, 0xF0	; 240
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	a9 e7       	ldi	r26, 0x79	; 121
    1250:	b4 e4       	ldi	r27, 0x44	; 68
    1252:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <setDigit>
    1256:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <setDigit+0x1>
    125a:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <setDigit+0x2>
    125e:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <setDigit+0x3>
    1262:	11 c0       	rjmp	.+34     	; 0x1286 <_Z12button2Clickv+0x142>
			}
		}
		return;
	}
	
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1264:	23 ef       	ldi	r18, 0xF3	; 243
    1266:	28 0f       	add	r18, r24
    1268:	28 30       	cpi	r18, 0x08	; 8
    126a:	30 f4       	brcc	.+12     	; 0x1278 <_Z12button2Clickv+0x134>
		modeWork.current = modeWork.current == MW_SHOWING_START? MW_SHOWING_STOP: modeWork.current - 1;
    126c:	8d 30       	cpi	r24, 0x0D	; 13
    126e:	09 f4       	brne	.+2      	; 0x1272 <_Z12button2Clickv+0x12e>
    1270:	94 e1       	ldi	r25, 0x14	; 20
    1272:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <modeWork>
		return;
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <_Z12button2Clickv+0x142>
	}
	
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1278:	85 31       	cpi	r24, 0x15	; 21
    127a:	29 f4       	brne	.+10     	; 0x1286 <_Z12button2Clickv+0x142>
		modeWork.current = MW_SHOWING_START;
    127c:	8d e0       	ldi	r24, 0x0D	; 13
    127e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <modeWork>
		settings.isReadyToWork = MM_STOP;
    1282:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <settings>
		return;
	}
}
    1286:	cf 91       	pop	r28
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	08 95       	ret

00001292 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>:
//		initMultiplierCoef();
	}
}

void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	switch(_index) {
    1292:	62 30       	cpi	r22, 0x02	; 2
    1294:	91 f0       	breq	.+36     	; 0x12ba <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x28>
    1296:	28 f4       	brcc	.+10     	; 0x12a2 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x10>
    1298:	66 23       	and	r22, r22
    129a:	49 f0       	breq	.+18     	; 0x12ae <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x1c>
    129c:	61 30       	cpi	r22, 0x01	; 1
    129e:	51 f0       	breq	.+20     	; 0x12b4 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x22>
    12a0:	08 95       	ret
    12a2:	64 30       	cpi	r22, 0x04	; 4
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x34>
    12a6:	60 f0       	brcs	.+24     	; 0x12c0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x2e>
    12a8:	65 30       	cpi	r22, 0x05	; 5
    12aa:	81 f0       	breq	.+32     	; 0x12cc <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x3a>
    12ac:	08 95       	ret
		case 0:
			adsVoltage.setGain(GAIN_TWOTHIRDS);
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x3e>
			break;
		case 1:
			adsVoltage.setGain(GAIN_ONE);
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	72 e0       	ldi	r23, 0x02	; 2
    12b8:	0b c0       	rjmp	.+22     	; 0x12d0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x3e>
			break;
		case 2:
			adsVoltage.setGain(GAIN_TWO);
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	74 e0       	ldi	r23, 0x04	; 4
    12be:	08 c0       	rjmp	.+16     	; 0x12d0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x3e>
			break;
		case 3:
			adsVoltage.setGain(GAIN_FOUR);
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	76 e0       	ldi	r23, 0x06	; 6
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x3e>
			break;
		case 4:
			adsVoltage.setGain(GAIN_EIGHT);
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	78 e0       	ldi	r23, 0x08	; 8
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x3e>
			break;
		case 5:
			adsVoltage.setGain(GAIN_SIXTEEN);
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	7a e0       	ldi	r23, 0x0A	; 10
    12d0:	81 e9       	ldi	r24, 0x91	; 145
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>

000012d8 <_Z18initAdsVoltageGainv>:
			break;
	}
}


void initAdsVoltageGain() {
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
	setAdsGainByIndex(&adsVoltage, settings.currentVoltageGain);
    12dc:	cd e1       	ldi	r28, 0x1D	; 29
    12de:	d2 e0       	ldi	r29, 0x02	; 2
    12e0:	6c 89       	ldd	r22, Y+20	; 0x14
    12e2:	81 e9       	ldi	r24, 0x91	; 145
    12e4:	92 e0       	ldi	r25, 0x02	; 2
    12e6:	0e 94 49 09 	call	0x1292	; 0x1292 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.voltageStep = ads.gainStep[settings.currentVoltageGain] / 1000.0;
    12ea:	ec 89       	ldd	r30, Y+20	; 0x14
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	e8 9f       	mul	r30, r24
    12f0:	f0 01       	movw	r30, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	e0 50       	subi	r30, 0x00	; 0
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4a e7       	ldi	r20, 0x7A	; 122
    12fe:	54 e4       	ldi	r21, 0x44	; 68
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__divsf3>
    130c:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_start+0x18>
    1310:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_start+0x19>
    1314:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_start+0x1a>
    1318:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_start+0x1b>
}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <_Z19initAdsAmperageGainv>:

void initAdsAmperageGain() {
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
    1326:	cd e1       	ldi	r28, 0x1D	; 29
    1328:	d2 e0       	ldi	r29, 0x02	; 2
    132a:	6b 89       	ldd	r22, Y+19	; 0x13
    132c:	8c e8       	ldi	r24, 0x8C	; 140
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	0e 94 49 09 	call	0x1292	; 0x1292 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    1334:	eb 89       	ldd	r30, Y+19	; 0x13
    1336:	84 e0       	ldi	r24, 0x04	; 4
    1338:	e8 9f       	mul	r30, r24
    133a:	f0 01       	movw	r30, r0
    133c:	11 24       	eor	r1, r1
    133e:	e0 50       	subi	r30, 0x00	; 0
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	4a e7       	ldi	r20, 0x7A	; 122
    1348:	54 e4       	ldi	r21, 0x44	; 68
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__divsf3>
    1356:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <__data_start+0x1c>
    135a:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <__data_start+0x1d>
    135e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_start+0x1e>
    1362:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_start+0x1f>
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    136c:	26 e0       	ldi	r18, 0x06	; 6
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	55 e2       	ldi	r21, 0x25	; 37
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	8a e5       	ldi	r24, 0x5A	; 90
    1378:	93 e0       	ldi	r25, 0x03	; 3
    137a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN14HardwareSerial5beginEmh>
void lcdClearCell(byte col, byte row, byte rowLength);


void setup() {
	Serial.begin(9600);
	Serial.println("Initialization...");
    137e:	64 e8       	ldi	r22, 0x84	; 132
    1380:	71 e0       	ldi	r23, 0x01	; 1
    1382:	8a e5       	ldi	r24, 0x5A	; 90
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN5Print7printlnEPKc>
	
	adsVoltage.setGain(GAIN_TWOTHIRDS);
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	81 e9       	ldi	r24, 0x91	; 145
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsAmperage.setGain(GAIN_TWOTHIRDS);
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	8c e8       	ldi	r24, 0x8C	; 140
    139c:	92 e0       	ldi	r25, 0x02	; 2
    139e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	
	adsVoltage.begin();
    13a2:	81 e9       	ldi	r24, 0x91	; 145
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_ZN16Adafruit_ADS10155beginEv>
	adsAmperage.begin();
    13aa:	8c e8       	ldi	r24, 0x8C	; 140
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_ZN16Adafruit_ADS10155beginEv>
	
	lcd.init();
    13b2:	8f ee       	ldi	r24, 0xEF	; 239
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    13ba:	8f ee       	ldi	r24, 0xEF	; 239
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    13c2:	8f ee       	ldi	r24, 0xEF	; 239
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_ZN17LiquidCrystal_I2C5clearEv>
	
	button1Callback.attachClick(button1Click);
    13ca:	6a ea       	ldi	r22, 0xAA	; 170
    13cc:	72 e0       	ldi	r23, 0x02	; 2
    13ce:	8b e6       	ldi	r24, 0x6B	; 107
    13d0:	92 e0       	ldi	r25, 0x02	; 2
    13d2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN9OneButton11attachClickEPFvvE>
	button1Callback.attachLongPressStart(button1LongPressStart);
    13d6:	62 ec       	ldi	r22, 0xC2	; 194
    13d8:	77 e0       	ldi	r23, 0x07	; 7
    13da:	8b e6       	ldi	r24, 0x6B	; 107
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN9OneButton20attachLongPressStartEPFvvE>
	button1Callback.setDebounceTicks(30);
    13e2:	6e e1       	ldi	r22, 0x1E	; 30
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	8b e6       	ldi	r24, 0x6B	; 107
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_ZN9OneButton16setDebounceTicksEi>
	button1Callback.setClickTicks(200);
    13ee:	68 ec       	ldi	r22, 0xC8	; 200
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	8b e6       	ldi	r24, 0x6B	; 107
    13f4:	92 e0       	ldi	r25, 0x02	; 2
    13f6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN9OneButton13setClickTicksEi>
	button1Callback.setPressTicks(1000);
    13fa:	68 ee       	ldi	r22, 0xE8	; 232
    13fc:	73 e0       	ldi	r23, 0x03	; 3
    13fe:	8b e6       	ldi	r24, 0x6B	; 107
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN9OneButton13setPressTicksEi>
	
	button2Callback.attachClick(button2Click);
    1406:	62 ea       	ldi	r22, 0xA2	; 162
    1408:	78 e0       	ldi	r23, 0x08	; 8
    140a:	8a e4       	ldi	r24, 0x4A	; 74
    140c:	92 e0       	ldi	r25, 0x02	; 2
    140e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN9OneButton11attachClickEPFvvE>
	button2Callback.attachLongPressStart(button2LongPressStart);
    1412:	6f e5       	ldi	r22, 0x5F	; 95
    1414:	7c e0       	ldi	r23, 0x0C	; 12
    1416:	8a e4       	ldi	r24, 0x4A	; 74
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN9OneButton20attachLongPressStartEPFvvE>
	button2Callback.setDebounceTicks(30);
    141e:	6e e1       	ldi	r22, 0x1E	; 30
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	8a e4       	ldi	r24, 0x4A	; 74
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_ZN9OneButton16setDebounceTicksEi>
	button2Callback.setClickTicks(200);
    142a:	68 ec       	ldi	r22, 0xC8	; 200
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	8a e4       	ldi	r24, 0x4A	; 74
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN9OneButton13setClickTicksEi>
	button2Callback.setPressTicks(1000);
    1436:	68 ee       	ldi	r22, 0xE8	; 232
    1438:	73 e0       	ldi	r23, 0x03	; 3
    143a:	8a e4       	ldi	r24, 0x4A	; 74
    143c:	92 e0       	ldi	r25, 0x02	; 2
    143e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN9OneButton13setPressTicksEi>
	
	if (eeprom_read_byte(&eeprom_first_start) != 102) {
    1442:	87 e2       	ldi	r24, 0x27	; 39
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 83 1b 	call	0x3706	; 0x3706 <eeprom_read_byte>
    144a:	86 36       	cpi	r24, 0x66	; 102
    144c:	09 f4       	brne	.+2      	; 0x1450 <setup+0xe4>
    144e:	53 c0       	rjmp	.+166    	; 0x14f6 <setup+0x18a>
		eeprom_update_byte(&eeprom_connection_type, CONNECTION_TYPE_STAR);
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	86 e2       	ldi	r24, 0x26	; 38
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 91 1b 	call	0x3722	; 0x3722 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_amperage, 0);
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	85 e2       	ldi	r24, 0x25	; 37
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 91 1b 	call	0x3722	; 0x3722 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_voltage, 0);
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	84 e2       	ldi	r24, 0x24	; 36
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 91 1b 	call	0x3722	; 0x3722 <eeprom_update_byte>
		eeprom_update_float(&eeprom_impedance_ab, 0);
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	ba 01       	movw	r22, r20
    1474:	80 e2       	ldi	r24, 0x20	; 32
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_bc, 0);
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	ba 01       	movw	r22, r20
    1482:	8c e1       	ldi	r24, 0x1C	; 28
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_ac, 0);
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	ba 01       	movw	r22, r20
    1490:	88 e1       	ldi	r24, 0x18	; 24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ab, 0);
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	ba 01       	movw	r22, r20
    149e:	84 e1       	ldi	r24, 0x14	; 20
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_bc, 0);
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	ba 01       	movw	r22, r20
    14ac:	80 e1       	ldi	r24, 0x10	; 16
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ac, 0);
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	ba 01       	movw	r22, r20
    14ba:	8c e0       	ldi	r24, 0x0C	; 12
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ab, 0);
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	ba 01       	movw	r22, r20
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_bc, 0);
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	ba 01       	movw	r22, r20
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ac, 0);
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	ba 01       	movw	r22, r20
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 a3 1b 	call	0x3746	; 0x3746 <eeprom_update_dword>
		eeprom_update_byte(&eeprom_first_start, 102);
    14ec:	66 e6       	ldi	r22, 0x66	; 102
    14ee:	87 e2       	ldi	r24, 0x27	; 39
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 91 1b 	call	0x3722	; 0x3722 <eeprom_update_byte>
	}
	
	settings.currentAmperageGain = eeprom_read_byte(&eeprom_gain_amperage);
    14f6:	85 e2       	ldi	r24, 0x25	; 37
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 83 1b 	call	0x3706	; 0x3706 <eeprom_read_byte>
    14fe:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <settings+0x13>
	settings.currentVoltageGain = eeprom_read_byte(&eeprom_gain_voltage);
    1502:	84 e2       	ldi	r24, 0x24	; 36
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 83 1b 	call	0x3706	; 0x3706 <eeprom_read_byte>
    150a:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <settings+0x14>
	settings.connectionType = eeprom_read_byte(&eeprom_connection_type);
    150e:	86 e2       	ldi	r24, 0x26	; 38
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 83 1b 	call	0x3706	; 0x3706 <eeprom_read_byte>
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	81 11       	cpse	r24, r1
    151a:	01 c0       	rjmp	.+2      	; 0x151e <setup+0x1b2>
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <settings+0x1>
	settings.impedance[0] = eeprom_read_float(&eeprom_impedance_ab);
    1522:	80 e2       	ldi	r24, 0x20	; 32
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    152a:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <settings+0x6>
    152e:	70 93 24 02 	sts	0x0224, r23	; 0x800224 <settings+0x7>
    1532:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <settings+0x8>
    1536:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <settings+0x9>
	settings.impedance[1] = eeprom_read_float(&eeprom_impedance_bc);
    153a:	8c e1       	ldi	r24, 0x1C	; 28
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    1542:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <settings+0xa>
    1546:	70 93 28 02 	sts	0x0228, r23	; 0x800228 <settings+0xb>
    154a:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <settings+0xc>
    154e:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <settings+0xd>
	settings.impedance[2] = eeprom_read_float(&eeprom_impedance_ac);
    1552:	88 e1       	ldi	r24, 0x18	; 24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    155a:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <settings+0xe>
    155e:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <settings+0xf>
    1562:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <settings+0x10>
    1566:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <settings+0x11>
	settings.multiplierVoltage[0] = eeprom_read_float(&eeprom_voltage_mult_ab);
    156a:	84 e1       	ldi	r24, 0x14	; 20
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    1572:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <settings+0x15>
    1576:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <settings+0x16>
    157a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <settings+0x17>
    157e:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <settings+0x18>
	settings.multiplierVoltage[1] = eeprom_read_float(&eeprom_voltage_mult_bc);
    1582:	80 e1       	ldi	r24, 0x10	; 16
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    158a:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <settings+0x19>
    158e:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <settings+0x1a>
    1592:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <settings+0x1b>
    1596:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <settings+0x1c>
	settings.multiplierVoltage[2] = eeprom_read_float(&eeprom_voltage_mult_ac);
    159a:	8c e0       	ldi	r24, 0x0C	; 12
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    15a2:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <settings+0x1d>
    15a6:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <settings+0x1e>
    15aa:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <settings+0x1f>
    15ae:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <settings+0x20>
	settings.multiplierAmperage[0] = eeprom_read_float(&eeprom_amperage_mult_ab);
    15b2:	88 e0       	ldi	r24, 0x08	; 8
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    15ba:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <settings+0x21>
    15be:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <settings+0x22>
    15c2:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <settings+0x23>
    15c6:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <settings+0x24>
	settings.multiplierAmperage[1] = eeprom_read_float(&eeprom_amperage_mult_bc);
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    15d2:	60 93 42 02 	sts	0x0242, r22	; 0x800242 <settings+0x25>
    15d6:	70 93 43 02 	sts	0x0243, r23	; 0x800243 <settings+0x26>
    15da:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <settings+0x27>
    15de:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <settings+0x28>
	settings.multiplierAmperage[2] = eeprom_read_float(&eeprom_amperage_mult_ac);
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 8b 1b 	call	0x3716	; 0x3716 <eeprom_read_dword>
    15ea:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <settings+0x29>
    15ee:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <settings+0x2a>
    15f2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <settings+0x2b>
    15f6:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <settings+0x2c>
	
	initAdsVoltageGain();
    15fa:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z18initAdsVoltageGainv>
	initAdsAmperageGain();
    15fe:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z19initAdsAmperageGainv>
	
	settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    1602:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <settings+0x1>
    1606:	88 23       	and	r24, r24
    1608:	29 f0       	breq	.+10     	; 0x1614 <setup+0x2a8>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 ea       	ldi	r26, 0xA0	; 160
    1610:	b0 e4       	ldi	r27, 0x40	; 64
    1612:	04 c0       	rjmp	.+8      	; 0x161c <setup+0x2b0>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a0 e2       	ldi	r26, 0x20	; 32
    161a:	b0 e4       	ldi	r27, 0x40	; 64
    161c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <settings+0x2>
    1620:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <settings+0x3>
    1624:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <settings+0x4>
    1628:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <settings+0x5>
//	initImpedanceCriticalValue();
	
//	initMultiplierCoef();
	checkIsReadyToWork();
    162c:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z18checkIsReadyToWorkv>
	
	pinMode(BEEPER, OUTPUT);
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	80 e1       	ldi	r24, 0x10	; 16
    1634:	0e 94 c1 1a 	call	0x3582	; 0x3582 <pinMode>
	digitalWrite(BEEPER, LOW);
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	80 e1       	ldi	r24, 0x10	; 16
    163c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <digitalWrite>
	
	modeWork.prev = modeWork.current;
    1640:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <modeWork>
    1644:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <modeWork+0x1>
	initAvgVars();
    1648:	0e 94 98 02 	call	0x530	; 0x530 <_Z11initAvgVarsv>
	Serial.println("Completed!");
    164c:	66 e9       	ldi	r22, 0x96	; 150
    164e:	71 e0       	ldi	r23, 0x01	; 1
    1650:	8a e5       	ldi	r24, 0x5A	; 90
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN5Print7printlnEPKc>
	Serial.println("Stand by...");
    1658:	61 ea       	ldi	r22, 0xA1	; 161
    165a:	71 e0       	ldi	r23, 0x01	; 1
    165c:	8a e5       	ldi	r24, 0x5A	; 90
    165e:	93 e0       	ldi	r25, 0x03	; 3
    1660:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN5Print7printlnEPKc>
	displayStaticAsMode();
    1664:	0e 94 01 04 	call	0x802	; 0x802 <_Z19displayStaticAsModev>
	displayAsMode();
    1668:	0c 94 32 06 	jmp	0xc64	; 0xc64 <_Z13displayAsModev>

0000166c <_Z12saveSettingsv>:
	}
	setDigit.curMultiplier = 1.0f;
}


void saveSettings() {
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	cf 93       	push	r28
	switch(modeWork.current) {
    1676:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <modeWork>
    167a:	8e 2f       	mov	r24, r30
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	fc 01       	movw	r30, r24
    1680:	31 97       	sbiw	r30, 0x01	; 1
    1682:	ec 30       	cpi	r30, 0x0C	; 12
    1684:	f1 05       	cpc	r31, r1
    1686:	08 f0       	brcs	.+2      	; 0x168a <_Z12saveSettingsv+0x1e>
    1688:	14 c1       	rjmp	.+552    	; 0x18b2 <_Z12saveSettingsv+0x246>
    168a:	e6 59       	subi	r30, 0x96	; 150
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__tablejump2__>
		case MW_SETUP_CONNECTION_TYPE:
			settings.connectionType = setDigit.value;
    1692:	c0 90 fb 01 	lds	r12, 0x01FB	; 0x8001fb <setDigit>
    1696:	d0 90 fc 01 	lds	r13, 0x01FC	; 0x8001fc <setDigit+0x1>
    169a:	e0 90 fd 01 	lds	r14, 0x01FD	; 0x8001fd <setDigit+0x2>
    169e:	f0 90 fe 01 	lds	r15, 0x01FE	; 0x8001fe <setDigit+0x3>
    16a2:	c1 e0       	ldi	r28, 0x01	; 1
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	a9 01       	movw	r20, r18
    16aa:	c7 01       	movw	r24, r14
    16ac:	b6 01       	movw	r22, r12
    16ae:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    16b2:	81 11       	cpse	r24, r1
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <_Z12saveSettingsv+0x4c>
    16b6:	c0 e0       	ldi	r28, 0x00	; 0
    16b8:	c0 93 1e 02 	sts	0x021E, r28	; 0x80021e <settings+0x1>
			settings.criticleError = settings.connectionType == CONNECTION_TYPE_STAR? 2.5f: 5.0f;
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	a9 01       	movw	r20, r18
    16c2:	c7 01       	movw	r24, r14
    16c4:	b6 01       	movw	r22, r12
    16c6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    16ca:	81 11       	cpse	r24, r1
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <_Z12saveSettingsv+0x6c>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e2       	ldi	r26, 0x20	; 32
    16d4:	b0 e4       	ldi	r27, 0x40	; 64
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <_Z12saveSettingsv+0x74>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a0 ea       	ldi	r26, 0xA0	; 160
    16de:	b0 e4       	ldi	r27, 0x40	; 64
    16e0:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <settings+0x2>
    16e4:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <settings+0x3>
    16e8:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <settings+0x4>
    16ec:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <settings+0x5>
//			initImpedanceCriticalValue();
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
    16f0:	6c 2f       	mov	r22, r28
    16f2:	86 e2       	ldi	r24, 0x26	; 38
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	12 c0       	rjmp	.+36     	; 0x171c <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
    16f8:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <setDigit>
    16fc:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <setDigit+0x1>
    1700:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <setDigit+0x2>
    1704:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <setDigit+0x3>
    1708:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__fixunssfsi>
    170c:	60 93 30 02 	sts	0x0230, r22	; 0x800230 <settings+0x13>
			initAdsAmperageGain();
    1710:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z19initAdsAmperageGainv>
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    1714:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <settings+0x13>
    1718:	85 e2       	ldi	r24, 0x25	; 37
    171a:	90 e0       	ldi	r25, 0x00	; 0
	}

	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
//		initMultiplierCoef();
	}
}
    171c:	cf 91       	pop	r28
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
			eeprom_update_byte(&eeprom_connection_type, settings.connectionType);
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
			initAdsAmperageGain();
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    1726:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <eeprom_update_byte>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			settings.currentVoltageGain = setDigit.value;
    172a:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <setDigit>
    172e:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <setDigit+0x1>
    1732:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <setDigit+0x2>
    1736:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <setDigit+0x3>
    173a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__fixunssfsi>
    173e:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <settings+0x14>
			initAdsVoltageGain();
    1742:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z18initAdsVoltageGainv>
			eeprom_update_byte(&eeprom_gain_voltage, settings.currentVoltageGain);
    1746:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <settings+0x14>
    174a:	84 e2       	ldi	r24, 0x24	; 36
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	e6 cf       	rjmp	.-52     	; 0x171c <_Z12saveSettingsv+0xb0>
			break;
		case MW_SETUP_IMPEDANCE_AB:
			settings.impedance[0] = setDigit.value;
    1750:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    1754:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    1758:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    175c:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    1760:	40 93 23 02 	sts	0x0223, r20	; 0x800223 <settings+0x6>
    1764:	50 93 24 02 	sts	0x0224, r21	; 0x800224 <settings+0x7>
    1768:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <settings+0x8>
    176c:	70 93 26 02 	sts	0x0226, r23	; 0x800226 <settings+0x9>
			eeprom_update_float(&eeprom_impedance_ab, settings.impedance[0]);
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	97 c0       	rjmp	.+302    	; 0x18a4 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_IMPEDANCE_BC:
			settings.impedance[1] = setDigit.value;
    1776:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    177a:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    177e:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    1782:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    1786:	40 93 27 02 	sts	0x0227, r20	; 0x800227 <settings+0xa>
    178a:	50 93 28 02 	sts	0x0228, r21	; 0x800228 <settings+0xb>
    178e:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <settings+0xc>
    1792:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <settings+0xd>
			eeprom_update_float(&eeprom_impedance_bc, settings.impedance[1]);
    1796:	8c e1       	ldi	r24, 0x1C	; 28
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	84 c0       	rjmp	.+264    	; 0x18a4 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_IMPEDANCE_AC:
			settings.impedance[2] = setDigit.value;
    179c:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    17a0:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    17a4:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    17a8:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    17ac:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <settings+0xe>
    17b0:	50 93 2c 02 	sts	0x022C, r21	; 0x80022c <settings+0xf>
    17b4:	60 93 2d 02 	sts	0x022D, r22	; 0x80022d <settings+0x10>
    17b8:	70 93 2e 02 	sts	0x022E, r23	; 0x80022e <settings+0x11>
			eeprom_update_float(&eeprom_impedance_ac, settings.impedance[2]);
    17bc:	88 e1       	ldi	r24, 0x18	; 24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	71 c0       	rjmp	.+226    	; 0x18a4 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			settings.multiplierVoltage[0] = setDigit.value;
    17c2:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    17c6:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    17ca:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    17ce:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    17d2:	40 93 32 02 	sts	0x0232, r20	; 0x800232 <settings+0x15>
    17d6:	50 93 33 02 	sts	0x0233, r21	; 0x800233 <settings+0x16>
    17da:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <settings+0x17>
    17de:	70 93 35 02 	sts	0x0235, r23	; 0x800235 <settings+0x18>
			eeprom_update_float(&eeprom_voltage_mult_ab, settings.multiplierVoltage[0]);
    17e2:	84 e1       	ldi	r24, 0x14	; 20
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	5e c0       	rjmp	.+188    	; 0x18a4 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			settings.multiplierVoltage[1] = setDigit.value;
    17e8:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    17ec:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    17f0:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    17f4:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    17f8:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <settings+0x19>
    17fc:	50 93 37 02 	sts	0x0237, r21	; 0x800237 <settings+0x1a>
    1800:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <settings+0x1b>
    1804:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <settings+0x1c>
			eeprom_update_float(&eeprom_voltage_mult_bc, settings.multiplierVoltage[1]);
    1808:	80 e1       	ldi	r24, 0x10	; 16
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	4b c0       	rjmp	.+150    	; 0x18a4 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			settings.multiplierVoltage[2] = setDigit.value;
    180e:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    1812:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    1816:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    181a:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    181e:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <settings+0x1d>
    1822:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <settings+0x1e>
    1826:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <settings+0x1f>
    182a:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <settings+0x20>
			eeprom_update_float(&eeprom_voltage_mult_ac, settings.multiplierVoltage[2]);
    182e:	8c e0       	ldi	r24, 0x0C	; 12
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	38 c0       	rjmp	.+112    	; 0x18a4 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			settings.multiplierAmperage[0] = setDigit.value;
    1834:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    1838:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    183c:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    1840:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    1844:	40 93 3e 02 	sts	0x023E, r20	; 0x80023e <settings+0x21>
    1848:	50 93 3f 02 	sts	0x023F, r21	; 0x80023f <settings+0x22>
    184c:	60 93 40 02 	sts	0x0240, r22	; 0x800240 <settings+0x23>
    1850:	70 93 41 02 	sts	0x0241, r23	; 0x800241 <settings+0x24>
			eeprom_update_float(&eeprom_amperage_mult_ab, settings.multiplierAmperage[0]);
    1854:	88 e0       	ldi	r24, 0x08	; 8
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	25 c0       	rjmp	.+74     	; 0x18a4 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			settings.multiplierAmperage[1] = setDigit.value;
    185a:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    185e:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    1862:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    1866:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    186a:	40 93 42 02 	sts	0x0242, r20	; 0x800242 <settings+0x25>
    186e:	50 93 43 02 	sts	0x0243, r21	; 0x800243 <settings+0x26>
    1872:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <settings+0x27>
    1876:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <settings+0x28>
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
    187a:	84 e0       	ldi	r24, 0x04	; 4
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	12 c0       	rjmp	.+36     	; 0x18a4 <_Z12saveSettingsv+0x238>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
    1880:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <setDigit>
    1884:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <setDigit+0x1>
    1888:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <setDigit+0x2>
    188c:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <setDigit+0x3>
    1890:	40 93 46 02 	sts	0x0246, r20	; 0x800246 <settings+0x29>
    1894:	50 93 47 02 	sts	0x0247, r21	; 0x800247 <settings+0x2a>
    1898:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <settings+0x2b>
    189c:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <settings+0x2c>
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
	}

	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
//		initMultiplierCoef();
	}
}
    18a4:	cf 91       	pop	r28
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
			settings.multiplierAmperage[1] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    18ae:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <eeprom_update_dword>
	}

	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
//		initMultiplierCoef();
	}
}
    18b2:	cf 91       	pop	r28
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	df 90       	pop	r13
    18ba:	cf 90       	pop	r12
    18bc:	08 95       	ret

000018be <_Z21button2LongPressStartv>:
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
		modeWork.current = MW_SHOWING_START;
	}
}

void button2LongPressStart() {
    18be:	cf 93       	push	r28
	if (icError.hasIC) {
    18c0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <icError+0x19>
    18c4:	88 23       	and	r24, r24
    18c6:	39 f0       	breq	.+14     	; 0x18d6 <_Z21button2LongPressStartv+0x18>
		digitalWrite(BEEPER, LOW);
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	80 e1       	ldi	r24, 0x10	; 16
    18cc:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <digitalWrite>
		icError.hasIC = false;
    18d0:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <icError+0x19>
		return;
    18d4:	45 c0       	rjmp	.+138    	; 0x1960 <_Z21button2LongPressStartv+0xa2>
	}
	if (modeWork.current == MW_NEED_SETUP) {
    18d6:	c0 91 ed 01 	lds	r28, 0x01ED	; 0x8001ed <modeWork>
    18da:	cc 23       	and	r28, r28
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <_Z21button2LongPressStartv+0x22>
    18de:	40 c0       	rjmp	.+128    	; 0x1960 <_Z21button2LongPressStartv+0xa2>
		return;
	}
	if (modeWork.current == MW_SHOW_ERRORS_COUNTERS) {
    18e0:	cd 30       	cpi	r28, 0x0D	; 13
    18e2:	01 f5       	brne	.+64     	; 0x1924 <_Z21button2LongPressStartv+0x66>
		for(byte i = 0; i < 3; i++) {
			icError.criticalLvlCount[i] = 0;
    18e4:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <icError+0xc>
    18e8:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <icError+0xd>
    18ec:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <icError+0xe>
    18f0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <icError+0xf>
    18f4:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <icError+0x10>
    18f8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <icError+0x11>
    18fc:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <icError+0x12>
    1900:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <icError+0x13>
    1904:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <icError+0x14>
    1908:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <icError+0x15>
    190c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <icError+0x16>
    1910:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <icError+0x17>
		}
		initAvgVars();
    1914:	0e 94 98 02 	call	0x530	; 0x530 <_Z11initAvgVarsv>
		modeWork.current = MW_SHOWING_START;
    1918:	c0 93 ed 01 	sts	0x01ED, r28	; 0x8001ed <modeWork>
		lcdUpdateScreen = true;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
		return;
    1922:	1e c0       	rjmp	.+60     	; 0x1960 <_Z21button2LongPressStartv+0xa2>
	}
	
	
	if (settings.isSetupMode) {
    1924:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <settings+0x12>
    1928:	88 23       	and	r24, r24
    192a:	89 f0       	breq	.+34     	; 0x194e <_Z21button2LongPressStartv+0x90>
		if (modeWork.current == MW_SETUP_STOP) {
    192c:	cc 30       	cpi	r28, 0x0C	; 12
    192e:	29 f4       	brne	.+10     	; 0x193a <_Z21button2LongPressStartv+0x7c>
			saveSettings();
    1930:	0e 94 36 0b 	call	0x166c	; 0x166c <_Z12saveSettingsv>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    1934:	cf 91       	pop	r28
	
	if (settings.isSetupMode) {
		if (modeWork.current == MW_SETUP_STOP) {
			saveSettings();
//			initMultiplierCoef();
			checkIsReadyToWork();
    1936:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_Z18checkIsReadyToWorkv>
		} else {
			saveSettings();
    193a:	0e 94 36 0b 	call	0x166c	; 0x166c <_Z12saveSettingsv>
			modeWork.current++;
    193e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <modeWork>
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <modeWork>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    1948:	cf 91       	pop	r28
//			initMultiplierCoef();
			checkIsReadyToWork();
		} else {
			saveSettings();
			modeWork.current++;
			setEditValue();
    194a:	0c 94 16 08 	jmp	0x102c	; 0x102c <_Z12setEditValuev>
		}
	} else {
		settings.isReadyToWork = MM_STOP;
    194e:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <settings>
		modeWork.current = MW_SETUP_START;
    1952:	c1 e0       	ldi	r28, 0x01	; 1
    1954:	c0 93 ed 01 	sts	0x01ED, r28	; 0x8001ed <modeWork>
		setEditValue();
    1958:	0e 94 16 08 	call	0x102c	; 0x102c <_Z12setEditValuev>
		settings.isSetupMode = true;
    195c:	c0 93 2f 02 	sts	0x022F, r28	; 0x80022f <settings+0x12>
	}
}
    1960:	cf 91       	pop	r28
    1962:	08 95       	ret

00001964 <_GLOBAL__sub_I_eeprom_first_start>:
	| GAIN_SIXTEEN   | x16  |    0.256    | 0.0078125	 |
	------------------------------------------------------
*/


Adafruit_ADS1115 adsVoltage(0x48);
    1964:	68 e4       	ldi	r22, 0x48	; 72
    1966:	81 e9       	ldi	r24, 0x91	; 145
    1968:	92 e0       	ldi	r25, 0x02	; 2
    196a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 adsAmperage(0x49);
    196e:	69 e4       	ldi	r22, 0x49	; 73
    1970:	8c e8       	ldi	r24, 0x8C	; 140
    1972:	92 e0       	ldi	r25, 0x02	; 2
    1974:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN16Adafruit_ADS1115C1Eh>
		В режиме измерения смена режима показа назад
	Динное нажатие:
		В режиме измерения в меню критических величин сбрасывает счетчик
		Переход в режим настроек/отображения измерений кроме режима критических величин
*/
OneButton button1Callback(BUTTON_1, false);
    1978:	21 e0       	ldi	r18, 0x01	; 1
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	6e e0       	ldi	r22, 0x0E	; 14
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	8b e6       	ldi	r24, 0x6B	; 107
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN9OneButtonC1Eiib>
OneButton button2Callback(BUTTON_2, false);
    198a:	21 e0       	ldi	r18, 0x01	; 1
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	6f e0       	ldi	r22, 0x0F	; 15
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	8a e4       	ldi	r24, 0x4A	; 74
    1996:	92 e0       	ldi	r25, 0x02	; 2
    1998:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN9OneButtonC1Eiib>
	float sumMeasuredAmperage[3] = {0, 0, 0};
	byte measurementsCount = 50;
	byte currentMeasurement = 1;
};	

struct Settings {
    199c:	ed e1       	ldi	r30, 0x1D	; 29
    199e:	f2 e0       	ldi	r31, 0x02	; 2
    19a0:	10 82       	st	Z, r1
    19a2:	11 82       	std	Z+1, r1	; 0x01
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a0 e2       	ldi	r26, 0x20	; 32
    19aa:	b0 e4       	ldi	r27, 0x40	; 64
    19ac:	82 83       	std	Z+2, r24	; 0x02
    19ae:	93 83       	std	Z+3, r25	; 0x03
    19b0:	a4 83       	std	Z+4, r26	; 0x04
    19b2:	b5 83       	std	Z+5, r27	; 0x05
    19b4:	16 82       	std	Z+6, r1	; 0x06
    19b6:	17 82       	std	Z+7, r1	; 0x07
    19b8:	10 86       	std	Z+8, r1	; 0x08
    19ba:	11 86       	std	Z+9, r1	; 0x09
    19bc:	12 86       	std	Z+10, r1	; 0x0a
    19be:	13 86       	std	Z+11, r1	; 0x0b
    19c0:	14 86       	std	Z+12, r1	; 0x0c
    19c2:	15 86       	std	Z+13, r1	; 0x0d
    19c4:	16 86       	std	Z+14, r1	; 0x0e
    19c6:	17 86       	std	Z+15, r1	; 0x0f
    19c8:	10 8a       	std	Z+16, r1	; 0x10
    19ca:	11 8a       	std	Z+17, r1	; 0x11
    19cc:	13 8a       	std	Z+19, r1	; 0x13
    19ce:	14 8a       	std	Z+20, r1	; 0x14
    19d0:	8c e0       	ldi	r24, 0x0C	; 12
    19d2:	ee e5       	ldi	r30, 0x5E	; 94
    19d4:	f1 e0       	ldi	r31, 0x01	; 1
    19d6:	a2 e3       	ldi	r26, 0x32	; 50
    19d8:	b2 e0       	ldi	r27, 0x02	; 2
    19da:	01 90       	ld	r0, Z+
    19dc:	0d 92       	st	X+, r0
    19de:	8a 95       	dec	r24
    19e0:	e1 f7       	brne	.-8      	; 0x19da <_GLOBAL__sub_I_eeprom_first_start+0x76>
    19e2:	8c e0       	ldi	r24, 0x0C	; 12
    19e4:	ee e5       	ldi	r30, 0x5E	; 94
    19e6:	f1 e0       	ldi	r31, 0x01	; 1
    19e8:	ae e3       	ldi	r26, 0x3E	; 62
    19ea:	b2 e0       	ldi	r27, 0x02	; 2
    19ec:	01 90       	ld	r0, Z+
    19ee:	0d 92       	st	X+, r0
    19f0:	8a 95       	dec	r24
    19f2:	e1 f7       	brne	.-8      	; 0x19ec <_GLOBAL__sub_I_eeprom_first_start+0x88>
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    19f4:	22 e0       	ldi	r18, 0x02	; 2
    19f6:	40 e1       	ldi	r20, 0x10	; 16
    19f8:	67 e2       	ldi	r22, 0x27	; 39
    19fa:	8f ee       	ldi	r24, 0xEF	; 239
    19fc:	91 e0       	ldi	r25, 0x01	; 1
    19fe:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <_ZN17LiquidCrystal_I2CC1Ehhh>

00001a02 <_ZN16Adafruit_ADS1115C1Eh>:
  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH, threshold << m_bitShift);

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    1a02:	fc 01       	movw	r30, r24
    1a04:	14 82       	std	Z+4, r1	; 0x04
    1a06:	13 82       	std	Z+3, r1	; 0x03
    1a08:	60 83       	st	Z, r22
    1a0a:	88 e0       	ldi	r24, 0x08	; 8
    1a0c:	81 83       	std	Z+1, r24	; 0x01
    1a0e:	12 82       	std	Z+2, r1	; 0x02
    1a10:	08 95       	ret

00001a12 <_ZN16Adafruit_ADS10155beginEv>:
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	93 e0       	ldi	r25, 0x03	; 3
    1a16:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <_ZN7TwoWire5beginEv>

00001a1a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	74 83       	std	Z+4, r23	; 0x04
    1a1e:	63 83       	std	Z+3, r22	; 0x03
    1a20:	08 95       	ret

00001a22 <_ZL13writeRegisterhhj>:
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	16 2f       	mov	r17, r22
    1a2a:	ea 01       	movw	r28, r20
    1a2c:	68 2f       	mov	r22, r24
    1a2e:	84 e0       	ldi	r24, 0x04	; 4
    1a30:	93 e0       	ldi	r25, 0x03	; 3
    1a32:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN7TwoWire17beginTransmissionEh>
    1a36:	61 2f       	mov	r22, r17
    1a38:	84 e0       	ldi	r24, 0x04	; 4
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	0e 94 99 12 	call	0x2532	; 0x2532 <_ZN7TwoWire5writeEh>
    1a40:	6d 2f       	mov	r22, r29
    1a42:	84 e0       	ldi	r24, 0x04	; 4
    1a44:	93 e0       	ldi	r25, 0x03	; 3
    1a46:	0e 94 99 12 	call	0x2532	; 0x2532 <_ZN7TwoWire5writeEh>
    1a4a:	6c 2f       	mov	r22, r28
    1a4c:	84 e0       	ldi	r24, 0x04	; 4
    1a4e:	93 e0       	ldi	r25, 0x03	; 3
    1a50:	0e 94 99 12 	call	0x2532	; 0x2532 <_ZN7TwoWire5writeEh>
    1a54:	84 e0       	ldi	r24, 0x04	; 4
    1a56:	93 e0       	ldi	r25, 0x03	; 3
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_ZN7TwoWire15endTransmissionEv>

00001a62 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	18 2f       	mov	r17, r24
  Wire.beginTransmission(i2cAddress);
    1a6a:	68 2f       	mov	r22, r24
    1a6c:	84 e0       	ldi	r24, 0x04	; 4
    1a6e:	93 e0       	ldi	r25, 0x03	; 3
    1a70:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN7TwoWire17beginTransmissionEh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	84 e0       	ldi	r24, 0x04	; 4
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	0e 94 99 12 	call	0x2532	; 0x2532 <_ZN7TwoWire5writeEh>
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
    1a7e:	84 e0       	ldi	r24, 0x04	; 4
    1a80:	93 e0       	ldi	r25, 0x03	; 3
    1a82:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
    1a86:	42 e0       	ldi	r20, 0x02	; 2
    1a88:	61 2f       	mov	r22, r17
    1a8a:	84 e0       	ldi	r24, 0x04	; 4
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <_ZN7TwoWire11requestFromEhh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
  #if ARDUINO >= 100
  return Wire.read();
    1a92:	84 e0       	ldi	r24, 0x04	; 4
    1a94:	93 e0       	ldi	r25, 0x03	; 3
    1a96:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN7TwoWire4readEv>
    1a9a:	18 2f       	mov	r17, r24
    1a9c:	84 e0       	ldi	r24, 0x04	; 4
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN7TwoWire4readEv>
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
  Wire.requestFrom(i2cAddress, (uint8_t)2);
  return ((i2cread() << 8) | i2cread());  
    1aa4:	d1 2f       	mov	r29, r17
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	c2 2f       	mov	r28, r18
}
    1aaa:	9e 01       	movw	r18, r28
    1aac:	28 2b       	or	r18, r24
    1aae:	c9 01       	movw	r24, r18
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	08 95       	ret

00001ab8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
  if (channel > 3)
    1abc:	64 30       	cpi	r22, 0x04	; 4
    1abe:	50 f5       	brcc	.+84     	; 0x1b14 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x5c>
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	43 81       	ldd	r20, Z+3	; 0x03
    1ac4:	54 81       	ldd	r21, Z+4	; 0x04

  // Set single-ended input channel
  switch (channel)
    1ac6:	62 30       	cpi	r22, 0x02	; 2
    1ac8:	51 f0       	breq	.+20     	; 0x1ade <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
    1aca:	63 30       	cpi	r22, 0x03	; 3
    1acc:	59 f0       	breq	.+22     	; 0x1ae4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2c>
    1ace:	61 30       	cpi	r22, 0x01	; 1
    1ad0:	19 f0       	breq	.+6      	; 0x1ad8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    1ad2:	43 68       	ori	r20, 0x83	; 131
    1ad4:	51 64       	ori	r21, 0x41	; 65
      break;
    1ad6:	08 c0       	rjmp	.+16     	; 0x1ae8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    1ad8:	43 68       	ori	r20, 0x83	; 131
    1ada:	51 65       	ori	r21, 0x51	; 81
      break;
    1adc:	05 c0       	rjmp	.+10     	; 0x1ae8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    1ade:	43 68       	ori	r20, 0x83	; 131
    1ae0:	51 66       	ori	r21, 0x61	; 97
      break;
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    1ae4:	43 68       	ori	r20, 0x83	; 131
    1ae6:	51 67       	ori	r21, 0x71	; 113
    1ae8:	ec 01       	movw	r28, r24

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    1aea:	50 68       	ori	r21, 0x80	; 128
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	88 81       	ld	r24, Y
    1af0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZL13writeRegisterhhj>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
    1af4:	69 81       	ldd	r22, Y+1	; 0x01
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 16 1a 	call	0x342c	; 0x342c <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
    1b00:	88 81       	ld	r24, Y
    1b02:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZL12readRegisterhh.isra.0>
    1b06:	0a 80       	ldd	r0, Y+2	; 0x02
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x56>
    1b0a:	96 95       	lsr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x52>
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x60>
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	08 95       	ret

00001b24 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1b24:	08 95       	ret

00001b26 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    1b26:	fc 01       	movw	r30, r24
    1b28:	13 82       	std	Z+3, r1	; 0x03
    1b2a:	12 82       	std	Z+2, r1	; 0x02
    1b2c:	81 eb       	ldi	r24, 0xB1	; 177
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	64 83       	std	Z+4, r22	; 0x04
    1b36:	41 87       	std	Z+9, r20	; 0x09
    1b38:	22 87       	std	Z+10, r18	; 0x0a
    1b3a:	13 86       	std	Z+11, r1	; 0x0b
    1b3c:	08 95       	ret

00001b3e <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	ec 01       	movw	r28, r24
    1b46:	16 2f       	mov	r17, r22
    1b48:	6c 81       	ldd	r22, Y+4	; 0x04
    1b4a:	84 e0       	ldi	r24, 0x04	; 4
    1b4c:	93 e0       	ldi	r25, 0x03	; 3
    1b4e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN7TwoWire17beginTransmissionEh>
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	61 2b       	or	r22, r17
    1b56:	84 e0       	ldi	r24, 0x04	; 4
    1b58:	93 e0       	ldi	r25, 0x03	; 3
    1b5a:	0e 94 99 12 	call	0x2532	; 0x2532 <_ZN7TwoWire5writeEh>
    1b5e:	84 e0       	ldi	r24, 0x04	; 4
    1b60:	93 e0       	ldi	r25, 0x03	; 3
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_ZN7TwoWire15endTransmissionEv>

00001b6c <_ZN17LiquidCrystal_I2C9backlightEv>:
    1b6c:	28 e0       	ldi	r18, 0x08	; 8
    1b6e:	fc 01       	movw	r30, r24
    1b70:	23 87       	std	Z+11, r18	; 0x0b
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00001b78 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	8c 01       	movw	r16, r24
    1b80:	c6 2f       	mov	r28, r22
    1b82:	64 60       	ori	r22, 0x04	; 4
    1b84:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <delayMicroseconds>
    1b90:	6c 2f       	mov	r22, r28
    1b92:	6b 7f       	andi	r22, 0xFB	; 251
    1b94:	c8 01       	movw	r24, r16
    1b96:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1b9a:	82 e3       	ldi	r24, 0x32	; 50
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <delayMicroseconds>

00001ba8 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	ec 01       	movw	r28, r24
    1bb0:	16 2f       	mov	r17, r22
    1bb2:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1bb6:	61 2f       	mov	r22, r17
    1bb8:	ce 01       	movw	r24, r28
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00001bc4 <_ZN17LiquidCrystal_I2C4sendEhh>:
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	8c 01       	movw	r16, r24
    1bce:	c6 2f       	mov	r28, r22
    1bd0:	d4 2f       	mov	r29, r20
    1bd2:	60 7f       	andi	r22, 0xF0	; 240
    1bd4:	64 2b       	or	r22, r20
    1bd6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    1bda:	80 e1       	ldi	r24, 0x10	; 16
    1bdc:	c8 9f       	mul	r28, r24
    1bde:	b0 01       	movw	r22, r0
    1be0:	11 24       	eor	r1, r1
    1be2:	6d 2b       	or	r22, r29
    1be4:	c8 01       	movw	r24, r16
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00001bf2 <_ZN17LiquidCrystal_I2C7commandEh>:
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <_ZN17LiquidCrystal_I2C4sendEhh>

00001bf8 <_ZN17LiquidCrystal_I2C5clearEv>:
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN17LiquidCrystal_I2C7commandEh>
    1bfe:	80 ed       	ldi	r24, 0xD0	; 208
    1c00:	97 e0       	ldi	r25, 0x07	; 7
    1c02:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <delayMicroseconds>

00001c06 <_ZN17LiquidCrystal_I2C4homeEv>:
    1c06:	62 e0       	ldi	r22, 0x02	; 2
    1c08:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN17LiquidCrystal_I2C7commandEh>
    1c0c:	80 ed       	ldi	r24, 0xD0	; 208
    1c0e:	97 e0       	ldi	r25, 0x07	; 7
    1c10:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <delayMicroseconds>

00001c14 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	28 97       	sbiw	r28, 0x08	; 8
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	9c 01       	movw	r18, r24
    1c2a:	88 e0       	ldi	r24, 0x08	; 8
    1c2c:	ea e6       	ldi	r30, 0x6A	; 106
    1c2e:	f1 e0       	ldi	r31, 0x01	; 1
    1c30:	de 01       	movw	r26, r28
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	01 90       	ld	r0, Z+
    1c36:	0d 92       	st	X+, r0
    1c38:	8a 95       	dec	r24
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    1c3c:	f9 01       	movw	r30, r18
    1c3e:	80 85       	ldd	r24, Z+8	; 0x08
    1c40:	84 17       	cp	r24, r20
    1c42:	10 f4       	brcc	.+4      	; 0x1c48 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1c44:	4f ef       	ldi	r20, 0xFF	; 255
    1c46:	48 0f       	add	r20, r24
    1c48:	fe 01       	movw	r30, r28
    1c4a:	31 96       	adiw	r30, 0x01	; 1
    1c4c:	e4 0f       	add	r30, r20
    1c4e:	f1 1d       	adc	r31, r1
    1c50:	e4 0f       	add	r30, r20
    1c52:	f1 1d       	adc	r31, r1
    1c54:	90 81       	ld	r25, Z
    1c56:	69 0f       	add	r22, r25
    1c58:	60 68       	ori	r22, 0x80	; 128
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	28 96       	adiw	r28, 0x08	; 8
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <_ZN17LiquidCrystal_I2C7commandEh>

00001c70 <_ZN17LiquidCrystal_I2C7displayEv>:
    1c70:	fc 01       	movw	r30, r24
    1c72:	66 81       	ldd	r22, Z+6	; 0x06
    1c74:	26 2f       	mov	r18, r22
    1c76:	24 60       	ori	r18, 0x04	; 4
    1c78:	26 83       	std	Z+6, r18	; 0x06
    1c7a:	6c 60       	ori	r22, 0x0C	; 12
    1c7c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <_ZN17LiquidCrystal_I2C7commandEh>

00001c80 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	08 95       	ret

00001c8c <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	ec 01       	movw	r28, r24
	if (lines > 1) {
    1c92:	42 30       	cpi	r20, 0x02	; 2
    1c94:	18 f0       	brcs	.+6      	; 0x1c9c <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	88 60       	ori	r24, 0x08	; 8
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    1c9c:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    1c9e:	22 23       	and	r18, r18
    1ca0:	29 f0       	breq	.+10     	; 0x1cac <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    1ca2:	41 30       	cpi	r20, 0x01	; 1
    1ca4:	19 f4       	brne	.+6      	; 0x1cac <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	84 60       	ori	r24, 0x04	; 4
    1caa:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    1cac:	62 e3       	ldi	r22, 0x32	; 50
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 16 1a 	call	0x342c	; 0x342c <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    1cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cba:	ce 01       	movw	r24, r28
    1cbc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1cc0:	68 ee       	ldi	r22, 0xE8	; 232
    1cc2:	73 e0       	ldi	r23, 0x03	; 3
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 16 1a 	call	0x342c	; 0x342c <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    1ccc:	60 e3       	ldi	r22, 0x30	; 48
    1cce:	ce 01       	movw	r24, r28
    1cd0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1cd4:	84 e9       	ldi	r24, 0x94	; 148
    1cd6:	91 e1       	ldi	r25, 0x11	; 17
    1cd8:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    1cdc:	60 e3       	ldi	r22, 0x30	; 48
    1cde:	ce 01       	movw	r24, r28
    1ce0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    1ce4:	84 e9       	ldi	r24, 0x94	; 148
    1ce6:	91 e1       	ldi	r25, 0x11	; 17
    1ce8:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    1cec:	60 e3       	ldi	r22, 0x30	; 48
    1cee:	ce 01       	movw	r24, r28
    1cf0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    1cf4:	86 e9       	ldi	r24, 0x96	; 150
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    1cfc:	60 e2       	ldi	r22, 0x20	; 32
    1cfe:	ce 01       	movw	r24, r28
    1d00:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    1d04:	6d 81       	ldd	r22, Y+5	; 0x05
    1d06:	60 62       	ori	r22, 0x20	; 32
    1d08:	ce 01       	movw	r24, r28
    1d0a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1d0e:	84 e0       	ldi	r24, 0x04	; 4
    1d10:	8e 83       	std	Y+6, r24	; 0x06
	display();
    1d12:	ce 01       	movw	r24, r28
    1d14:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    1d18:	ce 01       	movw	r24, r28
    1d1a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    1d22:	66 e0       	ldi	r22, 0x06	; 6
    1d24:	ce 01       	movw	r24, r28
    1d26:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    1d2a:	ce 01       	movw	r24, r28
  
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    1d30:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <_ZN17LiquidCrystal_I2C4homeEv>

00001d34 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	ec 01       	movw	r28, r24
	Wire.begin();
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	93 e0       	ldi	r25, 0x03	; 3
    1d3e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1d42:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d48:	69 85       	ldd	r22, Y+9	; 0x09
    1d4a:	ce 01       	movw	r24, r28
}
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    1d50:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <_ZN17LiquidCrystal_I2C5beginEhhh>

00001d54 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    1d54:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <_ZN17LiquidCrystal_I2C9init_privEv>

00001d58 <_ZN9OneButtonC1Eiib>:

void OneButton::reset(void){
  _state = 0; // restart.
  _startTime = 0;
  _stopTime = 0;
  _isLongPressed = false;
    1d58:	fc 01       	movw	r30, r24
    1d5a:	86 2f       	mov	r24, r22
    1d5c:	a2 e3       	ldi	r26, 0x32	; 50
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	b3 83       	std	Z+3, r27	; 0x03
    1d62:	a2 83       	std	Z+2, r26	; 0x02
    1d64:	a8 e5       	ldi	r26, 0x58	; 88
    1d66:	b2 e0       	ldi	r27, 0x02	; 2
    1d68:	b5 83       	std	Z+5, r27	; 0x05
    1d6a:	a4 83       	std	Z+4, r26	; 0x04
    1d6c:	a8 ee       	ldi	r26, 0xE8	; 232
    1d6e:	b3 e0       	ldi	r27, 0x03	; 3
    1d70:	b7 83       	std	Z+7, r27	; 0x07
    1d72:	a6 83       	std	Z+6, r26	; 0x06
    1d74:	12 86       	std	Z+10, r1	; 0x0a
    1d76:	14 86       	std	Z+12, r1	; 0x0c
    1d78:	13 86       	std	Z+11, r1	; 0x0b
    1d7a:	16 86       	std	Z+14, r1	; 0x0e
    1d7c:	15 86       	std	Z+13, r1	; 0x0d
    1d7e:	10 8a       	std	Z+16, r1	; 0x10
    1d80:	17 86       	std	Z+15, r1	; 0x0f
    1d82:	12 8a       	std	Z+18, r1	; 0x12
    1d84:	11 8a       	std	Z+17, r1	; 0x11
    1d86:	14 8a       	std	Z+20, r1	; 0x14
    1d88:	13 8a       	std	Z+19, r1	; 0x13
    1d8a:	16 8a       	std	Z+22, r1	; 0x16
    1d8c:	15 8a       	std	Z+21, r1	; 0x15
    1d8e:	10 8e       	std	Z+24, r1	; 0x18
    1d90:	17 8a       	std	Z+23, r1	; 0x17
    1d92:	60 83       	st	Z, r22
    1d94:	71 83       	std	Z+1, r23	; 0x01
    1d96:	45 2b       	or	r20, r21
    1d98:	19 f0       	breq	.+6      	; 0x1da0 <_ZN9OneButtonC1Eiib+0x48>
    1d9a:	11 86       	std	Z+9, r1	; 0x09
    1d9c:	10 86       	std	Z+8, r1	; 0x08
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <_ZN9OneButtonC1Eiib+0x50>
    1da0:	41 e0       	ldi	r20, 0x01	; 1
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	51 87       	std	Z+9, r21	; 0x09
    1da6:	40 87       	std	Z+8, r20	; 0x08
    1da8:	22 23       	and	r18, r18
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <_ZN9OneButtonC1Eiib+0x58>
    1dac:	62 e0       	ldi	r22, 0x02	; 2
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <_ZN9OneButtonC1Eiib+0x5a>
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <pinMode>

00001db6 <_ZN9OneButton16setDebounceTicksEi>:
    1db6:	fc 01       	movw	r30, r24
    1db8:	73 83       	std	Z+3, r23	; 0x03
    1dba:	62 83       	std	Z+2, r22	; 0x02
    1dbc:	08 95       	ret

00001dbe <_ZN9OneButton13setClickTicksEi>:
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	75 83       	std	Z+5, r23	; 0x05
    1dc2:	64 83       	std	Z+4, r22	; 0x04
    1dc4:	08 95       	ret

00001dc6 <_ZN9OneButton13setPressTicksEi>:
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	77 83       	std	Z+7, r23	; 0x07
    1dca:	66 83       	std	Z+6, r22	; 0x06
    1dcc:	08 95       	ret

00001dce <_ZN9OneButton11attachClickEPFvvE>:
    1dce:	fc 01       	movw	r30, r24
    1dd0:	74 87       	std	Z+12, r23	; 0x0c
    1dd2:	63 87       	std	Z+11, r22	; 0x0b
    1dd4:	08 95       	ret

00001dd6 <_ZN9OneButton20attachLongPressStartEPFvvE>:
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	72 8b       	std	Z+18, r23	; 0x12
    1dda:	61 8b       	std	Z+17, r22	; 0x11
    1ddc:	08 95       	ret

00001dde <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	ec 01       	movw	r28, r24
    1dee:	16 2f       	mov	r17, r22
  unsigned long now = millis(); // current (relative) time in msecs.
    1df0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <millis>
    1df4:	6b 01       	movw	r12, r22
    1df6:	7c 01       	movw	r14, r24

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	31 f4       	brne	.+12     	; 0x1e0c <_ZN9OneButton4tickEb+0x2e>
    if (activeLevel) {
    1e00:	11 23       	and	r17, r17
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <_ZN9OneButton4tickEb+0x28>
    1e04:	bc c0       	rjmp	.+376    	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
      _state = 1; // step to state 1
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	78 c0       	rjmp	.+240    	; 0x1efc <_ZN9OneButton4tickEb+0x11e>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	91 05       	cpc	r25, r1
    1e10:	d9 f5       	brne	.+118    	; 0x1e88 <_ZN9OneButton4tickEb+0xaa>
    1e12:	89 8d       	ldd	r24, Y+25	; 0x19
    1e14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e16:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1e18:	bc 8d       	ldd	r27, Y+28	; 0x1c

    if ((!activeLevel) &&
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	a6 01       	movw	r20, r12
    1e1e:	48 1b       	sub	r20, r24
    1e20:	59 0b       	sbc	r21, r25
    1e22:	6a 0b       	sbc	r22, r26
    1e24:	7b 0b       	sbc	r23, r27
    1e26:	11 11       	cpse	r17, r1
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <_ZN9OneButton4tickEb+0x6a>
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	a0 e0       	ldi	r26, 0x00	; 0
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	48 17       	cp	r20, r24
    1e34:	59 07       	cpc	r21, r25
    1e36:	6a 07       	cpc	r22, r26
    1e38:	7b 07       	cpc	r23, r27
    1e3a:	18 f4       	brcc	.+6      	; 0x1e42 <_ZN9OneButton4tickEb+0x64>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
    1e3c:	18 8e       	std	Y+24, r1	; 0x18
    1e3e:	1f 8a       	std	Y+23, r1	; 0x17
    1e40:	9e c0       	rjmp	.+316    	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	1d c0       	rjmp	.+58     	; 0x1e82 <_ZN9OneButton4tickEb+0xa4>
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4c:	a0 e0       	ldi	r26, 0x00	; 0
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	84 17       	cp	r24, r20
    1e52:	95 07       	cpc	r25, r21
    1e54:	a6 07       	cpc	r26, r22
    1e56:	b7 07       	cpc	r27, r23
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <_ZN9OneButton4tickEb+0x7e>
    1e5a:	91 c0       	rjmp	.+290    	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true; // Keep track of long press state
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	8a 87       	std	Y+10, r24	; 0x0a
      if (_pressFunc)
    1e60:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e62:	f8 89       	ldd	r31, Y+16	; 0x10
    1e64:	30 97       	sbiw	r30, 0x00	; 0
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <_ZN9OneButton4tickEb+0x8c>
        _pressFunc();
    1e68:	09 95       	icall
      if (_longPressStartFunc)
    1e6a:	e9 89       	ldd	r30, Y+17	; 0x11
    1e6c:	fa 89       	ldd	r31, Y+18	; 0x12
    1e6e:	30 97       	sbiw	r30, 0x00	; 0
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <_ZN9OneButton4tickEb+0x96>
        _longPressStartFunc();
    1e72:	09 95       	icall
      if (_duringLongPressFunc)
    1e74:	ed 89       	ldd	r30, Y+21	; 0x15
    1e76:	fe 89       	ldd	r31, Y+22	; 0x16
    1e78:	30 97       	sbiw	r30, 0x00	; 0
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <_ZN9OneButton4tickEb+0xa0>
        _duringLongPressFunc();
    1e7c:	09 95       	icall
      _state = 6; // step to state 6
    1e7e:	86 e0       	ldi	r24, 0x06	; 6
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	98 8f       	std	Y+24, r25	; 0x18
    1e84:	8f 8b       	std	Y+23, r24	; 0x17
    1e86:	68 c0       	rjmp	.+208    	; 0x1f58 <_ZN9OneButton4tickEb+0x17a>
      _stopTime = now; // remember stopping time
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) {
    1e88:	82 30       	cpi	r24, 0x02	; 2
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	f1 f5       	brne	.+124    	; 0x1f0a <_ZN9OneButton4tickEb+0x12c>
    // waiting for menu pin being pressed the second time or timeout.
    if (_doubleClickFunc == NULL ||
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	89 2b       	or	r24, r25
    1e94:	99 f0       	breq	.+38     	; 0x1ebc <_ZN9OneButton4tickEb+0xde>
    1e96:	89 8d       	ldd	r24, Y+25	; 0x19
    1e98:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e9a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1e9c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1e9e:	b7 01       	movw	r22, r14
    1ea0:	a6 01       	movw	r20, r12
    1ea2:	48 1b       	sub	r20, r24
    1ea4:	59 0b       	sbc	r21, r25
    1ea6:	6a 0b       	sbc	r22, r26
    1ea8:	7b 0b       	sbc	r23, r27
    1eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1eac:	9d 81       	ldd	r25, Y+5	; 0x05
    1eae:	a0 e0       	ldi	r26, 0x00	; 0
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	84 17       	cp	r24, r20
    1eb4:	95 07       	cpc	r25, r21
    1eb6:	a6 07       	cpc	r26, r22
    1eb8:	b7 07       	cpc	r27, r23
    1eba:	38 f4       	brcc	.+14     	; 0x1eca <_ZN9OneButton4tickEb+0xec>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
    1ebc:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ebe:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ec0:	30 97       	sbiw	r30, 0x00	; 0
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <_ZN9OneButton4tickEb+0xe8>
    1ec4:	bb cf       	rjmp	.-138    	; 0x1e3c <_ZN9OneButton4tickEb+0x5e>
        _clickFunc();
    1ec6:	09 95       	icall
    1ec8:	b9 cf       	rjmp	.-142    	; 0x1e3c <_ZN9OneButton4tickEb+0x5e>
      _state = 0; // restart.

    } else if ((activeLevel) &&
    1eca:	11 23       	and	r17, r17
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <_ZN9OneButton4tickEb+0xf2>
    1ece:	57 c0       	rjmp	.+174    	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
    1ed0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ed2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ed4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ed6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ed8:	b7 01       	movw	r22, r14
    1eda:	a6 01       	movw	r20, r12
    1edc:	48 1b       	sub	r20, r24
    1ede:	59 0b       	sbc	r21, r25
    1ee0:	6a 0b       	sbc	r22, r26
    1ee2:	7b 0b       	sbc	r23, r27
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	a0 e0       	ldi	r26, 0x00	; 0
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	84 17       	cp	r24, r20
    1eee:	95 07       	cpc	r25, r21
    1ef0:	a6 07       	cpc	r26, r22
    1ef2:	b7 07       	cpc	r27, r23
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <_ZN9OneButton4tickEb+0x11a>
    1ef6:	43 c0       	rjmp	.+134    	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	98 8f       	std	Y+24, r25	; 0x18
    1efe:	8f 8b       	std	Y+23, r24	; 0x17
      _startTime = now; // remember starting time
    1f00:	c9 8e       	std	Y+25, r12	; 0x19
    1f02:	da 8e       	std	Y+26, r13	; 0x1a
    1f04:	eb 8e       	std	Y+27, r14	; 0x1b
    1f06:	fc 8e       	std	Y+28, r15	; 0x1c
    1f08:	3a c0       	rjmp	.+116    	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    1f0a:	83 30       	cpi	r24, 0x03	; 3
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	c1 f4       	brne	.+48     	; 0x1f40 <_ZN9OneButton4tickEb+0x162>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
    1f10:	11 11       	cpse	r17, r1
    1f12:	35 c0       	rjmp	.+106    	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
    1f14:	89 8d       	ldd	r24, Y+25	; 0x19
    1f16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f18:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1f1a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1f1c:	b7 01       	movw	r22, r14
    1f1e:	a6 01       	movw	r20, r12
    1f20:	48 1b       	sub	r20, r24
    1f22:	59 0b       	sbc	r21, r25
    1f24:	6a 0b       	sbc	r22, r26
    1f26:	7b 0b       	sbc	r23, r27
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	a0 e0       	ldi	r26, 0x00	; 0
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	84 17       	cp	r24, r20
    1f32:	95 07       	cpc	r25, r21
    1f34:	a6 07       	cpc	r26, r22
    1f36:	b7 07       	cpc	r27, r23
    1f38:	10 f5       	brcc	.+68     	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      // this was a 2 click sequence.
      if (_doubleClickFunc)
    1f3a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f3c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f3e:	07 c0       	rjmp	.+14     	; 0x1f4e <_ZN9OneButton4tickEb+0x170>
        _doubleClickFunc();
      _state = 0; // restart.
      _stopTime = now; // remember stopping time
    } // if

  } else if (_state == 6) {
    1f40:	06 97       	sbiw	r24, 0x06	; 6
    1f42:	e9 f4       	brne	.+58     	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
    1f44:	11 11       	cpse	r17, r1
    1f46:	0d c0       	rjmp	.+26     	; 0x1f62 <_ZN9OneButton4tickEb+0x184>
      _isLongPressed = false; // Keep track of long press state
    1f48:	1a 86       	std	Y+10, r1	; 0x0a
      if (_longPressStopFunc)
    1f4a:	eb 89       	ldd	r30, Y+19	; 0x13
    1f4c:	fc 89       	ldd	r31, Y+20	; 0x14
    1f4e:	30 97       	sbiw	r30, 0x00	; 0
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <_ZN9OneButton4tickEb+0x176>
        _longPressStopFunc();
    1f52:	09 95       	icall
      _state = 0; // restart.
    1f54:	18 8e       	std	Y+24, r1	; 0x18
    1f56:	1f 8a       	std	Y+23, r1	; 0x17
      _stopTime = now; // remember stopping time
    1f58:	cd 8e       	std	Y+29, r12	; 0x1d
    1f5a:	de 8e       	std	Y+30, r13	; 0x1e
    1f5c:	ef 8e       	std	Y+31, r14	; 0x1f
    1f5e:	f8 a2       	std	Y+32, r15	; 0x20
    1f60:	0e c0       	rjmp	.+28     	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	8a 87       	std	Y+10, r24	; 0x0a
      if (_duringLongPressFunc)
    1f66:	ed 89       	ldd	r30, Y+21	; 0x15
    1f68:	fe 89       	ldd	r31, Y+22	; 0x16
    1f6a:	30 97       	sbiw	r30, 0x00	; 0
    1f6c:	41 f0       	breq	.+16     	; 0x1f7e <_ZN9OneButton4tickEb+0x1a0>
        _duringLongPressFunc();
    } // if

  } // if
} // OneButton.tick()
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	ff 90       	pop	r15
    1f76:	ef 90       	pop	r14
    1f78:	df 90       	pop	r13
    1f7a:	cf 90       	pop	r12
      _stopTime = now; // remember stopping time
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
    1f7c:	09 94       	ijmp
    } // if

  } // if
} // OneButton.tick()
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	ff 90       	pop	r15
    1f86:	ef 90       	pop	r14
    1f88:	df 90       	pop	r13
    1f8a:	cf 90       	pop	r12
    1f8c:	08 95       	ret

00001f8e <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
  if (_pin >= 0) {
    1f94:	88 81       	ld	r24, Y
    1f96:	99 81       	ldd	r25, Y+1	; 0x01
    1f98:	97 fd       	sbrc	r25, 7
    1f9a:	0e c0       	rjmp	.+28     	; 0x1fb8 <_ZN9OneButton4tickEv+0x2a>
    tick(digitalRead(_pin) == _buttonPressed);
    1f9c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <digitalRead>
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	28 85       	ldd	r18, Y+8	; 0x08
    1fa4:	39 85       	ldd	r19, Y+9	; 0x09
    1fa6:	28 17       	cp	r18, r24
    1fa8:	39 07       	cpc	r19, r25
    1faa:	09 f0       	breq	.+2      	; 0x1fae <_ZN9OneButton4tickEv+0x20>
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	ce 01       	movw	r24, r28
  }
}
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
    1fb4:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <_ZN9OneButton4tickEb>
  }
}
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	08 95       	ret

00001fbe <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fbe:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <twi_state>
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <twi_sendStop>
    1fc8:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_inRepStart>
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	82 e1       	ldi	r24, 0x12	; 18
    1fd0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <digitalWrite>
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	83 e1       	ldi	r24, 0x13	; 19
    1fd8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <digitalWrite>
    1fdc:	e9 eb       	ldi	r30, 0xB9	; 185
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8e 7f       	andi	r24, 0xFE	; 254
    1fe4:	80 83       	st	Z, r24
    1fe6:	80 81       	ld	r24, Z
    1fe8:	8d 7f       	andi	r24, 0xFD	; 253
    1fea:	80 83       	st	Z, r24
    1fec:	88 e4       	ldi	r24, 0x48	; 72
    1fee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1ff2:	85 e4       	ldi	r24, 0x45	; 69
    1ff4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ff8:	08 95       	ret

00001ffa <twi_readFrom>:
    1ffa:	41 32       	cpi	r20, 0x21	; 33
    1ffc:	08 f0       	brcs	.+2      	; 0x2000 <twi_readFrom+0x6>
    1ffe:	43 c0       	rjmp	.+134    	; 0x2086 <twi_readFrom+0x8c>
    2000:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <twi_state>
    2004:	91 11       	cpse	r25, r1
    2006:	fc cf       	rjmp	.-8      	; 0x2000 <twi_readFrom+0x6>
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <twi_state>
    200e:	20 93 01 03 	sts	0x0301, r18	; 0x800301 <twi_sendStop>
    2012:	2f ef       	ldi	r18, 0xFF	; 255
    2014:	20 93 96 02 	sts	0x0296, r18	; 0x800296 <twi_error>
    2018:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <twi_masterBufferIndex>
    201c:	24 0f       	add	r18, r20
    201e:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <twi_masterBufferLength>
    2022:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <twi_slarw>
    2026:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <twi_slarw>
    202a:	88 0f       	add	r24, r24
    202c:	89 2b       	or	r24, r25
    202e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <twi_slarw>
    2032:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <twi_inRepStart>
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	61 f4       	brne	.+24     	; 0x2052 <twi_readFrom+0x58>
    203a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_inRepStart>
    203e:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <twi_slarw>
    2042:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2046:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    204a:	83 fd       	sbrc	r24, 3
    204c:	f8 cf       	rjmp	.-16     	; 0x203e <twi_readFrom+0x44>
    204e:	85 ec       	ldi	r24, 0xC5	; 197
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <twi_readFrom+0x5a>
    2052:	85 ee       	ldi	r24, 0xE5	; 229
    2054:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2058:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_state>
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	e1 f3       	breq	.-8      	; 0x2058 <twi_readFrom+0x5e>
    2060:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_masterBufferIndex>
    2064:	84 17       	cp	r24, r20
    2066:	10 f4       	brcc	.+4      	; 0x206c <twi_readFrom+0x72>
    2068:	40 91 db 02 	lds	r20, 0x02DB	; 0x8002db <twi_masterBufferIndex>
    206c:	ac ed       	ldi	r26, 0xDC	; 220
    206e:	b2 e0       	ldi	r27, 0x02	; 2
    2070:	96 2f       	mov	r25, r22
    2072:	fb 01       	movw	r30, r22
    2074:	8e 2f       	mov	r24, r30
    2076:	89 1b       	sub	r24, r25
    2078:	84 17       	cp	r24, r20
    207a:	18 f4       	brcc	.+6      	; 0x2082 <twi_readFrom+0x88>
    207c:	8d 91       	ld	r24, X+
    207e:	81 93       	st	Z+, r24
    2080:	f9 cf       	rjmp	.-14     	; 0x2074 <twi_readFrom+0x7a>
    2082:	84 2f       	mov	r24, r20
    2084:	08 95       	ret
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	08 95       	ret

0000208a <twi_writeTo>:
    208a:	0f 93       	push	r16
    208c:	41 32       	cpi	r20, 0x21	; 33
    208e:	08 f0       	brcs	.+2      	; 0x2092 <twi_writeTo+0x8>
    2090:	4a c0       	rjmp	.+148    	; 0x2126 <twi_writeTo+0x9c>
    2092:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <twi_state>
    2096:	91 11       	cpse	r25, r1
    2098:	fc cf       	rjmp	.-8      	; 0x2092 <twi_writeTo+0x8>
    209a:	32 e0       	ldi	r19, 0x02	; 2
    209c:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <twi_state>
    20a0:	00 93 01 03 	sts	0x0301, r16	; 0x800301 <twi_sendStop>
    20a4:	3f ef       	ldi	r19, 0xFF	; 255
    20a6:	30 93 96 02 	sts	0x0296, r19	; 0x800296 <twi_error>
    20aa:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <twi_masterBufferIndex>
    20ae:	40 93 da 02 	sts	0x02DA, r20	; 0x8002da <twi_masterBufferLength>
    20b2:	56 2f       	mov	r21, r22
    20b4:	ac ed       	ldi	r26, 0xDC	; 220
    20b6:	b2 e0       	ldi	r27, 0x02	; 2
    20b8:	fb 01       	movw	r30, r22
    20ba:	3e 2f       	mov	r19, r30
    20bc:	35 1b       	sub	r19, r21
    20be:	34 17       	cp	r19, r20
    20c0:	18 f4       	brcc	.+6      	; 0x20c8 <twi_writeTo+0x3e>
    20c2:	31 91       	ld	r19, Z+
    20c4:	3d 93       	st	X+, r19
    20c6:	f9 cf       	rjmp	.-14     	; 0x20ba <twi_writeTo+0x30>
    20c8:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <twi_slarw>
    20cc:	30 91 02 03 	lds	r19, 0x0302	; 0x800302 <twi_slarw>
    20d0:	88 0f       	add	r24, r24
    20d2:	83 2b       	or	r24, r19
    20d4:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <twi_slarw>
    20d8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <twi_inRepStart>
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	61 f4       	brne	.+24     	; 0x20f8 <twi_writeTo+0x6e>
    20e0:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <twi_inRepStart>
    20e4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <twi_slarw>
    20e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    20ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20f0:	83 fd       	sbrc	r24, 3
    20f2:	f8 cf       	rjmp	.-16     	; 0x20e4 <twi_writeTo+0x5a>
    20f4:	85 ec       	ldi	r24, 0xC5	; 197
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <twi_writeTo+0x70>
    20f8:	85 ee       	ldi	r24, 0xE5	; 229
    20fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20fe:	22 23       	and	r18, r18
    2100:	21 f0       	breq	.+8      	; 0x210a <twi_writeTo+0x80>
    2102:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_state>
    2106:	82 30       	cpi	r24, 0x02	; 2
    2108:	d1 f3       	breq	.-12     	; 0x20fe <twi_writeTo+0x74>
    210a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <twi_error>
    210e:	8f 3f       	cpi	r24, 0xFF	; 255
    2110:	79 f0       	breq	.+30     	; 0x2130 <twi_writeTo+0xa6>
    2112:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <twi_error>
    2116:	80 32       	cpi	r24, 0x20	; 32
    2118:	41 f0       	breq	.+16     	; 0x212a <twi_writeTo+0xa0>
    211a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <twi_error>
    211e:	80 33       	cpi	r24, 0x30	; 48
    2120:	31 f0       	breq	.+12     	; 0x212e <twi_writeTo+0xa4>
    2122:	94 e0       	ldi	r25, 0x04	; 4
    2124:	05 c0       	rjmp	.+10     	; 0x2130 <twi_writeTo+0xa6>
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	03 c0       	rjmp	.+6      	; 0x2130 <twi_writeTo+0xa6>
    212a:	92 e0       	ldi	r25, 0x02	; 2
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <twi_writeTo+0xa6>
    212e:	93 e0       	ldi	r25, 0x03	; 3
    2130:	89 2f       	mov	r24, r25
    2132:	0f 91       	pop	r16
    2134:	08 95       	ret

00002136 <twi_transmit>:
    2136:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <twi_txBufferLength>
    213a:	26 2f       	mov	r18, r22
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	24 0f       	add	r18, r20
    2140:	31 1d       	adc	r19, r1
    2142:	21 32       	cpi	r18, 0x21	; 33
    2144:	31 05       	cpc	r19, r1
    2146:	dc f4       	brge	.+54     	; 0x217e <twi_transmit+0x48>
    2148:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <twi_state>
    214c:	24 30       	cpi	r18, 0x04	; 4
    214e:	c9 f4       	brne	.+50     	; 0x2182 <twi_transmit+0x4c>
    2150:	fc 01       	movw	r30, r24
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	86 17       	cp	r24, r22
    2158:	58 f4       	brcc	.+22     	; 0x2170 <twi_transmit+0x3a>
    215a:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <twi_txBufferLength>
    215e:	21 91       	ld	r18, Z+
    2160:	dc 01       	movw	r26, r24
    2162:	a6 54       	subi	r26, 0x46	; 70
    2164:	bd 4f       	sbci	r27, 0xFD	; 253
    2166:	a3 0f       	add	r26, r19
    2168:	b1 1d       	adc	r27, r1
    216a:	2c 93       	st	X, r18
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	f3 cf       	rjmp	.-26     	; 0x2156 <twi_transmit+0x20>
    2170:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <twi_txBufferLength>
    2174:	68 0f       	add	r22, r24
    2176:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <twi_txBufferLength>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	08 95       	ret
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	08 95       	ret
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	08 95       	ret

00002186 <twi_attachSlaveRxEvent>:
    2186:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <twi_onSlaveReceive+0x1>
    218a:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <twi_onSlaveReceive>
    218e:	08 95       	ret

00002190 <twi_attachSlaveTxEvent>:
    2190:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <twi_onSlaveTransmit+0x1>
    2194:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_onSlaveTransmit>
    2198:	08 95       	ret

0000219a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    219a:	85 ed       	ldi	r24, 0xD5	; 213
    219c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    21a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    21a4:	84 fd       	sbrc	r24, 4
    21a6:	fc cf       	rjmp	.-8      	; 0x21a0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    21a8:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <twi_state>
    21ac:	08 95       	ret

000021ae <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    21ae:	85 ec       	ldi	r24, 0xC5	; 197
    21b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    21b4:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <twi_state>
    21b8:	08 95       	ret

000021ba <__vector_24>:
}

ISR(TWI_vect)
{
    21ba:	1f 92       	push	r1
    21bc:	0f 92       	push	r0
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	0f 92       	push	r0
    21c2:	11 24       	eor	r1, r1
    21c4:	2f 93       	push	r18
    21c6:	3f 93       	push	r19
    21c8:	4f 93       	push	r20
    21ca:	5f 93       	push	r21
    21cc:	6f 93       	push	r22
    21ce:	7f 93       	push	r23
    21d0:	8f 93       	push	r24
    21d2:	9f 93       	push	r25
    21d4:	af 93       	push	r26
    21d6:	bf 93       	push	r27
    21d8:	ef 93       	push	r30
    21da:	ff 93       	push	r31
  switch(TW_STATUS){
    21dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    21e0:	88 7f       	andi	r24, 0xF8	; 248
    21e2:	80 36       	cpi	r24, 0x60	; 96
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <__vector_24+0x2e>
    21e6:	9e c0       	rjmp	.+316    	; 0x2324 <__vector_24+0x16a>
    21e8:	78 f5       	brcc	.+94     	; 0x2248 <__vector_24+0x8e>
    21ea:	88 32       	cpi	r24, 0x28	; 40
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__vector_24+0x36>
    21ee:	5d c0       	rjmp	.+186    	; 0x22aa <__vector_24+0xf0>
    21f0:	90 f4       	brcc	.+36     	; 0x2216 <__vector_24+0x5c>
    21f2:	80 31       	cpi	r24, 0x10	; 16
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_24+0x3e>
    21f6:	56 c0       	rjmp	.+172    	; 0x22a4 <__vector_24+0xea>
    21f8:	38 f4       	brcc	.+14     	; 0x2208 <__vector_24+0x4e>
    21fa:	88 23       	and	r24, r24
    21fc:	09 f4       	brne	.+2      	; 0x2200 <__vector_24+0x46>
    21fe:	f5 c0       	rjmp	.+490    	; 0x23ea <__vector_24+0x230>
    2200:	88 30       	cpi	r24, 0x08	; 8
    2202:	09 f4       	brne	.+2      	; 0x2206 <__vector_24+0x4c>
    2204:	4f c0       	rjmp	.+158    	; 0x22a4 <__vector_24+0xea>
    2206:	f5 c0       	rjmp	.+490    	; 0x23f2 <__vector_24+0x238>
    2208:	88 31       	cpi	r24, 0x18	; 24
    220a:	09 f4       	brne	.+2      	; 0x220e <__vector_24+0x54>
    220c:	4e c0       	rjmp	.+156    	; 0x22aa <__vector_24+0xf0>
    220e:	80 32       	cpi	r24, 0x20	; 32
    2210:	09 f4       	brne	.+2      	; 0x2214 <__vector_24+0x5a>
    2212:	5f c0       	rjmp	.+190    	; 0x22d2 <__vector_24+0x118>
    2214:	ee c0       	rjmp	.+476    	; 0x23f2 <__vector_24+0x238>
    2216:	80 34       	cpi	r24, 0x40	; 64
    2218:	09 f4       	brne	.+2      	; 0x221c <__vector_24+0x62>
    221a:	6a c0       	rjmp	.+212    	; 0x22f0 <__vector_24+0x136>
    221c:	58 f4       	brcc	.+22     	; 0x2234 <__vector_24+0x7a>
    221e:	80 33       	cpi	r24, 0x30	; 48
    2220:	09 f4       	brne	.+2      	; 0x2224 <__vector_24+0x6a>
    2222:	57 c0       	rjmp	.+174    	; 0x22d2 <__vector_24+0x118>
    2224:	88 33       	cpi	r24, 0x38	; 56
    2226:	09 f0       	breq	.+2      	; 0x222a <__vector_24+0x70>
    2228:	e4 c0       	rjmp	.+456    	; 0x23f2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    222a:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <twi_error>
      twi_releaseBus();
    222e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <twi_releaseBus>
      break;
    2232:	df c0       	rjmp	.+446    	; 0x23f2 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2234:	80 35       	cpi	r24, 0x50	; 80
    2236:	09 f4       	brne	.+2      	; 0x223a <__vector_24+0x80>
    2238:	4f c0       	rjmp	.+158    	; 0x22d8 <__vector_24+0x11e>
    223a:	88 35       	cpi	r24, 0x58	; 88
    223c:	09 f4       	brne	.+2      	; 0x2240 <__vector_24+0x86>
    223e:	5d c0       	rjmp	.+186    	; 0x22fa <__vector_24+0x140>
    2240:	88 34       	cpi	r24, 0x48	; 72
    2242:	09 f0       	breq	.+2      	; 0x2246 <__vector_24+0x8c>
    2244:	d6 c0       	rjmp	.+428    	; 0x23f2 <__vector_24+0x238>
    2246:	d3 c0       	rjmp	.+422    	; 0x23ee <__vector_24+0x234>
    2248:	88 39       	cpi	r24, 0x98	; 152
    224a:	09 f4       	brne	.+2      	; 0x224e <__vector_24+0x94>
    224c:	c4 c0       	rjmp	.+392    	; 0x23d6 <__vector_24+0x21c>
    224e:	a8 f4       	brcc	.+42     	; 0x227a <__vector_24+0xc0>
    2250:	88 37       	cpi	r24, 0x78	; 120
    2252:	09 f4       	brne	.+2      	; 0x2256 <__vector_24+0x9c>
    2254:	67 c0       	rjmp	.+206    	; 0x2324 <__vector_24+0x16a>
    2256:	38 f4       	brcc	.+14     	; 0x2266 <__vector_24+0xac>
    2258:	88 36       	cpi	r24, 0x68	; 104
    225a:	09 f4       	brne	.+2      	; 0x225e <__vector_24+0xa4>
    225c:	63 c0       	rjmp	.+198    	; 0x2324 <__vector_24+0x16a>
    225e:	80 37       	cpi	r24, 0x70	; 112
    2260:	09 f4       	brne	.+2      	; 0x2264 <__vector_24+0xaa>
    2262:	60 c0       	rjmp	.+192    	; 0x2324 <__vector_24+0x16a>
    2264:	c6 c0       	rjmp	.+396    	; 0x23f2 <__vector_24+0x238>
    2266:	88 38       	cpi	r24, 0x88	; 136
    2268:	09 f4       	brne	.+2      	; 0x226c <__vector_24+0xb2>
    226a:	b5 c0       	rjmp	.+362    	; 0x23d6 <__vector_24+0x21c>
    226c:	80 39       	cpi	r24, 0x90	; 144
    226e:	09 f4       	brne	.+2      	; 0x2272 <__vector_24+0xb8>
    2270:	5f c0       	rjmp	.+190    	; 0x2330 <__vector_24+0x176>
    2272:	80 38       	cpi	r24, 0x80	; 128
    2274:	09 f0       	breq	.+2      	; 0x2278 <__vector_24+0xbe>
    2276:	bd c0       	rjmp	.+378    	; 0x23f2 <__vector_24+0x238>
    2278:	5b c0       	rjmp	.+182    	; 0x2330 <__vector_24+0x176>
    227a:	80 3b       	cpi	r24, 0xB0	; 176
    227c:	09 f4       	brne	.+2      	; 0x2280 <__vector_24+0xc6>
    227e:	83 c0       	rjmp	.+262    	; 0x2386 <__vector_24+0x1cc>
    2280:	38 f4       	brcc	.+14     	; 0x2290 <__vector_24+0xd6>
    2282:	80 3a       	cpi	r24, 0xA0	; 160
    2284:	09 f4       	brne	.+2      	; 0x2288 <__vector_24+0xce>
    2286:	66 c0       	rjmp	.+204    	; 0x2354 <__vector_24+0x19a>
    2288:	88 3a       	cpi	r24, 0xA8	; 168
    228a:	09 f4       	brne	.+2      	; 0x228e <__vector_24+0xd4>
    228c:	7c c0       	rjmp	.+248    	; 0x2386 <__vector_24+0x1cc>
    228e:	b1 c0       	rjmp	.+354    	; 0x23f2 <__vector_24+0x238>
    2290:	80 3c       	cpi	r24, 0xC0	; 192
    2292:	09 f4       	brne	.+2      	; 0x2296 <__vector_24+0xdc>
    2294:	a4 c0       	rjmp	.+328    	; 0x23de <__vector_24+0x224>
    2296:	88 3c       	cpi	r24, 0xC8	; 200
    2298:	09 f4       	brne	.+2      	; 0x229c <__vector_24+0xe2>
    229a:	a1 c0       	rjmp	.+322    	; 0x23de <__vector_24+0x224>
    229c:	88 3b       	cpi	r24, 0xB8	; 184
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__vector_24+0xe8>
    22a0:	87 c0       	rjmp	.+270    	; 0x23b0 <__vector_24+0x1f6>
    22a2:	a7 c0       	rjmp	.+334    	; 0x23f2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    22a4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <twi_slarw>
    22a8:	10 c0       	rjmp	.+32     	; 0x22ca <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22aa:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <twi_masterBufferIndex>
    22ae:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_masterBufferLength>
    22b2:	98 17       	cp	r25, r24
    22b4:	70 f5       	brcc	.+92     	; 0x2312 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    22b6:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <twi_masterBufferIndex>
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	8e 0f       	add	r24, r30
    22be:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <twi_masterBufferIndex>
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	e4 52       	subi	r30, 0x24	; 36
    22c6:	fd 4f       	sbci	r31, 0xFD	; 253
    22c8:	80 81       	ld	r24, Z
    22ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22ce:	85 ec       	ldi	r24, 0xC5	; 197
    22d0:	83 c0       	rjmp	.+262    	; 0x23d8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    22d2:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <twi_error>
    22d6:	8b c0       	rjmp	.+278    	; 0x23ee <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22d8:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <twi_masterBufferIndex>
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	8e 0f       	add	r24, r30
    22e0:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <twi_masterBufferIndex>
    22e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	e4 52       	subi	r30, 0x24	; 36
    22ec:	fd 4f       	sbci	r31, 0xFD	; 253
    22ee:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22f0:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <twi_masterBufferIndex>
    22f4:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <twi_masterBufferLength>
    22f8:	6b c0       	rjmp	.+214    	; 0x23d0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22fa:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <twi_masterBufferIndex>
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	8e 0f       	add	r24, r30
    2302:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <twi_masterBufferIndex>
    2306:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	e4 52       	subi	r30, 0x24	; 36
    230e:	fd 4f       	sbci	r31, 0xFD	; 253
    2310:	80 83       	st	Z, r24
	if (twi_sendStop)
    2312:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <twi_sendStop>
    2316:	81 11       	cpse	r24, r1
    2318:	6a c0       	rjmp	.+212    	; 0x23ee <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2320:	84 ea       	ldi	r24, 0xA4	; 164
    2322:	5e c0       	rjmp	.+188    	; 0x23e0 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2324:	83 e0       	ldi	r24, 0x03	; 3
    2326:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    232a:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <twi_rxBufferIndex>
    232e:	cf cf       	rjmp	.-98     	; 0x22ce <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2330:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <twi_rxBufferIndex>
    2334:	80 32       	cpi	r24, 0x20	; 32
    2336:	08 f0       	brcs	.+2      	; 0x233a <__vector_24+0x180>
    2338:	4e c0       	rjmp	.+156    	; 0x23d6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    233a:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <twi_rxBufferIndex>
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	8e 0f       	add	r24, r30
    2342:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <twi_rxBufferIndex>
    2346:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	e8 56       	subi	r30, 0x68	; 104
    234e:	fd 4f       	sbci	r31, 0xFD	; 253
    2350:	80 83       	st	Z, r24
    2352:	bd cf       	rjmp	.-134    	; 0x22ce <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2354:	0e 94 d7 10 	call	0x21ae	; 0x21ae <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2358:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <twi_rxBufferIndex>
    235c:	80 32       	cpi	r24, 0x20	; 32
    235e:	30 f4       	brcc	.+12     	; 0x236c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2360:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <twi_rxBufferIndex>
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	e8 56       	subi	r30, 0x68	; 104
    2368:	fd 4f       	sbci	r31, 0xFD	; 253
    236a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    236c:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <twi_rxBufferIndex>
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <twi_onSlaveReceive>
    2376:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <twi_onSlaveReceive+0x1>
    237a:	88 e9       	ldi	r24, 0x98	; 152
    237c:	92 e0       	ldi	r25, 0x02	; 2
    237e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2380:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <twi_rxBufferIndex>
      break;
    2384:	36 c0       	rjmp	.+108    	; 0x23f2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2386:	84 e0       	ldi	r24, 0x04	; 4
    2388:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    238c:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2390:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2394:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <twi_onSlaveTransmit>
    2398:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <twi_onSlaveTransmit+0x1>
    239c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    239e:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <twi_txBufferLength>
    23a2:	81 11       	cpse	r24, r1
    23a4:	05 c0       	rjmp	.+10     	; 0x23b0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    23ac:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    23b0:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <twi_txBufferIndex>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	8e 0f       	add	r24, r30
    23b8:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <twi_txBufferIndex>
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	e6 54       	subi	r30, 0x46	; 70
    23c0:	fd 4f       	sbci	r31, 0xFD	; 253
    23c2:	80 81       	ld	r24, Z
    23c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    23c8:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <twi_txBufferIndex>
    23cc:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <twi_txBufferLength>
    23d0:	98 17       	cp	r25, r24
    23d2:	08 f4       	brcc	.+2      	; 0x23d6 <__vector_24+0x21c>
    23d4:	7c cf       	rjmp	.-264    	; 0x22ce <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23d6:	85 e8       	ldi	r24, 0x85	; 133
    23d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23dc:	0a c0       	rjmp	.+20     	; 0x23f2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23de:	85 ec       	ldi	r24, 0xC5	; 197
    23e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    23e4:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <twi_state>
      break;
    23e8:	04 c0       	rjmp	.+8      	; 0x23f2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23ea:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <twi_error>
      twi_stop();
    23ee:	0e 94 cd 10 	call	0x219a	; 0x219a <twi_stop>
      break;
  }
}
    23f2:	ff 91       	pop	r31
    23f4:	ef 91       	pop	r30
    23f6:	bf 91       	pop	r27
    23f8:	af 91       	pop	r26
    23fa:	9f 91       	pop	r25
    23fc:	8f 91       	pop	r24
    23fe:	7f 91       	pop	r23
    2400:	6f 91       	pop	r22
    2402:	5f 91       	pop	r21
    2404:	4f 91       	pop	r20
    2406:	3f 91       	pop	r19
    2408:	2f 91       	pop	r18
    240a:	0f 90       	pop	r0
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	0f 90       	pop	r0
    2410:	1f 90       	pop	r1
    2412:	18 95       	reti

00002414 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2414:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <_ZN7TwoWire14rxBufferLengthE>
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <_ZN7TwoWire13rxBufferIndexE>
    241e:	82 1b       	sub	r24, r18
    2420:	91 09       	sbc	r25, r1
    2422:	08 95       	ret

00002424 <_ZN7TwoWire4readEv>:
    2424:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <_ZN7TwoWire13rxBufferIndexE>
    2428:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <_ZN7TwoWire14rxBufferLengthE>
    242c:	98 17       	cp	r25, r24
    242e:	50 f4       	brcc	.+20     	; 0x2444 <_ZN7TwoWire4readEv+0x20>
    2430:	e9 2f       	mov	r30, r25
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	e6 5c       	subi	r30, 0xC6	; 198
    2436:	fc 4f       	sbci	r31, 0xFC	; 252
    2438:	20 81       	ld	r18, Z
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	9f 5f       	subi	r25, 0xFF	; 255
    243e:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <_ZN7TwoWire13rxBufferIndexE>
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <_ZN7TwoWire4readEv+0x24>
    2444:	2f ef       	ldi	r18, 0xFF	; 255
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	c9 01       	movw	r24, r18
    244a:	08 95       	ret

0000244c <_ZN7TwoWire4peekEv>:
    244c:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <_ZN7TwoWire13rxBufferIndexE>
    2450:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <_ZN7TwoWire14rxBufferLengthE>
    2454:	e8 17       	cp	r30, r24
    2456:	30 f4       	brcc	.+12     	; 0x2464 <_ZN7TwoWire4peekEv+0x18>
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	e6 5c       	subi	r30, 0xC6	; 198
    245c:	fc 4f       	sbci	r31, 0xFC	; 252
    245e:	80 81       	ld	r24, Z
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	08 95       	ret
    2464:	8f ef       	ldi	r24, 0xFF	; 255
    2466:	9f ef       	ldi	r25, 0xFF	; 255
    2468:	08 95       	ret

0000246a <_ZN7TwoWire5flushEv>:
    246a:	08 95       	ret

0000246c <_ZN7TwoWire16onReceiveServiceEPhi>:
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	ec 01       	movw	r28, r24
    2472:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <_ZN7TwoWire14user_onReceiveE>
    2476:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <_ZN7TwoWire14user_onReceiveE+0x1>
    247a:	30 97       	sbiw	r30, 0x00	; 0
    247c:	f1 f0       	breq	.+60     	; 0x24ba <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    247e:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <_ZN7TwoWire13rxBufferIndexE>
    2482:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <_ZN7TwoWire14rxBufferLengthE>
    2486:	98 17       	cp	r25, r24
    2488:	c0 f0       	brcs	.+48     	; 0x24ba <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	29 2f       	mov	r18, r25
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	26 17       	cp	r18, r22
    2492:	37 07       	cpc	r19, r23
    2494:	54 f4       	brge	.+20     	; 0x24aa <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2496:	de 01       	movw	r26, r28
    2498:	a2 0f       	add	r26, r18
    249a:	b3 1f       	adc	r27, r19
    249c:	4c 91       	ld	r20, X
    249e:	d9 01       	movw	r26, r18
    24a0:	a6 5c       	subi	r26, 0xC6	; 198
    24a2:	bc 4f       	sbci	r27, 0xFC	; 252
    24a4:	4c 93       	st	X, r20
    24a6:	9f 5f       	subi	r25, 0xFF	; 255
    24a8:	f1 cf       	rjmp	.-30     	; 0x248c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    24aa:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <_ZN7TwoWire13rxBufferIndexE>
    24ae:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <_ZN7TwoWire14rxBufferLengthE>
    24b2:	cb 01       	movw	r24, r22
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	09 94       	ijmp
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <_ZN7TwoWire16onRequestServiceEv>:
    24c0:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <_ZN7TwoWire14user_onRequestE>
    24c4:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <_ZN7TwoWire14user_onRequestE+0x1>
    24c8:	30 97       	sbiw	r30, 0x00	; 0
    24ca:	29 f0       	breq	.+10     	; 0x24d6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    24cc:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    24d0:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    24d4:	09 94       	ijmp
    24d6:	08 95       	ret

000024d8 <_ZN7TwoWire5writeEPKhj>:
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	7c 01       	movw	r14, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8a 01       	movw	r16, r20
    24ee:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZN7TwoWire12transmittingE>
    24f2:	22 23       	and	r18, r18
    24f4:	89 f0       	breq	.+34     	; 0x2518 <_ZN7TwoWire5writeEPKhj+0x40>
    24f6:	eb 01       	movw	r28, r22
    24f8:	6b 01       	movw	r12, r22
    24fa:	c4 0e       	add	r12, r20
    24fc:	d5 1e       	adc	r13, r21
    24fe:	cc 15       	cp	r28, r12
    2500:	dd 05       	cpc	r29, r13
    2502:	69 f0       	breq	.+26     	; 0x251e <_ZN7TwoWire5writeEPKhj+0x46>
    2504:	69 91       	ld	r22, Y+
    2506:	d7 01       	movw	r26, r14
    2508:	ed 91       	ld	r30, X+
    250a:	fc 91       	ld	r31, X
    250c:	01 90       	ld	r0, Z+
    250e:	f0 81       	ld	r31, Z
    2510:	e0 2d       	mov	r30, r0
    2512:	c7 01       	movw	r24, r14
    2514:	09 95       	icall
    2516:	f3 cf       	rjmp	.-26     	; 0x24fe <_ZN7TwoWire5writeEPKhj+0x26>
    2518:	64 2f       	mov	r22, r20
    251a:	0e 94 9b 10 	call	0x2136	; 0x2136 <twi_transmit>
    251e:	c8 01       	movw	r24, r16
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	08 95       	ret

00002532 <_ZN7TwoWire5writeEh>:
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	1f 92       	push	r1
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	69 83       	std	Y+1, r22	; 0x01
    253e:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZN7TwoWire12transmittingE>
    2542:	22 23       	and	r18, r18
    2544:	d1 f0       	breq	.+52     	; 0x257a <_ZN7TwoWire5writeEh+0x48>
    2546:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    254a:	20 32       	cpi	r18, 0x20	; 32
    254c:	40 f0       	brcs	.+16     	; 0x255e <_ZN7TwoWire5writeEh+0x2c>
    254e:	21 e0       	ldi	r18, 0x01	; 1
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	fc 01       	movw	r30, r24
    2554:	33 83       	std	Z+3, r19	; 0x03
    2556:	22 83       	std	Z+2, r18	; 0x02
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	15 c0       	rjmp	.+42     	; 0x2588 <_ZN7TwoWire5writeEh+0x56>
    255e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    2562:	e8 2f       	mov	r30, r24
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	e9 5e       	subi	r30, 0xE9	; 233
    2568:	fc 4f       	sbci	r31, 0xFC	; 252
    256a:	99 81       	ldd	r25, Y+1	; 0x01
    256c:	90 83       	st	Z, r25
    256e:	8f 5f       	subi	r24, 0xFF	; 255
    2570:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    2574:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    2578:	05 c0       	rjmp	.+10     	; 0x2584 <_ZN7TwoWire5writeEh+0x52>
    257a:	61 e0       	ldi	r22, 0x01	; 1
    257c:	ce 01       	movw	r24, r28
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	0e 94 9b 10 	call	0x2136	; 0x2136 <twi_transmit>
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0f 90       	pop	r0
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	08 95       	ret

00002590 <_ZN7TwoWireC1Ev>:
    2590:	fc 01       	movw	r30, r24
    2592:	13 82       	std	Z+3, r1	; 0x03
    2594:	12 82       	std	Z+2, r1	; 0x02
    2596:	88 ee       	ldi	r24, 0xE8	; 232
    2598:	93 e0       	ldi	r25, 0x03	; 3
    259a:	a0 e0       	ldi	r26, 0x00	; 0
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	84 83       	std	Z+4, r24	; 0x04
    25a0:	95 83       	std	Z+5, r25	; 0x05
    25a2:	a6 83       	std	Z+6, r26	; 0x06
    25a4:	b7 83       	std	Z+7, r27	; 0x07
    25a6:	8d eb       	ldi	r24, 0xBD	; 189
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
    25ae:	08 95       	ret

000025b0 <_ZN7TwoWire5beginEv>:
    25b0:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <_ZN7TwoWire13rxBufferIndexE>
    25b4:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_ZN7TwoWire14rxBufferLengthE>
    25b8:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    25bc:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    25c0:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <twi_init>
    25c4:	80 e6       	ldi	r24, 0x60	; 96
    25c6:	92 e1       	ldi	r25, 0x12	; 18
    25c8:	0e 94 c8 10 	call	0x2190	; 0x2190 <twi_attachSlaveTxEvent>
    25cc:	86 e3       	ldi	r24, 0x36	; 54
    25ce:	92 e1       	ldi	r25, 0x12	; 18
    25d0:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <twi_attachSlaveRxEvent>

000025d4 <_ZN7TwoWire17beginTransmissionEh>:
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZN7TwoWire12transmittingE>
    25da:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <_ZN7TwoWire9txAddressE>
    25de:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    25e2:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    25e6:	08 95       	ret

000025e8 <_ZN7TwoWire15endTransmissionEh>:
    25e8:	0f 93       	push	r16
    25ea:	06 2f       	mov	r16, r22
    25ec:	21 e0       	ldi	r18, 0x01	; 1
    25ee:	40 91 15 03 	lds	r20, 0x0315	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    25f2:	67 e1       	ldi	r22, 0x17	; 23
    25f4:	73 e0       	ldi	r23, 0x03	; 3
    25f6:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire9txAddressE>
    25fa:	0e 94 45 10 	call	0x208a	; 0x208a <twi_writeTo>
    25fe:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    2602:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    2606:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire12transmittingE>
    260a:	0f 91       	pop	r16
    260c:	08 95       	ret

0000260e <_ZN7TwoWire11requestFromEhhmhh>:
    260e:	4f 92       	push	r4
    2610:	5f 92       	push	r5
    2612:	6f 92       	push	r6
    2614:	7f 92       	push	r7
    2616:	af 92       	push	r10
    2618:	bf 92       	push	r11
    261a:	cf 92       	push	r12
    261c:	ef 92       	push	r14
    261e:	ff 92       	push	r15
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	5c 01       	movw	r10, r24
    262a:	f6 2e       	mov	r15, r22
    262c:	d4 2f       	mov	r29, r20
    262e:	28 01       	movw	r4, r16
    2630:	39 01       	movw	r6, r18
    2632:	ee 20       	and	r14, r14
    2634:	21 f1       	breq	.+72     	; 0x267e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2636:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN7TwoWire17beginTransmissionEh>
    263a:	ce 2d       	mov	r28, r14
    263c:	c4 30       	cpi	r28, 0x04	; 4
    263e:	08 f0       	brcs	.+2      	; 0x2642 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2640:	c3 e0       	ldi	r28, 0x03	; 3
    2642:	c1 50       	subi	r28, 0x01	; 1
    2644:	c0 f0       	brcs	.+48     	; 0x2676 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2646:	28 e0       	ldi	r18, 0x08	; 8
    2648:	c2 9f       	mul	r28, r18
    264a:	c0 01       	movw	r24, r0
    264c:	11 24       	eor	r1, r1
    264e:	a3 01       	movw	r20, r6
    2650:	92 01       	movw	r18, r4
    2652:	04 c0       	rjmp	.+8      	; 0x265c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2654:	56 95       	lsr	r21
    2656:	47 95       	ror	r20
    2658:	37 95       	ror	r19
    265a:	27 95       	ror	r18
    265c:	8a 95       	dec	r24
    265e:	d2 f7       	brpl	.-12     	; 0x2654 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2660:	ca 01       	movw	r24, r20
    2662:	b9 01       	movw	r22, r18
    2664:	d5 01       	movw	r26, r10
    2666:	ed 91       	ld	r30, X+
    2668:	fc 91       	ld	r31, X
    266a:	01 90       	ld	r0, Z+
    266c:	f0 81       	ld	r31, Z
    266e:	e0 2d       	mov	r30, r0
    2670:	c5 01       	movw	r24, r10
    2672:	09 95       	icall
    2674:	e6 cf       	rjmp	.-52     	; 0x2642 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	c5 01       	movw	r24, r10
    267a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <_ZN7TwoWire15endTransmissionEh>
    267e:	4d 2f       	mov	r20, r29
    2680:	d1 32       	cpi	r29, 0x21	; 33
    2682:	08 f0       	brcs	.+2      	; 0x2686 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	2c 2d       	mov	r18, r12
    2688:	6a e3       	ldi	r22, 0x3A	; 58
    268a:	73 e0       	ldi	r23, 0x03	; 3
    268c:	8f 2d       	mov	r24, r15
    268e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <twi_readFrom>
    2692:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <_ZN7TwoWire13rxBufferIndexE>
    2696:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <_ZN7TwoWire14rxBufferLengthE>
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	cf 90       	pop	r12
    26a8:	bf 90       	pop	r11
    26aa:	af 90       	pop	r10
    26ac:	7f 90       	pop	r7
    26ae:	6f 90       	pop	r6
    26b0:	5f 90       	pop	r5
    26b2:	4f 90       	pop	r4
    26b4:	08 95       	ret

000026b6 <_ZN7TwoWire11requestFromEhhh>:
    26b6:	cf 92       	push	r12
    26b8:	ef 92       	push	r14
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	c2 2e       	mov	r12, r18
    26c0:	e1 2c       	mov	r14, r1
    26c2:	00 e0       	ldi	r16, 0x00	; 0
    26c4:	10 e0       	ldi	r17, 0x00	; 0
    26c6:	98 01       	movw	r18, r16
    26c8:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7TwoWire11requestFromEhhmhh>
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ef 90       	pop	r14
    26d2:	cf 90       	pop	r12
    26d4:	08 95       	ret

000026d6 <_ZN7TwoWire11requestFromEhh>:
    26d6:	21 e0       	ldi	r18, 0x01	; 1
    26d8:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <_ZN7TwoWire11requestFromEhhh>

000026dc <_ZN7TwoWire15endTransmissionEv>:
    26dc:	61 e0       	ldi	r22, 0x01	; 1
    26de:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <_ZN7TwoWire15endTransmissionEh>

000026e2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	93 e0       	ldi	r25, 0x03	; 3
    26e6:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <_ZN7TwoWireC1Ev>

000026ea <__subsf3>:
    26ea:	50 58       	subi	r21, 0x80	; 128

000026ec <__addsf3>:
    26ec:	bb 27       	eor	r27, r27
    26ee:	aa 27       	eor	r26, r26
    26f0:	0e 94 8d 13 	call	0x271a	; 0x271a <__addsf3x>
    26f4:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__fp_round>
    26f8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__fp_pscA>
    26fc:	38 f0       	brcs	.+14     	; 0x270c <__addsf3+0x20>
    26fe:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fp_pscB>
    2702:	20 f0       	brcs	.+8      	; 0x270c <__addsf3+0x20>
    2704:	39 f4       	brne	.+14     	; 0x2714 <__addsf3+0x28>
    2706:	9f 3f       	cpi	r25, 0xFF	; 255
    2708:	19 f4       	brne	.+6      	; 0x2710 <__addsf3+0x24>
    270a:	26 f4       	brtc	.+8      	; 0x2714 <__addsf3+0x28>
    270c:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__fp_nan>
    2710:	0e f4       	brtc	.+2      	; 0x2714 <__addsf3+0x28>
    2712:	e0 95       	com	r30
    2714:	e7 fb       	bst	r30, 7
    2716:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>

0000271a <__addsf3x>:
    271a:	e9 2f       	mov	r30, r25
    271c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__fp_split3>
    2720:	58 f3       	brcs	.-42     	; 0x26f8 <__addsf3+0xc>
    2722:	ba 17       	cp	r27, r26
    2724:	62 07       	cpc	r22, r18
    2726:	73 07       	cpc	r23, r19
    2728:	84 07       	cpc	r24, r20
    272a:	95 07       	cpc	r25, r21
    272c:	20 f0       	brcs	.+8      	; 0x2736 <__addsf3x+0x1c>
    272e:	79 f4       	brne	.+30     	; 0x274e <__addsf3x+0x34>
    2730:	a6 f5       	brtc	.+104    	; 0x279a <__addsf3x+0x80>
    2732:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__fp_zero>
    2736:	0e f4       	brtc	.+2      	; 0x273a <__addsf3x+0x20>
    2738:	e0 95       	com	r30
    273a:	0b 2e       	mov	r0, r27
    273c:	ba 2f       	mov	r27, r26
    273e:	a0 2d       	mov	r26, r0
    2740:	0b 01       	movw	r0, r22
    2742:	b9 01       	movw	r22, r18
    2744:	90 01       	movw	r18, r0
    2746:	0c 01       	movw	r0, r24
    2748:	ca 01       	movw	r24, r20
    274a:	a0 01       	movw	r20, r0
    274c:	11 24       	eor	r1, r1
    274e:	ff 27       	eor	r31, r31
    2750:	59 1b       	sub	r21, r25
    2752:	99 f0       	breq	.+38     	; 0x277a <__addsf3x+0x60>
    2754:	59 3f       	cpi	r21, 0xF9	; 249
    2756:	50 f4       	brcc	.+20     	; 0x276c <__addsf3x+0x52>
    2758:	50 3e       	cpi	r21, 0xE0	; 224
    275a:	68 f1       	brcs	.+90     	; 0x27b6 <__addsf3x+0x9c>
    275c:	1a 16       	cp	r1, r26
    275e:	f0 40       	sbci	r31, 0x00	; 0
    2760:	a2 2f       	mov	r26, r18
    2762:	23 2f       	mov	r18, r19
    2764:	34 2f       	mov	r19, r20
    2766:	44 27       	eor	r20, r20
    2768:	58 5f       	subi	r21, 0xF8	; 248
    276a:	f3 cf       	rjmp	.-26     	; 0x2752 <__addsf3x+0x38>
    276c:	46 95       	lsr	r20
    276e:	37 95       	ror	r19
    2770:	27 95       	ror	r18
    2772:	a7 95       	ror	r26
    2774:	f0 40       	sbci	r31, 0x00	; 0
    2776:	53 95       	inc	r21
    2778:	c9 f7       	brne	.-14     	; 0x276c <__addsf3x+0x52>
    277a:	7e f4       	brtc	.+30     	; 0x279a <__addsf3x+0x80>
    277c:	1f 16       	cp	r1, r31
    277e:	ba 0b       	sbc	r27, r26
    2780:	62 0b       	sbc	r22, r18
    2782:	73 0b       	sbc	r23, r19
    2784:	84 0b       	sbc	r24, r20
    2786:	ba f0       	brmi	.+46     	; 0x27b6 <__addsf3x+0x9c>
    2788:	91 50       	subi	r25, 0x01	; 1
    278a:	a1 f0       	breq	.+40     	; 0x27b4 <__addsf3x+0x9a>
    278c:	ff 0f       	add	r31, r31
    278e:	bb 1f       	adc	r27, r27
    2790:	66 1f       	adc	r22, r22
    2792:	77 1f       	adc	r23, r23
    2794:	88 1f       	adc	r24, r24
    2796:	c2 f7       	brpl	.-16     	; 0x2788 <__addsf3x+0x6e>
    2798:	0e c0       	rjmp	.+28     	; 0x27b6 <__addsf3x+0x9c>
    279a:	ba 0f       	add	r27, r26
    279c:	62 1f       	adc	r22, r18
    279e:	73 1f       	adc	r23, r19
    27a0:	84 1f       	adc	r24, r20
    27a2:	48 f4       	brcc	.+18     	; 0x27b6 <__addsf3x+0x9c>
    27a4:	87 95       	ror	r24
    27a6:	77 95       	ror	r23
    27a8:	67 95       	ror	r22
    27aa:	b7 95       	ror	r27
    27ac:	f7 95       	ror	r31
    27ae:	9e 3f       	cpi	r25, 0xFE	; 254
    27b0:	08 f0       	brcs	.+2      	; 0x27b4 <__addsf3x+0x9a>
    27b2:	b0 cf       	rjmp	.-160    	; 0x2714 <__addsf3+0x28>
    27b4:	93 95       	inc	r25
    27b6:	88 0f       	add	r24, r24
    27b8:	08 f0       	brcs	.+2      	; 0x27bc <__addsf3x+0xa2>
    27ba:	99 27       	eor	r25, r25
    27bc:	ee 0f       	add	r30, r30
    27be:	97 95       	ror	r25
    27c0:	87 95       	ror	r24
    27c2:	08 95       	ret

000027c4 <__cmpsf2>:
    27c4:	0e 94 cc 14 	call	0x2998	; 0x2998 <__fp_cmp>
    27c8:	08 f4       	brcc	.+2      	; 0x27cc <__cmpsf2+0x8>
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	08 95       	ret

000027ce <__divsf3>:
    27ce:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__divsf3x>
    27d2:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__fp_round>
    27d6:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fp_pscB>
    27da:	58 f0       	brcs	.+22     	; 0x27f2 <__divsf3+0x24>
    27dc:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__fp_pscA>
    27e0:	40 f0       	brcs	.+16     	; 0x27f2 <__divsf3+0x24>
    27e2:	29 f4       	brne	.+10     	; 0x27ee <__divsf3+0x20>
    27e4:	5f 3f       	cpi	r21, 0xFF	; 255
    27e6:	29 f0       	breq	.+10     	; 0x27f2 <__divsf3+0x24>
    27e8:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>
    27ec:	51 11       	cpse	r21, r1
    27ee:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>
    27f2:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__fp_nan>

000027f6 <__divsf3x>:
    27f6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__fp_split3>
    27fa:	68 f3       	brcs	.-38     	; 0x27d6 <__divsf3+0x8>

000027fc <__divsf3_pse>:
    27fc:	99 23       	and	r25, r25
    27fe:	b1 f3       	breq	.-20     	; 0x27ec <__divsf3+0x1e>
    2800:	55 23       	and	r21, r21
    2802:	91 f3       	breq	.-28     	; 0x27e8 <__divsf3+0x1a>
    2804:	95 1b       	sub	r25, r21
    2806:	55 0b       	sbc	r21, r21
    2808:	bb 27       	eor	r27, r27
    280a:	aa 27       	eor	r26, r26
    280c:	62 17       	cp	r22, r18
    280e:	73 07       	cpc	r23, r19
    2810:	84 07       	cpc	r24, r20
    2812:	38 f0       	brcs	.+14     	; 0x2822 <__divsf3_pse+0x26>
    2814:	9f 5f       	subi	r25, 0xFF	; 255
    2816:	5f 4f       	sbci	r21, 0xFF	; 255
    2818:	22 0f       	add	r18, r18
    281a:	33 1f       	adc	r19, r19
    281c:	44 1f       	adc	r20, r20
    281e:	aa 1f       	adc	r26, r26
    2820:	a9 f3       	breq	.-22     	; 0x280c <__divsf3_pse+0x10>
    2822:	35 d0       	rcall	.+106    	; 0x288e <__divsf3_pse+0x92>
    2824:	0e 2e       	mov	r0, r30
    2826:	3a f0       	brmi	.+14     	; 0x2836 <__divsf3_pse+0x3a>
    2828:	e0 e8       	ldi	r30, 0x80	; 128
    282a:	32 d0       	rcall	.+100    	; 0x2890 <__divsf3_pse+0x94>
    282c:	91 50       	subi	r25, 0x01	; 1
    282e:	50 40       	sbci	r21, 0x00	; 0
    2830:	e6 95       	lsr	r30
    2832:	00 1c       	adc	r0, r0
    2834:	ca f7       	brpl	.-14     	; 0x2828 <__divsf3_pse+0x2c>
    2836:	2b d0       	rcall	.+86     	; 0x288e <__divsf3_pse+0x92>
    2838:	fe 2f       	mov	r31, r30
    283a:	29 d0       	rcall	.+82     	; 0x288e <__divsf3_pse+0x92>
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	88 1f       	adc	r24, r24
    2842:	bb 1f       	adc	r27, r27
    2844:	26 17       	cp	r18, r22
    2846:	37 07       	cpc	r19, r23
    2848:	48 07       	cpc	r20, r24
    284a:	ab 07       	cpc	r26, r27
    284c:	b0 e8       	ldi	r27, 0x80	; 128
    284e:	09 f0       	breq	.+2      	; 0x2852 <__divsf3_pse+0x56>
    2850:	bb 0b       	sbc	r27, r27
    2852:	80 2d       	mov	r24, r0
    2854:	bf 01       	movw	r22, r30
    2856:	ff 27       	eor	r31, r31
    2858:	93 58       	subi	r25, 0x83	; 131
    285a:	5f 4f       	sbci	r21, 0xFF	; 255
    285c:	3a f0       	brmi	.+14     	; 0x286c <__divsf3_pse+0x70>
    285e:	9e 3f       	cpi	r25, 0xFE	; 254
    2860:	51 05       	cpc	r21, r1
    2862:	78 f0       	brcs	.+30     	; 0x2882 <__divsf3_pse+0x86>
    2864:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>
    2868:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>
    286c:	5f 3f       	cpi	r21, 0xFF	; 255
    286e:	e4 f3       	brlt	.-8      	; 0x2868 <__divsf3_pse+0x6c>
    2870:	98 3e       	cpi	r25, 0xE8	; 232
    2872:	d4 f3       	brlt	.-12     	; 0x2868 <__divsf3_pse+0x6c>
    2874:	86 95       	lsr	r24
    2876:	77 95       	ror	r23
    2878:	67 95       	ror	r22
    287a:	b7 95       	ror	r27
    287c:	f7 95       	ror	r31
    287e:	9f 5f       	subi	r25, 0xFF	; 255
    2880:	c9 f7       	brne	.-14     	; 0x2874 <__divsf3_pse+0x78>
    2882:	88 0f       	add	r24, r24
    2884:	91 1d       	adc	r25, r1
    2886:	96 95       	lsr	r25
    2888:	87 95       	ror	r24
    288a:	97 f9       	bld	r25, 7
    288c:	08 95       	ret
    288e:	e1 e0       	ldi	r30, 0x01	; 1
    2890:	66 0f       	add	r22, r22
    2892:	77 1f       	adc	r23, r23
    2894:	88 1f       	adc	r24, r24
    2896:	bb 1f       	adc	r27, r27
    2898:	62 17       	cp	r22, r18
    289a:	73 07       	cpc	r23, r19
    289c:	84 07       	cpc	r24, r20
    289e:	ba 07       	cpc	r27, r26
    28a0:	20 f0       	brcs	.+8      	; 0x28aa <__divsf3_pse+0xae>
    28a2:	62 1b       	sub	r22, r18
    28a4:	73 0b       	sbc	r23, r19
    28a6:	84 0b       	sbc	r24, r20
    28a8:	ba 0b       	sbc	r27, r26
    28aa:	ee 1f       	adc	r30, r30
    28ac:	88 f7       	brcc	.-30     	; 0x2890 <__divsf3_pse+0x94>
    28ae:	e0 95       	com	r30
    28b0:	08 95       	ret

000028b2 <__fixsfsi>:
    28b2:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__fixunssfsi>
    28b6:	68 94       	set
    28b8:	b1 11       	cpse	r27, r1
    28ba:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>
    28be:	08 95       	ret

000028c0 <__fixunssfsi>:
    28c0:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__fp_splitA>
    28c4:	88 f0       	brcs	.+34     	; 0x28e8 <__fixunssfsi+0x28>
    28c6:	9f 57       	subi	r25, 0x7F	; 127
    28c8:	98 f0       	brcs	.+38     	; 0x28f0 <__fixunssfsi+0x30>
    28ca:	b9 2f       	mov	r27, r25
    28cc:	99 27       	eor	r25, r25
    28ce:	b7 51       	subi	r27, 0x17	; 23
    28d0:	b0 f0       	brcs	.+44     	; 0x28fe <__fixunssfsi+0x3e>
    28d2:	e1 f0       	breq	.+56     	; 0x290c <__fixunssfsi+0x4c>
    28d4:	66 0f       	add	r22, r22
    28d6:	77 1f       	adc	r23, r23
    28d8:	88 1f       	adc	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	1a f0       	brmi	.+6      	; 0x28e4 <__fixunssfsi+0x24>
    28de:	ba 95       	dec	r27
    28e0:	c9 f7       	brne	.-14     	; 0x28d4 <__fixunssfsi+0x14>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <__fixunssfsi+0x4c>
    28e4:	b1 30       	cpi	r27, 0x01	; 1
    28e6:	91 f0       	breq	.+36     	; 0x290c <__fixunssfsi+0x4c>
    28e8:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__fp_zero>
    28ec:	b1 e0       	ldi	r27, 0x01	; 1
    28ee:	08 95       	ret
    28f0:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__fp_zero>
    28f4:	67 2f       	mov	r22, r23
    28f6:	78 2f       	mov	r23, r24
    28f8:	88 27       	eor	r24, r24
    28fa:	b8 5f       	subi	r27, 0xF8	; 248
    28fc:	39 f0       	breq	.+14     	; 0x290c <__fixunssfsi+0x4c>
    28fe:	b9 3f       	cpi	r27, 0xF9	; 249
    2900:	cc f3       	brlt	.-14     	; 0x28f4 <__fixunssfsi+0x34>
    2902:	86 95       	lsr	r24
    2904:	77 95       	ror	r23
    2906:	67 95       	ror	r22
    2908:	b3 95       	inc	r27
    290a:	d9 f7       	brne	.-10     	; 0x2902 <__fixunssfsi+0x42>
    290c:	3e f4       	brtc	.+14     	; 0x291c <__fixunssfsi+0x5c>
    290e:	90 95       	com	r25
    2910:	80 95       	com	r24
    2912:	70 95       	com	r23
    2914:	61 95       	neg	r22
    2916:	7f 4f       	sbci	r23, 0xFF	; 255
    2918:	8f 4f       	sbci	r24, 0xFF	; 255
    291a:	9f 4f       	sbci	r25, 0xFF	; 255
    291c:	08 95       	ret

0000291e <__floatunsisf>:
    291e:	e8 94       	clt
    2920:	09 c0       	rjmp	.+18     	; 0x2934 <__floatsisf+0x12>

00002922 <__floatsisf>:
    2922:	97 fb       	bst	r25, 7
    2924:	3e f4       	brtc	.+14     	; 0x2934 <__floatsisf+0x12>
    2926:	90 95       	com	r25
    2928:	80 95       	com	r24
    292a:	70 95       	com	r23
    292c:	61 95       	neg	r22
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	8f 4f       	sbci	r24, 0xFF	; 255
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	99 23       	and	r25, r25
    2936:	a9 f0       	breq	.+42     	; 0x2962 <__floatsisf+0x40>
    2938:	f9 2f       	mov	r31, r25
    293a:	96 e9       	ldi	r25, 0x96	; 150
    293c:	bb 27       	eor	r27, r27
    293e:	93 95       	inc	r25
    2940:	f6 95       	lsr	r31
    2942:	87 95       	ror	r24
    2944:	77 95       	ror	r23
    2946:	67 95       	ror	r22
    2948:	b7 95       	ror	r27
    294a:	f1 11       	cpse	r31, r1
    294c:	f8 cf       	rjmp	.-16     	; 0x293e <__floatsisf+0x1c>
    294e:	fa f4       	brpl	.+62     	; 0x298e <__floatsisf+0x6c>
    2950:	bb 0f       	add	r27, r27
    2952:	11 f4       	brne	.+4      	; 0x2958 <__floatsisf+0x36>
    2954:	60 ff       	sbrs	r22, 0
    2956:	1b c0       	rjmp	.+54     	; 0x298e <__floatsisf+0x6c>
    2958:	6f 5f       	subi	r22, 0xFF	; 255
    295a:	7f 4f       	sbci	r23, 0xFF	; 255
    295c:	8f 4f       	sbci	r24, 0xFF	; 255
    295e:	9f 4f       	sbci	r25, 0xFF	; 255
    2960:	16 c0       	rjmp	.+44     	; 0x298e <__floatsisf+0x6c>
    2962:	88 23       	and	r24, r24
    2964:	11 f0       	breq	.+4      	; 0x296a <__floatsisf+0x48>
    2966:	96 e9       	ldi	r25, 0x96	; 150
    2968:	11 c0       	rjmp	.+34     	; 0x298c <__floatsisf+0x6a>
    296a:	77 23       	and	r23, r23
    296c:	21 f0       	breq	.+8      	; 0x2976 <__floatsisf+0x54>
    296e:	9e e8       	ldi	r25, 0x8E	; 142
    2970:	87 2f       	mov	r24, r23
    2972:	76 2f       	mov	r23, r22
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <__floatsisf+0x5e>
    2976:	66 23       	and	r22, r22
    2978:	71 f0       	breq	.+28     	; 0x2996 <__floatsisf+0x74>
    297a:	96 e8       	ldi	r25, 0x86	; 134
    297c:	86 2f       	mov	r24, r22
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	2a f0       	brmi	.+10     	; 0x298e <__floatsisf+0x6c>
    2984:	9a 95       	dec	r25
    2986:	66 0f       	add	r22, r22
    2988:	77 1f       	adc	r23, r23
    298a:	88 1f       	adc	r24, r24
    298c:	da f7       	brpl	.-10     	; 0x2984 <__floatsisf+0x62>
    298e:	88 0f       	add	r24, r24
    2990:	96 95       	lsr	r25
    2992:	87 95       	ror	r24
    2994:	97 f9       	bld	r25, 7
    2996:	08 95       	ret

00002998 <__fp_cmp>:
    2998:	99 0f       	add	r25, r25
    299a:	00 08       	sbc	r0, r0
    299c:	55 0f       	add	r21, r21
    299e:	aa 0b       	sbc	r26, r26
    29a0:	e0 e8       	ldi	r30, 0x80	; 128
    29a2:	fe ef       	ldi	r31, 0xFE	; 254
    29a4:	16 16       	cp	r1, r22
    29a6:	17 06       	cpc	r1, r23
    29a8:	e8 07       	cpc	r30, r24
    29aa:	f9 07       	cpc	r31, r25
    29ac:	c0 f0       	brcs	.+48     	; 0x29de <__fp_cmp+0x46>
    29ae:	12 16       	cp	r1, r18
    29b0:	13 06       	cpc	r1, r19
    29b2:	e4 07       	cpc	r30, r20
    29b4:	f5 07       	cpc	r31, r21
    29b6:	98 f0       	brcs	.+38     	; 0x29de <__fp_cmp+0x46>
    29b8:	62 1b       	sub	r22, r18
    29ba:	73 0b       	sbc	r23, r19
    29bc:	84 0b       	sbc	r24, r20
    29be:	95 0b       	sbc	r25, r21
    29c0:	39 f4       	brne	.+14     	; 0x29d0 <__fp_cmp+0x38>
    29c2:	0a 26       	eor	r0, r26
    29c4:	61 f0       	breq	.+24     	; 0x29de <__fp_cmp+0x46>
    29c6:	23 2b       	or	r18, r19
    29c8:	24 2b       	or	r18, r20
    29ca:	25 2b       	or	r18, r21
    29cc:	21 f4       	brne	.+8      	; 0x29d6 <__fp_cmp+0x3e>
    29ce:	08 95       	ret
    29d0:	0a 26       	eor	r0, r26
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <__fp_cmp+0x3e>
    29d4:	a1 40       	sbci	r26, 0x01	; 1
    29d6:	a6 95       	lsr	r26
    29d8:	8f ef       	ldi	r24, 0xFF	; 255
    29da:	81 1d       	adc	r24, r1
    29dc:	81 1d       	adc	r24, r1
    29de:	08 95       	ret

000029e0 <__fp_inf>:
    29e0:	97 f9       	bld	r25, 7
    29e2:	9f 67       	ori	r25, 0x7F	; 127
    29e4:	80 e8       	ldi	r24, 0x80	; 128
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	08 95       	ret

000029ec <__fp_nan>:
    29ec:	9f ef       	ldi	r25, 0xFF	; 255
    29ee:	80 ec       	ldi	r24, 0xC0	; 192
    29f0:	08 95       	ret

000029f2 <__fp_pscA>:
    29f2:	00 24       	eor	r0, r0
    29f4:	0a 94       	dec	r0
    29f6:	16 16       	cp	r1, r22
    29f8:	17 06       	cpc	r1, r23
    29fa:	18 06       	cpc	r1, r24
    29fc:	09 06       	cpc	r0, r25
    29fe:	08 95       	ret

00002a00 <__fp_pscB>:
    2a00:	00 24       	eor	r0, r0
    2a02:	0a 94       	dec	r0
    2a04:	12 16       	cp	r1, r18
    2a06:	13 06       	cpc	r1, r19
    2a08:	14 06       	cpc	r1, r20
    2a0a:	05 06       	cpc	r0, r21
    2a0c:	08 95       	ret

00002a0e <__fp_round>:
    2a0e:	09 2e       	mov	r0, r25
    2a10:	03 94       	inc	r0
    2a12:	00 0c       	add	r0, r0
    2a14:	11 f4       	brne	.+4      	; 0x2a1a <__fp_round+0xc>
    2a16:	88 23       	and	r24, r24
    2a18:	52 f0       	brmi	.+20     	; 0x2a2e <__fp_round+0x20>
    2a1a:	bb 0f       	add	r27, r27
    2a1c:	40 f4       	brcc	.+16     	; 0x2a2e <__fp_round+0x20>
    2a1e:	bf 2b       	or	r27, r31
    2a20:	11 f4       	brne	.+4      	; 0x2a26 <__fp_round+0x18>
    2a22:	60 ff       	sbrs	r22, 0
    2a24:	04 c0       	rjmp	.+8      	; 0x2a2e <__fp_round+0x20>
    2a26:	6f 5f       	subi	r22, 0xFF	; 255
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	08 95       	ret

00002a30 <__fp_split3>:
    2a30:	57 fd       	sbrc	r21, 7
    2a32:	90 58       	subi	r25, 0x80	; 128
    2a34:	44 0f       	add	r20, r20
    2a36:	55 1f       	adc	r21, r21
    2a38:	59 f0       	breq	.+22     	; 0x2a50 <__fp_splitA+0x10>
    2a3a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a3c:	71 f0       	breq	.+28     	; 0x2a5a <__fp_splitA+0x1a>
    2a3e:	47 95       	ror	r20

00002a40 <__fp_splitA>:
    2a40:	88 0f       	add	r24, r24
    2a42:	97 fb       	bst	r25, 7
    2a44:	99 1f       	adc	r25, r25
    2a46:	61 f0       	breq	.+24     	; 0x2a60 <__fp_splitA+0x20>
    2a48:	9f 3f       	cpi	r25, 0xFF	; 255
    2a4a:	79 f0       	breq	.+30     	; 0x2a6a <__fp_splitA+0x2a>
    2a4c:	87 95       	ror	r24
    2a4e:	08 95       	ret
    2a50:	12 16       	cp	r1, r18
    2a52:	13 06       	cpc	r1, r19
    2a54:	14 06       	cpc	r1, r20
    2a56:	55 1f       	adc	r21, r21
    2a58:	f2 cf       	rjmp	.-28     	; 0x2a3e <__fp_split3+0xe>
    2a5a:	46 95       	lsr	r20
    2a5c:	f1 df       	rcall	.-30     	; 0x2a40 <__fp_splitA>
    2a5e:	08 c0       	rjmp	.+16     	; 0x2a70 <__fp_splitA+0x30>
    2a60:	16 16       	cp	r1, r22
    2a62:	17 06       	cpc	r1, r23
    2a64:	18 06       	cpc	r1, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	f1 cf       	rjmp	.-30     	; 0x2a4c <__fp_splitA+0xc>
    2a6a:	86 95       	lsr	r24
    2a6c:	71 05       	cpc	r23, r1
    2a6e:	61 05       	cpc	r22, r1
    2a70:	08 94       	sec
    2a72:	08 95       	ret

00002a74 <__fp_zero>:
    2a74:	e8 94       	clt

00002a76 <__fp_szero>:
    2a76:	bb 27       	eor	r27, r27
    2a78:	66 27       	eor	r22, r22
    2a7a:	77 27       	eor	r23, r23
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	97 f9       	bld	r25, 7
    2a80:	08 95       	ret

00002a82 <__gesf2>:
    2a82:	0e 94 cc 14 	call	0x2998	; 0x2998 <__fp_cmp>
    2a86:	08 f4       	brcc	.+2      	; 0x2a8a <__gesf2+0x8>
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	08 95       	ret

00002a8c <__mulsf3>:
    2a8c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__mulsf3x>
    2a90:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__fp_round>
    2a94:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__fp_pscA>
    2a98:	38 f0       	brcs	.+14     	; 0x2aa8 <__mulsf3+0x1c>
    2a9a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <__fp_pscB>
    2a9e:	20 f0       	brcs	.+8      	; 0x2aa8 <__mulsf3+0x1c>
    2aa0:	95 23       	and	r25, r21
    2aa2:	11 f0       	breq	.+4      	; 0x2aa8 <__mulsf3+0x1c>
    2aa4:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>
    2aa8:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__fp_nan>
    2aac:	11 24       	eor	r1, r1
    2aae:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>

00002ab2 <__mulsf3x>:
    2ab2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__fp_split3>
    2ab6:	70 f3       	brcs	.-36     	; 0x2a94 <__mulsf3+0x8>

00002ab8 <__mulsf3_pse>:
    2ab8:	95 9f       	mul	r25, r21
    2aba:	c1 f3       	breq	.-16     	; 0x2aac <__mulsf3+0x20>
    2abc:	95 0f       	add	r25, r21
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	55 1f       	adc	r21, r21
    2ac2:	62 9f       	mul	r22, r18
    2ac4:	f0 01       	movw	r30, r0
    2ac6:	72 9f       	mul	r23, r18
    2ac8:	bb 27       	eor	r27, r27
    2aca:	f0 0d       	add	r31, r0
    2acc:	b1 1d       	adc	r27, r1
    2ace:	63 9f       	mul	r22, r19
    2ad0:	aa 27       	eor	r26, r26
    2ad2:	f0 0d       	add	r31, r0
    2ad4:	b1 1d       	adc	r27, r1
    2ad6:	aa 1f       	adc	r26, r26
    2ad8:	64 9f       	mul	r22, r20
    2ada:	66 27       	eor	r22, r22
    2adc:	b0 0d       	add	r27, r0
    2ade:	a1 1d       	adc	r26, r1
    2ae0:	66 1f       	adc	r22, r22
    2ae2:	82 9f       	mul	r24, r18
    2ae4:	22 27       	eor	r18, r18
    2ae6:	b0 0d       	add	r27, r0
    2ae8:	a1 1d       	adc	r26, r1
    2aea:	62 1f       	adc	r22, r18
    2aec:	73 9f       	mul	r23, r19
    2aee:	b0 0d       	add	r27, r0
    2af0:	a1 1d       	adc	r26, r1
    2af2:	62 1f       	adc	r22, r18
    2af4:	83 9f       	mul	r24, r19
    2af6:	a0 0d       	add	r26, r0
    2af8:	61 1d       	adc	r22, r1
    2afa:	22 1f       	adc	r18, r18
    2afc:	74 9f       	mul	r23, r20
    2afe:	33 27       	eor	r19, r19
    2b00:	a0 0d       	add	r26, r0
    2b02:	61 1d       	adc	r22, r1
    2b04:	23 1f       	adc	r18, r19
    2b06:	84 9f       	mul	r24, r20
    2b08:	60 0d       	add	r22, r0
    2b0a:	21 1d       	adc	r18, r1
    2b0c:	82 2f       	mov	r24, r18
    2b0e:	76 2f       	mov	r23, r22
    2b10:	6a 2f       	mov	r22, r26
    2b12:	11 24       	eor	r1, r1
    2b14:	9f 57       	subi	r25, 0x7F	; 127
    2b16:	50 40       	sbci	r21, 0x00	; 0
    2b18:	9a f0       	brmi	.+38     	; 0x2b40 <__mulsf3_pse+0x88>
    2b1a:	f1 f0       	breq	.+60     	; 0x2b58 <__mulsf3_pse+0xa0>
    2b1c:	88 23       	and	r24, r24
    2b1e:	4a f0       	brmi	.+18     	; 0x2b32 <__mulsf3_pse+0x7a>
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	bb 1f       	adc	r27, r27
    2b26:	66 1f       	adc	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	91 50       	subi	r25, 0x01	; 1
    2b2e:	50 40       	sbci	r21, 0x00	; 0
    2b30:	a9 f7       	brne	.-22     	; 0x2b1c <__mulsf3_pse+0x64>
    2b32:	9e 3f       	cpi	r25, 0xFE	; 254
    2b34:	51 05       	cpc	r21, r1
    2b36:	80 f0       	brcs	.+32     	; 0x2b58 <__mulsf3_pse+0xa0>
    2b38:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__fp_inf>
    2b3c:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_szero>
    2b40:	5f 3f       	cpi	r21, 0xFF	; 255
    2b42:	e4 f3       	brlt	.-8      	; 0x2b3c <__mulsf3_pse+0x84>
    2b44:	98 3e       	cpi	r25, 0xE8	; 232
    2b46:	d4 f3       	brlt	.-12     	; 0x2b3c <__mulsf3_pse+0x84>
    2b48:	86 95       	lsr	r24
    2b4a:	77 95       	ror	r23
    2b4c:	67 95       	ror	r22
    2b4e:	b7 95       	ror	r27
    2b50:	f7 95       	ror	r31
    2b52:	e7 95       	ror	r30
    2b54:	9f 5f       	subi	r25, 0xFF	; 255
    2b56:	c1 f7       	brne	.-16     	; 0x2b48 <__mulsf3_pse+0x90>
    2b58:	fe 2b       	or	r31, r30
    2b5a:	88 0f       	add	r24, r24
    2b5c:	91 1d       	adc	r25, r1
    2b5e:	96 95       	lsr	r25
    2b60:	87 95       	ror	r24
    2b62:	97 f9       	bld	r25, 7
    2b64:	08 95       	ret

00002b66 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2b66:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2b68:	91 8d       	ldd	r25, Z+25	; 0x19
    2b6a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b6c:	89 2f       	mov	r24, r25
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	80 5c       	subi	r24, 0xC0	; 192
    2b72:	9f 4f       	sbci	r25, 0xFF	; 255
    2b74:	82 1b       	sub	r24, r18
    2b76:	91 09       	sbc	r25, r1
}
    2b78:	8f 73       	andi	r24, 0x3F	; 63
    2b7a:	99 27       	eor	r25, r25
    2b7c:	08 95       	ret

00002b7e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2b7e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b80:	91 8d       	ldd	r25, Z+25	; 0x19
    2b82:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b84:	98 17       	cp	r25, r24
    2b86:	31 f0       	breq	.+12     	; 0x2b94 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2b88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b8a:	e8 0f       	add	r30, r24
    2b8c:	f1 1d       	adc	r31, r1
    2b8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b94:	8f ef       	ldi	r24, 0xFF	; 255
    2b96:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2b98:	08 95       	ret

00002b9a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2b9a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b9c:	91 8d       	ldd	r25, Z+25	; 0x19
    2b9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ba0:	98 17       	cp	r25, r24
    2ba2:	61 f0       	breq	.+24     	; 0x2bbc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2ba4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ba6:	df 01       	movw	r26, r30
    2ba8:	a8 0f       	add	r26, r24
    2baa:	b1 1d       	adc	r27, r1
    2bac:	5d 96       	adiw	r26, 0x1d	; 29
    2bae:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2bb0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bb2:	9f 5f       	subi	r25, 0xFF	; 255
    2bb4:	9f 73       	andi	r25, 0x3F	; 63
    2bb6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2bc0:	08 95       	ret

00002bc2 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2bc6:	44 8d       	ldd	r20, Z+28	; 0x1c
    2bc8:	25 2f       	mov	r18, r21
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	84 2f       	mov	r24, r20
    2bce:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2bd0:	82 1b       	sub	r24, r18
    2bd2:	93 0b       	sbc	r25, r19
    2bd4:	54 17       	cp	r21, r20
    2bd6:	10 f0       	brcs	.+4      	; 0x2bdc <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2bd8:	cf 96       	adiw	r24, 0x3f	; 63
    2bda:	08 95       	ret
  return tail - head - 1;
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
}
    2bde:	08 95       	ret

00002be0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2be0:	8c e4       	ldi	r24, 0x4C	; 76
    2be2:	97 e1       	ldi	r25, 0x17	; 23
    2be4:	89 2b       	or	r24, r25
    2be6:	49 f0       	breq	.+18     	; 0x2bfa <_Z14serialEventRunv+0x1a>
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	89 2b       	or	r24, r25
    2bee:	29 f0       	breq	.+10     	; 0x2bfa <_Z14serialEventRunv+0x1a>
    2bf0:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <_Z17Serial0_availablev>
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2bfa:	08 95       	ret

00002bfc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2bfc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2bfe:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c00:	df 01       	movw	r26, r30
    2c02:	a8 0f       	add	r26, r24
    2c04:	b1 1d       	adc	r27, r1
    2c06:	a3 5a       	subi	r26, 0xA3	; 163
    2c08:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2c0c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	8f 73       	andi	r24, 0x3F	; 63
    2c14:	99 27       	eor	r25, r25
    2c16:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2c18:	a6 89       	ldd	r26, Z+22	; 0x16
    2c1a:	b7 89       	ldd	r27, Z+23	; 0x17
    2c1c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2c1e:	a0 89       	ldd	r26, Z+16	; 0x10
    2c20:	b1 89       	ldd	r27, Z+17	; 0x11
    2c22:	8c 91       	ld	r24, X
    2c24:	83 70       	andi	r24, 0x03	; 3
    2c26:	80 64       	ori	r24, 0x40	; 64
    2c28:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2c2a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c2c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c2e:	98 13       	cpse	r25, r24
    2c30:	06 c0       	rjmp	.+12     	; 0x2c3e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2c32:	02 88       	ldd	r0, Z+18	; 0x12
    2c34:	f3 89       	ldd	r31, Z+19	; 0x13
    2c36:	e0 2d       	mov	r30, r0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8f 7d       	andi	r24, 0xDF	; 223
    2c3c:	80 83       	st	Z, r24
    2c3e:	08 95       	ret

00002c40 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	ec 01       	movw	r28, r24
  _written = true;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2c52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c56:	98 13       	cpse	r25, r24
    2c58:	05 c0       	rjmp	.+10     	; 0x2c64 <_ZN14HardwareSerial5writeEh+0x24>
    2c5a:	e8 89       	ldd	r30, Y+16	; 0x10
    2c5c:	f9 89       	ldd	r31, Y+17	; 0x11
    2c5e:	80 81       	ld	r24, Z
    2c60:	85 fd       	sbrc	r24, 5
    2c62:	26 c0       	rjmp	.+76     	; 0x2cb0 <_ZN14HardwareSerial5writeEh+0x70>
    2c64:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2c66:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2c68:	10 e0       	ldi	r17, 0x00	; 0
    2c6a:	0f 5f       	subi	r16, 0xFF	; 255
    2c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6e:	0f 73       	andi	r16, 0x3F	; 63
    2c70:	11 27       	eor	r17, r17
    2c72:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2c74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c76:	e8 12       	cpse	r14, r24
    2c78:	0c c0       	rjmp	.+24     	; 0x2c92 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	07 fc       	sbrc	r0, 7
    2c7e:	fa cf       	rjmp	.-12     	; 0x2c74 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2c80:	e8 89       	ldd	r30, Y+16	; 0x10
    2c82:	f9 89       	ldd	r31, Y+17	; 0x11
    2c84:	80 81       	ld	r24, Z
    2c86:	85 ff       	sbrs	r24, 5
    2c88:	f5 cf       	rjmp	.-22     	; 0x2c74 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2c90:	f1 cf       	rjmp	.-30     	; 0x2c74 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c94:	fe 01       	movw	r30, r28
    2c96:	e8 0f       	add	r30, r24
    2c98:	f1 1d       	adc	r31, r1
    2c9a:	e3 5a       	subi	r30, 0xA3	; 163
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2ca0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ca2:	f8 94       	cli
    _tx_buffer_head = i;
    2ca4:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2ca6:	ea 89       	ldd	r30, Y+18	; 0x12
    2ca8:	fb 89       	ldd	r31, Y+19	; 0x13
    2caa:	80 81       	ld	r24, Z
    2cac:	80 62       	ori	r24, 0x20	; 32
    2cae:	0a c0       	rjmp	.+20     	; 0x2cc4 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2cb0:	9f b7       	in	r25, 0x3f	; 63
    2cb2:	f8 94       	cli
      *_udr = c;
    2cb4:	ee 89       	ldd	r30, Y+22	; 0x16
    2cb6:	ff 89       	ldd	r31, Y+23	; 0x17
    2cb8:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2cba:	e8 89       	ldd	r30, Y+16	; 0x10
    2cbc:	f9 89       	ldd	r31, Y+17	; 0x11
    2cbe:	80 81       	ld	r24, Z
    2cc0:	83 70       	andi	r24, 0x03	; 3
    2cc2:	80 64       	ori	r24, 0x40	; 64
    2cc4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cc6:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	08 95       	ret

00002cda <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2ce0:	88 8d       	ldd	r24, Y+24	; 0x18
    2ce2:	88 23       	and	r24, r24
    2ce4:	c9 f0       	breq	.+50     	; 0x2d18 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2ce6:	ea 89       	ldd	r30, Y+18	; 0x12
    2ce8:	fb 89       	ldd	r31, Y+19	; 0x13
    2cea:	80 81       	ld	r24, Z
    2cec:	85 fd       	sbrc	r24, 5
    2cee:	05 c0       	rjmp	.+10     	; 0x2cfa <_ZN14HardwareSerial5flushEv+0x20>
    2cf0:	a8 89       	ldd	r26, Y+16	; 0x10
    2cf2:	b9 89       	ldd	r27, Y+17	; 0x11
    2cf4:	8c 91       	ld	r24, X
    2cf6:	86 fd       	sbrc	r24, 6
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	07 fc       	sbrc	r0, 7
    2cfe:	f5 cf       	rjmp	.-22     	; 0x2cea <_ZN14HardwareSerial5flushEv+0x10>
    2d00:	80 81       	ld	r24, Z
    2d02:	85 ff       	sbrs	r24, 5
    2d04:	f2 cf       	rjmp	.-28     	; 0x2cea <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2d06:	a8 89       	ldd	r26, Y+16	; 0x10
    2d08:	b9 89       	ldd	r27, Y+17	; 0x11
    2d0a:	8c 91       	ld	r24, X
    2d0c:	85 ff       	sbrs	r24, 5
    2d0e:	ed cf       	rjmp	.-38     	; 0x2cea <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2d10:	ce 01       	movw	r24, r28
    2d12:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2d16:	e7 cf       	rjmp	.-50     	; 0x2ce6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	08 95       	ret

00002d1e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2d1e:	cf 92       	push	r12
    2d20:	df 92       	push	r13
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	ec 01       	movw	r28, r24
    2d2e:	6a 01       	movw	r12, r20
    2d30:	7b 01       	movw	r14, r22
    2d32:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2d34:	e8 89       	ldd	r30, Y+16	; 0x10
    2d36:	f9 89       	ldd	r31, Y+17	; 0x11
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2d3c:	41 15       	cp	r20, r1
    2d3e:	51 4e       	sbci	r21, 0xE1	; 225
    2d40:	61 05       	cpc	r22, r1
    2d42:	71 05       	cpc	r23, r1
    2d44:	b1 f0       	breq	.+44     	; 0x2d72 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	79 e0       	ldi	r23, 0x09	; 9
    2d4a:	8d e3       	ldi	r24, 0x3D	; 61
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	a7 01       	movw	r20, r14
    2d50:	96 01       	movw	r18, r12
    2d52:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__udivmodsi4>
    2d56:	da 01       	movw	r26, r20
    2d58:	c9 01       	movw	r24, r18
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	a1 09       	sbc	r26, r1
    2d5e:	b1 09       	sbc	r27, r1
    2d60:	b6 95       	lsr	r27
    2d62:	a7 95       	ror	r26
    2d64:	97 95       	ror	r25
    2d66:	87 95       	ror	r24
    2d68:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2d6a:	21 15       	cp	r18, r1
    2d6c:	80 e1       	ldi	r24, 0x10	; 16
    2d6e:	38 07       	cpc	r19, r24
    2d70:	a8 f0       	brcs	.+42     	; 0x2d9c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2d72:	e8 89       	ldd	r30, Y+16	; 0x10
    2d74:	f9 89       	ldd	r31, Y+17	; 0x11
    2d76:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2d78:	60 e8       	ldi	r22, 0x80	; 128
    2d7a:	74 e8       	ldi	r23, 0x84	; 132
    2d7c:	8e e1       	ldi	r24, 0x1E	; 30
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	a7 01       	movw	r20, r14
    2d82:	96 01       	movw	r18, r12
    2d84:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__udivmodsi4>
    2d88:	da 01       	movw	r26, r20
    2d8a:	c9 01       	movw	r24, r18
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	a1 09       	sbc	r26, r1
    2d90:	b1 09       	sbc	r27, r1
    2d92:	b6 95       	lsr	r27
    2d94:	a7 95       	ror	r26
    2d96:	97 95       	ror	r25
    2d98:	87 95       	ror	r24
    2d9a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2d9c:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d9e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2da0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2da2:	ee 85       	ldd	r30, Y+14	; 0x0e
    2da4:	ff 85       	ldd	r31, Y+15	; 0x0f
    2da6:	20 83       	st	Z, r18

  _written = false;
    2da8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2daa:	ec 89       	ldd	r30, Y+20	; 0x14
    2dac:	fd 89       	ldd	r31, Y+21	; 0x15
    2dae:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2db0:	ea 89       	ldd	r30, Y+18	; 0x12
    2db2:	fb 89       	ldd	r31, Y+19	; 0x13
    2db4:	80 81       	ld	r24, Z
    2db6:	80 61       	ori	r24, 0x10	; 16
    2db8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2dba:	ea 89       	ldd	r30, Y+18	; 0x12
    2dbc:	fb 89       	ldd	r31, Y+19	; 0x13
    2dbe:	80 81       	ld	r24, Z
    2dc0:	88 60       	ori	r24, 0x08	; 8
    2dc2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2dc4:	ea 89       	ldd	r30, Y+18	; 0x12
    2dc6:	fb 89       	ldd	r31, Y+19	; 0x13
    2dc8:	80 81       	ld	r24, Z
    2dca:	80 68       	ori	r24, 0x80	; 128
    2dcc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2dce:	ea 89       	ldd	r30, Y+18	; 0x12
    2dd0:	fb 89       	ldd	r31, Y+19	; 0x13
    2dd2:	80 81       	ld	r24, Z
    2dd4:	8f 7d       	andi	r24, 0xDF	; 223
    2dd6:	80 83       	st	Z, r24
}
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	1f 91       	pop	r17
    2dde:	ff 90       	pop	r15
    2de0:	ef 90       	pop	r14
    2de2:	df 90       	pop	r13
    2de4:	cf 90       	pop	r12
    2de6:	08 95       	ret

00002de8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2de8:	1f 92       	push	r1
    2dea:	0f 92       	push	r0
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	0f 92       	push	r0
    2df0:	11 24       	eor	r1, r1
    2df2:	2f 93       	push	r18
    2df4:	8f 93       	push	r24
    2df6:	9f 93       	push	r25
    2df8:	ef 93       	push	r30
    2dfa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2dfc:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <Serial+0x10>
    2e00:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <Serial+0x11>
    2e04:	80 81       	ld	r24, Z
    2e06:	e0 91 70 03 	lds	r30, 0x0370	; 0x800370 <Serial+0x16>
    2e0a:	f0 91 71 03 	lds	r31, 0x0371	; 0x800371 <Serial+0x17>
    2e0e:	82 fd       	sbrc	r24, 2
    2e10:	12 c0       	rjmp	.+36     	; 0x2e36 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2e12:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2e14:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <Serial+0x19>
    2e18:	8f 5f       	subi	r24, 0xFF	; 255
    2e1a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2e1c:	20 91 74 03 	lds	r18, 0x0374	; 0x800374 <Serial+0x1a>
    2e20:	82 17       	cp	r24, r18
    2e22:	51 f0       	breq	.+20     	; 0x2e38 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2e24:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <Serial+0x19>
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	e6 5a       	subi	r30, 0xA6	; 166
    2e2c:	fc 4f       	sbci	r31, 0xFC	; 252
    2e2e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2e30:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <Serial+0x19>
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2e36:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2e38:	ff 91       	pop	r31
    2e3a:	ef 91       	pop	r30
    2e3c:	9f 91       	pop	r25
    2e3e:	8f 91       	pop	r24
    2e40:	2f 91       	pop	r18
    2e42:	0f 90       	pop	r0
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	0f 90       	pop	r0
    2e48:	1f 90       	pop	r1
    2e4a:	18 95       	reti

00002e4c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2e4c:	1f 92       	push	r1
    2e4e:	0f 92       	push	r0
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	0f 92       	push	r0
    2e54:	11 24       	eor	r1, r1
    2e56:	2f 93       	push	r18
    2e58:	3f 93       	push	r19
    2e5a:	4f 93       	push	r20
    2e5c:	5f 93       	push	r21
    2e5e:	6f 93       	push	r22
    2e60:	7f 93       	push	r23
    2e62:	8f 93       	push	r24
    2e64:	9f 93       	push	r25
    2e66:	af 93       	push	r26
    2e68:	bf 93       	push	r27
    2e6a:	ef 93       	push	r30
    2e6c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2e6e:	8a e5       	ldi	r24, 0x5A	; 90
    2e70:	93 e0       	ldi	r25, 0x03	; 3
    2e72:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2e76:	ff 91       	pop	r31
    2e78:	ef 91       	pop	r30
    2e7a:	bf 91       	pop	r27
    2e7c:	af 91       	pop	r26
    2e7e:	9f 91       	pop	r25
    2e80:	8f 91       	pop	r24
    2e82:	7f 91       	pop	r23
    2e84:	6f 91       	pop	r22
    2e86:	5f 91       	pop	r21
    2e88:	4f 91       	pop	r20
    2e8a:	3f 91       	pop	r19
    2e8c:	2f 91       	pop	r18
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	0f 90       	pop	r0
    2e94:	1f 90       	pop	r1
    2e96:	18 95       	reti

00002e98 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2e98:	8a e5       	ldi	r24, 0x5A	; 90
    2e9a:	93 e0       	ldi	r25, 0x03	; 3
    2e9c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <_ZN14HardwareSerial9availableEv>
    2ea0:	21 e0       	ldi	r18, 0x01	; 1
    2ea2:	89 2b       	or	r24, r25
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <_Z17Serial0_availablev+0x10>
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
}
    2ea8:	82 2f       	mov	r24, r18
    2eaa:	08 95       	ret

00002eac <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2eac:	ea e5       	ldi	r30, 0x5A	; 90
    2eae:	f3 e0       	ldi	r31, 0x03	; 3
    2eb0:	13 82       	std	Z+3, r1	; 0x03
    2eb2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2eb4:	88 ee       	ldi	r24, 0xE8	; 232
    2eb6:	93 e0       	ldi	r25, 0x03	; 3
    2eb8:	a0 e0       	ldi	r26, 0x00	; 0
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	84 83       	std	Z+4, r24	; 0x04
    2ebe:	95 83       	std	Z+5, r25	; 0x05
    2ec0:	a6 83       	std	Z+6, r26	; 0x06
    2ec2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2ec4:	8f ec       	ldi	r24, 0xCF	; 207
    2ec6:	91 e0       	ldi	r25, 0x01	; 1
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	85 ec       	ldi	r24, 0xC5	; 197
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	95 87       	std	Z+13, r25	; 0x0d
    2ed2:	84 87       	std	Z+12, r24	; 0x0c
    2ed4:	84 ec       	ldi	r24, 0xC4	; 196
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	97 87       	std	Z+15, r25	; 0x0f
    2eda:	86 87       	std	Z+14, r24	; 0x0e
    2edc:	80 ec       	ldi	r24, 0xC0	; 192
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	91 8b       	std	Z+17, r25	; 0x11
    2ee2:	80 8b       	std	Z+16, r24	; 0x10
    2ee4:	81 ec       	ldi	r24, 0xC1	; 193
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	93 8b       	std	Z+19, r25	; 0x13
    2eea:	82 8b       	std	Z+18, r24	; 0x12
    2eec:	82 ec       	ldi	r24, 0xC2	; 194
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	95 8b       	std	Z+21, r25	; 0x15
    2ef2:	84 8b       	std	Z+20, r24	; 0x14
    2ef4:	86 ec       	ldi	r24, 0xC6	; 198
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	97 8b       	std	Z+23, r25	; 0x17
    2efa:	86 8b       	std	Z+22, r24	; 0x16
    2efc:	11 8e       	std	Z+25, r1	; 0x19
    2efe:	12 8e       	std	Z+26, r1	; 0x1a
    2f00:	13 8e       	std	Z+27, r1	; 0x1b
    2f02:	14 8e       	std	Z+28, r1	; 0x1c
    2f04:	08 95       	ret

00002f06 <initVariant>:
    2f06:	08 95       	ret

00002f08 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2f08:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <init>

	initVariant();
    2f0c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2f10:	0e 94 b6 09 	call	0x136c	; 0x136c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2f14:	c0 ef       	ldi	r28, 0xF0	; 240
    2f16:	d5 e1       	ldi	r29, 0x15	; 21
#endif
	
	setup();
    
	for (;;) {
		loop();
    2f18:	0e 94 de 06 	call	0xdbc	; 0xdbc <loop>
		if (serialEventRun) serialEventRun();
    2f1c:	20 97       	sbiw	r28, 0x00	; 0
    2f1e:	e1 f3       	breq	.-8      	; 0x2f18 <main+0x10>
    2f20:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <_Z14serialEventRunv>
    2f24:	f9 cf       	rjmp	.-14     	; 0x2f18 <main+0x10>

00002f26 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2f26:	cf 92       	push	r12
    2f28:	df 92       	push	r13
    2f2a:	ef 92       	push	r14
    2f2c:	ff 92       	push	r15
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	6c 01       	movw	r12, r24
    2f38:	7a 01       	movw	r14, r20
    2f3a:	8b 01       	movw	r16, r22
    2f3c:	c0 e0       	ldi	r28, 0x00	; 0
    2f3e:	d0 e0       	ldi	r29, 0x00	; 0
    2f40:	ce 15       	cp	r28, r14
    2f42:	df 05       	cpc	r29, r15
    2f44:	81 f0       	breq	.+32     	; 0x2f66 <_ZN5Print5writeEPKhj+0x40>
    2f46:	d8 01       	movw	r26, r16
    2f48:	6d 91       	ld	r22, X+
    2f4a:	8d 01       	movw	r16, r26
    2f4c:	d6 01       	movw	r26, r12
    2f4e:	ed 91       	ld	r30, X+
    2f50:	fc 91       	ld	r31, X
    2f52:	01 90       	ld	r0, Z+
    2f54:	f0 81       	ld	r31, Z
    2f56:	e0 2d       	mov	r30, r0
    2f58:	c6 01       	movw	r24, r12
    2f5a:	09 95       	icall
    2f5c:	89 2b       	or	r24, r25
    2f5e:	11 f0       	breq	.+4      	; 0x2f64 <_ZN5Print5writeEPKhj+0x3e>
    2f60:	21 96       	adiw	r28, 0x01	; 1
    2f62:	ee cf       	rjmp	.-36     	; 0x2f40 <_ZN5Print5writeEPKhj+0x1a>
    2f64:	7e 01       	movw	r14, r28
    2f66:	c7 01       	movw	r24, r14
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	1f 91       	pop	r17
    2f6e:	0f 91       	pop	r16
    2f70:	ff 90       	pop	r15
    2f72:	ef 90       	pop	r14
    2f74:	df 90       	pop	r13
    2f76:	cf 90       	pop	r12
    2f78:	08 95       	ret

00002f7a <_ZN5Print5writeEPKc>:
    2f7a:	61 15       	cp	r22, r1
    2f7c:	71 05       	cpc	r23, r1
    2f7e:	79 f0       	breq	.+30     	; 0x2f9e <_ZN5Print5writeEPKc+0x24>
    2f80:	fb 01       	movw	r30, r22
    2f82:	01 90       	ld	r0, Z+
    2f84:	00 20       	and	r0, r0
    2f86:	e9 f7       	brne	.-6      	; 0x2f82 <_ZN5Print5writeEPKc+0x8>
    2f88:	31 97       	sbiw	r30, 0x01	; 1
    2f8a:	af 01       	movw	r20, r30
    2f8c:	46 1b       	sub	r20, r22
    2f8e:	57 0b       	sbc	r21, r23
    2f90:	dc 01       	movw	r26, r24
    2f92:	ed 91       	ld	r30, X+
    2f94:	fc 91       	ld	r31, X
    2f96:	02 80       	ldd	r0, Z+2	; 0x02
    2f98:	f3 81       	ldd	r31, Z+3	; 0x03
    2f9a:	e0 2d       	mov	r30, r0
    2f9c:	09 94       	ijmp
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	08 95       	ret

00002fa4 <_ZN5Print5printEPK19__FlashStringHelper>:
    2fa4:	ef 92       	push	r14
    2fa6:	ff 92       	push	r15
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	8c 01       	movw	r16, r24
    2fb2:	7b 01       	movw	r14, r22
    2fb4:	c0 e0       	ldi	r28, 0x00	; 0
    2fb6:	d0 e0       	ldi	r29, 0x00	; 0
    2fb8:	f7 01       	movw	r30, r14
    2fba:	ec 0f       	add	r30, r28
    2fbc:	fd 1f       	adc	r31, r29
    2fbe:	64 91       	lpm	r22, Z
    2fc0:	66 23       	and	r22, r22
    2fc2:	61 f0       	breq	.+24     	; 0x2fdc <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2fc4:	d8 01       	movw	r26, r16
    2fc6:	ed 91       	ld	r30, X+
    2fc8:	fc 91       	ld	r31, X
    2fca:	01 90       	ld	r0, Z+
    2fcc:	f0 81       	ld	r31, Z
    2fce:	e0 2d       	mov	r30, r0
    2fd0:	c8 01       	movw	r24, r16
    2fd2:	09 95       	icall
    2fd4:	89 2b       	or	r24, r25
    2fd6:	11 f0       	breq	.+4      	; 0x2fdc <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2fd8:	21 96       	adiw	r28, 0x01	; 1
    2fda:	ee cf       	rjmp	.-36     	; 0x2fb8 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2fdc:	ce 01       	movw	r24, r28
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	08 95       	ret

00002fec <_ZN5Print5printEc>:
    2fec:	dc 01       	movw	r26, r24
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	01 90       	ld	r0, Z+
    2ff4:	f0 81       	ld	r31, Z
    2ff6:	e0 2d       	mov	r30, r0
    2ff8:	09 94       	ijmp

00002ffa <_ZN5Print7printlnEv>:
    2ffa:	6d ed       	ldi	r22, 0xDD	; 221
    2ffc:	71 e0       	ldi	r23, 0x01	; 1
    2ffe:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <_ZN5Print5writeEPKc>

00003002 <_ZN5Print7printlnEPKc>:
    3002:	0f 93       	push	r16
    3004:	1f 93       	push	r17
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	ec 01       	movw	r28, r24
    300c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN5Print5writeEPKc>
    3010:	8c 01       	movw	r16, r24
    3012:	ce 01       	movw	r24, r28
    3014:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN5Print7printlnEv>
    3018:	80 0f       	add	r24, r16
    301a:	91 1f       	adc	r25, r17
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	1f 91       	pop	r17
    3022:	0f 91       	pop	r16
    3024:	08 95       	ret

00003026 <_ZN5Print11printNumberEmh>:
    3026:	8f 92       	push	r8
    3028:	9f 92       	push	r9
    302a:	af 92       	push	r10
    302c:	bf 92       	push	r11
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	a1 97       	sbiw	r28, 0x21	; 33
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	7c 01       	movw	r14, r24
    304c:	fa 01       	movw	r30, r20
    304e:	cb 01       	movw	r24, r22
    3050:	19 a2       	std	Y+33, r1	; 0x21
    3052:	22 30       	cpi	r18, 0x02	; 2
    3054:	08 f4       	brcc	.+2      	; 0x3058 <_ZN5Print11printNumberEmh+0x32>
    3056:	2a e0       	ldi	r18, 0x0A	; 10
    3058:	8e 01       	movw	r16, r28
    305a:	0f 5d       	subi	r16, 0xDF	; 223
    305c:	1f 4f       	sbci	r17, 0xFF	; 255
    305e:	82 2e       	mov	r8, r18
    3060:	91 2c       	mov	r9, r1
    3062:	a1 2c       	mov	r10, r1
    3064:	b1 2c       	mov	r11, r1
    3066:	bf 01       	movw	r22, r30
    3068:	a5 01       	movw	r20, r10
    306a:	94 01       	movw	r18, r8
    306c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__udivmodsi4>
    3070:	f9 01       	movw	r30, r18
    3072:	ca 01       	movw	r24, r20
    3074:	01 50       	subi	r16, 0x01	; 1
    3076:	11 09       	sbc	r17, r1
    3078:	6a 30       	cpi	r22, 0x0A	; 10
    307a:	10 f4       	brcc	.+4      	; 0x3080 <_ZN5Print11printNumberEmh+0x5a>
    307c:	60 5d       	subi	r22, 0xD0	; 208
    307e:	01 c0       	rjmp	.+2      	; 0x3082 <_ZN5Print11printNumberEmh+0x5c>
    3080:	69 5c       	subi	r22, 0xC9	; 201
    3082:	d8 01       	movw	r26, r16
    3084:	6c 93       	st	X, r22
    3086:	23 2b       	or	r18, r19
    3088:	24 2b       	or	r18, r20
    308a:	25 2b       	or	r18, r21
    308c:	61 f7       	brne	.-40     	; 0x3066 <_ZN5Print11printNumberEmh+0x40>
    308e:	b8 01       	movw	r22, r16
    3090:	c7 01       	movw	r24, r14
    3092:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN5Print5writeEPKc>
    3096:	a1 96       	adiw	r28, 0x21	; 33
    3098:	0f b6       	in	r0, 0x3f	; 63
    309a:	f8 94       	cli
    309c:	de bf       	out	0x3e, r29	; 62
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	cd bf       	out	0x3d, r28	; 61
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	ff 90       	pop	r15
    30ac:	ef 90       	pop	r14
    30ae:	bf 90       	pop	r11
    30b0:	af 90       	pop	r10
    30b2:	9f 90       	pop	r9
    30b4:	8f 90       	pop	r8
    30b6:	08 95       	ret

000030b8 <_ZN5Print5printEmi>:
    30b8:	21 15       	cp	r18, r1
    30ba:	31 05       	cpc	r19, r1
    30bc:	41 f4       	brne	.+16     	; 0x30ce <_ZN5Print5printEmi+0x16>
    30be:	dc 01       	movw	r26, r24
    30c0:	ed 91       	ld	r30, X+
    30c2:	fc 91       	ld	r31, X
    30c4:	01 90       	ld	r0, Z+
    30c6:	f0 81       	ld	r31, Z
    30c8:	e0 2d       	mov	r30, r0
    30ca:	64 2f       	mov	r22, r20
    30cc:	09 94       	ijmp
    30ce:	0c 94 13 18 	jmp	0x3026	; 0x3026 <_ZN5Print11printNumberEmh>

000030d2 <_ZN5Print5printEji>:
    30d2:	9a 01       	movw	r18, r20
    30d4:	ab 01       	movw	r20, r22
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	70 e0       	ldi	r23, 0x00	; 0
    30da:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <_ZN5Print5printEmi>

000030de <_ZN5Print5printEli>:
    30de:	cf 92       	push	r12
    30e0:	df 92       	push	r13
    30e2:	ef 92       	push	r14
    30e4:	ff 92       	push	r15
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	21 15       	cp	r18, r1
    30f0:	31 05       	cpc	r19, r1
    30f2:	81 f4       	brne	.+32     	; 0x3114 <_ZN5Print5printEli+0x36>
    30f4:	dc 01       	movw	r26, r24
    30f6:	ed 91       	ld	r30, X+
    30f8:	fc 91       	ld	r31, X
    30fa:	01 90       	ld	r0, Z+
    30fc:	f0 81       	ld	r31, Z
    30fe:	e0 2d       	mov	r30, r0
    3100:	64 2f       	mov	r22, r20
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	cf 90       	pop	r12
    3112:	09 94       	ijmp
    3114:	2a 30       	cpi	r18, 0x0A	; 10
    3116:	31 05       	cpc	r19, r1
    3118:	01 f5       	brne	.+64     	; 0x315a <_ZN5Print5printEli+0x7c>
    311a:	77 ff       	sbrs	r23, 7
    311c:	1d c0       	rjmp	.+58     	; 0x3158 <_ZN5Print5printEli+0x7a>
    311e:	6a 01       	movw	r12, r20
    3120:	7b 01       	movw	r14, r22
    3122:	ec 01       	movw	r28, r24
    3124:	6d e2       	ldi	r22, 0x2D	; 45
    3126:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN5Print5printEc>
    312a:	8c 01       	movw	r16, r24
    312c:	44 27       	eor	r20, r20
    312e:	55 27       	eor	r21, r21
    3130:	ba 01       	movw	r22, r20
    3132:	4c 19       	sub	r20, r12
    3134:	5d 09       	sbc	r21, r13
    3136:	6e 09       	sbc	r22, r14
    3138:	7f 09       	sbc	r23, r15
    313a:	2a e0       	ldi	r18, 0x0A	; 10
    313c:	ce 01       	movw	r24, r28
    313e:	0e 94 13 18 	call	0x3026	; 0x3026 <_ZN5Print11printNumberEmh>
    3142:	80 0f       	add	r24, r16
    3144:	91 1f       	adc	r25, r17
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	0f 91       	pop	r16
    314e:	ff 90       	pop	r15
    3150:	ef 90       	pop	r14
    3152:	df 90       	pop	r13
    3154:	cf 90       	pop	r12
    3156:	08 95       	ret
    3158:	2a e0       	ldi	r18, 0x0A	; 10
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	1f 91       	pop	r17
    3160:	0f 91       	pop	r16
    3162:	ff 90       	pop	r15
    3164:	ef 90       	pop	r14
    3166:	df 90       	pop	r13
    3168:	cf 90       	pop	r12
    316a:	0c 94 13 18 	jmp	0x3026	; 0x3026 <_ZN5Print11printNumberEmh>

0000316e <_ZN5Print5printEii>:
    316e:	9a 01       	movw	r18, r20
    3170:	ab 01       	movw	r20, r22
    3172:	77 0f       	add	r23, r23
    3174:	66 0b       	sbc	r22, r22
    3176:	77 0b       	sbc	r23, r23
    3178:	0c 94 6f 18 	jmp	0x30de	; 0x30de <_ZN5Print5printEli>

0000317c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    317c:	7f 92       	push	r7
    317e:	8f 92       	push	r8
    3180:	9f 92       	push	r9
    3182:	af 92       	push	r10
    3184:	bf 92       	push	r11
    3186:	cf 92       	push	r12
    3188:	df 92       	push	r13
    318a:	ef 92       	push	r14
    318c:	ff 92       	push	r15
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	8c 01       	movw	r16, r24
    3198:	6a 01       	movw	r12, r20
    319a:	7b 01       	movw	r14, r22
    319c:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    319e:	9a 01       	movw	r18, r20
    31a0:	ab 01       	movw	r20, r22
    31a2:	c7 01       	movw	r24, r14
    31a4:	b6 01       	movw	r22, r12
    31a6:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__unordsf2>
    31aa:	88 23       	and	r24, r24
    31ac:	19 f0       	breq	.+6      	; 0x31b4 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    31ae:	60 ee       	ldi	r22, 0xE0	; 224
    31b0:	71 e0       	ldi	r23, 0x01	; 1
    31b2:	27 c0       	rjmp	.+78     	; 0x3202 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    31b4:	46 01       	movw	r8, r12
    31b6:	57 01       	movw	r10, r14
    31b8:	e8 94       	clt
    31ba:	b7 f8       	bld	r11, 7
    31bc:	2f ef       	ldi	r18, 0xFF	; 255
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	5f e7       	ldi	r21, 0x7F	; 127
    31c4:	c5 01       	movw	r24, r10
    31c6:	b4 01       	movw	r22, r8
    31c8:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__unordsf2>
    31cc:	81 11       	cpse	r24, r1
    31ce:	0d c0       	rjmp	.+26     	; 0x31ea <_ZN5Print10printFloatEdh+0x6e>
    31d0:	2f ef       	ldi	r18, 0xFF	; 255
    31d2:	3f ef       	ldi	r19, 0xFF	; 255
    31d4:	4f e7       	ldi	r20, 0x7F	; 127
    31d6:	5f e7       	ldi	r21, 0x7F	; 127
    31d8:	c5 01       	movw	r24, r10
    31da:	b4 01       	movw	r22, r8
    31dc:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    31e0:	18 16       	cp	r1, r24
    31e2:	1c f4       	brge	.+6      	; 0x31ea <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    31e4:	64 ee       	ldi	r22, 0xE4	; 228
    31e6:	71 e0       	ldi	r23, 0x01	; 1
    31e8:	0c c0       	rjmp	.+24     	; 0x3202 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    31ea:	2f ef       	ldi	r18, 0xFF	; 255
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	5f e4       	ldi	r21, 0x4F	; 79
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__gesf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	94 f4       	brge	.+36     	; 0x3222 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    31fe:	68 ee       	ldi	r22, 0xE8	; 232
    3200:	71 e0       	ldi	r23, 0x01	; 1
    3202:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ff 90       	pop	r15
    320e:	ef 90       	pop	r14
    3210:	df 90       	pop	r13
    3212:	cf 90       	pop	r12
    3214:	bf 90       	pop	r11
    3216:	af 90       	pop	r10
    3218:	9f 90       	pop	r9
    321a:	8f 90       	pop	r8
    321c:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    321e:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3222:	2f ef       	ldi	r18, 0xFF	; 255
    3224:	3f ef       	ldi	r19, 0xFF	; 255
    3226:	4f e7       	ldi	r20, 0x7F	; 127
    3228:	5f ec       	ldi	r21, 0xCF	; 207
    322a:	c7 01       	movw	r24, r14
    322c:	b6 01       	movw	r22, r12
    322e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    3232:	87 fd       	sbrc	r24, 7
    3234:	e4 cf       	rjmp	.-56     	; 0x31fe <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	a9 01       	movw	r20, r18
    323c:	c7 01       	movw	r24, r14
    323e:	b6 01       	movw	r22, r12
    3240:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    3244:	87 ff       	sbrs	r24, 7
    3246:	0a c0       	rjmp	.+20     	; 0x325c <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    3248:	6d e2       	ldi	r22, 0x2D	; 45
    324a:	c8 01       	movw	r24, r16
    324c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN5Print5printEc>
    3250:	ec 01       	movw	r28, r24
     number = -number;
    3252:	f7 fa       	bst	r15, 7
    3254:	f0 94       	com	r15
    3256:	f7 f8       	bld	r15, 7
    3258:	f0 94       	com	r15
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    325c:	c0 e0       	ldi	r28, 0x00	; 0
    325e:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3260:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3262:	60 e0       	ldi	r22, 0x00	; 0
    3264:	70 e0       	ldi	r23, 0x00	; 0
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    326a:	7b 14       	cp	r7, r11
    326c:	41 f0       	breq	.+16     	; 0x327e <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e2       	ldi	r20, 0x20	; 32
    3274:	51 e4       	ldi	r21, 0x41	; 65
    3276:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    327a:	b3 94       	inc	r11
    327c:	f6 cf       	rjmp	.-20     	; 0x326a <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    327e:	a7 01       	movw	r20, r14
    3280:	96 01       	movw	r18, r12
    3282:	0e 94 76 13 	call	0x26ec	; 0x26ec <__addsf3>
    3286:	6b 01       	movw	r12, r22
    3288:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    328a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__fixunssfsi>
    328e:	4b 01       	movw	r8, r22
    3290:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3292:	2a e0       	ldi	r18, 0x0A	; 10
    3294:	ab 01       	movw	r20, r22
    3296:	bc 01       	movw	r22, r24
    3298:	c8 01       	movw	r24, r16
    329a:	0e 94 13 18 	call	0x3026	; 0x3026 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    329e:	c8 0f       	add	r28, r24
    32a0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    32a2:	77 20       	and	r7, r7
    32a4:	b9 f1       	breq	.+110    	; 0x3314 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    32a6:	c5 01       	movw	r24, r10
    32a8:	b4 01       	movw	r22, r8
    32aa:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
    32ae:	9b 01       	movw	r18, r22
    32b0:	ac 01       	movw	r20, r24
    32b2:	c7 01       	movw	r24, r14
    32b4:	b6 01       	movw	r22, r12
    32b6:	0e 94 75 13 	call	0x26ea	; 0x26ea <__subsf3>
    32ba:	6b 01       	movw	r12, r22
    32bc:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    32be:	6e e2       	ldi	r22, 0x2E	; 46
    32c0:	c8 01       	movw	r24, r16
    32c2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN5Print5printEc>
    32c6:	c8 0f       	add	r28, r24
    32c8:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e2       	ldi	r20, 0x20	; 32
    32d0:	51 e4       	ldi	r21, 0x41	; 65
    32d2:	c7 01       	movw	r24, r14
    32d4:	b6 01       	movw	r22, r12
    32d6:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__mulsf3>
    32da:	4b 01       	movw	r8, r22
    32dc:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    32de:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__fixunssfsi>
    32e2:	6b 01       	movw	r12, r22
    32e4:	7c 01       	movw	r14, r24
    n += print(toPrint);
    32e6:	4a e0       	ldi	r20, 0x0A	; 10
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	c8 01       	movw	r24, r16
    32ec:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZN5Print5printEji>
    32f0:	c8 0f       	add	r28, r24
    32f2:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    32f4:	b6 01       	movw	r22, r12
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 8f 14 	call	0x291e	; 0x291e <__floatunsisf>
    32fe:	9b 01       	movw	r18, r22
    3300:	ac 01       	movw	r20, r24
    3302:	c5 01       	movw	r24, r10
    3304:	b4 01       	movw	r22, r8
    3306:	0e 94 75 13 	call	0x26ea	; 0x26ea <__subsf3>
    330a:	6b 01       	movw	r12, r22
    330c:	7c 01       	movw	r14, r24
    330e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3310:	71 10       	cpse	r7, r1
    3312:	db cf       	rjmp	.-74     	; 0x32ca <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3314:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	1f 91       	pop	r17
    331c:	0f 91       	pop	r16
    331e:	ff 90       	pop	r15
    3320:	ef 90       	pop	r14
    3322:	df 90       	pop	r13
    3324:	cf 90       	pop	r12
    3326:	bf 90       	pop	r11
    3328:	af 90       	pop	r10
    332a:	9f 90       	pop	r9
    332c:	8f 90       	pop	r8
    332e:	7f 90       	pop	r7
    3330:	08 95       	ret

00003332 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3332:	0c 94 be 18 	jmp	0x317c	; 0x317c <_ZN5Print10printFloatEdh>

00003336 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3336:	1f 92       	push	r1
    3338:	0f 92       	push	r0
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	0f 92       	push	r0
    333e:	11 24       	eor	r1, r1
    3340:	2f 93       	push	r18
    3342:	3f 93       	push	r19
    3344:	8f 93       	push	r24
    3346:	9f 93       	push	r25
    3348:	af 93       	push	r26
    334a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    334c:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <timer0_millis>
    3350:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <timer0_millis+0x1>
    3354:	a0 91 fa 03 	lds	r26, 0x03FA	; 0x8003fa <timer0_millis+0x2>
    3358:	b0 91 fb 03 	lds	r27, 0x03FB	; 0x8003fb <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    335c:	30 91 f7 03 	lds	r19, 0x03F7	; 0x8003f7 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3360:	23 e0       	ldi	r18, 0x03	; 3
    3362:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3364:	2d 37       	cpi	r18, 0x7D	; 125
    3366:	20 f4       	brcc	.+8      	; 0x3370 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3368:	01 96       	adiw	r24, 0x01	; 1
    336a:	a1 1d       	adc	r26, r1
    336c:	b1 1d       	adc	r27, r1
    336e:	05 c0       	rjmp	.+10     	; 0x337a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3370:	26 e8       	ldi	r18, 0x86	; 134
    3372:	23 0f       	add	r18, r19
		m += 1;
    3374:	02 96       	adiw	r24, 0x02	; 2
    3376:	a1 1d       	adc	r26, r1
    3378:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    337a:	20 93 f7 03 	sts	0x03F7, r18	; 0x8003f7 <timer0_fract>
	timer0_millis = m;
    337e:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <timer0_millis>
    3382:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <timer0_millis+0x1>
    3386:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <timer0_millis+0x2>
    338a:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <timer0_millis+0x3>
	timer0_overflow_count++;
    338e:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <timer0_overflow_count>
    3392:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <timer0_overflow_count+0x1>
    3396:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <timer0_overflow_count+0x2>
    339a:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <timer0_overflow_count+0x3>
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	a1 1d       	adc	r26, r1
    33a2:	b1 1d       	adc	r27, r1
    33a4:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <timer0_overflow_count>
    33a8:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <timer0_overflow_count+0x1>
    33ac:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <timer0_overflow_count+0x2>
    33b0:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <timer0_overflow_count+0x3>
}
    33b4:	bf 91       	pop	r27
    33b6:	af 91       	pop	r26
    33b8:	9f 91       	pop	r25
    33ba:	8f 91       	pop	r24
    33bc:	3f 91       	pop	r19
    33be:	2f 91       	pop	r18
    33c0:	0f 90       	pop	r0
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	0f 90       	pop	r0
    33c6:	1f 90       	pop	r1
    33c8:	18 95       	reti

000033ca <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    33ca:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    33cc:	f8 94       	cli
	m = timer0_millis;
    33ce:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <timer0_millis>
    33d2:	70 91 f9 03 	lds	r23, 0x03F9	; 0x8003f9 <timer0_millis+0x1>
    33d6:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <timer0_millis+0x2>
    33da:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <timer0_millis+0x3>
	SREG = oldSREG;
    33de:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    33e0:	08 95       	ret

000033e2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    33e2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    33e4:	f8 94       	cli
	m = timer0_overflow_count;
    33e6:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <timer0_overflow_count>
    33ea:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <timer0_overflow_count+0x1>
    33ee:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <timer0_overflow_count+0x2>
    33f2:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    33f6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    33f8:	a8 9b       	sbis	0x15, 0	; 21
    33fa:	05 c0       	rjmp	.+10     	; 0x3406 <micros+0x24>
    33fc:	2f 3f       	cpi	r18, 0xFF	; 255
    33fe:	19 f0       	breq	.+6      	; 0x3406 <micros+0x24>
		m++;
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	a1 1d       	adc	r26, r1
    3404:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3406:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3408:	ba 2f       	mov	r27, r26
    340a:	a9 2f       	mov	r26, r25
    340c:	98 2f       	mov	r25, r24
    340e:	88 27       	eor	r24, r24
    3410:	82 0f       	add	r24, r18
    3412:	91 1d       	adc	r25, r1
    3414:	a1 1d       	adc	r26, r1
    3416:	b1 1d       	adc	r27, r1
    3418:	bc 01       	movw	r22, r24
    341a:	cd 01       	movw	r24, r26
    341c:	42 e0       	ldi	r20, 0x02	; 2
    341e:	66 0f       	add	r22, r22
    3420:	77 1f       	adc	r23, r23
    3422:	88 1f       	adc	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	4a 95       	dec	r20
    3428:	d1 f7       	brne	.-12     	; 0x341e <micros+0x3c>
}
    342a:	08 95       	ret

0000342c <delay>:

void delay(unsigned long ms)
{
    342c:	8f 92       	push	r8
    342e:	9f 92       	push	r9
    3430:	af 92       	push	r10
    3432:	bf 92       	push	r11
    3434:	cf 92       	push	r12
    3436:	df 92       	push	r13
    3438:	ef 92       	push	r14
    343a:	ff 92       	push	r15
    343c:	6b 01       	movw	r12, r22
    343e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3440:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <micros>
    3444:	4b 01       	movw	r8, r22
    3446:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3448:	c1 14       	cp	r12, r1
    344a:	d1 04       	cpc	r13, r1
    344c:	e1 04       	cpc	r14, r1
    344e:	f1 04       	cpc	r15, r1
    3450:	01 f1       	breq	.+64     	; 0x3492 <delay+0x66>
		yield();
    3452:	0e 94 55 1b 	call	0x36aa	; 0x36aa <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3456:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <micros>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	88 19       	sub	r24, r8
    3460:	99 09       	sbc	r25, r9
    3462:	aa 09       	sbc	r26, r10
    3464:	bb 09       	sbc	r27, r11
    3466:	88 3e       	cpi	r24, 0xE8	; 232
    3468:	93 40       	sbci	r25, 0x03	; 3
    346a:	a1 05       	cpc	r26, r1
    346c:	b1 05       	cpc	r27, r1
    346e:	60 f3       	brcs	.-40     	; 0x3448 <delay+0x1c>
			ms--;
    3470:	21 e0       	ldi	r18, 0x01	; 1
    3472:	c2 1a       	sub	r12, r18
    3474:	d1 08       	sbc	r13, r1
    3476:	e1 08       	sbc	r14, r1
    3478:	f1 08       	sbc	r15, r1
			start += 1000;
    347a:	88 ee       	ldi	r24, 0xE8	; 232
    347c:	88 0e       	add	r8, r24
    347e:	83 e0       	ldi	r24, 0x03	; 3
    3480:	98 1e       	adc	r9, r24
    3482:	a1 1c       	adc	r10, r1
    3484:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3486:	c1 14       	cp	r12, r1
    3488:	d1 04       	cpc	r13, r1
    348a:	e1 04       	cpc	r14, r1
    348c:	f1 04       	cpc	r15, r1
    348e:	19 f7       	brne	.-58     	; 0x3456 <delay+0x2a>
    3490:	db cf       	rjmp	.-74     	; 0x3448 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3492:	ff 90       	pop	r15
    3494:	ef 90       	pop	r14
    3496:	df 90       	pop	r13
    3498:	cf 90       	pop	r12
    349a:	bf 90       	pop	r11
    349c:	af 90       	pop	r10
    349e:	9f 90       	pop	r9
    34a0:	8f 90       	pop	r8
    34a2:	08 95       	ret

000034a4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    34a4:	82 30       	cpi	r24, 0x02	; 2
    34a6:	91 05       	cpc	r25, r1
    34a8:	38 f0       	brcs	.+14     	; 0x34b8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	88 0f       	add	r24, r24
    34b0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    34b2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <delayMicroseconds+0x10>
    34b8:	08 95       	ret

000034ba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    34ba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    34bc:	84 b5       	in	r24, 0x24	; 36
    34be:	82 60       	ori	r24, 0x02	; 2
    34c0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    34c2:	84 b5       	in	r24, 0x24	; 36
    34c4:	81 60       	ori	r24, 0x01	; 1
    34c6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    34c8:	85 b5       	in	r24, 0x25	; 37
    34ca:	82 60       	ori	r24, 0x02	; 2
    34cc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    34ce:	85 b5       	in	r24, 0x25	; 37
    34d0:	81 60       	ori	r24, 0x01	; 1
    34d2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    34d4:	ee e6       	ldi	r30, 0x6E	; 110
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	81 60       	ori	r24, 0x01	; 1
    34dc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    34de:	e1 e8       	ldi	r30, 0x81	; 129
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    34e4:	80 81       	ld	r24, Z
    34e6:	82 60       	ori	r24, 0x02	; 2
    34e8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    34ea:	80 81       	ld	r24, Z
    34ec:	81 60       	ori	r24, 0x01	; 1
    34ee:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    34f0:	e0 e8       	ldi	r30, 0x80	; 128
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	81 60       	ori	r24, 0x01	; 1
    34f8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    34fa:	e1 eb       	ldi	r30, 0xB1	; 177
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	80 81       	ld	r24, Z
    3500:	84 60       	ori	r24, 0x04	; 4
    3502:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3504:	e0 eb       	ldi	r30, 0xB0	; 176
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	80 81       	ld	r24, Z
    350a:	81 60       	ori	r24, 0x01	; 1
    350c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    350e:	ea e7       	ldi	r30, 0x7A	; 122
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	84 60       	ori	r24, 0x04	; 4
    3516:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3518:	80 81       	ld	r24, Z
    351a:	82 60       	ori	r24, 0x02	; 2
    351c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    351e:	80 81       	ld	r24, Z
    3520:	81 60       	ori	r24, 0x01	; 1
    3522:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3524:	80 81       	ld	r24, Z
    3526:	80 68       	ori	r24, 0x80	; 128
    3528:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    352a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    352e:	08 95       	ret

00003530 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3530:	83 30       	cpi	r24, 0x03	; 3
    3532:	81 f0       	breq	.+32     	; 0x3554 <turnOffPWM+0x24>
    3534:	28 f4       	brcc	.+10     	; 0x3540 <turnOffPWM+0x10>
    3536:	81 30       	cpi	r24, 0x01	; 1
    3538:	99 f0       	breq	.+38     	; 0x3560 <turnOffPWM+0x30>
    353a:	82 30       	cpi	r24, 0x02	; 2
    353c:	a1 f0       	breq	.+40     	; 0x3566 <turnOffPWM+0x36>
    353e:	08 95       	ret
    3540:	87 30       	cpi	r24, 0x07	; 7
    3542:	a9 f0       	breq	.+42     	; 0x356e <turnOffPWM+0x3e>
    3544:	88 30       	cpi	r24, 0x08	; 8
    3546:	b9 f0       	breq	.+46     	; 0x3576 <turnOffPWM+0x46>
    3548:	84 30       	cpi	r24, 0x04	; 4
    354a:	d1 f4       	brne	.+52     	; 0x3580 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    354c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3550:	8f 7d       	andi	r24, 0xDF	; 223
    3552:	03 c0       	rjmp	.+6      	; 0x355a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3554:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3558:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    355a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    355e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3560:	84 b5       	in	r24, 0x24	; 36
    3562:	8f 77       	andi	r24, 0x7F	; 127
    3564:	02 c0       	rjmp	.+4      	; 0x356a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3566:	84 b5       	in	r24, 0x24	; 36
    3568:	8f 7d       	andi	r24, 0xDF	; 223
    356a:	84 bd       	out	0x24, r24	; 36
    356c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    356e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3572:	8f 77       	andi	r24, 0x7F	; 127
    3574:	03 c0       	rjmp	.+6      	; 0x357c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3576:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    357a:	8f 7d       	andi	r24, 0xDF	; 223
    357c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3580:	08 95       	ret

00003582 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	fc 01       	movw	r30, r24
    358a:	e6 5b       	subi	r30, 0xB6	; 182
    358c:	fd 4f       	sbci	r31, 0xFD	; 253
    358e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3590:	fc 01       	movw	r30, r24
    3592:	e2 5a       	subi	r30, 0xA2	; 162
    3594:	fd 4f       	sbci	r31, 0xFD	; 253
    3596:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3598:	88 23       	and	r24, r24
    359a:	61 f1       	breq	.+88     	; 0x35f4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	fc 01       	movw	r30, r24
    35a4:	ea 57       	subi	r30, 0x7A	; 122
    35a6:	fd 4f       	sbci	r31, 0xFD	; 253
    35a8:	c5 91       	lpm	r28, Z+
    35aa:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    35ac:	fc 01       	movw	r30, r24
    35ae:	e4 58       	subi	r30, 0x84	; 132
    35b0:	fd 4f       	sbci	r31, 0xFD	; 253
    35b2:	a5 91       	lpm	r26, Z+
    35b4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    35b6:	61 11       	cpse	r22, r1
    35b8:	09 c0       	rjmp	.+18     	; 0x35cc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    35ba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    35bc:	f8 94       	cli
		*reg &= ~bit;
    35be:	88 81       	ld	r24, Y
    35c0:	20 95       	com	r18
    35c2:	82 23       	and	r24, r18
    35c4:	88 83       	st	Y, r24
		*out &= ~bit;
    35c6:	ec 91       	ld	r30, X
    35c8:	2e 23       	and	r18, r30
    35ca:	0b c0       	rjmp	.+22     	; 0x35e2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    35cc:	62 30       	cpi	r22, 0x02	; 2
    35ce:	61 f4       	brne	.+24     	; 0x35e8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    35d0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    35d2:	f8 94       	cli
		*reg &= ~bit;
    35d4:	88 81       	ld	r24, Y
    35d6:	32 2f       	mov	r19, r18
    35d8:	30 95       	com	r19
    35da:	83 23       	and	r24, r19
    35dc:	88 83       	st	Y, r24
		*out |= bit;
    35de:	ec 91       	ld	r30, X
    35e0:	2e 2b       	or	r18, r30
    35e2:	2c 93       	st	X, r18
		SREG = oldSREG;
    35e4:	9f bf       	out	0x3f, r25	; 63
    35e6:	06 c0       	rjmp	.+12     	; 0x35f4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    35e8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    35ea:	f8 94       	cli
		*reg |= bit;
    35ec:	e8 81       	ld	r30, Y
    35ee:	2e 2b       	or	r18, r30
    35f0:	28 83       	st	Y, r18
		SREG = oldSREG;
    35f2:	8f bf       	out	0x3f, r24	; 63
	}
}
    35f4:	df 91       	pop	r29
    35f6:	cf 91       	pop	r28
    35f8:	08 95       	ret

000035fa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    35fa:	1f 93       	push	r17
    35fc:	cf 93       	push	r28
    35fe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3600:	28 2f       	mov	r18, r24
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	f9 01       	movw	r30, r18
    3606:	ea 5c       	subi	r30, 0xCA	; 202
    3608:	fd 4f       	sbci	r31, 0xFD	; 253
    360a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    360c:	f9 01       	movw	r30, r18
    360e:	e6 5b       	subi	r30, 0xB6	; 182
    3610:	fd 4f       	sbci	r31, 0xFD	; 253
    3612:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3614:	f9 01       	movw	r30, r18
    3616:	e2 5a       	subi	r30, 0xA2	; 162
    3618:	fd 4f       	sbci	r31, 0xFD	; 253
    361a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    361c:	cc 23       	and	r28, r28
    361e:	c1 f0       	breq	.+48     	; 0x3650 <digitalWrite+0x56>
    3620:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3622:	81 11       	cpse	r24, r1
    3624:	0e 94 98 1a 	call	0x3530	; 0x3530 <turnOffPWM>

	out = portOutputRegister(port);
    3628:	ec 2f       	mov	r30, r28
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	ee 0f       	add	r30, r30
    362e:	ff 1f       	adc	r31, r31
    3630:	e4 58       	subi	r30, 0x84	; 132
    3632:	fd 4f       	sbci	r31, 0xFD	; 253
    3634:	a5 91       	lpm	r26, Z+
    3636:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3638:	9f b7       	in	r25, 0x3f	; 63
	cli();
    363a:	f8 94       	cli

	if (val == LOW) {
    363c:	11 11       	cpse	r17, r1
    363e:	04 c0       	rjmp	.+8      	; 0x3648 <digitalWrite+0x4e>
		*out &= ~bit;
    3640:	8c 91       	ld	r24, X
    3642:	d0 95       	com	r29
    3644:	d8 23       	and	r29, r24
    3646:	02 c0       	rjmp	.+4      	; 0x364c <digitalWrite+0x52>
	} else {
		*out |= bit;
    3648:	ec 91       	ld	r30, X
    364a:	de 2b       	or	r29, r30
    364c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    364e:	9f bf       	out	0x3f, r25	; 63
}
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	1f 91       	pop	r17
    3656:	08 95       	ret

00003658 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    365c:	28 2f       	mov	r18, r24
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	f9 01       	movw	r30, r18
    3662:	ea 5c       	subi	r30, 0xCA	; 202
    3664:	fd 4f       	sbci	r31, 0xFD	; 253
    3666:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3668:	f9 01       	movw	r30, r18
    366a:	e6 5b       	subi	r30, 0xB6	; 182
    366c:	fd 4f       	sbci	r31, 0xFD	; 253
    366e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3670:	f9 01       	movw	r30, r18
    3672:	e2 5a       	subi	r30, 0xA2	; 162
    3674:	fd 4f       	sbci	r31, 0xFD	; 253
    3676:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    3678:	cc 23       	and	r28, r28
    367a:	91 f0       	breq	.+36     	; 0x36a0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    367c:	81 11       	cpse	r24, r1
    367e:	0e 94 98 1a 	call	0x3530	; 0x3530 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3682:	ec 2f       	mov	r30, r28
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	ee 0f       	add	r30, r30
    3688:	ff 1f       	adc	r31, r31
    368a:	ee 58       	subi	r30, 0x8E	; 142
    368c:	fd 4f       	sbci	r31, 0xFD	; 253
    368e:	a5 91       	lpm	r26, Z+
    3690:	b4 91       	lpm	r27, Z
    3692:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3694:	ed 23       	and	r30, r29
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	21 f4       	brne	.+8      	; 0x36a4 <digitalRead+0x4c>
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <digitalRead+0x4c>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	08 95       	ret

000036aa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    36aa:	08 95       	ret

000036ac <__unordsf2>:
    36ac:	0e 94 cc 14 	call	0x2998	; 0x2998 <__fp_cmp>
    36b0:	88 0b       	sbc	r24, r24
    36b2:	99 0b       	sbc	r25, r25
    36b4:	08 95       	ret

000036b6 <__udivmodsi4>:
    36b6:	a1 e2       	ldi	r26, 0x21	; 33
    36b8:	1a 2e       	mov	r1, r26
    36ba:	aa 1b       	sub	r26, r26
    36bc:	bb 1b       	sub	r27, r27
    36be:	fd 01       	movw	r30, r26
    36c0:	0d c0       	rjmp	.+26     	; 0x36dc <__udivmodsi4_ep>

000036c2 <__udivmodsi4_loop>:
    36c2:	aa 1f       	adc	r26, r26
    36c4:	bb 1f       	adc	r27, r27
    36c6:	ee 1f       	adc	r30, r30
    36c8:	ff 1f       	adc	r31, r31
    36ca:	a2 17       	cp	r26, r18
    36cc:	b3 07       	cpc	r27, r19
    36ce:	e4 07       	cpc	r30, r20
    36d0:	f5 07       	cpc	r31, r21
    36d2:	20 f0       	brcs	.+8      	; 0x36dc <__udivmodsi4_ep>
    36d4:	a2 1b       	sub	r26, r18
    36d6:	b3 0b       	sbc	r27, r19
    36d8:	e4 0b       	sbc	r30, r20
    36da:	f5 0b       	sbc	r31, r21

000036dc <__udivmodsi4_ep>:
    36dc:	66 1f       	adc	r22, r22
    36de:	77 1f       	adc	r23, r23
    36e0:	88 1f       	adc	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	1a 94       	dec	r1
    36e6:	69 f7       	brne	.-38     	; 0x36c2 <__udivmodsi4_loop>
    36e8:	60 95       	com	r22
    36ea:	70 95       	com	r23
    36ec:	80 95       	com	r24
    36ee:	90 95       	com	r25
    36f0:	9b 01       	movw	r18, r22
    36f2:	ac 01       	movw	r20, r24
    36f4:	bd 01       	movw	r22, r26
    36f6:	cf 01       	movw	r24, r30
    36f8:	08 95       	ret

000036fa <__tablejump2__>:
    36fa:	ee 0f       	add	r30, r30
    36fc:	ff 1f       	adc	r31, r31
    36fe:	05 90       	lpm	r0, Z+
    3700:	f4 91       	lpm	r31, Z
    3702:	e0 2d       	mov	r30, r0
    3704:	09 94       	ijmp

00003706 <eeprom_read_byte>:
    3706:	f9 99       	sbic	0x1f, 1	; 31
    3708:	fe cf       	rjmp	.-4      	; 0x3706 <eeprom_read_byte>
    370a:	92 bd       	out	0x22, r25	; 34
    370c:	81 bd       	out	0x21, r24	; 33
    370e:	f8 9a       	sbi	0x1f, 0	; 31
    3710:	99 27       	eor	r25, r25
    3712:	80 b5       	in	r24, 0x20	; 32
    3714:	08 95       	ret

00003716 <eeprom_read_dword>:
    3716:	a6 e1       	ldi	r26, 0x16	; 22
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	44 e0       	ldi	r20, 0x04	; 4
    371c:	50 e0       	ldi	r21, 0x00	; 0
    371e:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <eeprom_read_blraw>

00003722 <eeprom_update_byte>:
    3722:	26 2f       	mov	r18, r22

00003724 <eeprom_update_r18>:
    3724:	f9 99       	sbic	0x1f, 1	; 31
    3726:	fe cf       	rjmp	.-4      	; 0x3724 <eeprom_update_r18>
    3728:	92 bd       	out	0x22, r25	; 34
    372a:	81 bd       	out	0x21, r24	; 33
    372c:	f8 9a       	sbi	0x1f, 0	; 31
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	00 b4       	in	r0, 0x20	; 32
    3732:	02 16       	cp	r0, r18
    3734:	39 f0       	breq	.+14     	; 0x3744 <eeprom_update_r18+0x20>
    3736:	1f ba       	out	0x1f, r1	; 31
    3738:	20 bd       	out	0x20, r18	; 32
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	fa 9a       	sbi	0x1f, 2	; 31
    3740:	f9 9a       	sbi	0x1f, 1	; 31
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	08 95       	ret

00003746 <eeprom_update_dword>:
    3746:	03 96       	adiw	r24, 0x03	; 3
    3748:	27 2f       	mov	r18, r23
    374a:	0e 94 92 1b 	call	0x3724	; 0x3724 <eeprom_update_r18>
    374e:	0e 94 91 1b 	call	0x3722	; 0x3722 <eeprom_update_byte>
    3752:	25 2f       	mov	r18, r21
    3754:	0e 94 92 1b 	call	0x3724	; 0x3724 <eeprom_update_r18>
    3758:	24 2f       	mov	r18, r20
    375a:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <eeprom_update_r18>

0000375e <eeprom_read_block>:
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22

00003762 <eeprom_read_blraw>:
    3762:	fc 01       	movw	r30, r24
    3764:	f9 99       	sbic	0x1f, 1	; 31
    3766:	fe cf       	rjmp	.-4      	; 0x3764 <eeprom_read_blraw+0x2>
    3768:	06 c0       	rjmp	.+12     	; 0x3776 <eeprom_read_blraw+0x14>
    376a:	f2 bd       	out	0x22, r31	; 34
    376c:	e1 bd       	out	0x21, r30	; 33
    376e:	f8 9a       	sbi	0x1f, 0	; 31
    3770:	31 96       	adiw	r30, 0x01	; 1
    3772:	00 b4       	in	r0, 0x20	; 32
    3774:	0d 92       	st	X+, r0
    3776:	41 50       	subi	r20, 0x01	; 1
    3778:	50 40       	sbci	r21, 0x00	; 0
    377a:	b8 f7       	brcc	.-18     	; 0x376a <eeprom_read_blraw+0x8>
    377c:	08 95       	ret

0000377e <_exit>:
    377e:	f8 94       	cli

00003780 <__stop_program>:
    3780:	ff cf       	rjmp	.-2      	; 0x3780 <__stop_program>
