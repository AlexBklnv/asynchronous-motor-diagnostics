
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00004924  000049d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004924  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fb  008001e0  008001e0  00004ab8  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  00004ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b10  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000820  00000000  00000000  00004b50  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001133d  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d7a  00000000  00000000  000166ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004745  00000000  00000000  00019427  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015d0  00000000  00000000  0001db6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004093  00000000  00000000  0001f13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006058  00000000  00000000  000231cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000758  00000000  00000000  00029227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__ctors_end>
       4:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
       8:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
       c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      10:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      14:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      18:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      1c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      20:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      24:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      28:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      2c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      30:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      34:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      38:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      3c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      40:	0c 94 6c 22 	jmp	0x44d8	; 0x44d8 <__vector_16>
      44:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      48:	0c 94 ac 1f 	jmp	0x3f58	; 0x3f58 <__vector_18>
      4c:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__vector_19>
      50:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      54:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      58:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      5c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      60:	0c 94 95 19 	jmp	0x332a	; 0x332a <__vector_24>
      64:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
      68:	e9 07       	cpc	r30, r25
      6a:	28 07       	cpc	r18, r24
      6c:	2e 07       	cpc	r18, r30
      6e:	2b 07       	cpc	r18, r27
      70:	31 07       	cpc	r19, r17
      72:	34 07       	cpc	r19, r20
      74:	37 07       	cpc	r19, r23
      76:	3a 07       	cpc	r19, r26
      78:	3d 07       	cpc	r19, r29
      7a:	40 07       	cpc	r20, r16
      7c:	fb 07       	cpc	r31, r27
      7e:	fb 07       	cpc	r31, r27
      80:	fb 07       	cpc	r31, r27
      82:	43 07       	cpc	r20, r19
      84:	6a 07       	cpc	r22, r26
      86:	91 07       	cpc	r25, r17
      88:	fb 07       	cpc	r31, r27
      8a:	be 07       	cpc	r27, r30
      8c:	c1 07       	cpc	r28, r17
      8e:	c4 07       	cpc	r28, r20
      90:	cc 07       	cpc	r28, r28
      92:	cf 07       	cpc	r28, r31
      94:	d2 07       	cpc	r29, r18
      96:	fb 07       	cpc	r31, r27
      98:	fb 07       	cpc	r31, r27
      9a:	fb 07       	cpc	r31, r27
      9c:	fb 07       	cpc	r31, r27
      9e:	fb 07       	cpc	r31, r27
      a0:	fb 07       	cpc	r31, r27
      a2:	fb 07       	cpc	r31, r27
      a4:	da 07       	cpc	r29, r26
      a6:	5e 09       	sbc	r21, r14
      a8:	7c 09       	sbc	r23, r12
      aa:	7c 09       	sbc	r23, r12
      ac:	cd 09       	sbc	r28, r13
      ae:	cd 09       	sbc	r28, r13
      b0:	cd 09       	sbc	r28, r13
      b2:	cd 09       	sbc	r28, r13
      b4:	cd 09       	sbc	r28, r13
      b6:	cd 09       	sbc	r28, r13
      b8:	7e 09       	sbc	r23, r14
      ba:	de 0a       	sbc	r13, r30
      bc:	de 0a       	sbc	r13, r30
      be:	f9 09       	sbc	r31, r9
      c0:	11 0a       	sbc	r1, r17
      c2:	29 0a       	sbc	r2, r25
      c4:	51 0a       	sbc	r5, r17
      c6:	d0 0a       	sbc	r13, r16
      c8:	d2 0a       	sbc	r13, r18
      ca:	d4 0a       	sbc	r13, r20
      cc:	d7 0a       	sbc	r13, r23
      ce:	d9 0a       	sbc	r13, r25
      d0:	db 0a       	sbc	r13, r27
      d2:	bb 0f       	add	r27, r27
      d4:	ce 0f       	add	r28, r30
      d6:	be 0f       	add	r27, r30
      d8:	d1 0f       	add	r29, r17
      da:	da 0f       	add	r29, r26
      dc:	e3 0f       	add	r30, r19
      de:	ec 0f       	add	r30, r28
      e0:	f5 0f       	add	r31, r21
      e2:	fe 0f       	add	r31, r30
      e4:	41 14       	cp	r4, r1
      e6:	6d 14       	cp	r6, r13
      e8:	58 14       	cp	r5, r8
      ea:	a3 14       	cp	r10, r3
      ec:	b6 14       	cp	r11, r6
      ee:	c9 14       	cp	r12, r9
      f0:	dc 14       	cp	r13, r12
      f2:	ef 14       	cp	r14, r15
      f4:	02 15       	cp	r16, r2
      f6:	80 14       	cp	r8, r0

000000f8 <__trampolines_end>:
      f8:	47 41       	sbci	r20, 0x17	; 23
      fa:	49 4e       	sbci	r20, 0xE9	; 233
      fc:	5f 54       	subi	r21, 0x4F	; 79
      fe:	57 4f       	sbci	r21, 0xF7	; 247
     100:	54 48       	sbci	r21, 0x84	; 132
     102:	49 52       	subi	r20, 0x29	; 41
     104:	44 53       	subi	r20, 0x34	; 52
	...

00000107 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_4>:
     107:	47 41 49 4e 5f 53 49 58 54 45 45 4e 00              GAIN_SIXTEEN.

00000114 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_3>:
     114:	47 41 49 4e 5f 45 49 47 48 54 00                    GAIN_EIGHT.

0000011f <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_2>:
     11f:	47 41 49 4e 5f 46 4f 55 52 00                       GAIN_FOUR.

00000129 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_1>:
     129:	47 41 49 4e 5f 54 57 4f 00                          GAIN_TWO.

00000132 <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c_0>:
     132:	47 41 49 4e 5f 4f 4e 45 00                          GAIN_ONE.

0000013b <_ZZ17setAdsGainByIndexP16Adafruit_ADS1115hE3__c>:
     13b:	41 44 53 3a 20 00                                   ADS: .

00000141 <_ZZ21button2LongPressStartvE3__c>:
     141:	7c 2d 6d 73 3d 30 2d 7c 00                          |-ms=0-|.

0000014a <_ZZ21button1LongPressStartvE3__c>:
     14a:	49 6d 70 65 64 61 6e 63 65 20 73 65 74 75 70 00     Impedance setup.

0000015a <_ZZ12button1ClickvE3__c>:
     15a:	7c 2d 6d 73 3d 31 2d 7c 00                          |-ms=1-|.

00000163 <_ZZ14setupImpedancevE3__c_8>:
     163:	2d 2d 2d 65 6e 64 2d 2d 2d 00                       ---end---.

0000016d <_ZZ14setupImpedancevE3__c_7>:
     16d:	2d 7c 00                                            -|.

00000170 <_ZZ14setupImpedancevE3__c_6>:
     170:	3d 00                                               =.

00000172 <_ZZ14setupImpedancevE3__c_5>:
     172:	7c 3d 69 69 00                                      |=ii.

00000177 <_ZZ14setupImpedancevE3__c_4>:
     177:	2d 7c 00                                            -|.

0000017a <_ZZ14setupImpedancevE3__c_3>:
     17a:	3d 00                                               =.

0000017c <_ZZ14setupImpedancevE3__c_2>:
     17c:	7c 3d 69 61 00                                      |=ia.

00000181 <_ZZ14setupImpedancevE3__c_1>:
     181:	2d 7c 00                                            -|.

00000184 <_ZZ14setupImpedancevE3__c_0>:
     184:	3d 00                                               =.

00000186 <_ZZ14setupImpedancevE3__c>:
     186:	7c 3d 69 76 00                                      |=iv.

0000018b <_ZZ12lcdClearCellhhhE3__c>:
     18b:	20 00                                                .

0000018d <_ZZ22showStaticWindingCharsvE3__c_1>:
     18d:	45 3d 00                                            E=.

00000190 <_ZZ22showStaticWindingCharsvE3__c_0>:
     190:	56 3d 00                                            V=.

00000193 <_ZZ22showStaticWindingCharsvE3__c>:
     193:	49 3d 00                                            I=.

00000196 <_ZZ22showWindingCharsValueshE3__c_0>:
     196:	25 00                                               %.

00000198 <_ZZ22showWindingCharsValueshE3__c>:
     198:	2b 00                                               +.

0000019a <_ZZ18showStaticAmperagevE3__c_0>:
     19a:	4d 00                                               M.

0000019c <_ZZ18showStaticAmperagevE3__c>:
     19c:	50 00                                               P.

0000019e <_ZZ19displayStaticAsModevE3__c_26>:
     19e:	53 65 74 75 70 20 72 65 71 75 69 72 65 64 00        Setup required.

000001ad <_ZZ19displayStaticAsModevE3__c_25>:
     1ad:	4f 6f 6f 6f 70 73 21 00                             Oooops!.

000001b5 <_ZZ19displayStaticAsModevE3__c_24>:
     1b5:	42 31 3d 77 6f 72 6b 3b 20 42 32 3d 73 74 6f 70     B1=work; B2=stop
	...

000001c6 <_ZZ19displayStaticAsModevE3__c_23>:
     1c6:	4d 65 61 73 75 72 65 6d 65 6e 74 00                 Measurement.

000001d2 <_ZZ19displayStaticAsModevE3__c_22>:
     1d2:	41 43 00                                            AC.

000001d5 <_ZZ19displayStaticAsModevE3__c_21>:
     1d5:	42 43 00                                            BC.

000001d8 <_ZZ19displayStaticAsModevE3__c_20>:
     1d8:	41 42 00                                            AB.

000001db <_ZZ19displayStaticAsModevE3__c_19>:
     1db:	41 43 20 44 00                                      AC D.

000001e0 <_ZZ19displayStaticAsModevE3__c_18>:
     1e0:	42 43 20 44 00                                      BC D.

000001e5 <_ZZ19displayStaticAsModevE3__c_17>:
     1e5:	41 42 20 44 00                                      AB D.

000001ea <_ZZ19displayStaticAsModevE3__c_16>:
     1ea:	46 00                                               F.

000001ec <_ZZ19displayStaticAsModevE3__c_15>:
     1ec:	65 25 00                                            e%.

000001ef <_ZZ19displayStaticAsModevE3__c_14>:
     1ef:	49 33 3d 00                                         I3=.

000001f3 <_ZZ19displayStaticAsModevE3__c_13>:
     1f3:	49 32 3d 00                                         I2=.

000001f7 <_ZZ19displayStaticAsModevE3__c_12>:
     1f7:	49 31 3d 00                                         I1=.

000001fb <_ZZ19displayStaticAsModevE3__c_11>:
     1fb:	41 43 3d 00                                         AC=.

000001ff <_ZZ19displayStaticAsModevE3__c_10>:
     1ff:	42 43 3d 00                                         BC=.

00000203 <_ZZ19displayStaticAsModevE3__c_9>:
     203:	41 42 3d 00                                         AB=.

00000207 <_ZZ19displayStaticAsModevE3__c_8>:
     207:	45 43 6f 75 6e 74 00                                ECount.

0000020e <_ZZ19displayStaticAsModevE3__c_7>:
     20e:	41 6d 20 41 43 00                                   Am AC.

00000214 <_ZZ19displayStaticAsModevE3__c_6>:
     214:	41 6d 20 42 43 00                                   Am BC.

0000021a <_ZZ19displayStaticAsModevE3__c_5>:
     21a:	41 6d 20 41 42 00                                   Am AB.

00000220 <_ZZ19displayStaticAsModevE3__c_4>:
     220:	56 6d 20 41 43 00                                   Vm AC.

00000226 <_ZZ19displayStaticAsModevE3__c_3>:
     226:	56 6d 20 42 43 00                                   Vm BC.

0000022c <_ZZ19displayStaticAsModevE3__c_2>:
     22c:	56 6d 20 41 42 00                                   Vm AB.

00000232 <_ZZ19displayStaticAsModevE3__c_1>:
     232:	56 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     V gain maxV/step
	...

00000243 <_ZZ19displayStaticAsModevE3__c_0>:
     243:	41 20 67 61 69 6e 20 6d 61 78 56 2f 73 74 65 70     A gain maxV/step
	...

00000254 <_ZZ19displayStaticAsModevE3__c>:
     254:	43 6f 6e 74 72 6f 6c 20 65 6e 67 69 6e 65 3f 00     Control engine?.

00000264 <_ZZ19lcdPrintCriticalLvlhE3__c>:
     264:	2b 00                                               +.

00000266 <_ZZ27lcdPrinRoundedCurErrorLevelhE3__c>:
     266:	2b 00                                               +.

00000268 <_ZZ20lcdPrintAmperageDiffhE3__c>:
     268:	2b 00                                               +.

0000026a <_ZZ13displayAsModevE3__c_10>:
     26a:	23 00                                               #.

0000026c <_ZZ13displayAsModevE3__c_9>:
     26c:	23 00                                               #.

0000026e <_ZZ13displayAsModevE3__c_8>:
     26e:	4d 20 00                                            M .

00000271 <_ZZ13displayAsModevE3__c_7>:
     271:	23 00                                               #.

00000273 <_ZZ13displayAsModevE3__c_6>:
     273:	23 00                                               #.

00000275 <_ZZ13displayAsModevE3__c_5>:
     275:	50 20 00                                            P .

00000278 <_ZZ13displayAsModevE3__c_4>:
     278:	78 00                                               x.

0000027a <_ZZ13displayAsModevE3__c_3>:
     27a:	52 33 3d 00                                         R3=.

0000027e <_ZZ13displayAsModevE3__c_2>:
     27e:	52 32 3d 00                                         R2=.

00000282 <_ZZ13displayAsModevE3__c_1>:
     282:	52 31 3d 00                                         R1=.

00000286 <_ZZ13displayAsModevE3__c_0>:
     286:	4e 6f 00                                            No.

00000289 <_ZZ13displayAsModevE3__c>:
     289:	59 65 73 00                                         Yes.

0000028d <_ZZ12showGainInfovE3__c_4>:
     28d:	30 2e 32 35 36 20 30 2e 30 30 37 38 31 32 35 00     0.256 0.0078125.

0000029d <_ZZ12showGainInfovE3__c_3>:
     29d:	30 2e 35 31 32 20 30 2e 30 31 35 36 32 35 00        0.512 0.015625.

000002ac <_ZZ12showGainInfovE3__c_2>:
     2ac:	31 2e 30 32 34 20 30 2e 30 33 31 32 35 00           1.024 0.03125.

000002ba <_ZZ12showGainInfovE3__c_1>:
     2ba:	32 2e 30 34 38 20 30 2e 30 36 32 35 00              2.048 0.0625.

000002c7 <_ZZ12showGainInfovE3__c_0>:
     2c7:	34 2e 30 39 36 20 30 2e 31 32 35 00                 4.096 0.125.

000002d3 <_ZZ12showGainInfovE3__c>:
     2d3:	36 2e 31 34 34 20 30 2e 31 38 37 35 00              6.144 0.1875.

000002e0 <_ZZ4loopE3__c_28>:
     2e0:	7c 2d 69 63 3d 30 2d 7c 00                          |-ic=0-|.

000002e9 <_ZZ4loopE3__c_27>:
     2e9:	7c 2d 69 63 3d 32 2d 7c 00                          |-ic=2-|.

000002f2 <_ZZ4loopE3__c_26>:
     2f2:	7c 2d 69 63 3d 31 2d 7c 00                          |-ic=1-|.

000002fb <_ZZ4loopE3__c_25>:
     2fb:	2d 2d 2d 65 6e 64 2d 2d 2d 00                       ---end---.

00000305 <_ZZ4loopE3__c_24>:
     305:	2d 7c 00                                            -|.

00000308 <_ZZ4loopE3__c_23>:
     308:	7c 2d 66 65 3d 00                                   |-fe=.

0000030e <_ZZ4loopE3__c_22>:
     30e:	2d 7c 00                                            -|.

00000311 <_ZZ4loopE3__c_21>:
     311:	3d 00                                               =.

00000313 <_ZZ4loopE3__c_20>:
     313:	65 63 00                                            ec.

00000316 <_ZZ4loopE3__c_19>:
     316:	7c 2d 77 00                                         |-w.

0000031a <_ZZ4loopE3__c_18>:
     31a:	2d 7c 00                                            -|.

0000031d <_ZZ4loopE3__c_17>:
     31d:	3d 00                                               =.

0000031f <_ZZ4loopE3__c_16>:
     31f:	65 64 00                                            ed.

00000322 <_ZZ4loopE3__c_15>:
     322:	7c 2d 77 00                                         |-w.

00000326 <_ZZ4loopE3__c_14>:
     326:	2d 7c 00                                            -|.

00000329 <_ZZ4loopE3__c_13>:
     329:	3d 00                                               =.

0000032b <_ZZ4loopE3__c_12>:
     32b:	65 6c 00                                            el.

0000032e <_ZZ4loopE3__c_11>:
     32e:	7c 2d 77 00                                         |-w.

00000332 <_ZZ4loopE3__c_10>:
     332:	2d 7c 00                                            -|.

00000335 <_ZZ4loopE3__c_9>:
     335:	3d 00                                               =.

00000337 <_ZZ4loopE3__c_8>:
     337:	70 61 00                                            pa.

0000033a <_ZZ4loopE3__c_7>:
     33a:	7c 2d 77 00                                         |-w.

0000033e <_ZZ4loopE3__c_6>:
     33e:	2d 7c 00                                            -|.

00000341 <_ZZ4loopE3__c_5>:
     341:	3d 00                                               =.

00000343 <_ZZ4loopE3__c_4>:
     343:	6d 61 00                                            ma.

00000346 <_ZZ4loopE3__c_3>:
     346:	7c 2d 77 00                                         |-w.

0000034a <_ZZ4loopE3__c_2>:
     34a:	2d 7c 00                                            -|.

0000034d <_ZZ4loopE3__c_1>:
     34d:	3d 00                                               =.

0000034f <_ZZ4loopE3__c_0>:
     34f:	6d 76 00                                            mv.

00000352 <_ZZ4loopE3__c>:
     352:	7c 2d 77 00                                         |-w.

00000356 <_ZZ18checkIsReadyToWorkvE3__c>:
     356:	7c 2d 4e 65 65 64 20 73 65 74 75 70 20 70 61 72     |-Need setup par
     366:	61 6d 73 2d 7c 00                                   ams-|.

0000036c <_ZZ5setupE3__c_31>:
     36c:	53 74 61 6e 64 20 62 79 2e 2e 2e 00                 Stand by....

00000378 <_ZZ5setupE3__c_30>:
     378:	43 6f 6d 70 6c 65 74 65 64 21 00                    Completed!.

00000383 <_ZZ5setupE3__c_29>:
     383:	7c 2d 44 65 62 75 67 20 6d 6f 64 65 2d 7c 00        |-Debug mode-|.

00000392 <_ZZ5setupE3__c_28>:
     392:	2d 7c 00                                            -|.

00000395 <_ZZ5setupE3__c_27>:
     395:	7c 2d 73 61 6d 63 00                                |-samc.

0000039c <_ZZ5setupE3__c_26>:
     39c:	2d 7c 00                                            -|.

0000039f <_ZZ5setupE3__c_25>:
     39f:	7c 2d 73 61 6d 62 00                                |-samb.

000003a6 <_ZZ5setupE3__c_24>:
     3a6:	2d 7c 00                                            -|.

000003a9 <_ZZ5setupE3__c_23>:
     3a9:	7c 2d 73 61 6d 61 00                                |-sama.

000003b0 <_ZZ5setupE3__c_22>:
     3b0:	2d 7c 00                                            -|.

000003b3 <_ZZ5setupE3__c_21>:
     3b3:	7c 2d 73 76 6d 63 00                                |-svmc.

000003ba <_ZZ5setupE3__c_20>:
     3ba:	2d 7c 00                                            -|.

000003bd <_ZZ5setupE3__c_19>:
     3bd:	7c 2d 73 76 6d 62 00                                |-svmb.

000003c4 <_ZZ5setupE3__c_18>:
     3c4:	2d 7c 00                                            -|.

000003c7 <_ZZ5setupE3__c_17>:
     3c7:	7c 2d 73 76 6d 61 00                                |-svma.

000003ce <_ZZ5setupE3__c_16>:
     3ce:	2d 7c 00                                            -|.

000003d1 <_ZZ5setupE3__c_15>:
     3d1:	7c 2d 73 69 63 00                                   |-sic.

000003d7 <_ZZ5setupE3__c_14>:
     3d7:	2d 7c 00                                            -|.

000003da <_ZZ5setupE3__c_13>:
     3da:	7c 2d 73 69 62 00                                   |-sib.

000003e0 <_ZZ5setupE3__c_12>:
     3e0:	2d 7c 00                                            -|.

000003e3 <_ZZ5setupE3__c_11>:
     3e3:	7c 2d 73 69 61 00                                   |-sia.

000003e9 <_ZZ5setupE3__c_10>:
     3e9:	2d 7c 00                                            -|.

000003ec <_ZZ5setupE3__c_9>:
     3ec:	7c 2d 73 6d 72 20 00                                |-smr .

000003f3 <_ZZ5setupE3__c_8>:
     3f3:	2d 7c 00                                            -|.

000003f6 <_ZZ5setupE3__c_7>:
     3f6:	7c 2d 73 67 76 3d 00                                |-sgv=.

000003fd <_ZZ5setupE3__c_6>:
     3fd:	2d 7c 00                                            -|.

00000400 <_ZZ5setupE3__c_5>:
     400:	7c 2d 73 67 61 3d 00                                |-sga=.

00000407 <_ZZ5setupE3__c_4>:
     407:	45 45 50 52 4f 4d 20 76 61 6c 75 65 73 3a 00        EEPROM values:.

00000416 <_ZZ5setupE3__c_3>:
     416:	45 45 50 52 4f 4d 20 66 69 72 73 74 20 73 74 61     EEPROM first sta
     426:	72 74 20 77 72 69 74 65 64 21 00                    rt writed!.

00000431 <_ZZ5setupE3__c_2>:
     431:	42 75 74 74 6f 6e 20 32 20 69 6e 69 74 65 64 21     Button 2 inited!
	...

00000442 <_ZZ5setupE3__c_1>:
     442:	42 75 74 74 6f 6e 20 31 20 69 6e 69 74 65 64 21     Button 1 inited!
	...

00000453 <_ZZ5setupE3__c_0>:
     453:	4c 43 44 20 69 6e 69 74 65 64 21 00                 LCD inited!.

0000045f <_ZZ5setupE3__c>:
     45f:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 2e 2e     Initialization..
     46f:	2e 00                                               ..

00000471 <digital_pin_to_timer_PGM>:
     471:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     481:	00 00 00 00                                         ....

00000485 <digital_pin_to_bit_mask_PGM>:
     485:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     495:	04 08 10 20                                         ... 

00000499 <digital_pin_to_port_PGM>:
     499:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4a9:	03 03 03 03                                         ....

000004ad <port_to_input_PGM>:
     4ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000004b7 <port_to_output_PGM>:
     4b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004c1 <port_to_mode_PGM>:
     4c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000004cc <__ctors_start>:
     4cc:	6d 15       	cp	r22, r13
     4ce:	29 1c       	adc	r2, r9
     4d0:	0e 20       	and	r0, r14

000004d2 <__ctors_end>:
     4d2:	11 24       	eor	r1, r1
     4d4:	1f be       	out	0x3f, r1	; 63
     4d6:	cf ef       	ldi	r28, 0xFF	; 255
     4d8:	d8 e0       	ldi	r29, 0x08	; 8
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	cd bf       	out	0x3d, r28	; 61

000004de <__do_copy_data>:
     4de:	11 e0       	ldi	r17, 0x01	; 1
     4e0:	a0 e0       	ldi	r26, 0x00	; 0
     4e2:	b1 e0       	ldi	r27, 0x01	; 1
     4e4:	e4 e2       	ldi	r30, 0x24	; 36
     4e6:	f9 e4       	ldi	r31, 0x49	; 73
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__do_copy_data+0x10>
     4ea:	05 90       	lpm	r0, Z+
     4ec:	0d 92       	st	X+, r0
     4ee:	a0 3e       	cpi	r26, 0xE0	; 224
     4f0:	b1 07       	cpc	r27, r17
     4f2:	d9 f7       	brne	.-10     	; 0x4ea <__do_copy_data+0xc>

000004f4 <__do_clear_bss>:
     4f4:	23 e0       	ldi	r18, 0x03	; 3
     4f6:	a0 ee       	ldi	r26, 0xE0	; 224
     4f8:	b1 e0       	ldi	r27, 0x01	; 1
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <.do_clear_bss_start>

000004fc <.do_clear_bss_loop>:
     4fc:	1d 92       	st	X+, r1

000004fe <.do_clear_bss_start>:
     4fe:	ab 3d       	cpi	r26, 0xDB	; 219
     500:	b2 07       	cpc	r27, r18
     502:	e1 f7       	brne	.-8      	; 0x4fc <.do_clear_bss_loop>

00000504 <__do_global_ctors>:
     504:	12 e0       	ldi	r17, 0x02	; 2
     506:	c9 e6       	ldi	r28, 0x69	; 105
     508:	d2 e0       	ldi	r29, 0x02	; 2
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__do_global_ctors+0x10>
     50c:	21 97       	sbiw	r28, 0x01	; 1
     50e:	fe 01       	movw	r30, r28
     510:	0e 94 4e 24 	call	0x489c	; 0x489c <__tablejump2__>
     514:	c6 36       	cpi	r28, 0x66	; 102
     516:	d1 07       	cpc	r29, r17
     518:	c9 f7       	brne	.-14     	; 0x50c <__do_global_ctors+0x8>
     51a:	0e 94 3c 20 	call	0x4078	; 0x4078 <main>
     51e:	0c 94 90 24 	jmp	0x4920	; 0x4920 <_exit>

00000522 <__bad_interrupt>:
     522:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000526 <_Z18checkIsReadyToWorkv>:
}

/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cc ef       	ldi	r28, 0xFC	; 252
     52c:	d1 e0       	ldi	r29, 0x01	; 1
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
     52e:	69 91       	ld	r22, Y+
     530:	79 91       	ld	r23, Y+
     532:	89 91       	ld	r24, Y+
     534:	99 91       	ld	r25, Y+
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	a9 01       	movw	r20, r18
     53c:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
     540:	88 23       	and	r24, r24
     542:	e1 f0       	breq	.+56     	; 0x57c <_Z18checkIsReadyToWorkv+0x56>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	a9 01       	movw	r20, r18
     54a:	6f 89       	ldd	r22, Y+23	; 0x17
     54c:	78 8d       	ldd	r23, Y+24	; 0x18
     54e:	89 8d       	ldd	r24, Y+25	; 0x19
     550:	9a 8d       	ldd	r25, Y+26	; 0x1a
     552:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
     556:	88 23       	and	r24, r24
     558:	89 f0       	breq	.+34     	; 0x57c <_Z18checkIsReadyToWorkv+0x56>
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	a9 01       	movw	r20, r18
     560:	6b 85       	ldd	r22, Y+11	; 0x0b
     562:	7c 85       	ldd	r23, Y+12	; 0x0c
     564:	8d 85       	ldd	r24, Y+13	; 0x0d
     566:	9e 85       	ldd	r25, Y+14	; 0x0e
     568:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
     56c:	88 23       	and	r24, r24
     56e:	31 f0       	breq	.+12     	; 0x57c <_Z18checkIsReadyToWorkv+0x56>
/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
	bool isReadyToWork = true;
	for(byte i = 0; i < 3; i++) {
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	c8 30       	cpi	r28, 0x08	; 8
     574:	d8 07       	cpc	r29, r24
     576:	d9 f6       	brne	.-74     	; 0x52e <_Z18checkIsReadyToWorkv+0x8>

/*
	Проверка на первый старт и необходимость настреок перед стартом работы
*/
void checkIsReadyToWork() {
	bool isReadyToWork = true;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	01 c0       	rjmp	.+2      	; 0x57e <_Z18checkIsReadyToWorkv+0x58>
	for(byte i = 0; i < 3; i++) {
		if (settings.impedance[i] == 0 || settings.multiplierAmperage[i] == 0 || settings.multiplierVoltage[i] == 0) {
			isReadyToWork = false;
     57c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
		
	settings.isSetupMode = false;
     57e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <settings+0xd>
	if (isReadyToWork) {
     582:	88 23       	and	r24, r24
     584:	31 f0       	breq	.+12     	; 0x592 <_Z18checkIsReadyToWorkv+0x6c>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
     586:	8e e1       	ldi	r24, 0x1E	; 30
     588:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("|-Need setup params-|"));
	}
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret
		
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
     592:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <modeWork>
		Serial.println(F("|-Need setup params-|"));
     596:	66 e5       	ldi	r22, 0x56	; 86
     598:	73 e0       	ldi	r23, 0x03	; 3
     59a:	85 e3       	ldi	r24, 0x35	; 53
     59c:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
	settings.isSetupMode = false;
	if (isReadyToWork) {
		modeWork.current = MW_CONTROLL_MEASUREMENT;
	} else {
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("|-Need setup params-|"));
     5a2:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>

000005a6 <_Z11initAvgVarsv>:
}

/*
	Обнуление переменных - средние значения характеристик и сбрасываем счетчик измерений
*/
void initAvgVars() {
     5a6:	e3 e7       	ldi	r30, 0x73	; 115
     5a8:	f1 e0       	ldi	r31, 0x01	; 1
	for (byte i = 0; i < 3; i++) {
		adsChars.sumVoltage[i] = 0;
     5aa:	11 92       	st	Z+, r1
     5ac:	11 92       	st	Z+, r1
     5ae:	11 92       	st	Z+, r1
     5b0:	11 92       	st	Z+, r1
		adsChars.sumMeasuredAmperage[i] = 0;
     5b2:	10 86       	std	Z+8, r1	; 0x08
     5b4:	11 86       	std	Z+9, r1	; 0x09
     5b6:	12 86       	std	Z+10, r1	; 0x0a
     5b8:	13 86       	std	Z+11, r1	; 0x0b

/*
	Обнуление переменных - средние значения характеристик и сбрасываем счетчик измерений
*/
void initAvgVars() {
	for (byte i = 0; i < 3; i++) {
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	ef 37       	cpi	r30, 0x7F	; 127
     5be:	f8 07       	cpc	r31, r24
     5c0:	a1 f7       	brne	.-24     	; 0x5aa <_Z11initAvgVarsv+0x4>
		adsChars.sumVoltage[i] = 0;
		adsChars.sumMeasuredAmperage[i] = 0;
	}
	adsChars.currentMeasurement = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <adsChars+0x3d>
     5c8:	08 95       	ret

000005ca <_Z12button1Clickv>:
}

/*
	Обработчика короткого клика первой клавиши
*/
void button1Click() {
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
	// Если мы в настройках сопротивления то ничего не делать
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
     5d6:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
     5da:	8a 30       	cpi	r24, 0x0A	; 10
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <_Z12button1Clickv+0x16>
     5de:	83 c0       	rjmp	.+262    	; 0x6e6 <_Z12button1Clickv+0x11c>
		return;
	}
	// Если мы в любых других настройках
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
     5e0:	9f ef       	ldi	r25, 0xFF	; 255
     5e2:	98 0f       	add	r25, r24
     5e4:	9a 30       	cpi	r25, 0x0A	; 10
     5e6:	08 f0       	brcs	.+2      	; 0x5ea <_Z12button1Clickv+0x20>
     5e8:	56 c0       	rjmp	.+172    	; 0x696 <_Z12button1Clickv+0xcc>
		lcdUpdateScreen = true;
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_MANIPULATE_RELAY) {
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	19 f5       	brne	.+70     	; 0x63a <_Z12button1Clickv+0x70>
			// Режим выбора подключения обмотки - изменяем его
			setDigit.value = setDigit.value == 1? 0: 1;
     5f4:	c1 e0       	ldi	r28, 0x01	; 1
     5f6:	d0 e0       	ldi	r29, 0x00	; 0
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e8       	ldi	r20, 0x80	; 128
     5fe:	5f e3       	ldi	r21, 0x3F	; 63
     600:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
     604:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
     608:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
     60c:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
     610:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
     614:	81 11       	cpse	r24, r1
     616:	02 c0       	rjmp	.+4      	; 0x61c <_Z12button1Clickv+0x52>
     618:	c0 e0       	ldi	r28, 0x00	; 0
     61a:	d0 e0       	ldi	r29, 0x00	; 0
     61c:	be 01       	movw	r22, r28
     61e:	dd 0f       	add	r29, r29
     620:	88 0b       	sbc	r24, r24
     622:	99 0b       	sbc	r25, r25
     624:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__floatsisf>
     628:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <setDigit>
     62c:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <setDigit+0x1>
     630:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <setDigit+0x2>
     634:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <setDigit+0x3>
     638:	56 c0       	rjmp	.+172    	; 0x6e6 <_Z12button1Clickv+0x11c>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в большую сторону
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			// Любой другой режим увеличиваем значение на величину curMultiplier
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     63a:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <setDigit+0x4>
     63e:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <setDigit+0x5>
     642:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <setDigit+0x6>
     646:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <setDigit+0x7>
     64a:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
     64e:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
     652:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
     656:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
     65a:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
     65e:	6b 01       	movw	r12, r22
     660:	7c 01       	movw	r14, r24
			if (setDigit.value >= 1000) {
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	4a e7       	ldi	r20, 0x7A	; 122
     668:	54 e4       	ldi	r21, 0x44	; 68
     66a:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     66e:	87 ff       	sbrs	r24, 7
     670:	09 c0       	rjmp	.+18     	; 0x684 <_Z12button1Clickv+0xba>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в большую сторону
			setDigit.value = setDigit.value == 5? 0: setDigit.value + 1;
		} else {
			// Любой другой режим увеличиваем значение на величину curMultiplier
			setDigit.value = setDigit.value + setDigit.curMultiplier;
     672:	c0 92 f3 01 	sts	0x01F3, r12	; 0x8001f3 <setDigit>
     676:	d0 92 f4 01 	sts	0x01F4, r13	; 0x8001f4 <setDigit+0x1>
     67a:	e0 92 f5 01 	sts	0x01F5, r14	; 0x8001f5 <setDigit+0x2>
     67e:	f0 92 f6 01 	sts	0x01F6, r15	; 0x8001f6 <setDigit+0x3>
     682:	31 c0       	rjmp	.+98     	; 0x6e6 <_Z12button1Clickv+0x11c>
			if (setDigit.value >= 1000) {
				setDigit.value = 0;
     684:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <setDigit>
     688:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <setDigit+0x1>
     68c:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <setDigit+0x2>
     690:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <setDigit+0x3>
     694:	28 c0       	rjmp	.+80     	; 0x6e6 <_Z12button1Clickv+0x11c>
		}
		return;	
	}
	
	// В режиме отображения данных листаем вперед меню
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
     696:	93 ef       	ldi	r25, 0xF3	; 243
     698:	98 0f       	add	r25, r24
     69a:	9a 30       	cpi	r25, 0x0A	; 10
     69c:	40 f4       	brcc	.+16     	; 0x6ae <_Z12button1Clickv+0xe4>
		modeWork.current = modeWork.current == MW_SHOWING_STOP? MW_SHOWING_START: modeWork.current + 1;
     69e:	86 31       	cpi	r24, 0x16	; 22
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <_Z12button1Clickv+0xdc>
     6a2:	8f 5f       	subi	r24, 0xFF	; 255
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <_Z12button1Clickv+0xde>
     6a6:	8d e0       	ldi	r24, 0x0D	; 13
     6a8:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
		return;
     6ac:	1c c0       	rjmp	.+56     	; 0x6e6 <_Z12button1Clickv+0x11c>
	}
	
	// Если вопрос о начале измерений, то клик его подтверждает
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
     6ae:	8e 31       	cpi	r24, 0x1E	; 30
     6b0:	d1 f4       	brne	.+52     	; 0x6e6 <_Z12button1Clickv+0x11c>
		modeWork.current = MW_SHOWING_START;
     6b2:	8d e0       	ldi	r24, 0x0D	; 13
     6b4:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
		settings.isReadyToWork = MM_WORK;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <settings>
		icError.hasIC = false;
     6be:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_start+0x16>
		digitalWrite(RELAY, LOW);
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	81 e1       	ldi	r24, 0x11	; 17
     6c6:	0e 94 ce 23 	call	0x479c	; 0x479c <digitalWrite>
		
		Serial.println(F("|-ms=1-|"));
     6ca:	6a e5       	ldi	r22, 0x5A	; 90
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	85 e3       	ldi	r24, 0x35	; 53
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
		initAvgVars();
		return;
	}
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
		settings.isReadyToWork = MM_WORK;
		icError.hasIC = false;
		digitalWrite(RELAY, LOW);
		
		Serial.println(F("|-ms=1-|"));
		initAvgVars();
     6e2:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_Z11initAvgVarsv>
		return;
	}
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	08 95       	ret

000006f4 <_Z19getICLevelByWindingh>:
/*
	Получения степени отклонения силы тока идеального от измеренного по обмотке
	_amperage - измеренное значение тока
	_num - номер обмотки
*/
float getICLevelByWinding(byte _num) {
     6f4:	8f 92       	push	r8
     6f6:	9f 92       	push	r9
     6f8:	af 92       	push	r10
     6fa:	bf 92       	push	r11
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
	if (adsChars.perfectAmperage[_num] >= adsChars.measuredAmperage[_num]) {
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	fc 01       	movw	r30, r24
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	e9 59       	subi	r30, 0x99	; 153
     712:	fe 4f       	sbci	r31, 0xFE	; 254
     714:	80 80       	ld	r8, Z
     716:	91 80       	ldd	r9, Z+1	; 0x01
     718:	a2 80       	ldd	r10, Z+2	; 0x02
     71a:	b3 80       	ldd	r11, Z+3	; 0x03
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	fc 01       	movw	r30, r24
     726:	e5 5a       	subi	r30, 0xA5	; 165
     728:	fe 4f       	sbci	r31, 0xFE	; 254
     72a:	c0 80       	ld	r12, Z
     72c:	d1 80       	ldd	r13, Z+1	; 0x01
     72e:	e2 80       	ldd	r14, Z+2	; 0x02
     730:	f3 80       	ldd	r15, Z+3	; 0x03
     732:	a7 01       	movw	r20, r14
     734:	96 01       	movw	r18, r12
     736:	c5 01       	movw	r24, r10
     738:	b4 01       	movw	r22, r8
     73a:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     73e:	87 ff       	sbrs	r24, 7
     740:	34 c0       	rjmp	.+104    	; 0x7aa <_Z19getICLevelByWindingh+0xb6>
		return 0;
	}
	return abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]) * 100.0 / ( adsChars.perfectAmperage[_num] + icError.criticalSingle);
     742:	a5 01       	movw	r20, r10
     744:	94 01       	movw	r18, r8
     746:	c7 01       	movw	r24, r14
     748:	b6 01       	movw	r22, r12
     74a:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
     74e:	6b 01       	movw	r12, r22
     750:	7c 01       	movw	r14, r24
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	a9 01       	movw	r20, r18
     758:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     75c:	18 16       	cp	r1, r24
     75e:	3c f4       	brge	.+14     	; 0x76e <_Z19getICLevelByWindingh+0x7a>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	48 ec       	ldi	r20, 0xC8	; 200
     766:	52 e4       	ldi	r21, 0x42	; 66
     768:	c7 01       	movw	r24, r14
     76a:	b6 01       	movw	r22, r12
     76c:	07 c0       	rjmp	.+14     	; 0x77c <_Z19getICLevelByWindingh+0x88>
     76e:	c7 01       	movw	r24, r14
     770:	b6 01       	movw	r22, r12
     772:	90 58       	subi	r25, 0x80	; 128
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	48 ec       	ldi	r20, 0xC8	; 200
     77a:	52 e4       	ldi	r21, 0x42	; 66
     77c:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
     780:	6b 01       	movw	r12, r22
     782:	7c 01       	movw	r14, r24
     784:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_start+0x1b>
     788:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <__data_start+0x1c>
     78c:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <__data_start+0x1d>
     790:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <__data_start+0x1e>
     794:	c5 01       	movw	r24, r10
     796:	b4 01       	movw	r22, r8
     798:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <_Z19getICLevelByWindingh+0xbc>
	_amperage - измеренное значение тока
	_num - номер обмотки
*/
float getICLevelByWinding(byte _num) {
	if (adsChars.perfectAmperage[_num] >= adsChars.measuredAmperage[_num]) {
		return 0;
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	cb 01       	movw	r24, r22
	}
	return abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]) * 100.0 / ( adsChars.perfectAmperage[_num] + icError.criticalSingle);
}
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	9f 90       	pop	r9
     7be:	8f 90       	pop	r8
     7c0:	08 95       	ret

000007c2 <_Z19isSingleErrorExistsffh>:
 * Ошибка проверяется только при положительных разностях
 * _amperage - массив измеренных токов
 * _voltage - массив измеренных напряжений
 * index - индекс
*/
bool isSingleErrorExists(float _amperage, float _voltage, byte index) {
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	6b 01       	movw	r12, r22
     7ce:	7c 01       	movw	r14, r24
     7d0:	ca 01       	movw	r24, r20
     7d2:	b9 01       	movw	r22, r18
	// высчитываем идеальный ток и отнимаем измеренный
	float divAmperage = _amperage - (_voltage / settings.impedance[index]);
     7d4:	24 e0       	ldi	r18, 0x04	; 4
     7d6:	02 9f       	mul	r16, r18
     7d8:	f0 01       	movw	r30, r0
     7da:	11 24       	eor	r1, r1
     7dc:	e5 50       	subi	r30, 0x05	; 5
     7de:	fe 4f       	sbci	r31, 0xFE	; 254
     7e0:	21 81       	ldd	r18, Z+1	; 0x01
     7e2:	32 81       	ldd	r19, Z+2	; 0x02
     7e4:	43 81       	ldd	r20, Z+3	; 0x03
     7e6:	54 81       	ldd	r21, Z+4	; 0x04
     7e8:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
     7ec:	9b 01       	movw	r18, r22
     7ee:	ac 01       	movw	r20, r24
     7f0:	c7 01       	movw	r24, r14
     7f2:	b6 01       	movw	r22, r12
     7f4:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
     7f8:	6b 01       	movw	r12, r22
     7fa:	7c 01       	movw	r14, r24
	if (divAmperage <= 0) {
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	a9 01       	movw	r20, r18
     802:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
     806:	18 16       	cp	r1, r24
     808:	74 f4       	brge	.+28     	; 0x826 <_Z19isSingleErrorExistsffh+0x64>
		return false;
	}
	return divAmperage >= icError.criticalSingle;
     80a:	01 e0       	ldi	r16, 0x01	; 1
     80c:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_start+0x1b>
     810:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <__data_start+0x1c>
     814:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <__data_start+0x1d>
     818:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <__data_start+0x1e>
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     824:	87 fd       	sbrc	r24, 7
*/
bool isSingleErrorExists(float _amperage, float _voltage, byte index) {
	// высчитываем идеальный ток и отнимаем измеренный
	float divAmperage = _amperage - (_voltage / settings.impedance[index]);
	if (divAmperage <= 0) {
		return false;
     826:	00 e0       	ldi	r16, 0x00	; 0
	}
	return divAmperage >= icError.criticalSingle;
}
     828:	80 2f       	mov	r24, r16
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <_Z12getAdsParamsv>:
}

/**
 * Получение параметров с АЦП
 */
void getAdsParams() {
     836:	2f 92       	push	r2
     838:	3f 92       	push	r3
     83a:	4f 92       	push	r4
     83c:	5f 92       	push	r5
     83e:	6f 92       	push	r6
     840:	7f 92       	push	r7
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	a6 97       	sbiw	r28, 0x26	; 38
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
	// Временные данные по напряжению, току и иделаьному току
	float measuredVoltage[3] = {0, 0, 0};
     86a:	1d 86       	std	Y+13, r1	; 0x0d
     86c:	1e 86       	std	Y+14, r1	; 0x0e
     86e:	1f 86       	std	Y+15, r1	; 0x0f
     870:	18 8a       	std	Y+16, r1	; 0x10
     872:	19 8a       	std	Y+17, r1	; 0x11
     874:	1a 8a       	std	Y+18, r1	; 0x12
     876:	1b 8a       	std	Y+19, r1	; 0x13
     878:	1c 8a       	std	Y+20, r1	; 0x14
     87a:	1d 8a       	std	Y+21, r1	; 0x15
     87c:	1e 8a       	std	Y+22, r1	; 0x16
     87e:	1f 8a       	std	Y+23, r1	; 0x17
     880:	18 8e       	std	Y+24, r1	; 0x18
	float measuredAmperage[3] = {0, 0, 0};
     882:	19 82       	std	Y+1, r1	; 0x01
     884:	1a 82       	std	Y+2, r1	; 0x02
     886:	1b 82       	std	Y+3, r1	; 0x03
     888:	1c 82       	std	Y+4, r1	; 0x04
     88a:	1d 82       	std	Y+5, r1	; 0x05
     88c:	1e 82       	std	Y+6, r1	; 0x06
     88e:	1f 82       	std	Y+7, r1	; 0x07
     890:	18 86       	std	Y+8, r1	; 0x08
     892:	19 86       	std	Y+9, r1	; 0x09
     894:	1a 86       	std	Y+10, r1	; 0x0a
     896:	1b 86       	std	Y+11, r1	; 0x0b
     898:	1c 86       	std	Y+12, r1	; 0x0c
     89a:	1e 01       	movw	r2, r28
     89c:	2d e0       	ldi	r18, 0x0D	; 13
     89e:	22 0e       	add	r2, r18
     8a0:	31 1c       	adc	r3, r1
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	6c 01       	movw	r12, r24
     8a8:	7c 01       	movw	r14, r24
     8aa:	51 01       	movw	r10, r2
	float perfectAmperage[3] = {0, 0, 0};
		
	// получение данных с ацп для кжадой обмотки
	for (byte i = 0; i < 3; i++) {
     8ac:	10 e0       	ldi	r17, 0x00	; 0
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
     8ae:	61 2f       	mov	r22, r17
     8b0:	8c e6       	ldi	r24, 0x6C	; 108
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     8b8:	bc 01       	movw	r22, r24
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__floatunsisf>
     8c2:	d5 01       	movw	r26, r10
     8c4:	6d 93       	st	X+, r22
     8c6:	7d 93       	st	X+, r23
     8c8:	8d 93       	st	X+, r24
     8ca:	9d 93       	st	X+, r25
     8cc:	5d 01       	movw	r10, r26
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
     8ce:	61 2f       	mov	r22, r17
     8d0:	87 e6       	ldi	r24, 0x67	; 103
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
     8d8:	bc 01       	movw	r22, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__floatunsisf>
     8e2:	f7 01       	movw	r30, r14
     8e4:	61 93       	st	Z+, r22
     8e6:	71 93       	st	Z+, r23
     8e8:	81 93       	st	Z+, r24
     8ea:	91 93       	st	Z+, r25
     8ec:	7f 01       	movw	r14, r30
	float measuredVoltage[3] = {0, 0, 0};
	float measuredAmperage[3] = {0, 0, 0};
	float perfectAmperage[3] = {0, 0, 0};
		
	// получение данных с ацп для кжадой обмотки
	for (byte i = 0; i < 3; i++) {
     8ee:	1f 5f       	subi	r17, 0xFF	; 255
     8f0:	13 30       	cpi	r17, 0x03	; 3
     8f2:	e9 f6       	brne	.-70     	; 0x8ae <_Z12getAdsParamsv+0x78>
	for (byte i = 0; i < 3; i++) {
		// увеличиваем данные для усреднения
		adsChars.sumVoltage[i] += measuredVoltage[i];
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
		// вычисляем текущие реальные значения
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
     8f4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <ads+0x18>
     8f8:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <ads+0x19>
     8fc:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <ads+0x1a>
     900:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <ads+0x1b>
     904:	8f 8f       	std	Y+31, r24	; 0x1f
     906:	98 a3       	std	Y+32, r25	; 0x20
     908:	a9 a3       	std	Y+33, r26	; 0x21
     90a:	ba a3       	std	Y+34, r27	; 0x22
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
     90c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ads+0x1c>
     910:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <ads+0x1d>
     914:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <ads+0x1e>
     918:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <ads+0x1f>
     91c:	8b a3       	std	Y+35, r24	; 0x23
     91e:	9c a3       	std	Y+36, r25	; 0x24
     920:	ad a3       	std	Y+37, r26	; 0x25
     922:	be a3       	std	Y+38, r27	; 0x26
     924:	8f e4       	ldi	r24, 0x4F	; 79
     926:	e8 2e       	mov	r14, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	f8 2e       	mov	r15, r24
     92c:	ab ef       	ldi	r26, 0xFB	; 251
     92e:	b1 e0       	ldi	r27, 0x01	; 1
     930:	ba 8f       	std	Y+26, r27	; 0x1a
     932:	a9 8f       	std	Y+25, r26	; 0x19
     934:	e0 e0       	ldi	r30, 0x00	; 0
     936:	f1 e0       	ldi	r31, 0x01	; 1
     938:	fc 8f       	std	Y+28, r31	; 0x1c
     93a:	eb 8f       	std	Y+27, r30	; 0x1b
     93c:	3e 8e       	std	Y+30, r3	; 0x1e
     93e:	2d 8e       	std	Y+29, r2	; 0x1d
     940:	10 e0       	ldi	r17, 0x00	; 0
	}

	
	for (byte i = 0; i < 3; i++) {
		// увеличиваем данные для усреднения
		adsChars.sumVoltage[i] += measuredVoltage[i];
     942:	ad 8d       	ldd	r26, Y+29	; 0x1d
     944:	be 8d       	ldd	r27, Y+30	; 0x1e
     946:	4d 90       	ld	r4, X+
     948:	5d 90       	ld	r5, X+
     94a:	6d 90       	ld	r6, X+
     94c:	7d 90       	ld	r7, X+
     94e:	be 8f       	std	Y+30, r27	; 0x1e
     950:	ad 8f       	std	Y+29, r26	; 0x1d
     952:	a3 01       	movw	r20, r6
     954:	92 01       	movw	r18, r4
     956:	f7 01       	movw	r30, r14
     958:	64 a1       	ldd	r22, Z+36	; 0x24
     95a:	75 a1       	ldd	r23, Z+37	; 0x25
     95c:	86 a1       	ldd	r24, Z+38	; 0x26
     95e:	97 a1       	ldd	r25, Z+39	; 0x27
     960:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
     964:	d7 01       	movw	r26, r14
     966:	94 96       	adiw	r26, 0x24	; 36
     968:	6d 93       	st	X+, r22
     96a:	7d 93       	st	X+, r23
     96c:	8d 93       	st	X+, r24
     96e:	9c 93       	st	X, r25
     970:	97 97       	sbiw	r26, 0x27	; 39
		adsChars.sumMeasuredAmperage[i] += measuredAmperage[i];
     972:	f6 01       	movw	r30, r12
     974:	80 80       	ld	r8, Z
     976:	91 80       	ldd	r9, Z+1	; 0x01
     978:	a2 80       	ldd	r10, Z+2	; 0x02
     97a:	b3 80       	ldd	r11, Z+3	; 0x03
     97c:	a5 01       	movw	r20, r10
     97e:	94 01       	movw	r18, r8
     980:	d0 96       	adiw	r26, 0x30	; 48
     982:	6d 91       	ld	r22, X+
     984:	7d 91       	ld	r23, X+
     986:	8d 91       	ld	r24, X+
     988:	9c 91       	ld	r25, X
     98a:	d3 97       	sbiw	r26, 0x33	; 51
     98c:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
     990:	d7 01       	movw	r26, r14
     992:	d0 96       	adiw	r26, 0x30	; 48
     994:	6d 93       	st	X+, r22
     996:	7d 93       	st	X+, r23
     998:	8d 93       	st	X+, r24
     99a:	9c 93       	st	X, r25
     99c:	d3 97       	sbiw	r26, 0x33	; 51
		// вычисляем текущие реальные значения
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
     99e:	e9 8d       	ldd	r30, Y+25	; 0x19
     9a0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     9a2:	20 89       	ldd	r18, Z+16	; 0x10
     9a4:	31 89       	ldd	r19, Z+17	; 0x11
     9a6:	42 89       	ldd	r20, Z+18	; 0x12
     9a8:	53 89       	ldd	r21, Z+19	; 0x13
     9aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9ac:	78 a1       	ldd	r23, Y+32	; 0x20
     9ae:	89 a1       	ldd	r24, Y+33	; 0x21
     9b0:	9a a1       	ldd	r25, Y+34	; 0x22
     9b2:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
     9b6:	a3 01       	movw	r20, r6
     9b8:	92 01       	movw	r18, r4
     9ba:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
     9be:	2b 01       	movw	r4, r22
     9c0:	3c 01       	movw	r6, r24
     9c2:	d1 01       	movw	r26, r2
     9c4:	6d 93       	st	X+, r22
     9c6:	7d 93       	st	X+, r23
     9c8:	8d 93       	st	X+, r24
     9ca:	9d 93       	st	X+, r25
     9cc:	1d 01       	movw	r2, r26
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
     9ce:	e9 8d       	ldd	r30, Y+25	; 0x19
     9d0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     9d2:	24 8d       	ldd	r18, Z+28	; 0x1c
     9d4:	35 8d       	ldd	r19, Z+29	; 0x1d
     9d6:	46 8d       	ldd	r20, Z+30	; 0x1e
     9d8:	57 8d       	ldd	r21, Z+31	; 0x1f
     9da:	6b a1       	ldd	r22, Y+35	; 0x23
     9dc:	7c a1       	ldd	r23, Y+36	; 0x24
     9de:	8d a1       	ldd	r24, Y+37	; 0x25
     9e0:	9e a1       	ldd	r25, Y+38	; 0x26
     9e2:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
     9e6:	a5 01       	movw	r20, r10
     9e8:	94 01       	movw	r18, r8
     9ea:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
     9ee:	d6 01       	movw	r26, r12
     9f0:	6d 93       	st	X+, r22
     9f2:	7d 93       	st	X+, r23
     9f4:	8d 93       	st	X+, r24
     9f6:	9c 93       	st	X, r25
     9f8:	13 97       	sbiw	r26, 0x03	; 3
		
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
     9fa:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9fc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     9fe:	a0 88       	ldd	r10, Z+16	; 0x10
     a00:	b1 88       	ldd	r11, Z+17	; 0x11
     a02:	f8 ee       	ldi	r31, 0xE8	; 232
     a04:	af 16       	cp	r10, r31
     a06:	f3 e0       	ldi	r31, 0x03	; 3
     a08:	bf 06       	cpc	r11, r31
     a0a:	3c f4       	brge	.+14     	; 0xa1a <__stack+0x11b>
     a0c:	01 2f       	mov	r16, r17
     a0e:	a3 01       	movw	r20, r6
     a10:	92 01       	movw	r18, r4
     a12:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z19isSingleErrorExistsffh>
     a16:	81 11       	cpse	r24, r1
     a18:	2d c0       	rjmp	.+90     	; 0xa74 <__stack+0x175>
		measuredVoltage[i] = adsVoltage.readADC_SingleEnded(i);
		measuredAmperage[i] = adsAmperage.readADC_SingleEnded(i);
	}

	
	for (byte i = 0; i < 3; i++) {
     a1a:	1f 5f       	subi	r17, 0xFF	; 255
     a1c:	24 e0       	ldi	r18, 0x04	; 4
     a1e:	e2 0e       	add	r14, r18
     a20:	f1 1c       	adc	r15, r1
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	c8 0e       	add	r12, r24
     a26:	d1 1c       	adc	r13, r1
     a28:	a9 8d       	ldd	r26, Y+25	; 0x19
     a2a:	ba 8d       	ldd	r27, Y+26	; 0x1a
     a2c:	14 96       	adiw	r26, 0x04	; 4
     a2e:	ba 8f       	std	Y+26, r27	; 0x1a
     a30:	a9 8f       	std	Y+25, r26	; 0x19
     a32:	eb 8d       	ldd	r30, Y+27	; 0x1b
     a34:	fc 8d       	ldd	r31, Y+28	; 0x1c
     a36:	32 96       	adiw	r30, 0x02	; 2
     a38:	fc 8f       	std	Y+28, r31	; 0x1c
     a3a:	eb 8f       	std	Y+27, r30	; 0x1b
     a3c:	13 30       	cpi	r17, 0x03	; 3
     a3e:	09 f0       	breq	.+2      	; 0xa42 <__stack+0x143>
     a40:	80 cf       	rjmp	.-256    	; 0x942 <__stack+0x43>
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
			icError.criticalLvlCount[i]++;
		}
	}
}
     a42:	a6 96       	adiw	r28, 0x26	; 38
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	bf 90       	pop	r11
     a60:	af 90       	pop	r10
     a62:	9f 90       	pop	r9
     a64:	8f 90       	pop	r8
     a66:	7f 90       	pop	r7
     a68:	6f 90       	pop	r6
     a6a:	5f 90       	pop	r5
     a6c:	4f 90       	pop	r4
     a6e:	3f 90       	pop	r3
     a70:	2f 90       	pop	r2
     a72:	08 95       	ret
		measuredVoltage[i] *= ads.voltageStep * settings.multiplierVoltage[i];
		measuredAmperage[i] *= ads.amperageStep * settings.multiplierAmperage[i];
		
		// прогоняем для проверки на выходы за пределы допуска и увеличиваем счетчик, ели это случилось
		if (icError.criticalLvlCount[i] < 1000 && isSingleErrorExists(measuredAmperage[i], measuredVoltage[i], i)) {
			icError.criticalLvlCount[i]++;
     a74:	ff ef       	ldi	r31, 0xFF	; 255
     a76:	af 1a       	sub	r10, r31
     a78:	bf 0a       	sbc	r11, r31
     a7a:	ab 8d       	ldd	r26, Y+27	; 0x1b
     a7c:	bc 8d       	ldd	r27, Y+28	; 0x1c
     a7e:	51 96       	adiw	r26, 0x11	; 17
     a80:	bc 92       	st	X, r11
     a82:	ae 92       	st	-X, r10
     a84:	50 97       	sbiw	r26, 0x10	; 16
     a86:	c9 cf       	rjmp	.-110    	; 0xa1a <__stack+0x11b>

00000a88 <_Z17isFullErrorExistsPfS_>:
 * Проверка наличия отклоеннеия.
 * Ошибка проверяется только при положительных разностях
 * _amperage - массив измеренных токов
 * _voltage - массив измеренных напряжений
*/
bool isFullErrorExists(float* _amperage, float* _voltage) {
     a88:	4f 92       	push	r4
     a8a:	5f 92       	push	r5
     a8c:	6f 92       	push	r6
     a8e:	7f 92       	push	r7
     a90:	8f 92       	push	r8
     a92:	9f 92       	push	r9
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	60 97       	sbiw	r28, 0x10	; 16
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
	float divAmperage[3] = {0, 0, 0};
     ab8:	19 82       	std	Y+1, r1	; 0x01
     aba:	1a 82       	std	Y+2, r1	; 0x02
     abc:	1b 82       	std	Y+3, r1	; 0x03
     abe:	1c 82       	std	Y+4, r1	; 0x04
     ac0:	1d 82       	std	Y+5, r1	; 0x05
     ac2:	1e 82       	std	Y+6, r1	; 0x06
     ac4:	1f 82       	std	Y+7, r1	; 0x07
     ac6:	18 86       	std	Y+8, r1	; 0x08
     ac8:	19 86       	std	Y+9, r1	; 0x09
     aca:	1a 86       	std	Y+10, r1	; 0x0a
     acc:	1b 86       	std	Y+11, r1	; 0x0b
     ace:	1c 86       	std	Y+12, r1	; 0x0c
     ad0:	7b 01       	movw	r14, r22
     ad2:	2c ef       	ldi	r18, 0xFC	; 252
     ad4:	82 2e       	mov	r8, r18
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	92 2e       	mov	r9, r18
     ada:	37 e6       	ldi	r19, 0x67	; 103
     adc:	a3 2e       	mov	r10, r19
     ade:	31 e0       	ldi	r19, 0x01	; 1
     ae0:	b3 2e       	mov	r11, r19
     ae2:	6c 01       	movw	r12, r24
     ae4:	8e 01       	movw	r16, r28
     ae6:	0f 5f       	subi	r16, 0xFF	; 255
     ae8:	1f 4f       	sbci	r17, 0xFF	; 255
     aea:	3b 01       	movw	r6, r22
     aec:	8c e0       	ldi	r24, 0x0C	; 12
     aee:	68 0e       	add	r6, r24
     af0:	71 1c       	adc	r7, r1
	byte sign = 100;
	
	// получаем разницу идеального от измеренного тока и изменяем значения счетчика знака
	for(byte i = 0; i < 3; i++) {
		// на ходу вычисляем значения идеального тока
		adsChars.perfectAmperage[i] = _voltage[i] / settings.impedance[i];
     af2:	d7 01       	movw	r26, r14
     af4:	6d 91       	ld	r22, X+
     af6:	7d 91       	ld	r23, X+
     af8:	8d 91       	ld	r24, X+
     afa:	9d 91       	ld	r25, X+
     afc:	7d 01       	movw	r14, r26
     afe:	f4 01       	movw	r30, r8
     b00:	21 91       	ld	r18, Z+
     b02:	31 91       	ld	r19, Z+
     b04:	41 91       	ld	r20, Z+
     b06:	51 91       	ld	r21, Z+
     b08:	4f 01       	movw	r8, r30
     b0a:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
     b0e:	d5 01       	movw	r26, r10
     b10:	6d 93       	st	X+, r22
     b12:	7d 93       	st	X+, r23
     b14:	8d 93       	st	X+, r24
     b16:	9d 93       	st	X+, r25
     b18:	5d 01       	movw	r10, r26
		divAmperage[i] = adsChars.perfectAmperage[i] - _amperage[i];
     b1a:	f6 01       	movw	r30, r12
     b1c:	21 91       	ld	r18, Z+
     b1e:	31 91       	ld	r19, Z+
     b20:	41 91       	ld	r20, Z+
     b22:	51 91       	ld	r21, Z+
     b24:	6f 01       	movw	r12, r30
     b26:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
     b2a:	d8 01       	movw	r26, r16
     b2c:	6d 93       	st	X+, r22
     b2e:	7d 93       	st	X+, r23
     b30:	8d 93       	st	X+, r24
     b32:	9d 93       	st	X+, r25
     b34:	8d 01       	movw	r16, r26
	float divAmperage[3] = {0, 0, 0};
	// 100 - магическое число и ничего не значит, прсото для удобства 
	byte sign = 100;
	
	// получаем разницу идеального от измеренного тока и изменяем значения счетчика знака
	for(byte i = 0; i < 3; i++) {
     b36:	e6 14       	cp	r14, r6
     b38:	f7 04       	cpc	r15, r7
     b3a:	d9 f6       	brne	.-74     	; 0xaf2 <_Z17isFullErrorExistsPfS_+0x6a>
	// если знак = -97, значит все значения измеренных токов меньше идеальных и замыкания нет
	if (sign == -97) {
		return false;
	}
	// По формуле вычисляем глоабльную ошибку по токам |AB - BC| + |BC - AC| + |AC - AB| 
	icError.fullError = abs(divAmperage[0] - divAmperage[1]) + abs(divAmperage[1] - divAmperage[2]) + abs(divAmperage[2] - divAmperage[0]);
     b3c:	49 80       	ldd	r4, Y+1	; 0x01
     b3e:	5a 80       	ldd	r5, Y+2	; 0x02
     b40:	6b 80       	ldd	r6, Y+3	; 0x03
     b42:	7c 80       	ldd	r7, Y+4	; 0x04
     b44:	8d 80       	ldd	r8, Y+5	; 0x05
     b46:	9e 80       	ldd	r9, Y+6	; 0x06
     b48:	af 80       	ldd	r10, Y+7	; 0x07
     b4a:	b8 84       	ldd	r11, Y+8	; 0x08
     b4c:	a5 01       	movw	r20, r10
     b4e:	94 01       	movw	r18, r8
     b50:	c3 01       	movw	r24, r6
     b52:	b2 01       	movw	r22, r4
     b54:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
     b58:	6b 01       	movw	r12, r22
     b5a:	7c 01       	movw	r14, r24
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	a9 01       	movw	r20, r18
     b62:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     b66:	18 16       	cp	r1, r24
     b68:	24 f0       	brlt	.+8      	; 0xb72 <_Z17isFullErrorExistsPfS_+0xea>
     b6a:	f7 fa       	bst	r15, 7
     b6c:	f0 94       	com	r15
     b6e:	f7 f8       	bld	r15, 7
     b70:	f0 94       	com	r15
     b72:	89 85       	ldd	r24, Y+9	; 0x09
     b74:	9a 85       	ldd	r25, Y+10	; 0x0a
     b76:	ab 85       	ldd	r26, Y+11	; 0x0b
     b78:	bc 85       	ldd	r27, Y+12	; 0x0c
     b7a:	8d 87       	std	Y+13, r24	; 0x0d
     b7c:	9e 87       	std	Y+14, r25	; 0x0e
     b7e:	af 87       	std	Y+15, r26	; 0x0f
     b80:	b8 8b       	std	Y+16, r27	; 0x10
     b82:	9c 01       	movw	r18, r24
     b84:	ad 01       	movw	r20, r26
     b86:	c5 01       	movw	r24, r10
     b88:	b4 01       	movw	r22, r8
     b8a:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
     b8e:	4b 01       	movw	r8, r22
     b90:	5c 01       	movw	r10, r24
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	a9 01       	movw	r20, r18
     b98:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     b9c:	18 16       	cp	r1, r24
     b9e:	24 f0       	brlt	.+8      	; 0xba8 <_Z17isFullErrorExistsPfS_+0x120>
     ba0:	b7 fa       	bst	r11, 7
     ba2:	b0 94       	com	r11
     ba4:	b7 f8       	bld	r11, 7
     ba6:	b0 94       	com	r11
     ba8:	a5 01       	movw	r20, r10
     baa:	94 01       	movw	r18, r8
     bac:	c7 01       	movw	r24, r14
     bae:	b6 01       	movw	r22, r12
     bb0:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
     bb4:	6b 01       	movw	r12, r22
     bb6:	7c 01       	movw	r14, r24
     bb8:	a3 01       	movw	r20, r6
     bba:	92 01       	movw	r18, r4
     bbc:	6d 85       	ldd	r22, Y+13	; 0x0d
     bbe:	7e 85       	ldd	r23, Y+14	; 0x0e
     bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc2:	98 89       	ldd	r25, Y+16	; 0x10
     bc4:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
     bc8:	4b 01       	movw	r8, r22
     bca:	5c 01       	movw	r10, r24
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	a9 01       	movw	r20, r18
     bd2:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	24 f0       	brlt	.+8      	; 0xbe2 <_Z17isFullErrorExistsPfS_+0x15a>
     bda:	b7 fa       	bst	r11, 7
     bdc:	b0 94       	com	r11
     bde:	b7 f8       	bld	r11, 7
     be0:	b0 94       	com	r11
     be2:	a7 01       	movw	r20, r14
     be4:	96 01       	movw	r18, r12
     be6:	c5 01       	movw	r24, r10
     be8:	b4 01       	movw	r22, r8
     bea:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
     bee:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     bf2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     bf6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     bfa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>

	// Крит общей ошибки отклонение в 1
	return icError.fullError >= icError.criticalFull;
     bfe:	11 e0       	ldi	r17, 0x01	; 1
     c00:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <__data_start+0x1f>
     c04:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <__data_start+0x20>
     c08:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <__data_start+0x21>
     c0c:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <__data_start+0x22>
     c10:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     c14:	87 fd       	sbrc	r24, 7
     c16:	10 e0       	ldi	r17, 0x00	; 0
}
     c18:	81 2f       	mov	r24, r17
     c1a:	60 96       	adiw	r28, 0x10	; 16
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	bf 90       	pop	r11
     c38:	af 90       	pop	r10
     c3a:	9f 90       	pop	r9
     c3c:	8f 90       	pop	r8
     c3e:	7f 90       	pop	r7
     c40:	6f 90       	pop	r6
     c42:	5f 90       	pop	r5
     c44:	4f 90       	pop	r4
     c46:	08 95       	ret

00000c48 <_Z20lcdPrintAmperageDiffh>:
			showWindingCharsValues(2);
			break;
	}
}

void lcdPrintAmperageDiff(byte index) {
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
	icError.diff[index] =  adsChars.measuredAmperage[index] - adsChars.perfectAmperage[index];
     c4c:	c8 2f       	mov	r28, r24
     c4e:	d0 e0       	ldi	r29, 0x00	; 0
     c50:	fe 01       	movw	r30, r28
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	e5 5a       	subi	r30, 0xA5	; 165
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	de 01       	movw	r26, r28
     c60:	aa 0f       	add	r26, r26
     c62:	bb 1f       	adc	r27, r27
     c64:	aa 0f       	add	r26, r26
     c66:	bb 1f       	adc	r27, r27
     c68:	a9 59       	subi	r26, 0x99	; 153
     c6a:	be 4f       	sbci	r27, 0xFE	; 254
     c6c:	2d 91       	ld	r18, X+
     c6e:	3d 91       	ld	r19, X+
     c70:	4d 91       	ld	r20, X+
     c72:	5c 91       	ld	r21, X
     c74:	60 81       	ld	r22, Z
     c76:	71 81       	ldd	r23, Z+1	; 0x01
     c78:	82 81       	ldd	r24, Z+2	; 0x02
     c7a:	93 81       	ldd	r25, Z+3	; 0x03
     c7c:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
     c80:	cc 0f       	add	r28, r28
     c82:	dd 1f       	adc	r29, r29
     c84:	cc 0f       	add	r28, r28
     c86:	dd 1f       	adc	r29, r29
     c88:	fe 01       	movw	r30, r28
     c8a:	e0 50       	subi	r30, 0x00	; 0
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	63 a3       	std	Z+35, r22	; 0x23
     c90:	74 a3       	std	Z+36, r23	; 0x24
     c92:	85 a3       	std	Z+37, r24	; 0x25
     c94:	96 a3       	std	Z+38, r25	; 0x26
	// Если у нас измеренное число больше чем идеальное - значит мы получили отклонение в + иначе в -
	if (icError.diff[index] >= 0) {
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	a9 01       	movw	r20, r18
     c9c:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     ca0:	87 fd       	sbrc	r24, 7
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <_Z20lcdPrintAmperageDiffh+0x68>
		lcd.print(F("+"));
     ca4:	68 e6       	ldi	r22, 0x68	; 104
     ca6:	72 e0       	ldi	r23, 0x02	; 2
     ca8:	87 ee       	ldi	r24, 0xE7	; 231
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
	} 
	lcd.print(icError.diff[index], 3);
     cb0:	c0 50       	subi	r28, 0x00	; 0
     cb2:	df 4f       	sbci	r29, 0xFF	; 255
     cb4:	4b a1       	ldd	r20, Y+35	; 0x23
     cb6:	5c a1       	ldd	r21, Y+36	; 0x24
     cb8:	6d a1       	ldd	r22, Y+37	; 0x25
     cba:	7e a1       	ldd	r23, Y+38	; 0x26
     cbc:	23 e0       	ldi	r18, 0x03	; 3
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	87 ee       	ldi	r24, 0xE7	; 231
     cc2:	91 e0       	ldi	r25, 0x01	; 1
}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
	icError.diff[index] =  adsChars.measuredAmperage[index] - adsChars.perfectAmperage[index];
	// Если у нас измеренное число больше чем идеальное - значит мы получили отклонение в + иначе в -
	if (icError.diff[index] >= 0) {
		lcd.print(F("+"));
	} 
	lcd.print(icError.diff[index], 3);
     cc8:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <_ZN5Print5printEdi>

00000ccc <_Z27lcdPrinRoundedCurErrorLevelh>:

/*
	Отображение округленных значений ошибки в зависимости от обмотки 
	_num - номер обмотки
*/
void lcdPrinRoundedCurErrorLevel(byte _num) {
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
	if (icError.curLvl[_num] < 1000) {
     cd4:	24 e0       	ldi	r18, 0x04	; 4
     cd6:	82 9f       	mul	r24, r18
     cd8:	c0 01       	movw	r24, r0
     cda:	11 24       	eor	r1, r1
     cdc:	fc 01       	movw	r30, r24
     cde:	ec 5f       	subi	r30, 0xFC	; 252
     ce0:	fe 4f       	sbci	r31, 0xFE	; 254
     ce2:	c0 80       	ld	r12, Z
     ce4:	d1 80       	ldd	r13, Z+1	; 0x01
     ce6:	e2 80       	ldd	r14, Z+2	; 0x02
     ce8:	f3 80       	ldd	r15, Z+3	; 0x03
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	4a e7       	ldi	r20, 0x7A	; 122
     cf0:	54 e4       	ldi	r21, 0x44	; 68
     cf2:	c7 01       	movw	r24, r14
     cf4:	b6 01       	movw	r22, r12
     cf6:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
     cfa:	87 ff       	sbrs	r24, 7
     cfc:	24 c0       	rjmp	.+72     	; 0xd46 <_Z27lcdPrinRoundedCurErrorLevelh+0x7a>
		lcd.print(round(icError.curLvl[_num]));
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	a9 01       	movw	r20, r18
     d04:	c7 01       	movw	r24, r14
     d06:	b6 01       	movw	r22, r12
     d08:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	87 fd       	sbrc	r24, 7
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <_Z27lcdPrinRoundedCurErrorLevelh+0x56>
     d18:	c7 01       	movw	r24, r14
     d1a:	b6 01       	movw	r22, r12
     d1c:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <_Z27lcdPrinRoundedCurErrorLevelh+0x5e>
     d22:	c7 01       	movw	r24, r14
     d24:	b6 01       	movw	r22, r12
     d26:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
     d2a:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__fixsfsi>
     d2e:	2a e0       	ldi	r18, 0x0A	; 10
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	ab 01       	movw	r20, r22
     d34:	bc 01       	movw	r22, r24
     d36:	87 ee       	ldi	r24, 0xE7	; 231
     d38:	91 e0       	ldi	r25, 0x01	; 1
	} else {
		lcd.print(999);
		lcd.print(F("+"));
	}
}
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
	Отображение округленных значений ошибки в зависимости от обмотки 
	_num - номер обмотки
*/
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
     d42:	0c 94 2e 21 	jmp	0x425c	; 0x425c <_ZN5Print5printEli>
	} else {
		lcd.print(999);
     d46:	4a e0       	ldi	r20, 0x0A	; 10
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	67 ee       	ldi	r22, 0xE7	; 231
     d4c:	73 e0       	ldi	r23, 0x03	; 3
     d4e:	87 ee       	ldi	r24, 0xE7	; 231
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
		lcd.print(F("+"));
     d56:	66 e6       	ldi	r22, 0x66	; 102
     d58:	72 e0       	ldi	r23, 0x02	; 2
     d5a:	87 ee       	ldi	r24, 0xE7	; 231
     d5c:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
void lcdPrinRoundedCurErrorLevel(byte _num) {
	if (icError.curLvl[_num] < 1000) {
		lcd.print(round(icError.curLvl[_num]));
	} else {
		lcd.print(999);
		lcd.print(F("+"));
     d66:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>

00000d6a <_Z19lcdPrintCriticalLvlh>:
/*
	Отображение счетчиков выхода за пределы допуска ошибки
	_num - номер обмотки
*/
void lcdPrintCriticalLvl(byte _num) {
	if (icError.criticalLvlCount[_num] < 100) {
     d6a:	e8 2f       	mov	r30, r24
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	e0 5f       	subi	r30, 0xF0	; 240
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	64 36       	cpi	r22, 0x64	; 100
     d7c:	71 05       	cpc	r23, r1
     d7e:	1c f4       	brge	.+6      	; 0xd86 <_Z19lcdPrintCriticalLvlh+0x1c>
		lcd.print(icError.criticalLvlCount[_num], 2);
     d80:	42 e0       	ldi	r20, 0x02	; 2
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <_Z19lcdPrintCriticalLvlh+0x28>
	} else if (icError.criticalLvlCount[_num] < 1000) {
     d86:	68 3e       	cpi	r22, 0xE8	; 232
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	78 07       	cpc	r23, r24
     d8c:	34 f4       	brge	.+12     	; 0xd9a <_Z19lcdPrintCriticalLvlh+0x30>
		lcd.print(icError.criticalLvlCount[_num], 1);
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	87 ee       	ldi	r24, 0xE7	; 231
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0c 94 76 21 	jmp	0x42ec	; 0x42ec <_ZN5Print5printEii>
	} else {
		lcd.print(999);
     d9a:	4a e0       	ldi	r20, 0x0A	; 10
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	67 ee       	ldi	r22, 0xE7	; 231
     da0:	73 e0       	ldi	r23, 0x03	; 3
     da2:	87 ee       	ldi	r24, 0xE7	; 231
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
		lcd.print(F("+"));
     daa:	64 e6       	ldi	r22, 0x64	; 100
     dac:	72 e0       	ldi	r23, 0x02	; 2
     dae:	87 ee       	ldi	r24, 0xE7	; 231
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>

00000db6 <_Z18showStaticAmperagev>:

/*
	Отображение дополнительной статики для режима отображения по току
*/
void showStaticAmperage() {
	lcd.setCursor(7, 0);
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	67 e0       	ldi	r22, 0x07	; 7
     dba:	87 ee       	ldi	r24, 0xE7	; 231
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("P"));
     dc2:	6c e9       	ldi	r22, 0x9C	; 156
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	87 ee       	ldi	r24, 0xE7	; 231
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(7, 1);
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	67 e0       	ldi	r22, 0x07	; 7
     dd2:	87 ee       	ldi	r24, 0xE7	; 231
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("M"));
     dda:	6a e9       	ldi	r22, 0x9A	; 154
     ddc:	71 e0       	ldi	r23, 0x01	; 1
     dde:	87 ee       	ldi	r24, 0xE7	; 231
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>

00000de6 <_Z22showStaticWindingCharsv>:
/*
	Отображение статики по обмоткам
	MP значит measured|perfect
*/
void showStaticWindingChars() {
	lcd.setCursor(3, 0);
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	63 e0       	ldi	r22, 0x03	; 3
     dea:	87 ee       	ldi	r24, 0xE7	; 231
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("I="));
     df2:	63 e9       	ldi	r22, 0x93	; 147
     df4:	71 e0       	ldi	r23, 0x01	; 1
     df6:	87 ee       	ldi	r24, 0xE7	; 231
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(0, 1);
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	87 ee       	ldi	r24, 0xE7	; 231
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("V="));
     e0a:	60 e9       	ldi	r22, 0x90	; 144
     e0c:	71 e0       	ldi	r23, 0x01	; 1
     e0e:	87 ee       	ldi	r24, 0xE7	; 231
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.setCursor(8, 1);
     e16:	41 e0       	ldi	r20, 0x01	; 1
     e18:	68 e0       	ldi	r22, 0x08	; 8
     e1a:	87 ee       	ldi	r24, 0xE7	; 231
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	lcd.print(F("E="));
     e22:	6d e8       	ldi	r22, 0x8D	; 141
     e24:	71 e0       	ldi	r23, 0x01	; 1
     e26:	87 ee       	ldi	r24, 0xE7	; 231
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>

00000e2e <_Z19displayStaticAsModev>:

/*
	Отображение статики в ависимости от режима отображения
*/
void displayStaticAsMode() {
	lcd.clear();
     e2e:	87 ee       	ldi	r24, 0xE7	; 231
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN17LiquidCrystal_I2C5clearEv>
	switch(modeWork.current) {
     e36:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <modeWork>
     e3a:	8e 2f       	mov	r24, r30
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	8f 31       	cpi	r24, 0x1F	; 31
     e40:	91 05       	cpc	r25, r1
     e42:	08 f0       	brcs	.+2      	; 0xe46 <_Z19displayStaticAsModev+0x18>
     e44:	d8 c0       	rjmp	.+432    	; 0xff6 <_Z19displayStaticAsModev+0x1c8>
     e46:	fc 01       	movw	r30, r24
     e48:	ec 5c       	subi	r30, 0xCC	; 204
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__tablejump2__>
		case MW_SETUP_MANIPULATE_RELAY:
			lcd.print(F("Control engine?"));
     e50:	64 e5       	ldi	r22, 0x54	; 84
     e52:	72 e0       	ldi	r23, 0x02	; 2
     e54:	cc c0       	rjmp	.+408    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
		break;
		case MW_SETUP_GAIN_AMPERAGE:
			lcd.print(F("A gain maxV/step"));
     e56:	63 e4       	ldi	r22, 0x43	; 67
     e58:	72 e0       	ldi	r23, 0x02	; 2
     e5a:	c9 c0       	rjmp	.+402    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			lcd.print(F("V gain maxV/step"));
     e5c:	62 e3       	ldi	r22, 0x32	; 50
     e5e:	72 e0       	ldi	r23, 0x02	; 2
     e60:	c6 c0       	rjmp	.+396    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			lcd.print(F("Vm AB"));
     e62:	6c e2       	ldi	r22, 0x2C	; 44
     e64:	72 e0       	ldi	r23, 0x02	; 2
     e66:	c3 c0       	rjmp	.+390    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			lcd.print(F("Vm BC"));
     e68:	66 e2       	ldi	r22, 0x26	; 38
     e6a:	72 e0       	ldi	r23, 0x02	; 2
     e6c:	c0 c0       	rjmp	.+384    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			lcd.print(F("Vm AC"));
     e6e:	60 e2       	ldi	r22, 0x20	; 32
     e70:	72 e0       	ldi	r23, 0x02	; 2
     e72:	bd c0       	rjmp	.+378    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			lcd.print(F("Am AB"));
     e74:	6a e1       	ldi	r22, 0x1A	; 26
     e76:	72 e0       	ldi	r23, 0x02	; 2
     e78:	ba c0       	rjmp	.+372    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			lcd.print(F("Am BC"));
     e7a:	64 e1       	ldi	r22, 0x14	; 20
     e7c:	72 e0       	ldi	r23, 0x02	; 2
     e7e:	b7 c0       	rjmp	.+366    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcd.print(F("Am AC"));
     e80:	6e e0       	ldi	r22, 0x0E	; 14
     e82:	72 e0       	ldi	r23, 0x02	; 2
     e84:	b4 c0       	rjmp	.+360    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcd.print(F("ECount"));
     e86:	67 e0       	ldi	r22, 0x07	; 7
     e88:	72 e0       	ldi	r23, 0x02	; 2
     e8a:	87 ee       	ldi	r24, 0xE7	; 231
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	68 e0       	ldi	r22, 0x08	; 8
     e96:	87 ee       	ldi	r24, 0xE7	; 231
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AB="));
     e9e:	63 e0       	ldi	r22, 0x03	; 3
     ea0:	72 e0       	ldi	r23, 0x02	; 2
     ea2:	87 ee       	ldi	r24, 0xE7	; 231
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	87 ee       	ldi	r24, 0xE7	; 231
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("BC="));
     eb6:	6f ef       	ldi	r22, 0xFF	; 255
     eb8:	71 e0       	ldi	r23, 0x01	; 1
     eba:	87 ee       	ldi	r24, 0xE7	; 231
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 1);
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	68 e0       	ldi	r22, 0x08	; 8
     ec6:	87 ee       	ldi	r24, 0xE7	; 231
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("AC="));
     ece:	6b ef       	ldi	r22, 0xFB	; 251
     ed0:	71 e0       	ldi	r23, 0x01	; 1
     ed2:	8d c0       	rjmp	.+282    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SHOW_ERRORS:
			lcd.print(F("I1="));
     ed4:	67 ef       	ldi	r22, 0xF7	; 247
     ed6:	71 e0       	ldi	r23, 0x01	; 1
     ed8:	87 ee       	ldi	r24, 0xE7	; 231
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(8, 0);
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	68 e0       	ldi	r22, 0x08	; 8
     ee4:	87 ee       	ldi	r24, 0xE7	; 231
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I2="));
     eec:	63 ef       	ldi	r22, 0xF3	; 243
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	87 ee       	ldi	r24, 0xE7	; 231
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	87 ee       	ldi	r24, 0xE7	; 231
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("I3="));
     f04:	6f ee       	ldi	r22, 0xEF	; 239
     f06:	71 e0       	ldi	r23, 0x01	; 1
     f08:	87 ee       	ldi	r24, 0xE7	; 231
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(14, 1);
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	6e e0       	ldi	r22, 0x0E	; 14
     f14:	87 ee       	ldi	r24, 0xE7	; 231
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("e%"));
     f1c:	6c ee       	ldi	r22, 0xEC	; 236
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	66 c0       	rjmp	.+204    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SHOW_ERRORS_DIFF:
			lcd.print(1);
     f22:	4a e0       	ldi	r20, 0x0A	; 10
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	87 ee       	ldi	r24, 0xE7	; 231
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
			lcd.setCursor(8, 0);
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	68 e0       	ldi	r22, 0x08	; 8
     f36:	87 ee       	ldi	r24, 0xE7	; 231
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(2);
     f3e:	4a e0       	ldi	r20, 0x0A	; 10
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	87 ee       	ldi	r24, 0xE7	; 231
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
			lcd.setCursor(0, 1);
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	87 ee       	ldi	r24, 0xE7	; 231
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(3);
     f5a:	4a e0       	ldi	r20, 0x0A	; 10
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	63 e0       	ldi	r22, 0x03	; 3
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	87 ee       	ldi	r24, 0xE7	; 231
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
			lcd.setCursor(8, 1);
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	68 e0       	ldi	r22, 0x08	; 8
     f6e:	87 ee       	ldi	r24, 0xE7	; 231
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("F"));
     f76:	6a ee       	ldi	r22, 0xEA	; 234
     f78:	71 e0       	ldi	r23, 0x01	; 1
     f7a:	39 c0       	rjmp	.+114    	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_SHOW_AMPERAGE_AB:
			lcd.print(F("AB D"));
     f7c:	65 ee       	ldi	r22, 0xE5	; 229
     f7e:	71 e0       	ldi	r23, 0x01	; 1
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <_Z19displayStaticAsModev+0x15e>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_BC:
			lcd.print(F("BC D"));
     f82:	60 ee       	ldi	r22, 0xE0	; 224
     f84:	71 e0       	ldi	r23, 0x01	; 1
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <_Z19displayStaticAsModev+0x15e>
			showStaticAmperage();
			break;
		case MW_SHOW_AMPERAGE_AC:
			lcd.print(F("AC D"));
     f88:	6b ed       	ldi	r22, 0xDB	; 219
     f8a:	71 e0       	ldi	r23, 0x01	; 1
     f8c:	87 ee       	ldi	r24, 0xE7	; 231
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticAmperage();
     f94:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <_Z18showStaticAmperagev>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			lcd.print(F("AB"));
     f98:	68 ed       	ldi	r22, 0xD8	; 216
     f9a:	71 e0       	ldi	r23, 0x01	; 1
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <_Z19displayStaticAsModev+0x17a>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			lcd.print(F("BC"));
     f9e:	65 ed       	ldi	r22, 0xD5	; 213
     fa0:	71 e0       	ldi	r23, 0x01	; 1
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <_Z19displayStaticAsModev+0x17a>
			showStaticWindingChars();
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			lcd.print(F("AC"));
     fa4:	62 ed       	ldi	r22, 0xD2	; 210
     fa6:	71 e0       	ldi	r23, 0x01	; 1
     fa8:	87 ee       	ldi	r24, 0xE7	; 231
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			showStaticWindingChars();
     fb0:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <_Z22showStaticWindingCharsv>
			break;
		case MW_CONTROLL_MEASUREMENT:
			lcd.print(F("Measurement"));
     fb4:	66 ec       	ldi	r22, 0xC6	; 198
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	87 ee       	ldi	r24, 0xE7	; 231
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     fc0:	41 e0       	ldi	r20, 0x01	; 1
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	87 ee       	ldi	r24, 0xE7	; 231
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("B1=work; B2=stop"));
     fcc:	65 eb       	ldi	r22, 0xB5	; 181
     fce:	71 e0       	ldi	r23, 0x01	; 1
     fd0:	0e c0       	rjmp	.+28     	; 0xfee <_Z19displayStaticAsModev+0x1c0>
			break;
		case MW_NEED_SETUP:
			lcd.print(F("Oooops!"));
     fd2:	6d ea       	ldi	r22, 0xAD	; 173
     fd4:	71 e0       	ldi	r23, 0x01	; 1
     fd6:	87 ee       	ldi	r24, 0xE7	; 231
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.setCursor(0, 1);
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	87 ee       	ldi	r24, 0xE7	; 231
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("Setup required"));
     fea:	6e e9       	ldi	r22, 0x9E	; 158
     fec:	71 e0       	ldi	r23, 0x01	; 1
     fee:	87 ee       	ldi	r24, 0xE7	; 231
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
     ff6:	08 95       	ret

00000ff8 <_Z12lcdClearCellhhh>:
	Очистка определенного блока экрана с установкой на этом месте курсора
	col - номер колонки
	row - номер строки
	rowLength - количество ячеек для очистки в строке
*/
void lcdClearCell(byte col, byte row, byte rowLength) {                
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	d8 2f       	mov	r29, r24
    1002:	16 2f       	mov	r17, r22
    1004:	04 2f       	mov	r16, r20
	lcd.setCursor(col, row);                                        
    1006:	46 2f       	mov	r20, r22
    1008:	68 2f       	mov	r22, r24
    100a:	87 ee       	ldi	r24, 0xE7	; 231
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
	for (byte i = 0; i < rowLength; i++) {                             
    1012:	c0 e0       	ldi	r28, 0x00	; 0
    1014:	c0 17       	cp	r28, r16
    1016:	41 f0       	breq	.+16     	; 0x1028 <_Z12lcdClearCellhhh+0x30>
		lcd.print(F(" "));
    1018:	6b e8       	ldi	r22, 0x8B	; 139
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	87 ee       	ldi	r24, 0xE7	; 231
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
	row - номер строки
	rowLength - количество ячеек для очистки в строке
*/
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
    1024:	cf 5f       	subi	r28, 0xFF	; 255
    1026:	f6 cf       	rjmp	.-20     	; 0x1014 <_Z12lcdClearCellhhh+0x1c>
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
    1028:	41 2f       	mov	r20, r17
    102a:	6d 2f       	mov	r22, r29
    102c:	87 ee       	ldi	r24, 0xE7	; 231
    102e:	91 e0       	ldi	r25, 0x01	; 1
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
void lcdClearCell(byte col, byte row, byte rowLength) {                
	lcd.setCursor(col, row);                                        
	for (byte i = 0; i < rowLength; i++) {                             
		lcd.print(F(" "));
	}
	lcd.setCursor(col, row);                                          
    1038:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>

0000103c <_Z12showGainInfov>:

/*
	Оторажаем возможные варианты усиления
*/
void showGainInfo() {
	lcdClearCell(0, 1, 16);
    103c:	40 e1       	ldi	r20, 0x10	; 16
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
	switch((int)setDigit.value) {
    1046:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    104a:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    104e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    1052:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    1056:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__fixsfsi>
    105a:	62 30       	cpi	r22, 0x02	; 2
    105c:	71 05       	cpc	r23, r1
    105e:	b1 f0       	breq	.+44     	; 0x108c <_Z12showGainInfov+0x50>
    1060:	3c f4       	brge	.+14     	; 0x1070 <_Z12showGainInfov+0x34>
    1062:	61 15       	cp	r22, r1
    1064:	71 05       	cpc	r23, r1
    1066:	61 f0       	breq	.+24     	; 0x1080 <_Z12showGainInfov+0x44>
    1068:	61 30       	cpi	r22, 0x01	; 1
    106a:	71 05       	cpc	r23, r1
    106c:	61 f0       	breq	.+24     	; 0x1086 <_Z12showGainInfov+0x4a>
    106e:	08 95       	ret
    1070:	64 30       	cpi	r22, 0x04	; 4
    1072:	71 05       	cpc	r23, r1
    1074:	89 f0       	breq	.+34     	; 0x1098 <_Z12showGainInfov+0x5c>
    1076:	6c f0       	brlt	.+26     	; 0x1092 <_Z12showGainInfov+0x56>
    1078:	65 30       	cpi	r22, 0x05	; 5
    107a:	71 05       	cpc	r23, r1
    107c:	81 f0       	breq	.+32     	; 0x109e <_Z12showGainInfov+0x62>
    107e:	08 95       	ret
		case 0:
			lcd.print(F("6.144 0.1875"));
    1080:	63 ed       	ldi	r22, 0xD3	; 211
    1082:	72 e0       	ldi	r23, 0x02	; 2
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <_Z12showGainInfov+0x66>
			break;
		case 1:
			lcd.print(F("4.096 0.125"));
    1086:	67 ec       	ldi	r22, 0xC7	; 199
    1088:	72 e0       	ldi	r23, 0x02	; 2
    108a:	0b c0       	rjmp	.+22     	; 0x10a2 <_Z12showGainInfov+0x66>
			break;
		case 2:
			lcd.print(F("2.048 0.0625"));
    108c:	6a eb       	ldi	r22, 0xBA	; 186
    108e:	72 e0       	ldi	r23, 0x02	; 2
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <_Z12showGainInfov+0x66>
			break;
		case 3:
			lcd.print(F("1.024 0.03125"));
    1092:	6c ea       	ldi	r22, 0xAC	; 172
    1094:	72 e0       	ldi	r23, 0x02	; 2
    1096:	05 c0       	rjmp	.+10     	; 0x10a2 <_Z12showGainInfov+0x66>
			break;
		case 4:
			lcd.print(F("0.512 0.015625"));
    1098:	6d e9       	ldi	r22, 0x9D	; 157
    109a:	72 e0       	ldi	r23, 0x02	; 2
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <_Z12showGainInfov+0x66>
			break;
		case 5:
			lcd.print(F("0.256 0.0078125"));
    109e:	6d e8       	ldi	r22, 0x8D	; 141
    10a0:	72 e0       	ldi	r23, 0x02	; 2
    10a2:	87 ee       	ldi	r24, 0xE7	; 231
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>

000010aa <_Z17showAmperageCharsh>:

/*
	Отображение идеального и измеренного тока
	_num - номер обмотки
*/
void showAmperageChars(byte _num) {
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	c8 2f       	mov	r28, r24
	lcdClearCell(9, 0, 7);
    10bc:	47 e0       	ldi	r20, 0x07	; 7
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	89 e0       	ldi	r24, 0x09	; 9
    10c2:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
	lcd.print(adsChars.perfectAmperage[_num], 5);
    10c6:	d0 e0       	ldi	r29, 0x00	; 0
    10c8:	8e 01       	movw	r16, r28
    10ca:	00 0f       	add	r16, r16
    10cc:	11 1f       	adc	r17, r17
    10ce:	00 0f       	add	r16, r16
    10d0:	11 1f       	adc	r17, r17
    10d2:	09 59       	subi	r16, 0x99	; 153
    10d4:	1e 4f       	sbci	r17, 0xFE	; 254
    10d6:	d8 01       	movw	r26, r16
    10d8:	4d 91       	ld	r20, X+
    10da:	5d 91       	ld	r21, X+
    10dc:	6d 91       	ld	r22, X+
    10de:	7c 91       	ld	r23, X
    10e0:	25 e0       	ldi	r18, 0x05	; 5
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	87 ee       	ldi	r24, 0xE7	; 231
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
	
	lcdClearCell(0, 1, 6);
    10ec:	46 e0       	ldi	r20, 0x06	; 6
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
	float _diff = abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]);
    10f6:	23 96       	adiw	r28, 0x03	; 3
    10f8:	fe 01       	movw	r30, r28
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	e1 5b       	subi	r30, 0xB1	; 177
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	d8 01       	movw	r26, r16
    1108:	2d 91       	ld	r18, X+
    110a:	3d 91       	ld	r19, X+
    110c:	4d 91       	ld	r20, X+
    110e:	5c 91       	ld	r21, X
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
    111c:	6b 01       	movw	r12, r22
    111e:	7c 01       	movw	r14, r24
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	a9 01       	movw	r20, r18
    1126:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
    112a:	18 16       	cp	r1, r24
    112c:	24 f0       	brlt	.+8      	; 0x1136 <_Z17showAmperageCharsh+0x8c>
    112e:	f7 fa       	bst	r15, 7
    1130:	f0 94       	com	r15
    1132:	f7 f8       	bld	r15, 7
    1134:	f0 94       	com	r15
	lcd.print(_diff, 4);
    1136:	24 e0       	ldi	r18, 0x04	; 4
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	b7 01       	movw	r22, r14
    113c:	a6 01       	movw	r20, r12
    113e:	87 ee       	ldi	r24, 0xE7	; 231
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
	
	lcdClearCell(9, 1, 7);
    1146:	47 e0       	ldi	r20, 0x07	; 7
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	89 e0       	ldi	r24, 0x09	; 9
    114c:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
	lcd.print(adsChars.measuredAmperage[_num], 5);
    1150:	cc 0f       	add	r28, r28
    1152:	dd 1f       	adc	r29, r29
    1154:	cc 0f       	add	r28, r28
    1156:	dd 1f       	adc	r29, r29
    1158:	c1 5b       	subi	r28, 0xB1	; 177
    115a:	de 4f       	sbci	r29, 0xFE	; 254
    115c:	48 81       	ld	r20, Y
    115e:	59 81       	ldd	r21, Y+1	; 0x01
    1160:	6a 81       	ldd	r22, Y+2	; 0x02
    1162:	7b 81       	ldd	r23, Y+3	; 0x03
    1164:	25 e0       	ldi	r18, 0x05	; 5
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	87 ee       	ldi	r24, 0xE7	; 231
    116a:	91 e0       	ldi	r25, 0x01	; 1
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
	lcdClearCell(0, 1, 6);
	float _diff = abs(adsChars.measuredAmperage[_num] - adsChars.perfectAmperage[_num]);
	lcd.print(_diff, 4);
	
	lcdClearCell(9, 1, 7);
	lcd.print(adsChars.measuredAmperage[_num], 5);
    117c:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <_ZN5Print5printEdi>

00001180 <_Z22showWindingCharsValuesh>:

/*
	Отображение характеристик по обмоткам
	_num - номер обмотки
*/
void showWindingCharsValues(byte _num) {
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	c8 2f       	mov	r28, r24
	lcdClearCell(5, 0, 7);
    118e:	47 e0       	ldi	r20, 0x07	; 7
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	85 e0       	ldi	r24, 0x05	; 5
    1194:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
	byte roundedSign = 2;
	lcd.print(adsChars.measuredAmperage[_num], 5);
    1198:	d0 e0       	ldi	r29, 0x00	; 0
    119a:	fe 01       	movw	r30, r28
    119c:	ee 0f       	add	r30, r30
    119e:	ff 1f       	adc	r31, r31
    11a0:	ee 0f       	add	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	e5 5a       	subi	r30, 0xA5	; 165
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	40 81       	ld	r20, Z
    11aa:	51 81       	ldd	r21, Z+1	; 0x01
    11ac:	62 81       	ldd	r22, Z+2	; 0x02
    11ae:	73 81       	ldd	r23, Z+3	; 0x03
    11b0:	25 e0       	ldi	r18, 0x05	; 5
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	87 ee       	ldi	r24, 0xE7	; 231
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
	
	lcdClearCell(2, 1, 8);
    11bc:	48 e0       	ldi	r20, 0x08	; 8
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
	if (adsChars.voltage[_num] < 100) {
    11c6:	fe 01       	movw	r30, r28
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	e1 5b       	subi	r30, 0xB1	; 177
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	c0 80       	ld	r12, Z
    11d6:	d1 80       	ldd	r13, Z+1	; 0x01
    11d8:	e2 80       	ldd	r14, Z+2	; 0x02
    11da:	f3 80       	ldd	r15, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	48 ec       	ldi	r20, 0xC8	; 200
    11e2:	52 e4       	ldi	r21, 0x42	; 66
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    11ec:	87 fd       	sbrc	r24, 7
    11ee:	39 c0       	rjmp	.+114    	; 0x1262 <_Z22showWindingCharsValuesh+0xe2>
		roundedSign = 2;
	} else if (adsChars.voltage[_num] < 1000) {
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a e7       	ldi	r20, 0x7A	; 122
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	c7 01       	movw	r24, r14
    11fa:	b6 01       	movw	r22, r12
    11fc:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    1200:	87 fd       	sbrc	r24, 7
    1202:	31 c0       	rjmp	.+98     	; 0x1266 <_Z22showWindingCharsValuesh+0xe6>
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
	} else {
		lcd.print(999);
    1204:	4a e0       	ldi	r20, 0x0A	; 10
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	67 ee       	ldi	r22, 0xE7	; 231
    120a:	73 e0       	ldi	r23, 0x03	; 3
    120c:	87 ee       	ldi	r24, 0xE7	; 231
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
		lcd.print(F("+"));
    1214:	68 e9       	ldi	r22, 0x98	; 152
    1216:	71 e0       	ldi	r23, 0x01	; 1
    1218:	87 ee       	ldi	r24, 0xE7	; 231
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
	}
	
	lcdClearCell(10, 1, 5);
    1220:	45 e0       	ldi	r20, 0x05	; 5
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	8a e0       	ldi	r24, 0x0A	; 10
    1226:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
	lcd.print(icError.curLvl[_num], 1);
    122a:	cc 0f       	add	r28, r28
    122c:	dd 1f       	adc	r29, r29
    122e:	cc 0f       	add	r28, r28
    1230:	dd 1f       	adc	r29, r29
    1232:	cc 5f       	subi	r28, 0xFC	; 252
    1234:	de 4f       	sbci	r29, 0xFE	; 254
    1236:	48 81       	ld	r20, Y
    1238:	59 81       	ldd	r21, Y+1	; 0x01
    123a:	6a 81       	ldd	r22, Y+2	; 0x02
    123c:	7b 81       	ldd	r23, Y+3	; 0x03
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	87 ee       	ldi	r24, 0xE7	; 231
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
	lcd.print(F("%"));
    124a:	66 e9       	ldi	r22, 0x96	; 150
    124c:	71 e0       	ldi	r23, 0x01	; 1
    124e:	87 ee       	ldi	r24, 0xE7	; 231
    1250:	91 e0       	ldi	r25, 0x01	; 1
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
		lcd.print(F("+"));
	}
	
	lcdClearCell(10, 1, 5);
	lcd.print(icError.curLvl[_num], 1);
	lcd.print(F("%"));
    125e:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
	byte roundedSign = 2;
	lcd.print(adsChars.measuredAmperage[_num], 5);
	
	lcdClearCell(2, 1, 8);
	if (adsChars.voltage[_num] < 100) {
		roundedSign = 2;
    1262:	22 e0       	ldi	r18, 0x02	; 2
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <_Z22showWindingCharsValuesh+0xe8>
	} else if (adsChars.voltage[_num] < 1000) {
		roundedSign = 1;
    1266:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		roundedSign = 0;
	}
	if (roundedSign > 0) {
		lcd.print(adsChars.voltage[_num], roundedSign);
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	b7 01       	movw	r22, r14
    126c:	a6 01       	movw	r20, r12
    126e:	87 ee       	ldi	r24, 0xE7	; 231
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    1276:	d4 cf       	rjmp	.-88     	; 0x1220 <_Z22showWindingCharsValuesh+0xa0>

00001278 <_Z13displayAsModev>:
/*
	Отображение динамиеских данных в зависимости от режима
*/
void displayAsMode() {
	// Если мы изменили режим отображения, то необходимо обновиь статику и динамику
	if (modeWork.current != modeWork.prev) {
    1278:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    127c:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <modeWork+0x1>
    1280:	89 17       	cp	r24, r25
    1282:	39 f0       	breq	.+14     	; 0x1292 <_Z13displayAsModev+0x1a>
		modeWork.prev = modeWork.current;
    1284:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <modeWork+0x1>
		lcdUpdateScreen = true;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
		displayStaticAsMode();
    128e:	0e 94 17 07 	call	0xe2e	; 0xe2e <_Z19displayStaticAsModev>
	}
	if (!lcdUpdateScreen) {
    1292:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <lcdUpdateScreen>
    1296:	88 23       	and	r24, r24
    1298:	09 f4       	brne	.+2      	; 0x129c <_Z13displayAsModev+0x24>
    129a:	90 c1       	rjmp	.+800    	; 0x15bc <_Z13displayAsModev+0x344>
		return;
	} 
	lcdUpdateScreen = false;
    129c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <lcdUpdateScreen>
	// обновляем динамику
	switch(modeWork.current) {
    12a0:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <modeWork>
    12a4:	8e 2f       	mov	r24, r30
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	fc 01       	movw	r30, r24
    12aa:	31 97       	sbiw	r30, 0x01	; 1
    12ac:	e6 31       	cpi	r30, 0x16	; 22
    12ae:	f1 05       	cpc	r31, r1
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <_Z13displayAsModev+0x3c>
    12b2:	84 c1       	rjmp	.+776    	; 0x15bc <_Z13displayAsModev+0x344>
    12b4:	ed 5a       	subi	r30, 0xAD	; 173
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__tablejump2__>
		case MW_SETUP_MANIPULATE_RELAY:
			lcdClearCell(0, 1, 3);
    12bc:	43 e0       	ldi	r20, 0x03	; 3
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			if (setDigit.value == 1) {
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e8       	ldi	r20, 0x80	; 128
    12cc:	5f e3       	ldi	r21, 0x3F	; 63
    12ce:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    12d2:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    12d6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    12da:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    12de:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    12e2:	81 11       	cpse	r24, r1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <_Z13displayAsModev+0x74>
				lcd.print(F("Yes"));
    12e6:	69 e8       	ldi	r22, 0x89	; 137
    12e8:	72 e0       	ldi	r23, 0x02	; 2
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <_Z13displayAsModev+0x78>
			} else {
				lcd.print(F("No"));
    12ec:	66 e8       	ldi	r22, 0x86	; 134
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	87 ee       	ldi	r24, 0xE7	; 231
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			}
			break;
		case MW_SETUP_GAIN_AMPERAGE:
		case MW_SETUP_GAIN_VOLTAGE:
			showGainInfo();
    12f8:	0c 94 1e 08 	jmp	0x103c	; 0x103c <_Z12showGainInfov>
			break;
		case MW_SETUP_IMPEDANCE:
			lcd.print(F("R1="));
    12fc:	62 e8       	ldi	r22, 0x82	; 130
    12fe:	72 e0       	ldi	r23, 0x02	; 2
    1300:	87 ee       	ldi	r24, 0xE7	; 231
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(settings.impedance[0], 1);
    1308:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <settings+0x1>
    130c:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <settings+0x2>
    1310:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <settings+0x3>
    1314:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <settings+0x4>
    1318:	21 e0       	ldi	r18, 0x01	; 1
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	87 ee       	ldi	r24, 0xE7	; 231
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
			lcd.setCursor(8, 0);
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	68 e0       	ldi	r22, 0x08	; 8
    1328:	87 ee       	ldi	r24, 0xE7	; 231
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("R2="));
    1330:	6e e7       	ldi	r22, 0x7E	; 126
    1332:	72 e0       	ldi	r23, 0x02	; 2
    1334:	87 ee       	ldi	r24, 0xE7	; 231
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcdClearCell(11, 0, 5);
    133c:	45 e0       	ldi	r20, 0x05	; 5
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	8b e0       	ldi	r24, 0x0B	; 11
    1342:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcd.print(settings.impedance[1], 1);
    1346:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <settings+0x5>
    134a:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <settings+0x6>
    134e:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <settings+0x7>
    1352:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <settings+0x8>
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	87 ee       	ldi	r24, 0xE7	; 231
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
			lcd.setCursor(0, 1);
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	87 ee       	ldi	r24, 0xE7	; 231
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("R3="));
    136e:	6a e7       	ldi	r22, 0x7A	; 122
    1370:	72 e0       	ldi	r23, 0x02	; 2
    1372:	87 ee       	ldi	r24, 0xE7	; 231
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcdClearCell(3, 1, 5);
    137a:	45 e0       	ldi	r20, 0x05	; 5
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	83 e0       	ldi	r24, 0x03	; 3
    1380:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcd.print(settings.impedance[2], 1);
    1384:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <settings+0x9>
    1388:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <settings+0xa>
    138c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <settings+0xb>
    1390:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <settings+0xc>
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	28 c0       	rjmp	.+80     	; 0x13ea <_Z13displayAsModev+0x172>
		case MW_SETUP_MULT_VOLTAGE_BC:
		case MW_SETUP_MULT_VOLTAGE_AC:
		case MW_SETUP_MULT_AMPERAGE_AB:
		case MW_SETUP_MULT_AMPERAGE_BC:
		case MW_SETUP_MULT_AMPERAGE_AC:
			lcdClearCell(7, 0, 8);
    139a:	48 e0       	ldi	r20, 0x08	; 8
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	87 e0       	ldi	r24, 0x07	; 7
    13a0:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcd.print(F("x"));
    13a4:	68 e7       	ldi	r22, 0x78	; 120
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	87 ee       	ldi	r24, 0xE7	; 231
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(setDigit.curMultiplier, 3);
    13b0:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <setDigit+0x4>
    13b4:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <setDigit+0x5>
    13b8:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <setDigit+0x6>
    13bc:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <setDigit+0x7>
    13c0:	23 e0       	ldi	r18, 0x03	; 3
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	87 ee       	ldi	r24, 0xE7	; 231
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
			lcdClearCell(0, 1, 16);
    13cc:	40 e1       	ldi	r20, 0x10	; 16
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcd.print(setDigit.value, 3);
    13d6:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    13da:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    13de:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    13e2:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    13e6:	23 e0       	ldi	r18, 0x03	; 3
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	87 ee       	ldi	r24, 0xE7	; 231
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
			break;
		case MW_SHOW_ERRORS_COUNTERS:
			lcdClearCell(11, 0, 4);
    13f2:	44 e0       	ldi	r20, 0x04	; 4
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	8b e0       	ldi	r24, 0x0B	; 11
    13f8:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(0);
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(3, 1, 4);
    1402:	44 e0       	ldi	r20, 0x04	; 4
    1404:	61 e0       	ldi	r22, 0x01	; 1
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(1);
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_Z19lcdPrintCriticalLvlh>
			lcdClearCell(11, 1, 4);
    1412:	44 e0       	ldi	r20, 0x04	; 4
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	8b e0       	ldi	r24, 0x0B	; 11
    1418:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrintCriticalLvl(2);
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <_Z19lcdPrintCriticalLvlh>
			break;
		case MW_SHOW_ERRORS:
			lcdClearCell(3, 0, 5);
    1422:	45 e0       	ldi	r20, 0x05	; 5
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	83 e0       	ldi	r24, 0x03	; 3
    1428:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(0);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 66 06 	call	0xccc	; 0xccc <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(11, 0, 5);
    1432:	45 e0       	ldi	r20, 0x05	; 5
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	8b e0       	ldi	r24, 0x0B	; 11
    1438:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(1);
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	0e 94 66 06 	call	0xccc	; 0xccc <_Z27lcdPrinRoundedCurErrorLevelh>
			lcdClearCell(3, 1, 5);
    1442:	45 e0       	ldi	r20, 0x05	; 5
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrinRoundedCurErrorLevel(2);
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	0c 94 66 06 	jmp	0xccc	; 0xccc <_Z27lcdPrinRoundedCurErrorLevelh>
			break;
		case MW_SHOW_ERRORS_DIFF:
			lcdClearCell(1, 0, 6);
    1452:	46 e0       	ldi	r20, 0x06	; 6
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrintAmperageDiff(0);
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 24 06 	call	0xc48	; 0xc48 <_Z20lcdPrintAmperageDiffh>
			lcdClearCell(9, 0, 6);
    1462:	46 e0       	ldi	r20, 0x06	; 6
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	89 e0       	ldi	r24, 0x09	; 9
    1468:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrintAmperageDiff(1);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 24 06 	call	0xc48	; 0xc48 <_Z20lcdPrintAmperageDiffh>
			lcdClearCell(1, 1, 6);
    1472:	46 e0       	ldi	r20, 0x06	; 6
    1474:	61 e0       	ldi	r22, 0x01	; 1
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcdPrintAmperageDiff(2);
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	0e 94 24 06 	call	0xc48	; 0xc48 <_Z20lcdPrintAmperageDiffh>
			lcdClearCell(9, 1, 6);
    1482:	46 e0       	ldi	r20, 0x06	; 6
    1484:	61 e0       	ldi	r22, 0x01	; 1
    1486:	89 e0       	ldi	r24, 0x09	; 9
    1488:	0e 94 fc 07 	call	0xff8	; 0xff8 <_Z12lcdClearCellhhh>
			lcd.print(icError.fullError, 4);
    148c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1490:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    1494:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
    1498:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
    149c:	24 e0       	ldi	r18, 0x04	; 4
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	a4 cf       	rjmp	.-184    	; 0x13ea <_Z13displayAsModev+0x172>
			break;
		case MW_SHOW_AMPERAGE:
			lcd.clear();
    14a2:	87 ee       	ldi	r24, 0xE7	; 231
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN17LiquidCrystal_I2C5clearEv>
			lcd.print(F("P "));
    14aa:	65 e7       	ldi	r22, 0x75	; 117
    14ac:	72 e0       	ldi	r23, 0x02	; 2
    14ae:	87 ee       	ldi	r24, 0xE7	; 231
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[0], 2);
    14b6:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <adsChars+0x18>
    14ba:	50 91 68 01 	lds	r21, 0x0168	; 0x800168 <adsChars+0x19>
    14be:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <adsChars+0x1a>
    14c2:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <adsChars+0x1b>
    14c6:	22 e0       	ldi	r18, 0x02	; 2
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	87 ee       	ldi	r24, 0xE7	; 231
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
			lcd.print(F("#"));
    14d2:	63 e7       	ldi	r22, 0x73	; 115
    14d4:	72 e0       	ldi	r23, 0x02	; 2
    14d6:	87 ee       	ldi	r24, 0xE7	; 231
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[1], 2);
    14de:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <adsChars+0x1c>
    14e2:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <adsChars+0x1d>
    14e6:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <adsChars+0x1e>
    14ea:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <adsChars+0x1f>
    14ee:	22 e0       	ldi	r18, 0x02	; 2
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	87 ee       	ldi	r24, 0xE7	; 231
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
			lcd.print(F("#"));
    14fa:	61 e7       	ldi	r22, 0x71	; 113
    14fc:	72 e0       	ldi	r23, 0x02	; 2
    14fe:	87 ee       	ldi	r24, 0xE7	; 231
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.perfectAmperage[2], 2);
    1506:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <adsChars+0x20>
    150a:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <adsChars+0x21>
    150e:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <adsChars+0x22>
    1512:	70 91 72 01 	lds	r23, 0x0172	; 0x800172 <adsChars+0x23>
    1516:	22 e0       	ldi	r18, 0x02	; 2
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	87 ee       	ldi	r24, 0xE7	; 231
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
	
			lcd.setCursor(0, 1);
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	87 ee       	ldi	r24, 0xE7	; 231
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>
			lcd.print(F("M "));
    152e:	6e e6       	ldi	r22, 0x6E	; 110
    1530:	72 e0       	ldi	r23, 0x02	; 2
    1532:	87 ee       	ldi	r24, 0xE7	; 231
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[0], 2);
    153a:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <adsChars+0xc>
    153e:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <adsChars+0xd>
    1542:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <adsChars+0xe>
    1546:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <adsChars+0xf>
    154a:	22 e0       	ldi	r18, 0x02	; 2
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	87 ee       	ldi	r24, 0xE7	; 231
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
			lcd.print(F("#"));
    1556:	6c e6       	ldi	r22, 0x6C	; 108
    1558:	72 e0       	ldi	r23, 0x02	; 2
    155a:	87 ee       	ldi	r24, 0xE7	; 231
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[1], 2);
    1562:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <adsChars+0x10>
    1566:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <adsChars+0x11>
    156a:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <adsChars+0x12>
    156e:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <adsChars+0x13>
    1572:	22 e0       	ldi	r18, 0x02	; 2
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	87 ee       	ldi	r24, 0xE7	; 231
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
			lcd.print(F("#"));
    157e:	6a e6       	ldi	r22, 0x6A	; 106
    1580:	72 e0       	ldi	r23, 0x02	; 2
    1582:	87 ee       	ldi	r24, 0xE7	; 231
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
			lcd.print(adsChars.measuredAmperage[2], 2);
    158a:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <adsChars+0x14>
    158e:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <adsChars+0x15>
    1592:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <adsChars+0x16>
    1596:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <adsChars+0x17>
    159a:	22 e0       	ldi	r18, 0x02	; 2
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	25 cf       	rjmp	.-438    	; 0x13ea <_Z13displayAsModev+0x172>
			break;
		case MW_SHOW_AMPERAGE_AB:
			showAmperageChars(0);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <_Z13displayAsModev+0x332>
			break;
		case MW_SHOW_AMPERAGE_BC:
			showAmperageChars(1);
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <_Z13displayAsModev+0x332>
			break;
		case MW_SHOW_AMPERAGE_AC:
			showAmperageChars(2);
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <_Z17showAmperageCharsh>
			break;
		case MW_SHOW_WINDING_CHARS_AB:
			showWindingCharsValues(0);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <_Z13displayAsModev+0x340>
			break;
		case MW_SHOW_WINDING_CHARS_BC:
			showWindingCharsValues(1);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <_Z13displayAsModev+0x340>
			break;
		case MW_SHOW_WINDING_CHARS_AC:
			showWindingCharsValues(2);
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <_Z22showWindingCharsValuesh>
    15bc:	08 95       	ret

000015be <loop>:
		modeWork.current = MW_NEED_SETUP;
		Serial.println(F("|-Need setup params-|"));
	}
}

void loop() {
    15be:	3f 92       	push	r3
    15c0:	4f 92       	push	r4
    15c2:	5f 92       	push	r5
    15c4:	6f 92       	push	r6
    15c6:	7f 92       	push	r7
    15c8:	8f 92       	push	r8
    15ca:	9f 92       	push	r9
    15cc:	af 92       	push	r10
    15ce:	bf 92       	push	r11
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <loop+0x24>
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <loop+0x26>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <loop+0x28>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	// Следим за кнопками
	button1Callback.tick();
    15ea:	86 e4       	ldi	r24, 0x46	; 70
    15ec:	92 e0       	ldi	r25, 0x02	; 2
    15ee:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN9OneButton4tickEv>
	button2Callback.tick();
    15f2:	85 e2       	ldi	r24, 0x25	; 37
    15f4:	92 e0       	ldi	r25, 0x02	; 2
    15f6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN9OneButton4tickEv>
	// Отображаем данные на экран
	displayAsMode();
    15fa:	0e 94 3c 09 	call	0x1278	; 0x1278 <_Z13displayAsModev>
	// Если в режиме измерений
	
	if(settings.isReadyToWork == MM_WORK) {
    15fe:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <settings>
    1602:	88 23       	and	r24, r24
    1604:	09 f4       	brne	.+2      	; 0x1608 <loop+0x4a>
    1606:	96 c2       	rjmp	.+1324   	; 0x1b34 <loop+0x576>
		// получаем параметры
		getAdsParams();
    1608:	0e 94 1b 04 	call	0x836	; 0x836 <_Z12getAdsParamsv>
		// и продолжаем получать пока не накопим 50 измерений
		if (adsChars.currentMeasurement < adsChars.measurementsCount) {
    160c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <adsChars+0x3d>
    1610:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <adsChars+0x3c>
    1614:	89 17       	cp	r24, r25
    1616:	20 f4       	brcc	.+8      	; 0x1620 <loop+0x62>
			adsChars.currentMeasurement++;
    1618:	8f 5f       	subi	r24, 0xFF	; 255
    161a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <adsChars+0x3d>
    161e:	8a c2       	rjmp	.+1300   	; 0x1b34 <loop+0x576>
		} else {
			// после накопления measurementsCount обновляем экран и смотрим на наличия межветковых замыканий
			lcdUpdateScreen = true;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
    1626:	0e 94 b6 22 	call	0x456c	; 0x456c <millis>
    162a:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <__data_end>
    162e:	10 91 e1 01 	lds	r17, 0x01E1	; 0x8001e1 <__data_end+0x1>
    1632:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__data_end+0x2>
    1636:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__data_end+0x3>
    163a:	6b 01       	movw	r12, r22
    163c:	7c 01       	movw	r14, r24
    163e:	c0 1a       	sub	r12, r16
    1640:	d1 0a       	sbc	r13, r17
    1642:	e2 0a       	sbc	r14, r18
    1644:	f3 0a       	sbc	r15, r19
    1646:	c9 82       	std	Y+1, r12	; 0x01
    1648:	da 82       	std	Y+2, r13	; 0x02
    164a:	eb 82       	std	Y+3, r14	; 0x03
    164c:	fc 82       	std	Y+4, r15	; 0x04
    164e:	0f e4       	ldi	r16, 0x4F	; 79
    1650:	11 e0       	ldi	r17, 0x01	; 1
    1652:	8b ef       	ldi	r24, 0xFB	; 251
    1654:	e8 2e       	mov	r14, r24
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	f8 2e       	mov	r15, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	c9 2e       	mov	r12, r25
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	d9 2e       	mov	r13, r25
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
			for (byte i = 0; i < 3; i++) {
    166a:	31 2c       	mov	r3, r1
				
				// вычисляем реальные значения напряжения, тока и идеального тока от измеренного напряжения и известного сопротивления
				adsChars.voltage[i] = adsChars.sumVoltage[i] / adsChars.measurementsCount * ads.voltageStep * settings.multiplierVoltage[i];
    166c:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <adsChars+0x3c>
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__floatsisf>
    167a:	2b 01       	movw	r4, r22
    167c:	3c 01       	movw	r6, r24
    167e:	9b 01       	movw	r18, r22
    1680:	ac 01       	movw	r20, r24
    1682:	d8 01       	movw	r26, r16
    1684:	94 96       	adiw	r26, 0x24	; 36
    1686:	6d 91       	ld	r22, X+
    1688:	7d 91       	ld	r23, X+
    168a:	8d 91       	ld	r24, X+
    168c:	9c 91       	ld	r25, X
    168e:	97 97       	sbiw	r26, 0x27	; 39
    1690:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
    1694:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <ads+0x18>
    1698:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <ads+0x19>
    169c:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <ads+0x1a>
    16a0:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <ads+0x1b>
    16a4:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    16a8:	f7 01       	movw	r30, r14
    16aa:	20 89       	ldd	r18, Z+16	; 0x10
    16ac:	31 89       	ldd	r19, Z+17	; 0x11
    16ae:	42 89       	ldd	r20, Z+18	; 0x12
    16b0:	53 89       	ldd	r21, Z+19	; 0x13
    16b2:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    16b6:	4b 01       	movw	r8, r22
    16b8:	5c 01       	movw	r10, r24
    16ba:	d8 01       	movw	r26, r16
    16bc:	6d 93       	st	X+, r22
    16be:	7d 93       	st	X+, r23
    16c0:	8d 93       	st	X+, r24
    16c2:	9c 93       	st	X, r25
    16c4:	13 97       	sbiw	r26, 0x03	; 3
				adsChars.measuredAmperage[i] = adsChars.sumMeasuredAmperage[i] / adsChars.measurementsCount * ads.amperageStep * settings.multiplierAmperage[i];
    16c6:	a3 01       	movw	r20, r6
    16c8:	92 01       	movw	r18, r4
    16ca:	d0 96       	adiw	r26, 0x30	; 48
    16cc:	6d 91       	ld	r22, X+
    16ce:	7d 91       	ld	r23, X+
    16d0:	8d 91       	ld	r24, X+
    16d2:	9c 91       	ld	r25, X
    16d4:	d3 97       	sbiw	r26, 0x33	; 51
    16d6:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
    16da:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <ads+0x1c>
    16de:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <ads+0x1d>
    16e2:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <ads+0x1e>
    16e6:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <ads+0x1f>
    16ea:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    16ee:	f7 01       	movw	r30, r14
    16f0:	24 8d       	ldd	r18, Z+28	; 0x1c
    16f2:	35 8d       	ldd	r19, Z+29	; 0x1d
    16f4:	46 8d       	ldd	r20, Z+30	; 0x1e
    16f6:	57 8d       	ldd	r21, Z+31	; 0x1f
    16f8:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    16fc:	d8 01       	movw	r26, r16
    16fe:	1c 96       	adiw	r26, 0x0c	; 12
    1700:	6d 93       	st	X+, r22
    1702:	7d 93       	st	X+, r23
    1704:	8d 93       	st	X+, r24
    1706:	9c 93       	st	X, r25
    1708:	1f 97       	sbiw	r26, 0x0f	; 15
				adsChars.perfectAmperage[i] = adsChars.voltage[i] / settings.impedance[i];
    170a:	f7 01       	movw	r30, r14
    170c:	21 81       	ldd	r18, Z+1	; 0x01
    170e:	32 81       	ldd	r19, Z+2	; 0x02
    1710:	43 81       	ldd	r20, Z+3	; 0x03
    1712:	54 81       	ldd	r21, Z+4	; 0x04
    1714:	c5 01       	movw	r24, r10
    1716:	b4 01       	movw	r22, r8
    1718:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
    171c:	d8 01       	movw	r26, r16
    171e:	58 96       	adiw	r26, 0x18	; 24
    1720:	6d 93       	st	X+, r22
    1722:	7d 93       	st	X+, r23
    1724:	8d 93       	st	X+, r24
    1726:	9c 93       	st	X, r25
    1728:	5b 97       	sbiw	r26, 0x1b	; 27
				icError.curLvl[i] = getICLevelByWinding(i);
    172a:	83 2d       	mov	r24, r3
    172c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_Z19getICLevelByWindingh>
    1730:	f6 01       	movw	r30, r12
    1732:	64 83       	std	Z+4, r22	; 0x04
    1734:	75 83       	std	Z+5, r23	; 0x05
    1736:	86 83       	std	Z+6, r24	; 0x06
    1738:	97 83       	std	Z+7, r25	; 0x07

				if (canSerial) {
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	ab 81       	ldd	r26, Y+3	; 0x03
    1740:	bc 81       	ldd	r27, Y+4	; 0x04
    1742:	89 3e       	cpi	r24, 0xE9	; 233
    1744:	93 40       	sbci	r25, 0x03	; 3
    1746:	a1 05       	cpc	r26, r1
    1748:	b1 05       	cpc	r27, r1
    174a:	08 f4       	brcc	.+2      	; 0x174e <loop+0x190>
    174c:	03 c1       	rjmp	.+518    	; 0x1954 <loop+0x396>
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("mv")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(adsChars.voltage[i], 5); Serial.println(F("-|"));
    174e:	62 e5       	ldi	r22, 0x52	; 82
    1750:	73 e0       	ldi	r23, 0x03	; 3
    1752:	85 e3       	ldi	r24, 0x35	; 53
    1754:	93 e0       	ldi	r25, 0x03	; 3
    1756:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    175a:	4a e0       	ldi	r20, 0x0A	; 10
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	6d 81       	ldd	r22, Y+5	; 0x05
    1760:	7e 81       	ldd	r23, Y+6	; 0x06
    1762:	85 e3       	ldi	r24, 0x35	; 53
    1764:	93 e0       	ldi	r25, 0x03	; 3
    1766:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    176a:	6f e4       	ldi	r22, 0x4F	; 79
    176c:	73 e0       	ldi	r23, 0x03	; 3
    176e:	85 e3       	ldi	r24, 0x35	; 53
    1770:	93 e0       	ldi	r25, 0x03	; 3
    1772:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1776:	4a e0       	ldi	r20, 0x0A	; 10
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	6d 81       	ldd	r22, Y+5	; 0x05
    177c:	7e 81       	ldd	r23, Y+6	; 0x06
    177e:	85 e3       	ldi	r24, 0x35	; 53
    1780:	93 e0       	ldi	r25, 0x03	; 3
    1782:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    1786:	6d e4       	ldi	r22, 0x4D	; 77
    1788:	73 e0       	ldi	r23, 0x03	; 3
    178a:	85 e3       	ldi	r24, 0x35	; 53
    178c:	93 e0       	ldi	r25, 0x03	; 3
    178e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1792:	d8 01       	movw	r26, r16
    1794:	4d 91       	ld	r20, X+
    1796:	5d 91       	ld	r21, X+
    1798:	6d 91       	ld	r22, X+
    179a:	7c 91       	ld	r23, X
    179c:	25 e0       	ldi	r18, 0x05	; 5
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	85 e3       	ldi	r24, 0x35	; 53
    17a2:	93 e0       	ldi	r25, 0x03	; 3
    17a4:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    17a8:	6a e4       	ldi	r22, 0x4A	; 74
    17aa:	73 e0       	ldi	r23, 0x03	; 3
    17ac:	85 e3       	ldi	r24, 0x35	; 53
    17ae:	93 e0       	ldi	r25, 0x03	; 3
    17b0:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("ma")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(adsChars.measuredAmperage[i], 5);  Serial.println(F("-|"));
    17b4:	66 e4       	ldi	r22, 0x46	; 70
    17b6:	73 e0       	ldi	r23, 0x03	; 3
    17b8:	85 e3       	ldi	r24, 0x35	; 53
    17ba:	93 e0       	ldi	r25, 0x03	; 3
    17bc:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    17c0:	4a e0       	ldi	r20, 0x0A	; 10
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	6d 81       	ldd	r22, Y+5	; 0x05
    17c6:	7e 81       	ldd	r23, Y+6	; 0x06
    17c8:	85 e3       	ldi	r24, 0x35	; 53
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    17d0:	63 e4       	ldi	r22, 0x43	; 67
    17d2:	73 e0       	ldi	r23, 0x03	; 3
    17d4:	85 e3       	ldi	r24, 0x35	; 53
    17d6:	93 e0       	ldi	r25, 0x03	; 3
    17d8:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    17dc:	4a e0       	ldi	r20, 0x0A	; 10
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	6d 81       	ldd	r22, Y+5	; 0x05
    17e2:	7e 81       	ldd	r23, Y+6	; 0x06
    17e4:	85 e3       	ldi	r24, 0x35	; 53
    17e6:	93 e0       	ldi	r25, 0x03	; 3
    17e8:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    17ec:	61 e4       	ldi	r22, 0x41	; 65
    17ee:	73 e0       	ldi	r23, 0x03	; 3
    17f0:	85 e3       	ldi	r24, 0x35	; 53
    17f2:	93 e0       	ldi	r25, 0x03	; 3
    17f4:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    17f8:	f8 01       	movw	r30, r16
    17fa:	44 85       	ldd	r20, Z+12	; 0x0c
    17fc:	55 85       	ldd	r21, Z+13	; 0x0d
    17fe:	66 85       	ldd	r22, Z+14	; 0x0e
    1800:	77 85       	ldd	r23, Z+15	; 0x0f
    1802:	25 e0       	ldi	r18, 0x05	; 5
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	85 e3       	ldi	r24, 0x35	; 53
    1808:	93 e0       	ldi	r25, 0x03	; 3
    180a:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    180e:	6e e3       	ldi	r22, 0x3E	; 62
    1810:	73 e0       	ldi	r23, 0x03	; 3
    1812:	85 e3       	ldi	r24, 0x35	; 53
    1814:	93 e0       	ldi	r25, 0x03	; 3
    1816:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("pa")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(adsChars.perfectAmperage[i], 5);  Serial.println(F("-|"));
    181a:	6a e3       	ldi	r22, 0x3A	; 58
    181c:	73 e0       	ldi	r23, 0x03	; 3
    181e:	85 e3       	ldi	r24, 0x35	; 53
    1820:	93 e0       	ldi	r25, 0x03	; 3
    1822:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1826:	4a e0       	ldi	r20, 0x0A	; 10
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	6d 81       	ldd	r22, Y+5	; 0x05
    182c:	7e 81       	ldd	r23, Y+6	; 0x06
    182e:	85 e3       	ldi	r24, 0x35	; 53
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    1836:	67 e3       	ldi	r22, 0x37	; 55
    1838:	73 e0       	ldi	r23, 0x03	; 3
    183a:	85 e3       	ldi	r24, 0x35	; 53
    183c:	93 e0       	ldi	r25, 0x03	; 3
    183e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1842:	4a e0       	ldi	r20, 0x0A	; 10
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	6d 81       	ldd	r22, Y+5	; 0x05
    1848:	7e 81       	ldd	r23, Y+6	; 0x06
    184a:	85 e3       	ldi	r24, 0x35	; 53
    184c:	93 e0       	ldi	r25, 0x03	; 3
    184e:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    1852:	65 e3       	ldi	r22, 0x35	; 53
    1854:	73 e0       	ldi	r23, 0x03	; 3
    1856:	85 e3       	ldi	r24, 0x35	; 53
    1858:	93 e0       	ldi	r25, 0x03	; 3
    185a:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    185e:	d8 01       	movw	r26, r16
    1860:	58 96       	adiw	r26, 0x18	; 24
    1862:	4d 91       	ld	r20, X+
    1864:	5d 91       	ld	r21, X+
    1866:	6d 91       	ld	r22, X+
    1868:	7c 91       	ld	r23, X
    186a:	5b 97       	sbiw	r26, 0x1b	; 27
    186c:	25 e0       	ldi	r18, 0x05	; 5
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	85 e3       	ldi	r24, 0x35	; 53
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    1878:	62 e3       	ldi	r22, 0x32	; 50
    187a:	73 e0       	ldi	r23, 0x03	; 3
    187c:	85 e3       	ldi	r24, 0x35	; 53
    187e:	93 e0       	ldi	r25, 0x03	; 3
    1880:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("el")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(icError.curLvl[i], 2);  Serial.println(F("-|"));
    1884:	6e e2       	ldi	r22, 0x2E	; 46
    1886:	73 e0       	ldi	r23, 0x03	; 3
    1888:	85 e3       	ldi	r24, 0x35	; 53
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1890:	4a e0       	ldi	r20, 0x0A	; 10
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	6d 81       	ldd	r22, Y+5	; 0x05
    1896:	7e 81       	ldd	r23, Y+6	; 0x06
    1898:	85 e3       	ldi	r24, 0x35	; 53
    189a:	93 e0       	ldi	r25, 0x03	; 3
    189c:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    18a0:	6b e2       	ldi	r22, 0x2B	; 43
    18a2:	73 e0       	ldi	r23, 0x03	; 3
    18a4:	85 e3       	ldi	r24, 0x35	; 53
    18a6:	93 e0       	ldi	r25, 0x03	; 3
    18a8:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    18ac:	4a e0       	ldi	r20, 0x0A	; 10
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	6d 81       	ldd	r22, Y+5	; 0x05
    18b2:	7e 81       	ldd	r23, Y+6	; 0x06
    18b4:	85 e3       	ldi	r24, 0x35	; 53
    18b6:	93 e0       	ldi	r25, 0x03	; 3
    18b8:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    18bc:	69 e2       	ldi	r22, 0x29	; 41
    18be:	73 e0       	ldi	r23, 0x03	; 3
    18c0:	85 e3       	ldi	r24, 0x35	; 53
    18c2:	93 e0       	ldi	r25, 0x03	; 3
    18c4:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    18c8:	f6 01       	movw	r30, r12
    18ca:	44 81       	ldd	r20, Z+4	; 0x04
    18cc:	55 81       	ldd	r21, Z+5	; 0x05
    18ce:	66 81       	ldd	r22, Z+6	; 0x06
    18d0:	77 81       	ldd	r23, Z+7	; 0x07
    18d2:	22 e0       	ldi	r18, 0x02	; 2
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	85 e3       	ldi	r24, 0x35	; 53
    18d8:	93 e0       	ldi	r25, 0x03	; 3
    18da:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    18de:	66 e2       	ldi	r22, 0x26	; 38
    18e0:	73 e0       	ldi	r23, 0x03	; 3
    18e2:	85 e3       	ldi	r24, 0x35	; 53
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("ed")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(icError.diff[i]);  Serial.println(F("-|"));
    18ea:	62 e2       	ldi	r22, 0x22	; 34
    18ec:	73 e0       	ldi	r23, 0x03	; 3
    18ee:	85 e3       	ldi	r24, 0x35	; 53
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    18f6:	4a e0       	ldi	r20, 0x0A	; 10
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	6d 81       	ldd	r22, Y+5	; 0x05
    18fc:	7e 81       	ldd	r23, Y+6	; 0x06
    18fe:	85 e3       	ldi	r24, 0x35	; 53
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    1906:	6f e1       	ldi	r22, 0x1F	; 31
    1908:	73 e0       	ldi	r23, 0x03	; 3
    190a:	85 e3       	ldi	r24, 0x35	; 53
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1912:	4a e0       	ldi	r20, 0x0A	; 10
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	6d 81       	ldd	r22, Y+5	; 0x05
    1918:	7e 81       	ldd	r23, Y+6	; 0x06
    191a:	85 e3       	ldi	r24, 0x35	; 53
    191c:	93 e0       	ldi	r25, 0x03	; 3
    191e:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    1922:	6d e1       	ldi	r22, 0x1D	; 29
    1924:	73 e0       	ldi	r23, 0x03	; 3
    1926:	85 e3       	ldi	r24, 0x35	; 53
    1928:	93 e0       	ldi	r25, 0x03	; 3
    192a:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    192e:	d6 01       	movw	r26, r12
    1930:	93 96       	adiw	r26, 0x23	; 35
    1932:	4d 91       	ld	r20, X+
    1934:	5d 91       	ld	r21, X+
    1936:	6d 91       	ld	r22, X+
    1938:	7c 91       	ld	r23, X
    193a:	96 97       	sbiw	r26, 0x26	; 38
    193c:	22 e0       	ldi	r18, 0x02	; 2
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	85 e3       	ldi	r24, 0x35	; 53
    1942:	93 e0       	ldi	r25, 0x03	; 3
    1944:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    1948:	6a e1       	ldi	r22, 0x1A	; 26
    194a:	73 e0       	ldi	r23, 0x03	; 3
    194c:	85 e3       	ldi	r24, 0x35	; 53
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
			adsChars.currentMeasurement++;
		} else {
			// после накопления measurementsCount обновляем экран и смотрим на наличия межветковых замыканий
			lcdUpdateScreen = true;
			bool canSerial = millis() - serialUpdateStamp > 1000? true: false;
			for (byte i = 0; i < 3; i++) {
    1954:	33 94       	inc	r3
    1956:	0c 5f       	subi	r16, 0xFC	; 252
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	b4 e0       	ldi	r27, 0x04	; 4
    195c:	eb 0e       	add	r14, r27
    195e:	f1 1c       	adc	r15, r1
    1960:	e4 e0       	ldi	r30, 0x04	; 4
    1962:	ce 0e       	add	r12, r30
    1964:	d1 1c       	adc	r13, r1
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	93 e0       	ldi	r25, 0x03	; 3
    1972:	39 12       	cpse	r3, r25
    1974:	7b ce       	rjmp	.-778    	; 0x166c <loop+0xae>
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("pa")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(adsChars.perfectAmperage[i], 5);  Serial.println(F("-|"));
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("el")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(icError.curLvl[i], 2);  Serial.println(F("-|"));
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("ed")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(icError.diff[i]);  Serial.println(F("-|"));
				}
			}
			if (canSerial) {
    1976:	c9 80       	ldd	r12, Y+1	; 0x01
    1978:	da 80       	ldd	r13, Y+2	; 0x02
    197a:	eb 80       	ldd	r14, Y+3	; 0x03
    197c:	fc 80       	ldd	r15, Y+4	; 0x04
    197e:	29 ee       	ldi	r18, 0xE9	; 233
    1980:	c2 16       	cp	r12, r18
    1982:	23 e0       	ldi	r18, 0x03	; 3
    1984:	d2 06       	cpc	r13, r18
    1986:	e1 04       	cpc	r14, r1
    1988:	f1 04       	cpc	r15, r1
    198a:	08 f4       	brcc	.+2      	; 0x198e <loop+0x3d0>
    198c:	69 c0       	rjmp	.+210    	; 0x1a60 <loop+0x4a2>
    198e:	00 e1       	ldi	r16, 0x10	; 16
    1990:	11 e0       	ldi	r17, 0x01	; 1
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
				for (byte i = 0; i < 3; i++) {
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("ec")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(icError.criticalLvlCount[i]);  Serial.println(F("-|"));
    199a:	66 e1       	ldi	r22, 0x16	; 22
    199c:	73 e0       	ldi	r23, 0x03	; 3
    199e:	85 e3       	ldi	r24, 0x35	; 53
    19a0:	93 e0       	ldi	r25, 0x03	; 3
    19a2:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    19a6:	4a e0       	ldi	r20, 0x0A	; 10
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	69 81       	ldd	r22, Y+1	; 0x01
    19ac:	7a 81       	ldd	r23, Y+2	; 0x02
    19ae:	85 e3       	ldi	r24, 0x35	; 53
    19b0:	93 e0       	ldi	r25, 0x03	; 3
    19b2:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    19b6:	63 e1       	ldi	r22, 0x13	; 19
    19b8:	73 e0       	ldi	r23, 0x03	; 3
    19ba:	85 e3       	ldi	r24, 0x35	; 53
    19bc:	93 e0       	ldi	r25, 0x03	; 3
    19be:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    19c2:	4a e0       	ldi	r20, 0x0A	; 10
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	69 81       	ldd	r22, Y+1	; 0x01
    19c8:	7a 81       	ldd	r23, Y+2	; 0x02
    19ca:	85 e3       	ldi	r24, 0x35	; 53
    19cc:	93 e0       	ldi	r25, 0x03	; 3
    19ce:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    19d2:	61 e1       	ldi	r22, 0x11	; 17
    19d4:	73 e0       	ldi	r23, 0x03	; 3
    19d6:	85 e3       	ldi	r24, 0x35	; 53
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    19de:	d8 01       	movw	r26, r16
    19e0:	6d 91       	ld	r22, X+
    19e2:	7d 91       	ld	r23, X+
    19e4:	8d 01       	movw	r16, r26
    19e6:	4a e0       	ldi	r20, 0x0A	; 10
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	85 e3       	ldi	r24, 0x35	; 53
    19ec:	93 e0       	ldi	r25, 0x03	; 3
    19ee:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    19f2:	6e e0       	ldi	r22, 0x0E	; 14
    19f4:	73 e0       	ldi	r23, 0x03	; 3
    19f6:	85 e3       	ldi	r24, 0x35	; 53
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	31 96       	adiw	r30, 0x01	; 1
    1a04:	fa 83       	std	Y+2, r31	; 0x02
    1a06:	e9 83       	std	Y+1, r30	; 0x01
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("el")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(icError.curLvl[i], 2);  Serial.println(F("-|"));
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("ed")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(icError.diff[i]);  Serial.println(F("-|"));
				}
			}
			if (canSerial) {
				for (byte i = 0; i < 3; i++) {
    1a08:	34 97       	sbiw	r30, 0x04	; 4
    1a0a:	39 f6       	brne	.-114    	; 0x199a <loop+0x3dc>
					Serial.print(F("|-w")); Serial.print((i + 1)); Serial.print(F("ec")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(icError.criticalLvlCount[i]);  Serial.println(F("-|"));
				}
				Serial.print(F("|-fe="));Serial.println(icError.fullError, 5);  Serial.println(F("-|"));
    1a0c:	68 e0       	ldi	r22, 0x08	; 8
    1a0e:	73 e0       	ldi	r23, 0x03	; 3
    1a10:	85 e3       	ldi	r24, 0x35	; 53
    1a12:	93 e0       	ldi	r25, 0x03	; 3
    1a14:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1a18:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1a1c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
    1a20:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
    1a24:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
    1a28:	25 e0       	ldi	r18, 0x05	; 5
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	85 e3       	ldi	r24, 0x35	; 53
    1a2e:	93 e0       	ldi	r25, 0x03	; 3
    1a30:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <_ZN5Print7printlnEdi>
    1a34:	65 e0       	ldi	r22, 0x05	; 5
    1a36:	73 e0       	ldi	r23, 0x03	; 3
    1a38:	85 e3       	ldi	r24, 0x35	; 53
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
				Serial.println(F("---end---"));
    1a40:	6b ef       	ldi	r22, 0xFB	; 251
    1a42:	72 e0       	ldi	r23, 0x02	; 2
    1a44:	85 e3       	ldi	r24, 0x35	; 53
    1a46:	93 e0       	ldi	r25, 0x03	; 3
    1a48:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
				serialUpdateStamp = millis();
    1a4c:	0e 94 b6 22 	call	0x456c	; 0x456c <millis>
    1a50:	60 93 e0 01 	sts	0x01E0, r22	; 0x8001e0 <__data_end>
    1a54:	70 93 e1 01 	sts	0x01E1, r23	; 0x8001e1 <__data_end+0x1>
    1a58:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end+0x2>
    1a5c:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <__data_end+0x3>
			}
			initAvgVars();
    1a60:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_Z11initAvgVarsv>
	
			if (isFullErrorExists(adsChars.measuredAmperage, adsChars.voltage)) {
    1a64:	6f e4       	ldi	r22, 0x4F	; 79
    1a66:	71 e0       	ldi	r23, 0x01	; 1
    1a68:	8b e5       	ldi	r24, 0x5B	; 91
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	0e 94 44 05 	call	0xa88	; 0xa88 <_Z17isFullErrorExistsPfS_>
    1a70:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <__data_start+0x17>
    1a74:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <__data_start+0x18>
    1a78:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <__data_start+0x19>
    1a7c:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <__data_start+0x1a>
    1a80:	88 23       	and	r24, r24
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <loop+0x4c8>
    1a84:	45 c0       	rjmp	.+138    	; 0x1b10 <loop+0x552>
				if (icError.detectStamp == 0) {
    1a86:	45 2b       	or	r20, r21
    1a88:	46 2b       	or	r20, r22
    1a8a:	47 2b       	or	r20, r23
    1a8c:	81 f4       	brne	.+32     	; 0x1aae <loop+0x4f0>
					Serial.println(F("|-ic=1-|"));
    1a8e:	62 ef       	ldi	r22, 0xF2	; 242
    1a90:	72 e0       	ldi	r23, 0x02	; 2
    1a92:	85 e3       	ldi	r24, 0x35	; 53
    1a94:	93 e0       	ldi	r25, 0x03	; 3
    1a96:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
					icError.detectStamp = millis();
    1a9a:	0e 94 b6 22 	call	0x456c	; 0x456c <millis>
    1a9e:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <__data_start+0x17>
    1aa2:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <__data_start+0x18>
    1aa6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <__data_start+0x19>
    1aaa:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <__data_start+0x1a>
				}
				if (millis() - icError.detectStamp >= 10000) {
    1aae:	0e 94 b6 22 	call	0x456c	; 0x456c <millis>
    1ab2:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <__data_start+0x17>
    1ab6:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <__data_start+0x18>
    1aba:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <__data_start+0x19>
    1abe:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__data_start+0x1a>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	80 1b       	sub	r24, r16
    1ac8:	91 0b       	sbc	r25, r17
    1aca:	a2 0b       	sbc	r26, r18
    1acc:	b3 0b       	sbc	r27, r19
    1ace:	80 31       	cpi	r24, 0x10	; 16
    1ad0:	97 42       	sbci	r25, 0x27	; 39
    1ad2:	a1 05       	cpc	r26, r1
    1ad4:	b1 05       	cpc	r27, r1
    1ad6:	70 f1       	brcs	.+92     	; 0x1b34 <loop+0x576>
					if (!settings.isDebugMode || settings.canManipulateRelay) {
    1ad8:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <settings+0x28>
    1adc:	88 23       	and	r24, r24
    1ade:	21 f0       	breq	.+8      	; 0x1ae8 <loop+0x52a>
    1ae0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <settings+0x29>
    1ae4:	88 23       	and	r24, r24
    1ae6:	31 f0       	breq	.+12     	; 0x1af4 <loop+0x536>
						settings.isReadyToWork = MM_STOP;
    1ae8:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <settings>
						digitalWrite(RELAY, HIGH);
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	81 e1       	ldi	r24, 0x11	; 17
    1af0:	0e 94 ce 23 	call	0x479c	; 0x479c <digitalWrite>
					}
					
					Serial.println(F("|-ic=2-|"));
    1af4:	69 ee       	ldi	r22, 0xE9	; 233
    1af6:	72 e0       	ldi	r23, 0x02	; 2
    1af8:	85 e3       	ldi	r24, 0x35	; 53
    1afa:	93 e0       	ldi	r25, 0x03	; 3
    1afc:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
					digitalWrite(BEEPER, HIGH);
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	80 e1       	ldi	r24, 0x10	; 16
    1b04:	0e 94 ce 23 	call	0x479c	; 0x479c <digitalWrite>
					icError.hasIC = true;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_start+0x16>
    1b0e:	12 c0       	rjmp	.+36     	; 0x1b34 <loop+0x576>
				}
			} else {
				if (icError.detectStamp != 0) {
    1b10:	45 2b       	or	r20, r21
    1b12:	46 2b       	or	r20, r22
    1b14:	47 2b       	or	r20, r23
    1b16:	31 f0       	breq	.+12     	; 0x1b24 <loop+0x566>
					Serial.println(F("|-ic=0-|"));
    1b18:	60 ee       	ldi	r22, 0xE0	; 224
    1b1a:	72 e0       	ldi	r23, 0x02	; 2
    1b1c:	85 e3       	ldi	r24, 0x35	; 53
    1b1e:	93 e0       	ldi	r25, 0x03	; 3
    1b20:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
				}
				icError.detectStamp = 0;
    1b24:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_start+0x17>
    1b28:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_start+0x18>
    1b2c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_start+0x19>
    1b30:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_start+0x1a>
			}
		}
	} 
}
    1b34:	26 96       	adiw	r28, 0x06	; 6
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	bf 90       	pop	r11
    1b52:	af 90       	pop	r10
    1b54:	9f 90       	pop	r9
    1b56:	8f 90       	pop	r8
    1b58:	7f 90       	pop	r7
    1b5a:	6f 90       	pop	r6
    1b5c:	5f 90       	pop	r5
    1b5e:	4f 90       	pop	r4
    1b60:	3f 90       	pop	r3
    1b62:	08 95       	ret

00001b64 <_Z14setupImpedancev>:
}

/*
	Получение текущего значения сопротивления обмотки от измеренных значений напряжения и силы тока
*/
void setupImpedance() {
    1b64:	2f 92       	push	r2
    1b66:	3f 92       	push	r3
    1b68:	4f 92       	push	r4
    1b6a:	5f 92       	push	r5
    1b6c:	6f 92       	push	r6
    1b6e:	7f 92       	push	r7
    1b70:	8f 92       	push	r8
    1b72:	9f 92       	push	r9
    1b74:	af 92       	push	r10
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	e0 97       	sbiw	r28, 0x30	; 48
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
	float _voltage[3] = {0, 0, 0};
    1b98:	1d a2       	std	Y+37, r1	; 0x25
    1b9a:	1e a2       	std	Y+38, r1	; 0x26
    1b9c:	1f a2       	std	Y+39, r1	; 0x27
    1b9e:	18 a6       	std	Y+40, r1	; 0x28
    1ba0:	19 a6       	std	Y+41, r1	; 0x29
    1ba2:	1a a6       	std	Y+42, r1	; 0x2a
    1ba4:	1b a6       	std	Y+43, r1	; 0x2b
    1ba6:	1c a6       	std	Y+44, r1	; 0x2c
    1ba8:	1d a6       	std	Y+45, r1	; 0x2d
    1baa:	1e a6       	std	Y+46, r1	; 0x2e
    1bac:	1f a6       	std	Y+47, r1	; 0x2f
    1bae:	18 aa       	std	Y+48, r1	; 0x30
	float _amperage[3] = {0, 0, 0};
    1bb0:	19 8e       	std	Y+25, r1	; 0x19
    1bb2:	1a 8e       	std	Y+26, r1	; 0x1a
    1bb4:	1b 8e       	std	Y+27, r1	; 0x1b
    1bb6:	1c 8e       	std	Y+28, r1	; 0x1c
    1bb8:	1d 8e       	std	Y+29, r1	; 0x1d
    1bba:	1e 8e       	std	Y+30, r1	; 0x1e
    1bbc:	1f 8e       	std	Y+31, r1	; 0x1f
    1bbe:	18 a2       	std	Y+32, r1	; 0x20
    1bc0:	19 a2       	std	Y+33, r1	; 0x21
    1bc2:	1a a2       	std	Y+34, r1	; 0x22
    1bc4:	1b a2       	std	Y+35, r1	; 0x23
    1bc6:	1c a2       	std	Y+36, r1	; 0x24
	float _sumImpedance[3] = {0, 0, 0};
	float _sumVoltage[3] = {0, 0, 0};
    1bc8:	1d 86       	std	Y+13, r1	; 0x0d
    1bca:	1e 86       	std	Y+14, r1	; 0x0e
    1bcc:	1f 86       	std	Y+15, r1	; 0x0f
    1bce:	18 8a       	std	Y+16, r1	; 0x10
    1bd0:	19 8a       	std	Y+17, r1	; 0x11
    1bd2:	1a 8a       	std	Y+18, r1	; 0x12
    1bd4:	1b 8a       	std	Y+19, r1	; 0x13
    1bd6:	1c 8a       	std	Y+20, r1	; 0x14
    1bd8:	1d 8a       	std	Y+21, r1	; 0x15
    1bda:	1e 8a       	std	Y+22, r1	; 0x16
    1bdc:	1f 8a       	std	Y+23, r1	; 0x17
    1bde:	18 8e       	std	Y+24, r1	; 0x18
	float _sumAamperage[3] = {0, 0, 0};
    1be0:	19 82       	std	Y+1, r1	; 0x01
    1be2:	1a 82       	std	Y+2, r1	; 0x02
    1be4:	1b 82       	std	Y+3, r1	; 0x03
    1be6:	1c 82       	std	Y+4, r1	; 0x04
    1be8:	1d 82       	std	Y+5, r1	; 0x05
    1bea:	1e 82       	std	Y+6, r1	; 0x06
    1bec:	1f 82       	std	Y+7, r1	; 0x07
    1bee:	18 86       	std	Y+8, r1	; 0x08
    1bf0:	19 86       	std	Y+9, r1	; 0x09
    1bf2:	1a 86       	std	Y+10, r1	; 0x0a
    1bf4:	1b 86       	std	Y+11, r1	; 0x0b
    1bf6:	1c 86       	std	Y+12, r1	; 0x0c
	byte index = 1;
    1bf8:	01 e0       	ldi	r16, 0x01	; 1
    1bfa:	3e 01       	movw	r6, r28
    1bfc:	81 e3       	ldi	r24, 0x31	; 49
    1bfe:	68 0e       	add	r6, r24
    1c00:	71 1c       	adc	r7, r1
	
	while(index < adsChars.measurementsCount) {
    1c02:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <adsChars+0x3c>
    1c06:	08 17       	cp	r16, r24
    1c08:	08 f0       	brcs	.+2      	; 0x1c0c <_Z14setupImpedancev+0xa8>
    1c0a:	60 c0       	rjmp	.+192    	; 0x1ccc <_Z14setupImpedancev+0x168>
    1c0c:	7e 01       	movw	r14, r28
    1c0e:	95 e2       	ldi	r25, 0x25	; 37
    1c10:	e9 0e       	add	r14, r25
    1c12:	f1 1c       	adc	r15, r1
    1c14:	6e 01       	movw	r12, r28
    1c16:	e9 e1       	ldi	r30, 0x19	; 25
    1c18:	ce 0e       	add	r12, r30
    1c1a:	d1 1c       	adc	r13, r1
    1c1c:	56 01       	movw	r10, r12
    1c1e:	47 01       	movw	r8, r14
    1c20:	10 e0       	ldi	r17, 0x00	; 0
		for(byte i = 0; i < 3; i++) {
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
    1c22:	61 2f       	mov	r22, r17
    1c24:	8c e6       	ldi	r24, 0x6C	; 108
    1c26:	92 e0       	ldi	r25, 0x02	; 2
    1c28:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__floatunsisf>
    1c36:	f4 01       	movw	r30, r8
    1c38:	61 93       	st	Z+, r22
    1c3a:	71 93       	st	Z+, r23
    1c3c:	81 93       	st	Z+, r24
    1c3e:	91 93       	st	Z+, r25
    1c40:	4f 01       	movw	r8, r30
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
    1c42:	61 2f       	mov	r22, r17
    1c44:	87 e6       	ldi	r24, 0x67	; 103
    1c46:	92 e0       	ldi	r25, 0x02	; 2
    1c48:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__floatunsisf>
    1c56:	f5 01       	movw	r30, r10
    1c58:	61 93       	st	Z+, r22
    1c5a:	71 93       	st	Z+, r23
    1c5c:	81 93       	st	Z+, r24
    1c5e:	91 93       	st	Z+, r25
    1c60:	5f 01       	movw	r10, r30
	float _sumVoltage[3] = {0, 0, 0};
	float _sumAamperage[3] = {0, 0, 0};
	byte index = 1;
	
	while(index < adsChars.measurementsCount) {
		for(byte i = 0; i < 3; i++) {
    1c62:	1f 5f       	subi	r17, 0xFF	; 255
    1c64:	13 30       	cpi	r17, 0x03	; 3
    1c66:	e9 f6       	brne	.-70     	; 0x1c22 <_Z14setupImpedancev+0xbe>
    1c68:	4e 01       	movw	r8, r28
    1c6a:	fd e0       	ldi	r31, 0x0D	; 13
    1c6c:	8f 0e       	add	r8, r31
    1c6e:	91 1c       	adc	r9, r1
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	5c 01       	movw	r10, r24
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
		}
		
		for(byte i = 0; i < 3; i++) {
			_sumVoltage[i] += _voltage[i];
    1c76:	f7 01       	movw	r30, r14
    1c78:	21 91       	ld	r18, Z+
    1c7a:	31 91       	ld	r19, Z+
    1c7c:	41 91       	ld	r20, Z+
    1c7e:	51 91       	ld	r21, Z+
    1c80:	7f 01       	movw	r14, r30
    1c82:	f4 01       	movw	r30, r8
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
    1c90:	f4 01       	movw	r30, r8
    1c92:	61 93       	st	Z+, r22
    1c94:	71 93       	st	Z+, r23
    1c96:	81 93       	st	Z+, r24
    1c98:	91 93       	st	Z+, r25
    1c9a:	4f 01       	movw	r8, r30
			_sumAamperage[i] += _amperage[i];
    1c9c:	f6 01       	movw	r30, r12
    1c9e:	21 91       	ld	r18, Z+
    1ca0:	31 91       	ld	r19, Z+
    1ca2:	41 91       	ld	r20, Z+
    1ca4:	51 91       	ld	r21, Z+
    1ca6:	6f 01       	movw	r12, r30
    1ca8:	f5 01       	movw	r30, r10
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
    1cb6:	f5 01       	movw	r30, r10
    1cb8:	61 93       	st	Z+, r22
    1cba:	71 93       	st	Z+, r23
    1cbc:	81 93       	st	Z+, r24
    1cbe:	91 93       	st	Z+, r25
    1cc0:	5f 01       	movw	r10, r30
		for(byte i = 0; i < 3; i++) {
			_voltage[i] = adsVoltage.readADC_SingleEnded(i);
			_amperage[i] = adsAmperage.readADC_SingleEnded(i);
		}
		
		for(byte i = 0; i < 3; i++) {
    1cc2:	6e 14       	cp	r6, r14
    1cc4:	7f 04       	cpc	r7, r15
    1cc6:	b9 f6       	brne	.-82     	; 0x1c76 <_Z14setupImpedancev+0x112>
			_sumVoltage[i] += _voltage[i];
			_sumAamperage[i] += _amperage[i];
		}
		index++;
    1cc8:	0f 5f       	subi	r16, 0xFF	; 255
	float _sumImpedance[3] = {0, 0, 0};
	float _sumVoltage[3] = {0, 0, 0};
	float _sumAamperage[3] = {0, 0, 0};
	byte index = 1;
	
	while(index < adsChars.measurementsCount) {
    1cca:	9b cf       	rjmp	.-202    	; 0x1c02 <_Z14setupImpedancev+0x9e>
    1ccc:	6e 01       	movw	r12, r28
    1cce:	fd e0       	ldi	r31, 0x0D	; 13
    1cd0:	cf 0e       	add	r12, r31
    1cd2:	d1 1c       	adc	r13, r1
    1cd4:	8b ef       	ldi	r24, 0xFB	; 251
    1cd6:	e8 2e       	mov	r14, r24
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	f8 2e       	mov	r15, r24
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	1c 01       	movw	r2, r24
    1ce2:	00 e0       	ldi	r16, 0x00	; 0
    1ce4:	10 e0       	ldi	r17, 0x00	; 0
		}
		index++;
	}
	
	for(byte i = 0; i < 3; i++) {
		_voltage[i] = _sumVoltage[i] / adsChars.measurementsCount * ads.voltageStep * settings.multiplierVoltage[i];
    1ce6:	f6 01       	movw	r30, r12
    1ce8:	41 90       	ld	r4, Z+
    1cea:	51 90       	ld	r5, Z+
    1cec:	61 90       	ld	r6, Z+
    1cee:	71 90       	ld	r7, Z+
    1cf0:	6f 01       	movw	r12, r30
    1cf2:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <adsChars+0x3c>
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__floatsisf>
    1d00:	4b 01       	movw	r8, r22
    1d02:	5c 01       	movw	r10, r24
    1d04:	9b 01       	movw	r18, r22
    1d06:	ac 01       	movw	r20, r24
    1d08:	c3 01       	movw	r24, r6
    1d0a:	b2 01       	movw	r22, r4
    1d0c:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
    1d10:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <ads+0x18>
    1d14:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <ads+0x19>
    1d18:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <ads+0x1a>
    1d1c:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <ads+0x1b>
    1d20:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    1d24:	f7 01       	movw	r30, r14
    1d26:	20 89       	ldd	r18, Z+16	; 0x10
    1d28:	31 89       	ldd	r19, Z+17	; 0x11
    1d2a:	42 89       	ldd	r20, Z+18	; 0x12
    1d2c:	53 89       	ldd	r21, Z+19	; 0x13
    1d2e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    1d32:	2b 01       	movw	r4, r22
    1d34:	3c 01       	movw	r6, r24
		_amperage[i] = _sumAamperage[i] / adsChars.measurementsCount * ads.amperageStep * settings.multiplierAmperage[i];
    1d36:	f1 01       	movw	r30, r2
    1d38:	61 91       	ld	r22, Z+
    1d3a:	71 91       	ld	r23, Z+
    1d3c:	81 91       	ld	r24, Z+
    1d3e:	91 91       	ld	r25, Z+
    1d40:	1f 01       	movw	r2, r30
    1d42:	a5 01       	movw	r20, r10
    1d44:	94 01       	movw	r18, r8
    1d46:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
    1d4a:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <ads+0x1c>
    1d4e:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <ads+0x1d>
    1d52:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <ads+0x1e>
    1d56:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <ads+0x1f>
    1d5a:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    1d5e:	f7 01       	movw	r30, r14
    1d60:	24 8d       	ldd	r18, Z+28	; 0x1c
    1d62:	35 8d       	ldd	r19, Z+29	; 0x1d
    1d64:	46 8d       	ldd	r20, Z+30	; 0x1e
    1d66:	57 8d       	ldd	r21, Z+31	; 0x1f
    1d68:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    1d6c:	4b 01       	movw	r8, r22
    1d6e:	5c 01       	movw	r10, r24
		settings.impedance[i] = _voltage[i] / _amperage[i];
    1d70:	9b 01       	movw	r18, r22
    1d72:	ac 01       	movw	r20, r24
    1d74:	c3 01       	movw	r24, r6
    1d76:	b2 01       	movw	r22, r4
    1d78:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
    1d7c:	f7 01       	movw	r30, r14
    1d7e:	61 83       	std	Z+1, r22	; 0x01
    1d80:	72 83       	std	Z+2, r23	; 0x02
    1d82:	83 83       	std	Z+3, r24	; 0x03
    1d84:	94 83       	std	Z+4, r25	; 0x04
		
		Serial.print(F("|=iv")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(_voltage[i], 5); Serial.println(F("-|"));
    1d86:	66 e8       	ldi	r22, 0x86	; 134
    1d88:	71 e0       	ldi	r23, 0x01	; 1
    1d8a:	85 e3       	ldi	r24, 0x35	; 53
    1d8c:	93 e0       	ldi	r25, 0x03	; 3
    1d8e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1d92:	0f 5f       	subi	r16, 0xFF	; 255
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	4a e0       	ldi	r20, 0x0A	; 10
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	b8 01       	movw	r22, r16
    1d9c:	85 e3       	ldi	r24, 0x35	; 53
    1d9e:	93 e0       	ldi	r25, 0x03	; 3
    1da0:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    1da4:	64 e8       	ldi	r22, 0x84	; 132
    1da6:	71 e0       	ldi	r23, 0x01	; 1
    1da8:	85 e3       	ldi	r24, 0x35	; 53
    1daa:	93 e0       	ldi	r25, 0x03	; 3
    1dac:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1db0:	25 e0       	ldi	r18, 0x05	; 5
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	b3 01       	movw	r22, r6
    1db6:	a2 01       	movw	r20, r4
    1db8:	85 e3       	ldi	r24, 0x35	; 53
    1dba:	93 e0       	ldi	r25, 0x03	; 3
    1dbc:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    1dc0:	61 e8       	ldi	r22, 0x81	; 129
    1dc2:	71 e0       	ldi	r23, 0x01	; 1
    1dc4:	85 e3       	ldi	r24, 0x35	; 53
    1dc6:	93 e0       	ldi	r25, 0x03	; 3
    1dc8:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("|=ia")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(_amperage[i], 5);  Serial.println(F("-|"));
    1dcc:	6c e7       	ldi	r22, 0x7C	; 124
    1dce:	71 e0       	ldi	r23, 0x01	; 1
    1dd0:	85 e3       	ldi	r24, 0x35	; 53
    1dd2:	93 e0       	ldi	r25, 0x03	; 3
    1dd4:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1dd8:	4a e0       	ldi	r20, 0x0A	; 10
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	b8 01       	movw	r22, r16
    1dde:	85 e3       	ldi	r24, 0x35	; 53
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    1de6:	6a e7       	ldi	r22, 0x7A	; 122
    1de8:	71 e0       	ldi	r23, 0x01	; 1
    1dea:	85 e3       	ldi	r24, 0x35	; 53
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1df2:	25 e0       	ldi	r18, 0x05	; 5
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	b5 01       	movw	r22, r10
    1df8:	a4 01       	movw	r20, r8
    1dfa:	85 e3       	ldi	r24, 0x35	; 53
    1dfc:	93 e0       	ldi	r25, 0x03	; 3
    1dfe:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    1e02:	67 e7       	ldi	r22, 0x77	; 119
    1e04:	71 e0       	ldi	r23, 0x01	; 1
    1e06:	85 e3       	ldi	r24, 0x35	; 53
    1e08:	93 e0       	ldi	r25, 0x03	; 3
    1e0a:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.print(F("|=ii")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(settings.impedance[i], 5);  Serial.println(F("-|"));
    1e0e:	62 e7       	ldi	r22, 0x72	; 114
    1e10:	71 e0       	ldi	r23, 0x01	; 1
    1e12:	85 e3       	ldi	r24, 0x35	; 53
    1e14:	93 e0       	ldi	r25, 0x03	; 3
    1e16:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1e1a:	4a e0       	ldi	r20, 0x0A	; 10
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	b8 01       	movw	r22, r16
    1e20:	85 e3       	ldi	r24, 0x35	; 53
    1e22:	93 e0       	ldi	r25, 0x03	; 3
    1e24:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    1e28:	60 e7       	ldi	r22, 0x70	; 112
    1e2a:	71 e0       	ldi	r23, 0x01	; 1
    1e2c:	85 e3       	ldi	r24, 0x35	; 53
    1e2e:	93 e0       	ldi	r25, 0x03	; 3
    1e30:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    1e34:	f7 01       	movw	r30, r14
    1e36:	41 81       	ldd	r20, Z+1	; 0x01
    1e38:	52 81       	ldd	r21, Z+2	; 0x02
    1e3a:	63 81       	ldd	r22, Z+3	; 0x03
    1e3c:	74 81       	ldd	r23, Z+4	; 0x04
    1e3e:	25 e0       	ldi	r18, 0x05	; 5
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	85 e3       	ldi	r24, 0x35	; 53
    1e44:	93 e0       	ldi	r25, 0x03	; 3
    1e46:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    1e4a:	6d e6       	ldi	r22, 0x6D	; 109
    1e4c:	71 e0       	ldi	r23, 0x01	; 1
    1e4e:	85 e3       	ldi	r24, 0x35	; 53
    1e50:	93 e0       	ldi	r25, 0x03	; 3
    1e52:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1e56:	f4 e0       	ldi	r31, 0x04	; 4
    1e58:	ef 0e       	add	r14, r31
    1e5a:	f1 1c       	adc	r15, r1
			_sumAamperage[i] += _amperage[i];
		}
		index++;
	}
	
	for(byte i = 0; i < 3; i++) {
    1e5c:	03 30       	cpi	r16, 0x03	; 3
    1e5e:	11 05       	cpc	r17, r1
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <_Z14setupImpedancev+0x300>
    1e62:	41 cf       	rjmp	.-382    	; 0x1ce6 <_Z14setupImpedancev+0x182>
		
		Serial.print(F("|=iv")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(_voltage[i], 5); Serial.println(F("-|"));
		Serial.print(F("|=ia")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(_amperage[i], 5);  Serial.println(F("-|"));
		Serial.print(F("|=ii")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(settings.impedance[i], 5);  Serial.println(F("-|"));
	}
	Serial.println(F("---end---"));
    1e64:	63 e6       	ldi	r22, 0x63	; 99
    1e66:	71 e0       	ldi	r23, 0x01	; 1
    1e68:	85 e3       	ldi	r24, 0x35	; 53
    1e6a:	93 e0       	ldi	r25, 0x03	; 3
}
    1e6c:	e0 96       	adiw	r28, 0x30	; 48
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	df 90       	pop	r13
    1e86:	cf 90       	pop	r12
    1e88:	bf 90       	pop	r11
    1e8a:	af 90       	pop	r10
    1e8c:	9f 90       	pop	r9
    1e8e:	8f 90       	pop	r8
    1e90:	7f 90       	pop	r7
    1e92:	6f 90       	pop	r6
    1e94:	5f 90       	pop	r5
    1e96:	4f 90       	pop	r4
    1e98:	3f 90       	pop	r3
    1e9a:	2f 90       	pop	r2
		
		Serial.print(F("|=iv")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(_voltage[i], 5); Serial.println(F("-|"));
		Serial.print(F("|=ia")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(_amperage[i], 5);  Serial.println(F("-|"));
		Serial.print(F("|=ii")); Serial.print((i + 1)); Serial.print(F("=")); Serial.print(settings.impedance[i], 5);  Serial.println(F("-|"));
	}
	Serial.println(F("---end---"));
    1e9c:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>

00001ea0 <_Z21button1LongPressStartv>:
}

/*
	Обработчик длиннкого клика первой клавиши
*/
void button1LongPressStart() {
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
	// выбор множителя x1x10x100x0.1x0.01x0.001 в режимах установки множителя
	if (modeWork.current >= MW_SETUP_MULT_VOLTAGE_AB && modeWork.current <= MW_SETUP_MULT_AMPERAGE_AC) {
    1ea8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    1eac:	9c ef       	ldi	r25, 0xFC	; 252
    1eae:	98 0f       	add	r25, r24
    1eb0:	96 30       	cpi	r25, 0x06	; 6
    1eb2:	58 f5       	brcc	.+86     	; 0x1f0a <_Z21button1LongPressStartv+0x6a>
		setDigit.curMultiplier = setDigit.curMultiplier >= 100.0f? 0.001f: setDigit.curMultiplier * 10.0f;
    1eb4:	c0 90 f7 01 	lds	r12, 0x01F7	; 0x8001f7 <setDigit+0x4>
    1eb8:	d0 90 f8 01 	lds	r13, 0x01F8	; 0x8001f8 <setDigit+0x5>
    1ebc:	e0 90 f9 01 	lds	r14, 0x01F9	; 0x8001f9 <setDigit+0x6>
    1ec0:	f0 90 fa 01 	lds	r15, 0x01FA	; 0x8001fa <setDigit+0x7>
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	48 ec       	ldi	r20, 0xC8	; 200
    1eca:	52 e4       	ldi	r21, 0x42	; 66
    1ecc:	c7 01       	movw	r24, r14
    1ece:	b6 01       	movw	r22, r12
    1ed0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
    1ed4:	87 ff       	sbrs	r24, 7
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <_Z21button1LongPressStartv+0x4a>
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	c7 01       	movw	r24, r14
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <_Z21button1LongPressStartv+0x52>
    1eea:	6f e6       	ldi	r22, 0x6F	; 111
    1eec:	72 e1       	ldi	r23, 0x12	; 18
    1eee:	83 e8       	ldi	r24, 0x83	; 131
    1ef0:	9a e3       	ldi	r25, 0x3A	; 58
    1ef2:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <setDigit+0x4>
    1ef6:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <setDigit+0x5>
    1efa:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <setDigit+0x6>
    1efe:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <setDigit+0x7>
		lcdUpdateScreen = true;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
		return;
    1f08:	20 c0       	rjmp	.+64     	; 0x1f4a <_Z21button1LongPressStartv+0xaa>
	}
	
	// получение текущих значений сопротивления в режимах установки импеданса
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
    1f0a:	8a 30       	cpi	r24, 0x0A	; 10
    1f0c:	99 f4       	brne	.+38     	; 0x1f34 <_Z21button1LongPressStartv+0x94>
		lcd.clear();
    1f0e:	87 ee       	ldi	r24, 0xE7	; 231
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN17LiquidCrystal_I2C5clearEv>
		lcd.print(F("Impedance setup"));
    1f16:	6a e4       	ldi	r22, 0x4A	; 74
    1f18:	71 e0       	ldi	r23, 0x01	; 1
    1f1a:	87 ee       	ldi	r24, 0xE7	; 231
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
		setupImpedance();
    1f22:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_Z14setupImpedancev>
		lcd.clear();
    1f26:	87 ee       	ldi	r24, 0xE7	; 231
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN17LiquidCrystal_I2C5clearEv>
		modeWork.prev = 0;
    1f2e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <modeWork+0x1>
    1f32:	0b c0       	rjmp	.+22     	; 0x1f4a <_Z21button1LongPressStartv+0xaa>
		return;
	}
	
	// В режимах просмотра данных, длинный клик переводит в режим вопроса о продолжении измерений
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    1f34:	93 ef       	ldi	r25, 0xF3	; 243
    1f36:	98 0f       	add	r25, r24
    1f38:	9a 30       	cpi	r25, 0x0A	; 10
    1f3a:	10 f4       	brcc	.+4      	; 0x1f40 <_Z21button1LongPressStartv+0xa0>
		modeWork.current = MW_CONTROLL_MEASUREMENT;
    1f3c:	8e e1       	ldi	r24, 0x1E	; 30
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <_Z21button1LongPressStartv+0xa6>
		return;
	}
	
	// В ржеиме выбора о старте измерений - отклоенние вопроса
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    1f40:	8e 31       	cpi	r24, 0x1E	; 30
    1f42:	19 f4       	brne	.+6      	; 0x1f4a <_Z21button1LongPressStartv+0xaa>
		modeWork.current = MW_SHOWING_START;
    1f44:	8d e0       	ldi	r24, 0x0D	; 13
    1f46:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
	}
}
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	08 95       	ret

00001f54 <_Z12setEditValuev>:

/*
	Получение значений настройки в настроечную переменную для изменения во время настроек
*/
void setEditValue() {
	lcdUpdateScreen = true;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
	switch(modeWork.current) {
    1f5a:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <modeWork>
    1f5e:	8e 2f       	mov	r24, r30
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	fc 01       	movw	r30, r24
    1f64:	31 97       	sbiw	r30, 0x01	; 1
    1f66:	e9 30       	cpi	r30, 0x09	; 9
    1f68:	f1 05       	cpc	r31, r1
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <_Z12setEditValuev+0x1a>
    1f6c:	57 c0       	rjmp	.+174    	; 0x201c <_Z12setEditValuev+0xc8>
    1f6e:	e7 59       	subi	r30, 0x97	; 151
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__tablejump2__>
		case MW_SETUP_MANIPULATE_RELAY:
			setDigit.value = settings.canManipulateRelay;
    1f76:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <settings+0x29>
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <_Z12setEditValuev+0x2c>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			setDigit.value = settings.currentAmperageGain;
    1f7c:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <settings+0xe>
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__floatunsisf>
    1f8a:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <setDigit>
    1f8e:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <setDigit+0x1>
    1f92:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <setDigit+0x2>
    1f96:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <setDigit+0x3>
			break;
    1f9a:	40 c0       	rjmp	.+128    	; 0x201c <_Z12setEditValuev+0xc8>
		case MW_SETUP_GAIN_VOLTAGE:
			setDigit.value = settings.currentVoltageGain;
    1f9c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <settings+0xf>
    1fa0:	ef cf       	rjmp	.-34     	; 0x1f80 <_Z12setEditValuev+0x2c>
			break;			
		case MW_SETUP_MULT_VOLTAGE_AB:
			setDigit.value = settings.multiplierVoltage[0];
    1fa2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <settings+0x10>
    1fa6:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <settings+0x11>
    1faa:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <settings+0x12>
    1fae:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <settings+0x13>
    1fb2:	2c c0       	rjmp	.+88     	; 0x200c <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			setDigit.value = settings.multiplierVoltage[1];
    1fb4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <settings+0x14>
    1fb8:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <settings+0x15>
    1fbc:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <settings+0x16>
    1fc0:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <settings+0x17>
    1fc4:	23 c0       	rjmp	.+70     	; 0x200c <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			setDigit.value = settings.multiplierVoltage[2];
    1fc6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <settings+0x18>
    1fca:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <settings+0x19>
    1fce:	a0 91 15 02 	lds	r26, 0x0215	; 0x800215 <settings+0x1a>
    1fd2:	b0 91 16 02 	lds	r27, 0x0216	; 0x800216 <settings+0x1b>
    1fd6:	1a c0       	rjmp	.+52     	; 0x200c <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			setDigit.value = settings.multiplierAmperage[0];
    1fd8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <settings+0x1c>
    1fdc:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <settings+0x1d>
    1fe0:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <settings+0x1e>
    1fe4:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <settings+0x1f>
    1fe8:	11 c0       	rjmp	.+34     	; 0x200c <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			setDigit.value = settings.multiplierAmperage[1];
    1fea:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <settings+0x20>
    1fee:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <settings+0x21>
    1ff2:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <settings+0x22>
    1ff6:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <settings+0x23>
    1ffa:	08 c0       	rjmp	.+16     	; 0x200c <_Z12setEditValuev+0xb8>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			setDigit.value = settings.multiplierAmperage[2];
    1ffc:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <settings+0x24>
    2000:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <settings+0x25>
    2004:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <settings+0x26>
    2008:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <settings+0x27>
    200c:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <setDigit>
    2010:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <setDigit+0x1>
    2014:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <setDigit+0x2>
    2018:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <setDigit+0x3>
			break;
	}
	setDigit.curMultiplier = 1.0f;
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a0 e8       	ldi	r26, 0x80	; 128
    2022:	bf e3       	ldi	r27, 0x3F	; 63
    2024:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <setDigit+0x4>
    2028:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <setDigit+0x5>
    202c:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <setDigit+0x6>
    2030:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <setDigit+0x7>
    2034:	08 95       	ret

00002036 <_Z12button2Clickv>:
}

/*
	Обработчика короткого клика второй клавиши
*/
void button2Click() {
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
	// Если мы в настройках сопротивления то обнуляем значения сопротивлений
	if (modeWork.current == MW_SETUP_IMPEDANCE) {
    2042:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    2046:	8a 30       	cpi	r24, 0x0A	; 10
    2048:	e1 f4       	brne	.+56     	; 0x2082 <_Z12button2Clickv+0x4c>
		settings.impedance[0] = 0;
    204a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <settings+0x1>
    204e:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <settings+0x2>
    2052:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <settings+0x3>
    2056:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <settings+0x4>
		settings.impedance[1] = 0;
    205a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <settings+0x5>
    205e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <settings+0x6>
    2062:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <settings+0x7>
    2066:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <settings+0x8>
		settings.impedance[2] = 0;
    206a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <settings+0x9>
    206e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <settings+0xa>
    2072:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <settings+0xb>
    2076:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <settings+0xc>
		lcdUpdateScreen = true;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
		return;
    2080:	7b c0       	rjmp	.+246    	; 0x2178 <_Z12button2Clickv+0x142>
	}
	
	// В режиме предупреждения необходимости настроек - переводим в режим настроек
	if (modeWork.current == MW_NEED_SETUP) {
    2082:	81 11       	cpse	r24, r1
    2084:	0a c0       	rjmp	.+20     	; 0x209a <_Z12button2Clickv+0x64>
		lcdUpdateScreen = true;
    2086:	c1 e0       	ldi	r28, 0x01	; 1
    2088:	c0 93 e4 01 	sts	0x01E4, r28	; 0x8001e4 <lcdUpdateScreen>
		modeWork.current = MW_SETUP_START;
    208c:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <modeWork>
		setEditValue();
    2090:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_Z12setEditValuev>
		settings.isSetupMode = true;
    2094:	c0 93 08 02 	sts	0x0208, r28	; 0x800208 <settings+0xd>
		return;
    2098:	6f c0       	rjmp	.+222    	; 0x2178 <_Z12button2Clickv+0x142>
	}
		
	// Если режим настроек
	if (modeWork.current >= MW_SETUP_START && modeWork.current <= MW_SETUP_STOP) {
    209a:	9f ef       	ldi	r25, 0xFF	; 255
    209c:	98 0f       	add	r25, r24
    209e:	9a 30       	cpi	r25, 0x0A	; 10
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <_Z12button2Clickv+0x6e>
    20a2:	59 c0       	rjmp	.+178    	; 0x2156 <_Z12button2Clickv+0x120>
		lcdUpdateScreen = true;
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <lcdUpdateScreen>
		if (modeWork.current == MW_SETUP_MANIPULATE_RELAY) {
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	19 f5       	brne	.+70     	; 0x20f4 <_Z12button2Clickv+0xbe>
			// режим выбора подключения - свапаем режим
			setDigit.value = setDigit.value == 1? 0: 1; 
    20ae:	c1 e0       	ldi	r28, 0x01	; 1
    20b0:	d0 e0       	ldi	r29, 0x00	; 0
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    20be:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    20c2:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    20c6:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    20ca:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    20ce:	81 11       	cpse	r24, r1
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <_Z12button2Clickv+0xa0>
    20d2:	c0 e0       	ldi	r28, 0x00	; 0
    20d4:	d0 e0       	ldi	r29, 0x00	; 0
    20d6:	be 01       	movw	r22, r28
    20d8:	dd 0f       	add	r29, r29
    20da:	88 0b       	sbc	r24, r24
    20dc:	99 0b       	sbc	r25, r25
    20de:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <__floatsisf>
    20e2:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <setDigit>
    20e6:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <setDigit+0x1>
    20ea:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <setDigit+0x2>
    20ee:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <setDigit+0x3>
    20f2:	42 c0       	rjmp	.+132    	; 0x2178 <_Z12button2Clickv+0x142>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в меньшую сторону
			setDigit.value = setDigit.value > 0?  setDigit.value - 1: 0;
		}else {
			// Любой другой режим уменьшаем значение на величину curMultiplier
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    20f4:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <setDigit+0x4>
    20f8:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <setDigit+0x5>
    20fc:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <setDigit+0x6>
    2100:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <setDigit+0x7>
    2104:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    2108:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    210c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2110:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    2114:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
    2118:	6b 01       	movw	r12, r22
    211a:	7c 01       	movw	r14, r24
			if (setDigit.value < 0) {
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	a9 01       	movw	r20, r18
    2122:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    2126:	87 fd       	sbrc	r24, 7
    2128:	09 c0       	rjmp	.+18     	; 0x213c <_Z12button2Clickv+0x106>
		} else if (modeWork.current >= MW_SETUP_GAIN_AMPERAGE && modeWork.current <= MW_SETUP_GAIN_VOLTAGE) {
			// Режим выбора усиления АЦП - меняем в пределах от 0-5 в меньшую сторону
			setDigit.value = setDigit.value > 0?  setDigit.value - 1: 0;
		}else {
			// Любой другой режим уменьшаем значение на величину curMultiplier
			setDigit.value = setDigit.value - setDigit.curMultiplier;
    212a:	c0 92 f3 01 	sts	0x01F3, r12	; 0x8001f3 <setDigit>
    212e:	d0 92 f4 01 	sts	0x01F4, r13	; 0x8001f4 <setDigit+0x1>
    2132:	e0 92 f5 01 	sts	0x01F5, r14	; 0x8001f5 <setDigit+0x2>
    2136:	f0 92 f6 01 	sts	0x01F6, r15	; 0x8001f6 <setDigit+0x3>
    213a:	1e c0       	rjmp	.+60     	; 0x2178 <_Z12button2Clickv+0x142>
			if (setDigit.value < 0) {
				setDigit.value = 999.999f;
    213c:	80 ef       	ldi	r24, 0xF0	; 240
    213e:	9f ef       	ldi	r25, 0xFF	; 255
    2140:	a9 e7       	ldi	r26, 0x79	; 121
    2142:	b4 e4       	ldi	r27, 0x44	; 68
    2144:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <setDigit>
    2148:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <setDigit+0x1>
    214c:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <setDigit+0x2>
    2150:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <setDigit+0x3>
    2154:	11 c0       	rjmp	.+34     	; 0x2178 <_Z12button2Clickv+0x142>
		}
		return;
	}
	
	// В режиме отображения данных листаем назад меню
	if (modeWork.current >= MW_SHOWING_START && modeWork.current <= MW_SHOWING_STOP) {
    2156:	23 ef       	ldi	r18, 0xF3	; 243
    2158:	28 0f       	add	r18, r24
    215a:	2a 30       	cpi	r18, 0x0A	; 10
    215c:	30 f4       	brcc	.+12     	; 0x216a <_Z12button2Clickv+0x134>
		modeWork.current = modeWork.current == MW_SHOWING_START? MW_SHOWING_STOP: modeWork.current - 1;
    215e:	8d 30       	cpi	r24, 0x0D	; 13
    2160:	09 f4       	brne	.+2      	; 0x2164 <_Z12button2Clickv+0x12e>
    2162:	96 e1       	ldi	r25, 0x16	; 22
    2164:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <modeWork>
		return;
    2168:	07 c0       	rjmp	.+14     	; 0x2178 <_Z12button2Clickv+0x142>
	}
	
	// Если вопрос о начале измерений, то клик его отклоняет
	if (modeWork.current == MW_CONTROLL_MEASUREMENT) {
    216a:	8e 31       	cpi	r24, 0x1E	; 30
    216c:	29 f4       	brne	.+10     	; 0x2178 <_Z12button2Clickv+0x142>
		modeWork.current = MW_SHOWING_START;
    216e:	8d e0       	ldi	r24, 0x0D	; 13
    2170:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
		settings.isReadyToWork = MM_STOP;
    2174:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <settings>
		return;
	}
}
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	ff 90       	pop	r15
    217e:	ef 90       	pop	r14
    2180:	df 90       	pop	r13
    2182:	cf 90       	pop	r12
    2184:	08 95       	ret

00002186 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>:
}

/*
	Установка степени усиления АЦП
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	ec 01       	movw	r28, r24
    218e:	16 2f       	mov	r17, r22
	Serial.print(F("ADS: "));
    2190:	6b e3       	ldi	r22, 0x3B	; 59
    2192:	71 e0       	ldi	r23, 0x01	; 1
    2194:	85 e3       	ldi	r24, 0x35	; 53
    2196:	93 e0       	ldi	r25, 0x03	; 3
    2198:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
	switch(_index) {
    219c:	13 30       	cpi	r17, 0x03	; 3
    219e:	21 f1       	breq	.+72     	; 0x21e8 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x62>
    21a0:	68 f4       	brcc	.+26     	; 0x21bc <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x36>
    21a2:	11 30       	cpi	r17, 0x01	; 1
    21a4:	c1 f0       	breq	.+48     	; 0x21d6 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x50>
    21a6:	12 30       	cpi	r17, 0x02	; 2
    21a8:	89 f5       	brne	.+98     	; 0x220c <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x86>
		case 1:
			Serial.println(F("GAIN_ONE"));
			_ads->setGain(GAIN_ONE);
			break;
		case 2:
			Serial.println(F("GAIN_TWO"));
    21aa:	69 e2       	ldi	r22, 0x29	; 41
    21ac:	71 e0       	ldi	r23, 0x01	; 1
    21ae:	85 e3       	ldi	r24, 0x35	; 53
    21b0:	93 e0       	ldi	r25, 0x03	; 3
    21b2:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_TWO);
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	74 e0       	ldi	r23, 0x04	; 4
    21ba:	30 c0       	rjmp	.+96     	; 0x221c <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
/*
	Установка степени усиления АЦП
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	Serial.print(F("ADS: "));
	switch(_index) {
    21bc:	14 30       	cpi	r17, 0x04	; 4
    21be:	e9 f0       	breq	.+58     	; 0x21fa <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x74>
    21c0:	15 30       	cpi	r17, 0x05	; 5
    21c2:	21 f5       	brne	.+72     	; 0x220c <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x86>
		case 4:
			Serial.println(F("GAIN_EIGHT"));
			_ads->setGain(GAIN_EIGHT);
			break;
		case 5:
			Serial.println(F("GAIN_SIXTEEN"));
    21c4:	67 e0       	ldi	r22, 0x07	; 7
    21c6:	71 e0       	ldi	r23, 0x01	; 1
    21c8:	85 e3       	ldi	r24, 0x35	; 53
    21ca:	93 e0       	ldi	r25, 0x03	; 3
    21cc:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_SIXTEEN);
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	7a e0       	ldi	r23, 0x0A	; 10
    21d4:	23 c0       	rjmp	.+70     	; 0x221c <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
*/
void setAdsGainByIndex(Adafruit_ADS1115* _ads, byte _index) {
	Serial.print(F("ADS: "));
	switch(_index) {
		case 1:
			Serial.println(F("GAIN_ONE"));
    21d6:	62 e3       	ldi	r22, 0x32	; 50
    21d8:	71 e0       	ldi	r23, 0x01	; 1
    21da:	85 e3       	ldi	r24, 0x35	; 53
    21dc:	93 e0       	ldi	r25, 0x03	; 3
    21de:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_ONE);
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	72 e0       	ldi	r23, 0x02	; 2
    21e6:	1a c0       	rjmp	.+52     	; 0x221c <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
		case 2:
			Serial.println(F("GAIN_TWO"));
			_ads->setGain(GAIN_TWO);
			break;
		case 3:
			Serial.println(F("GAIN_FOUR"));
    21e8:	6f e1       	ldi	r22, 0x1F	; 31
    21ea:	71 e0       	ldi	r23, 0x01	; 1
    21ec:	85 e3       	ldi	r24, 0x35	; 53
    21ee:	93 e0       	ldi	r25, 0x03	; 3
    21f0:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_FOUR);
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	76 e0       	ldi	r23, 0x06	; 6
    21f8:	11 c0       	rjmp	.+34     	; 0x221c <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
			break;
		case 4:
			Serial.println(F("GAIN_EIGHT"));
    21fa:	64 e1       	ldi	r22, 0x14	; 20
    21fc:	71 e0       	ldi	r23, 0x01	; 1
    21fe:	85 e3       	ldi	r24, 0x35	; 53
    2200:	93 e0       	ldi	r25, 0x03	; 3
    2202:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_EIGHT);
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	78 e0       	ldi	r23, 0x08	; 8
    220a:	08 c0       	rjmp	.+16     	; 0x221c <_Z17setAdsGainByIndexP16Adafruit_ADS1115h+0x96>
		case 5:
			Serial.println(F("GAIN_SIXTEEN"));
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			Serial.println(F("GAIN_TWOTHIRDS"));
    220c:	68 ef       	ldi	r22, 0xF8	; 248
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	85 e3       	ldi	r24, 0x35	; 53
    2212:	93 e0       	ldi	r25, 0x03	; 3
    2214:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
			_ads->setGain(GAIN_TWOTHIRDS);
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	ce 01       	movw	r24, r28
			break;
	}
}
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
			Serial.println(F("GAIN_SIXTEEN"));
			_ads->setGain(GAIN_SIXTEEN);
			break;
		default:
			Serial.println(F("GAIN_TWOTHIRDS"));
			_ads->setGain(GAIN_TWOTHIRDS);
    2224:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>

00002228 <_Z18initAdsVoltageGainv>:
}

/*
	Инициализация усиления АЦП по напряжению
*/
void initAdsVoltageGain() {
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
	setAdsGainByIndex(&adsVoltage, settings.currentVoltageGain);
    222c:	cb ef       	ldi	r28, 0xFB	; 251
    222e:	d1 e0       	ldi	r29, 0x01	; 1
    2230:	6f 85       	ldd	r22, Y+15	; 0x0f
    2232:	8c e6       	ldi	r24, 0x6C	; 108
    2234:	92 e0       	ldi	r25, 0x02	; 2
    2236:	0e 94 c3 10 	call	0x2186	; 0x2186 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.voltageStep = ads.gainStep[settings.currentVoltageGain] / 1000.0;
    223a:	ef 85       	ldd	r30, Y+15	; 0x0f
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	e8 9f       	mul	r30, r24
    2240:	f0 01       	movw	r30, r0
    2242:	11 24       	eor	r1, r1
    2244:	e1 5d       	subi	r30, 0xD1	; 209
    2246:	fe 4f       	sbci	r31, 0xFE	; 254
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a e7       	ldi	r20, 0x7A	; 122
    224e:	54 e4       	ldi	r21, 0x44	; 68
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
    225c:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <ads+0x18>
    2260:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <ads+0x19>
    2264:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <ads+0x1a>
    2268:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <ads+0x1b>
}
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	08 95       	ret

00002272 <_Z19initAdsAmperageGainv>:

/*
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
    2276:	cb ef       	ldi	r28, 0xFB	; 251
    2278:	d1 e0       	ldi	r29, 0x01	; 1
    227a:	6e 85       	ldd	r22, Y+14	; 0x0e
    227c:	87 e6       	ldi	r24, 0x67	; 103
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	0e 94 c3 10 	call	0x2186	; 0x2186 <_Z17setAdsGainByIndexP16Adafruit_ADS1115h>
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    2284:	ee 85       	ldd	r30, Y+14	; 0x0e
    2286:	84 e0       	ldi	r24, 0x04	; 4
    2288:	e8 9f       	mul	r30, r24
    228a:	f0 01       	movw	r30, r0
    228c:	11 24       	eor	r1, r1
    228e:	e1 5d       	subi	r30, 0xD1	; 209
    2290:	fe 4f       	sbci	r31, 0xFE	; 254
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a e7       	ldi	r20, 0x7A	; 122
    2298:	54 e4       	ldi	r21, 0x44	; 68
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
    22a6:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <ads+0x1c>
    22aa:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <ads+0x1d>
    22ae:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ads+0x1e>
    22b2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <ads+0x1f>
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	08 95       	ret

000022bc <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    22bc:	26 e0       	ldi	r18, 0x06	; 6
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	55 e2       	ldi	r21, 0x25	; 37
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	85 e3       	ldi	r24, 0x35	; 53
    22c8:	93 e0       	ldi	r25, 0x03	; 3
    22ca:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <_ZN14HardwareSerial5beginEmh>
void lcdPrintAmperageDiff(byte);


void setup() {
	Serial.begin(9600);
	Serial.println(F("Initialization..."));
    22ce:	6f e5       	ldi	r22, 0x5F	; 95
    22d0:	74 e0       	ldi	r23, 0x04	; 4
    22d2:	85 e3       	ldi	r24, 0x35	; 53
    22d4:	93 e0       	ldi	r25, 0x03	; 3
    22d6:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализация АЦП
	adsVoltage.setGain(GAIN_TWOTHIRDS);
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	8c e6       	ldi	r24, 0x6C	; 108
    22e0:	92 e0       	ldi	r25, 0x02	; 2
    22e2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsVoltage.begin();
    22e6:	8c e6       	ldi	r24, 0x6C	; 108
    22e8:	92 e0       	ldi	r25, 0x02	; 2
    22ea:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN16Adafruit_ADS10155beginEv>
	adsAmperage.setGain(GAIN_TWOTHIRDS);
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	87 e6       	ldi	r24, 0x67	; 103
    22f4:	92 e0       	ldi	r25, 0x02	; 2
    22f6:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
	adsAmperage.begin();
    22fa:	87 e6       	ldi	r24, 0x67	; 103
    22fc:	92 e0       	ldi	r25, 0x02	; 2
    22fe:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN16Adafruit_ADS10155beginEv>
	// Инициализация LCD модуля
	lcd.init();
    2302:	87 ee       	ldi	r24, 0xE7	; 231
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <_ZN17LiquidCrystal_I2C4initEv>
	lcd.backlight();
    230a:	87 ee       	ldi	r24, 0xE7	; 231
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_ZN17LiquidCrystal_I2C9backlightEv>
	lcd.clear();
    2312:	87 ee       	ldi	r24, 0xE7	; 231
    2314:	91 e0       	ldi	r25, 0x01	; 1
    2316:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN17LiquidCrystal_I2C5clearEv>
	Serial.println(F("LCD inited!"));
    231a:	63 e5       	ldi	r22, 0x53	; 83
    231c:	74 e0       	ldi	r23, 0x04	; 4
    231e:	85 e3       	ldi	r24, 0x35	; 53
    2320:	93 e0       	ldi	r25, 0x03	; 3
    2322:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализая кнопок
	button1Callback.attachClick(button1Click);								// Установка callback функции на короткий клик
    2326:	65 ee       	ldi	r22, 0xE5	; 229
    2328:	72 e0       	ldi	r23, 0x02	; 2
    232a:	86 e4       	ldi	r24, 0x46	; 70
    232c:	92 e0       	ldi	r25, 0x02	; 2
    232e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <_ZN9OneButton11attachClickEPFvvE>
	button1Callback.attachLongPressStart(button1LongPressStart);			// Установка callback функции на длинный клик
    2332:	60 e5       	ldi	r22, 0x50	; 80
    2334:	7f e0       	ldi	r23, 0x0F	; 15
    2336:	86 e4       	ldi	r24, 0x46	; 70
    2338:	92 e0       	ldi	r25, 0x02	; 2
    233a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN9OneButton20attachLongPressStartEPFvvE>
	button1Callback.setDebounceTicks(30);									// Время до идентификации клика в мс для нивилирования дребезга контактов
    233e:	6e e1       	ldi	r22, 0x1E	; 30
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	86 e4       	ldi	r24, 0x46	; 70
    2344:	92 e0       	ldi	r25, 0x02	; 2
    2346:	0e 94 93 17 	call	0x2f26	; 0x2f26 <_ZN9OneButton16setDebounceTicksEi>
	button1Callback.setClickTicks(200);										// Количество мс нажатия для того чтобы клик был идентифицирован
    234a:	68 ec       	ldi	r22, 0xC8	; 200
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	86 e4       	ldi	r24, 0x46	; 70
    2350:	92 e0       	ldi	r25, 0x02	; 2
    2352:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN9OneButton13setClickTicksEi>
	button1Callback.setPressTicks(1000);									// Количество мс нажатия для идентификаци длинного клика
    2356:	68 ee       	ldi	r22, 0xE8	; 232
    2358:	73 e0       	ldi	r23, 0x03	; 3
    235a:	86 e4       	ldi	r24, 0x46	; 70
    235c:	92 e0       	ldi	r25, 0x02	; 2
    235e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 1 inited!"));
    2362:	62 e4       	ldi	r22, 0x42	; 66
    2364:	74 e0       	ldi	r23, 0x04	; 4
    2366:	85 e3       	ldi	r24, 0x35	; 53
    2368:	93 e0       	ldi	r25, 0x03	; 3
    236a:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	button2Callback.attachClick(button2Click);
    236e:	6b e1       	ldi	r22, 0x1B	; 27
    2370:	70 e1       	ldi	r23, 0x10	; 16
    2372:	85 e2       	ldi	r24, 0x25	; 37
    2374:	92 e0       	ldi	r25, 0x02	; 2
    2376:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <_ZN9OneButton11attachClickEPFvvE>
	button2Callback.attachLongPressStart(button2LongPressStart);
    237a:	69 e1       	ldi	r22, 0x19	; 25
    237c:	75 e1       	ldi	r23, 0x15	; 21
    237e:	85 e2       	ldi	r24, 0x25	; 37
    2380:	92 e0       	ldi	r25, 0x02	; 2
    2382:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN9OneButton20attachLongPressStartEPFvvE>
	button2Callback.setDebounceTicks(30);
    2386:	6e e1       	ldi	r22, 0x1E	; 30
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	85 e2       	ldi	r24, 0x25	; 37
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <_ZN9OneButton16setDebounceTicksEi>
	button2Callback.setClickTicks(200);
    2392:	68 ec       	ldi	r22, 0xC8	; 200
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	85 e2       	ldi	r24, 0x25	; 37
    2398:	92 e0       	ldi	r25, 0x02	; 2
    239a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN9OneButton13setClickTicksEi>
	button2Callback.setPressTicks(1000);
    239e:	68 ee       	ldi	r22, 0xE8	; 232
    23a0:	73 e0       	ldi	r23, 0x03	; 3
    23a2:	85 e2       	ldi	r24, 0x25	; 37
    23a4:	92 e0       	ldi	r25, 0x02	; 2
    23a6:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN9OneButton13setPressTicksEi>
	Serial.println(F("Button 2 inited!"));
    23aa:	61 e3       	ldi	r22, 0x31	; 49
    23ac:	74 e0       	ldi	r23, 0x04	; 4
    23ae:	85 e3       	ldi	r24, 0x35	; 53
    23b0:	93 e0       	ldi	r25, 0x03	; 3
    23b2:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	// Инициализация старт-пакета данных
	if (eeprom_read_byte(&eeprom_first_start) != 101) {
    23b6:	87 e2       	ldi	r24, 0x27	; 39
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 54 24 	call	0x48a8	; 0x48a8 <eeprom_read_byte>
    23be:	85 36       	cpi	r24, 0x65	; 101
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <setup+0x108>
    23c2:	59 c0       	rjmp	.+178    	; 0x2476 <setup+0x1ba>
		eeprom_update_byte(&eeprom_manipulate_relay, 0);
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	86 e2       	ldi	r24, 0x26	; 38
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 62 24 	call	0x48c4	; 0x48c4 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_amperage, 0);
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	85 e2       	ldi	r24, 0x25	; 37
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 62 24 	call	0x48c4	; 0x48c4 <eeprom_update_byte>
		eeprom_update_byte(&eeprom_gain_voltage, 0);
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	84 e2       	ldi	r24, 0x24	; 36
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 62 24 	call	0x48c4	; 0x48c4 <eeprom_update_byte>
		eeprom_update_float(&eeprom_impedance_ab, 0);
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	ba 01       	movw	r22, r20
    23e8:	80 e2       	ldi	r24, 0x20	; 32
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_bc, 0);
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	ba 01       	movw	r22, r20
    23f6:	8c e1       	ldi	r24, 0x1C	; 28
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_float(&eeprom_impedance_ac, 0);
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	ba 01       	movw	r22, r20
    2404:	88 e1       	ldi	r24, 0x18	; 24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ab, 0);
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	ba 01       	movw	r22, r20
    2412:	84 e1       	ldi	r24, 0x14	; 20
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_bc, 0);
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	ba 01       	movw	r22, r20
    2420:	80 e1       	ldi	r24, 0x10	; 16
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_float(&eeprom_voltage_mult_ac, 0);
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	ba 01       	movw	r22, r20
    242e:	8c e0       	ldi	r24, 0x0C	; 12
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ab, 0);
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	ba 01       	movw	r22, r20
    243c:	88 e0       	ldi	r24, 0x08	; 8
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_bc, 0);
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	ba 01       	movw	r22, r20
    244a:	84 e0       	ldi	r24, 0x04	; 4
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_float(&eeprom_amperage_mult_ac, 0);
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	ba 01       	movw	r22, r20
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
		eeprom_update_byte(&eeprom_first_start, 101);
    2460:	65 e6       	ldi	r22, 0x65	; 101
    2462:	87 e2       	ldi	r24, 0x27	; 39
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 62 24 	call	0x48c4	; 0x48c4 <eeprom_update_byte>
		Serial.println(F("EEPROM first start writed!"));
    246a:	66 e1       	ldi	r22, 0x16	; 22
    246c:	74 e0       	ldi	r23, 0x04	; 4
    246e:	85 e3       	ldi	r24, 0x35	; 53
    2470:	93 e0       	ldi	r25, 0x03	; 3
    2472:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	// Теперь старт данные получаем из памяти при старте
	settings.currentAmperageGain = eeprom_read_byte(&eeprom_gain_amperage);
    2476:	85 e2       	ldi	r24, 0x25	; 37
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <eeprom_read_byte>
    247e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <settings+0xe>
	settings.currentVoltageGain = eeprom_read_byte(&eeprom_gain_voltage);
    2482:	84 e2       	ldi	r24, 0x24	; 36
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	0e 94 54 24 	call	0x48a8	; 0x48a8 <eeprom_read_byte>
    248a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <settings+0xf>
	settings.canManipulateRelay = eeprom_read_byte(&eeprom_manipulate_relay);
    248e:	86 e2       	ldi	r24, 0x26	; 38
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 54 24 	call	0x48a8	; 0x48a8 <eeprom_read_byte>
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	81 11       	cpse	r24, r1
    249a:	01 c0       	rjmp	.+2      	; 0x249e <setup+0x1e2>
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <settings+0x29>
	settings.impedance[0] = eeprom_read_float(&eeprom_impedance_ab);
    24a2:	80 e2       	ldi	r24, 0x20	; 32
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    24aa:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <settings+0x1>
    24ae:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <settings+0x2>
    24b2:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <settings+0x3>
    24b6:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <settings+0x4>
	settings.impedance[1] = eeprom_read_float(&eeprom_impedance_bc);
    24ba:	8c e1       	ldi	r24, 0x1C	; 28
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    24c2:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <settings+0x5>
    24c6:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <settings+0x6>
    24ca:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <settings+0x7>
    24ce:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <settings+0x8>
	settings.impedance[2] = eeprom_read_float(&eeprom_impedance_ac);
    24d2:	88 e1       	ldi	r24, 0x18	; 24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    24da:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <settings+0x9>
    24de:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <settings+0xa>
    24e2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <settings+0xb>
    24e6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <settings+0xc>
	settings.multiplierVoltage[0] = eeprom_read_float(&eeprom_voltage_mult_ab);
    24ea:	84 e1       	ldi	r24, 0x14	; 20
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    24f2:	60 93 0b 02 	sts	0x020B, r22	; 0x80020b <settings+0x10>
    24f6:	70 93 0c 02 	sts	0x020C, r23	; 0x80020c <settings+0x11>
    24fa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <settings+0x12>
    24fe:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <settings+0x13>
	settings.multiplierVoltage[1] = eeprom_read_float(&eeprom_voltage_mult_bc);
    2502:	80 e1       	ldi	r24, 0x10	; 16
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    250a:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <settings+0x14>
    250e:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <settings+0x15>
    2512:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <settings+0x16>
    2516:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <settings+0x17>
	settings.multiplierVoltage[2] = eeprom_read_float(&eeprom_voltage_mult_ac);
    251a:	8c e0       	ldi	r24, 0x0C	; 12
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    2522:	60 93 13 02 	sts	0x0213, r22	; 0x800213 <settings+0x18>
    2526:	70 93 14 02 	sts	0x0214, r23	; 0x800214 <settings+0x19>
    252a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <settings+0x1a>
    252e:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <settings+0x1b>
	settings.multiplierAmperage[0] = eeprom_read_float(&eeprom_amperage_mult_ab);
    2532:	88 e0       	ldi	r24, 0x08	; 8
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    253a:	60 93 17 02 	sts	0x0217, r22	; 0x800217 <settings+0x1c>
    253e:	70 93 18 02 	sts	0x0218, r23	; 0x800218 <settings+0x1d>
    2542:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <settings+0x1e>
    2546:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <settings+0x1f>
	settings.multiplierAmperage[1] = eeprom_read_float(&eeprom_amperage_mult_bc);
    254a:	84 e0       	ldi	r24, 0x04	; 4
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    2552:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <settings+0x20>
    2556:	70 93 1c 02 	sts	0x021C, r23	; 0x80021c <settings+0x21>
    255a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <settings+0x22>
    255e:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <settings+0x23>
	settings.multiplierAmperage[2] = eeprom_read_float(&eeprom_amperage_mult_ac);
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <eeprom_read_dword>
    256a:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <settings+0x24>
    256e:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <settings+0x25>
    2572:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <settings+0x26>
    2576:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <settings+0x27>
	Serial.println(F("EEPROM values:"));
    257a:	67 e0       	ldi	r22, 0x07	; 7
    257c:	74 e0       	ldi	r23, 0x04	; 4
    257e:	85 e3       	ldi	r24, 0x35	; 53
    2580:	93 e0       	ldi	r25, 0x03	; 3
    2582:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-sga=")); Serial.print(settings.currentAmperageGain); Serial.println(F("-|"));
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	74 e0       	ldi	r23, 0x04	; 4
    258a:	85 e3       	ldi	r24, 0x35	; 53
    258c:	93 e0       	ldi	r25, 0x03	; 3
    258e:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    2592:	4a e0       	ldi	r20, 0x0A	; 10
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <settings+0xe>
    259a:	85 e3       	ldi	r24, 0x35	; 53
    259c:	93 e0       	ldi	r25, 0x03	; 3
    259e:	0e 94 21 21 	call	0x4242	; 0x4242 <_ZN5Print5printEhi>
    25a2:	6d ef       	ldi	r22, 0xFD	; 253
    25a4:	73 e0       	ldi	r23, 0x03	; 3
    25a6:	85 e3       	ldi	r24, 0x35	; 53
    25a8:	93 e0       	ldi	r25, 0x03	; 3
    25aa:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-sgv=")); Serial.print(settings.currentVoltageGain); Serial.println(F("-|"));
    25ae:	66 ef       	ldi	r22, 0xF6	; 246
    25b0:	73 e0       	ldi	r23, 0x03	; 3
    25b2:	85 e3       	ldi	r24, 0x35	; 53
    25b4:	93 e0       	ldi	r25, 0x03	; 3
    25b6:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    25ba:	4a e0       	ldi	r20, 0x0A	; 10
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <settings+0xf>
    25c2:	85 e3       	ldi	r24, 0x35	; 53
    25c4:	93 e0       	ldi	r25, 0x03	; 3
    25c6:	0e 94 21 21 	call	0x4242	; 0x4242 <_ZN5Print5printEhi>
    25ca:	63 ef       	ldi	r22, 0xF3	; 243
    25cc:	73 e0       	ldi	r23, 0x03	; 3
    25ce:	85 e3       	ldi	r24, 0x35	; 53
    25d0:	93 e0       	ldi	r25, 0x03	; 3
    25d2:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-smr ")); Serial.print(settings.canManipulateRelay); Serial.println(F("-|"));
    25d6:	6c ee       	ldi	r22, 0xEC	; 236
    25d8:	73 e0       	ldi	r23, 0x03	; 3
    25da:	85 e3       	ldi	r24, 0x35	; 53
    25dc:	93 e0       	ldi	r25, 0x03	; 3
    25de:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    25e2:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <settings+0x29>
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	4a e0       	ldi	r20, 0x0A	; 10
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	85 e3       	ldi	r24, 0x35	; 53
    25ee:	93 e0       	ldi	r25, 0x03	; 3
    25f0:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN5Print5printEii>
    25f4:	69 ee       	ldi	r22, 0xE9	; 233
    25f6:	73 e0       	ldi	r23, 0x03	; 3
    25f8:	85 e3       	ldi	r24, 0x35	; 53
    25fa:	93 e0       	ldi	r25, 0x03	; 3
    25fc:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-sia")); Serial.print(settings.impedance[0], 10); Serial.println(F("-|"));
    2600:	63 ee       	ldi	r22, 0xE3	; 227
    2602:	73 e0       	ldi	r23, 0x03	; 3
    2604:	85 e3       	ldi	r24, 0x35	; 53
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    260c:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <settings+0x1>
    2610:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <settings+0x2>
    2614:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <settings+0x3>
    2618:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <settings+0x4>
    261c:	2a e0       	ldi	r18, 0x0A	; 10
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	85 e3       	ldi	r24, 0x35	; 53
    2622:	93 e0       	ldi	r25, 0x03	; 3
    2624:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    2628:	60 ee       	ldi	r22, 0xE0	; 224
    262a:	73 e0       	ldi	r23, 0x03	; 3
    262c:	85 e3       	ldi	r24, 0x35	; 53
    262e:	93 e0       	ldi	r25, 0x03	; 3
    2630:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-sib")); Serial.print(settings.impedance[1], 10); Serial.println(F("-|"));
    2634:	6a ed       	ldi	r22, 0xDA	; 218
    2636:	73 e0       	ldi	r23, 0x03	; 3
    2638:	85 e3       	ldi	r24, 0x35	; 53
    263a:	93 e0       	ldi	r25, 0x03	; 3
    263c:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    2640:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <settings+0x5>
    2644:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <settings+0x6>
    2648:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <settings+0x7>
    264c:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <settings+0x8>
    2650:	2a e0       	ldi	r18, 0x0A	; 10
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	85 e3       	ldi	r24, 0x35	; 53
    2656:	93 e0       	ldi	r25, 0x03	; 3
    2658:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    265c:	67 ed       	ldi	r22, 0xD7	; 215
    265e:	73 e0       	ldi	r23, 0x03	; 3
    2660:	85 e3       	ldi	r24, 0x35	; 53
    2662:	93 e0       	ldi	r25, 0x03	; 3
    2664:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-sic")); Serial.print(settings.impedance[2], 10); Serial.println(F("-|"));
    2668:	61 ed       	ldi	r22, 0xD1	; 209
    266a:	73 e0       	ldi	r23, 0x03	; 3
    266c:	85 e3       	ldi	r24, 0x35	; 53
    266e:	93 e0       	ldi	r25, 0x03	; 3
    2670:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    2674:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <settings+0x9>
    2678:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <settings+0xa>
    267c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <settings+0xb>
    2680:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <settings+0xc>
    2684:	2a e0       	ldi	r18, 0x0A	; 10
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	85 e3       	ldi	r24, 0x35	; 53
    268a:	93 e0       	ldi	r25, 0x03	; 3
    268c:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    2690:	6e ec       	ldi	r22, 0xCE	; 206
    2692:	73 e0       	ldi	r23, 0x03	; 3
    2694:	85 e3       	ldi	r24, 0x35	; 53
    2696:	93 e0       	ldi	r25, 0x03	; 3
    2698:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-svma")); Serial.print(settings.multiplierVoltage[0], 3); Serial.println(F("-|"));
    269c:	67 ec       	ldi	r22, 0xC7	; 199
    269e:	73 e0       	ldi	r23, 0x03	; 3
    26a0:	85 e3       	ldi	r24, 0x35	; 53
    26a2:	93 e0       	ldi	r25, 0x03	; 3
    26a4:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    26a8:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <settings+0x10>
    26ac:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <settings+0x11>
    26b0:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <settings+0x12>
    26b4:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <settings+0x13>
    26b8:	23 e0       	ldi	r18, 0x03	; 3
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	85 e3       	ldi	r24, 0x35	; 53
    26be:	93 e0       	ldi	r25, 0x03	; 3
    26c0:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    26c4:	64 ec       	ldi	r22, 0xC4	; 196
    26c6:	73 e0       	ldi	r23, 0x03	; 3
    26c8:	85 e3       	ldi	r24, 0x35	; 53
    26ca:	93 e0       	ldi	r25, 0x03	; 3
    26cc:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-svmb")); Serial.print(settings.multiplierVoltage[1], 3); Serial.println(F("-|"));
    26d0:	6d eb       	ldi	r22, 0xBD	; 189
    26d2:	73 e0       	ldi	r23, 0x03	; 3
    26d4:	85 e3       	ldi	r24, 0x35	; 53
    26d6:	93 e0       	ldi	r25, 0x03	; 3
    26d8:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    26dc:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <settings+0x14>
    26e0:	50 91 10 02 	lds	r21, 0x0210	; 0x800210 <settings+0x15>
    26e4:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <settings+0x16>
    26e8:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <settings+0x17>
    26ec:	23 e0       	ldi	r18, 0x03	; 3
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	85 e3       	ldi	r24, 0x35	; 53
    26f2:	93 e0       	ldi	r25, 0x03	; 3
    26f4:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    26f8:	6a eb       	ldi	r22, 0xBA	; 186
    26fa:	73 e0       	ldi	r23, 0x03	; 3
    26fc:	85 e3       	ldi	r24, 0x35	; 53
    26fe:	93 e0       	ldi	r25, 0x03	; 3
    2700:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-svmc")); Serial.print(settings.multiplierVoltage[2], 3); Serial.println(F("-|"));
    2704:	63 eb       	ldi	r22, 0xB3	; 179
    2706:	73 e0       	ldi	r23, 0x03	; 3
    2708:	85 e3       	ldi	r24, 0x35	; 53
    270a:	93 e0       	ldi	r25, 0x03	; 3
    270c:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    2710:	40 91 13 02 	lds	r20, 0x0213	; 0x800213 <settings+0x18>
    2714:	50 91 14 02 	lds	r21, 0x0214	; 0x800214 <settings+0x19>
    2718:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <settings+0x1a>
    271c:	70 91 16 02 	lds	r23, 0x0216	; 0x800216 <settings+0x1b>
    2720:	23 e0       	ldi	r18, 0x03	; 3
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	85 e3       	ldi	r24, 0x35	; 53
    2726:	93 e0       	ldi	r25, 0x03	; 3
    2728:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    272c:	60 eb       	ldi	r22, 0xB0	; 176
    272e:	73 e0       	ldi	r23, 0x03	; 3
    2730:	85 e3       	ldi	r24, 0x35	; 53
    2732:	93 e0       	ldi	r25, 0x03	; 3
    2734:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-sama")); Serial.print(settings.multiplierAmperage[0], 3); Serial.println(F("-|"));
    2738:	69 ea       	ldi	r22, 0xA9	; 169
    273a:	73 e0       	ldi	r23, 0x03	; 3
    273c:	85 e3       	ldi	r24, 0x35	; 53
    273e:	93 e0       	ldi	r25, 0x03	; 3
    2740:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    2744:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <settings+0x1c>
    2748:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <settings+0x1d>
    274c:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <settings+0x1e>
    2750:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <settings+0x1f>
    2754:	23 e0       	ldi	r18, 0x03	; 3
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	85 e3       	ldi	r24, 0x35	; 53
    275a:	93 e0       	ldi	r25, 0x03	; 3
    275c:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    2760:	66 ea       	ldi	r22, 0xA6	; 166
    2762:	73 e0       	ldi	r23, 0x03	; 3
    2764:	85 e3       	ldi	r24, 0x35	; 53
    2766:	93 e0       	ldi	r25, 0x03	; 3
    2768:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-samb")); Serial.print(settings.multiplierAmperage[1], 3); Serial.println(F("-|"));
    276c:	6f e9       	ldi	r22, 0x9F	; 159
    276e:	73 e0       	ldi	r23, 0x03	; 3
    2770:	85 e3       	ldi	r24, 0x35	; 53
    2772:	93 e0       	ldi	r25, 0x03	; 3
    2774:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    2778:	40 91 1b 02 	lds	r20, 0x021B	; 0x80021b <settings+0x20>
    277c:	50 91 1c 02 	lds	r21, 0x021C	; 0x80021c <settings+0x21>
    2780:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <settings+0x22>
    2784:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <settings+0x23>
    2788:	23 e0       	ldi	r18, 0x03	; 3
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	85 e3       	ldi	r24, 0x35	; 53
    278e:	93 e0       	ldi	r25, 0x03	; 3
    2790:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    2794:	6c e9       	ldi	r22, 0x9C	; 156
    2796:	73 e0       	ldi	r23, 0x03	; 3
    2798:	85 e3       	ldi	r24, 0x35	; 53
    279a:	93 e0       	ldi	r25, 0x03	; 3
    279c:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.print(F("|-samc")); Serial.print(settings.multiplierAmperage[2], 3); Serial.println(F("-|"));
    27a0:	65 e9       	ldi	r22, 0x95	; 149
    27a2:	73 e0       	ldi	r23, 0x03	; 3
    27a4:	85 e3       	ldi	r24, 0x35	; 53
    27a6:	93 e0       	ldi	r25, 0x03	; 3
    27a8:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    27ac:	40 91 1f 02 	lds	r20, 0x021F	; 0x80021f <settings+0x24>
    27b0:	50 91 20 02 	lds	r21, 0x0220	; 0x800220 <settings+0x25>
    27b4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <settings+0x26>
    27b8:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <settings+0x27>
    27bc:	23 e0       	ldi	r18, 0x03	; 3
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	85 e3       	ldi	r24, 0x35	; 53
    27c2:	93 e0       	ldi	r25, 0x03	; 3
    27c4:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN5Print5printEdi>
    27c8:	62 e9       	ldi	r22, 0x92	; 146
    27ca:	73 e0       	ldi	r23, 0x03	; 3
    27cc:	85 e3       	ldi	r24, 0x35	; 53
    27ce:	93 e0       	ldi	r25, 0x03	; 3
    27d0:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	initAdsVoltageGain();
    27d4:	0e 94 14 11 	call	0x2228	; 0x2228 <_Z18initAdsVoltageGainv>
	initAdsAmperageGain();
    27d8:	0e 94 39 11 	call	0x2272	; 0x2272 <_Z19initAdsAmperageGainv>

	checkIsReadyToWork();
    27dc:	0e 94 93 02 	call	0x526	; 0x526 <_Z18checkIsReadyToWorkv>
	
	// Инициализируем пищалку
	pinMode(RELAY, OUTPUT);
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	81 e1       	ldi	r24, 0x11	; 17
    27e4:	0e 94 92 23 	call	0x4724	; 0x4724 <pinMode>
	pinMode(BEEPER, OUTPUT);
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	80 e1       	ldi	r24, 0x10	; 16
    27ec:	0e 94 92 23 	call	0x4724	; 0x4724 <pinMode>
	pinMode(DEBUG, INPUT);
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	84 e0       	ldi	r24, 0x04	; 4
    27f4:	0e 94 92 23 	call	0x4724	; 0x4724 <pinMode>
	digitalWrite(RELAY, LOW);
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	81 e1       	ldi	r24, 0x11	; 17
    27fc:	0e 94 ce 23 	call	0x479c	; 0x479c <digitalWrite>
	digitalWrite(BEEPER, LOW);
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	80 e1       	ldi	r24, 0x10	; 16
    2804:	0e 94 ce 23 	call	0x479c	; 0x479c <digitalWrite>
	
	if (digitalRead(DEBUG) == HIGH) {
    2808:	84 e0       	ldi	r24, 0x04	; 4
    280a:	0e 94 fd 23 	call	0x47fa	; 0x47fa <digitalRead>
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	99 f4       	brne	.+38     	; 0x2838 <setup+0x57c>
		settings.isDebugMode = true;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <settings+0x28>
		lcd.clear();
    2818:	87 ee       	ldi	r24, 0xE7	; 231
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN17LiquidCrystal_I2C5clearEv>
		lcd.print(F("|-Debug mode-|"));
    2820:	63 e8       	ldi	r22, 0x83	; 131
    2822:	73 e0       	ldi	r23, 0x03	; 3
    2824:	87 ee       	ldi	r24, 0xE7	; 231
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
		delay(1000);
    282c:	68 ee       	ldi	r22, 0xE8	; 232
    282e:	73 e0       	ldi	r23, 0x03	; 3
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 e7 22 	call	0x45ce	; 0x45ce <delay>
	}

	
	modeWork.prev = modeWork.current;
    2838:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    283c:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <modeWork+0x1>
	initAvgVars();
    2840:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_Z11initAvgVarsv>
	Serial.println(F("Completed!"));
    2844:	68 e7       	ldi	r22, 0x78	; 120
    2846:	73 e0       	ldi	r23, 0x03	; 3
    2848:	85 e3       	ldi	r24, 0x35	; 53
    284a:	93 e0       	ldi	r25, 0x03	; 3
    284c:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Stand by..."));
    2850:	6c e6       	ldi	r22, 0x6C	; 108
    2852:	73 e0       	ldi	r23, 0x03	; 3
    2854:	85 e3       	ldi	r24, 0x35	; 53
    2856:	93 e0       	ldi	r25, 0x03	; 3
    2858:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
	displayStaticAsMode();
    285c:	0e 94 17 07 	call	0xe2e	; 0xe2e <_Z19displayStaticAsModev>
	displayAsMode();
    2860:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_Z13displayAsModev>

00002864 <_Z12saveSettingsv>:
}

/*
	Сохранение настроек при сменах режима
*/
void saveSettings() {
    2864:	cf 93       	push	r28
	switch(modeWork.current) {
    2866:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <modeWork>
    286a:	8e 2f       	mov	r24, r30
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	fc 01       	movw	r30, r24
    2870:	31 97       	sbiw	r30, 0x01	; 1
    2872:	ea 30       	cpi	r30, 0x0A	; 10
    2874:	f1 05       	cpc	r31, r1
    2876:	08 f0       	brcs	.+2      	; 0x287a <_Z12saveSettingsv+0x16>
    2878:	da c0       	rjmp	.+436    	; 0x2a2e <_Z12saveSettingsv+0x1ca>
    287a:	ee 58       	subi	r30, 0x8E	; 142
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	0c 94 4e 24 	jmp	0x489c	; 0x489c <__tablejump2__>
		case MW_SETUP_MANIPULATE_RELAY:
			settings.canManipulateRelay = setDigit.value;
    2882:	c1 e0       	ldi	r28, 0x01	; 1
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	a9 01       	movw	r20, r18
    288a:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    288e:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    2892:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2896:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    289a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    289e:	81 11       	cpse	r24, r1
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <_Z12saveSettingsv+0x40>
    28a2:	c0 e0       	ldi	r28, 0x00	; 0
    28a4:	c0 93 24 02 	sts	0x0224, r28	; 0x800224 <settings+0x29>
			eeprom_update_byte(&eeprom_manipulate_relay, settings.canManipulateRelay);
    28a8:	6c 2f       	mov	r22, r28
    28aa:	86 e2       	ldi	r24, 0x26	; 38
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	12 c0       	rjmp	.+36     	; 0x28d4 <_Z12saveSettingsv+0x70>
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
    28b0:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    28b4:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    28b8:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    28bc:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    28c0:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__fixunssfsi>
    28c4:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <settings+0xe>
			initAdsAmperageGain();
    28c8:	0e 94 39 11 	call	0x2272	; 0x2272 <_Z19initAdsAmperageGainv>
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    28cc:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <settings+0xe>
    28d0:	85 e2       	ldi	r24, 0x25	; 37
    28d2:	90 e0       	ldi	r25, 0x00	; 0
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
			break;
	}
	
}
    28d4:	cf 91       	pop	r28
			eeprom_update_byte(&eeprom_manipulate_relay, settings.canManipulateRelay);
			break;
		case MW_SETUP_GAIN_AMPERAGE:
			settings.currentAmperageGain = setDigit.value;
			initAdsAmperageGain();
			eeprom_update_byte(&eeprom_gain_amperage, settings.currentAmperageGain);
    28d6:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <eeprom_update_byte>
			break;
		case MW_SETUP_GAIN_VOLTAGE:
			settings.currentVoltageGain = setDigit.value;
    28da:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <setDigit>
    28de:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <setDigit+0x1>
    28e2:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <setDigit+0x2>
    28e6:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <setDigit+0x3>
    28ea:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__fixunssfsi>
    28ee:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <settings+0xf>
			initAdsVoltageGain();
    28f2:	0e 94 14 11 	call	0x2228	; 0x2228 <_Z18initAdsVoltageGainv>
			eeprom_update_byte(&eeprom_gain_voltage, settings.currentVoltageGain);
    28f6:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <settings+0xf>
    28fa:	84 e2       	ldi	r24, 0x24	; 36
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	ea cf       	rjmp	.-44     	; 0x28d4 <_Z12saveSettingsv+0x70>
			break;
		case MW_SETUP_IMPEDANCE:
			eeprom_update_float(&eeprom_impedance_ab, settings.impedance[0]);
    2900:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <settings+0x1>
    2904:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <settings+0x2>
    2908:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <settings+0x3>
    290c:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <settings+0x4>
    2910:	80 e2       	ldi	r24, 0x20	; 32
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
			eeprom_update_float(&eeprom_impedance_bc, settings.impedance[1]);
    2918:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <settings+0x5>
    291c:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <settings+0x6>
    2920:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <settings+0x7>
    2924:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <settings+0x8>
    2928:	8c e1       	ldi	r24, 0x1C	; 28
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_update_dword>
			eeprom_update_float(&eeprom_impedance_ac, settings.impedance[2]);
    2930:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <settings+0x9>
    2934:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <settings+0xa>
    2938:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <settings+0xb>
    293c:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <settings+0xc>
    2940:	88 e1       	ldi	r24, 0x18	; 24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	71 c0       	rjmp	.+226    	; 0x2a28 <_Z12saveSettingsv+0x1c4>
			break;
		case MW_SETUP_MULT_VOLTAGE_AB:
			settings.multiplierVoltage[0] = setDigit.value;
    2946:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    294a:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    294e:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2952:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    2956:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <settings+0x10>
    295a:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <settings+0x11>
    295e:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <settings+0x12>
    2962:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <settings+0x13>
			eeprom_update_float(&eeprom_voltage_mult_ab, settings.multiplierVoltage[0]);
    2966:	84 e1       	ldi	r24, 0x14	; 20
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	5e c0       	rjmp	.+188    	; 0x2a28 <_Z12saveSettingsv+0x1c4>
			break;
		case MW_SETUP_MULT_VOLTAGE_BC:
			settings.multiplierVoltage[1] = setDigit.value;
    296c:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    2970:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    2974:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2978:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    297c:	40 93 0f 02 	sts	0x020F, r20	; 0x80020f <settings+0x14>
    2980:	50 93 10 02 	sts	0x0210, r21	; 0x800210 <settings+0x15>
    2984:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <settings+0x16>
    2988:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <settings+0x17>
			eeprom_update_float(&eeprom_voltage_mult_bc, settings.multiplierVoltage[1]);
    298c:	80 e1       	ldi	r24, 0x10	; 16
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	4b c0       	rjmp	.+150    	; 0x2a28 <_Z12saveSettingsv+0x1c4>
			break;
		case MW_SETUP_MULT_VOLTAGE_AC:
			settings.multiplierVoltage[2] = setDigit.value;
    2992:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    2996:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    299a:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    299e:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    29a2:	40 93 13 02 	sts	0x0213, r20	; 0x800213 <settings+0x18>
    29a6:	50 93 14 02 	sts	0x0214, r21	; 0x800214 <settings+0x19>
    29aa:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <settings+0x1a>
    29ae:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <settings+0x1b>
			eeprom_update_float(&eeprom_voltage_mult_ac, settings.multiplierVoltage[2]);
    29b2:	8c e0       	ldi	r24, 0x0C	; 12
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	38 c0       	rjmp	.+112    	; 0x2a28 <_Z12saveSettingsv+0x1c4>
			break;
		case MW_SETUP_MULT_AMPERAGE_AB:
			settings.multiplierAmperage[0] = setDigit.value;
    29b8:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    29bc:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    29c0:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    29c4:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    29c8:	40 93 17 02 	sts	0x0217, r20	; 0x800217 <settings+0x1c>
    29cc:	50 93 18 02 	sts	0x0218, r21	; 0x800218 <settings+0x1d>
    29d0:	60 93 19 02 	sts	0x0219, r22	; 0x800219 <settings+0x1e>
    29d4:	70 93 1a 02 	sts	0x021A, r23	; 0x80021a <settings+0x1f>
			eeprom_update_float(&eeprom_amperage_mult_ab, settings.multiplierAmperage[0]);
    29d8:	88 e0       	ldi	r24, 0x08	; 8
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	25 c0       	rjmp	.+74     	; 0x2a28 <_Z12saveSettingsv+0x1c4>
			break;
		case MW_SETUP_MULT_AMPERAGE_BC:
			settings.multiplierAmperage[1] = setDigit.value;
    29de:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    29e2:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    29e6:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    29ea:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    29ee:	40 93 1b 02 	sts	0x021B, r20	; 0x80021b <settings+0x20>
    29f2:	50 93 1c 02 	sts	0x021C, r21	; 0x80021c <settings+0x21>
    29f6:	60 93 1d 02 	sts	0x021D, r22	; 0x80021d <settings+0x22>
    29fa:	70 93 1e 02 	sts	0x021E, r23	; 0x80021e <settings+0x23>
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
    29fe:	84 e0       	ldi	r24, 0x04	; 4
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	12 c0       	rjmp	.+36     	; 0x2a28 <_Z12saveSettingsv+0x1c4>
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
    2a04:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <setDigit>
    2a08:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <setDigit+0x1>
    2a0c:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <setDigit+0x2>
    2a10:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <setDigit+0x3>
    2a14:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <settings+0x24>
    2a18:	50 93 20 02 	sts	0x0220, r21	; 0x800220 <settings+0x25>
    2a1c:	60 93 21 02 	sts	0x0221, r22	; 0x800221 <settings+0x26>
    2a20:	70 93 22 02 	sts	0x0222, r23	; 0x800222 <settings+0x27>
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	
}
    2a28:	cf 91       	pop	r28
			settings.multiplierAmperage[1] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_bc, settings.multiplierAmperage[1]);
			break;
		case MW_SETUP_MULT_AMPERAGE_AC:
			settings.multiplierAmperage[2] = setDigit.value;
			eeprom_update_float(&eeprom_amperage_mult_ac, settings.multiplierAmperage[2]);
    2a2a:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <eeprom_update_dword>
			break;
	}
	
}
    2a2e:	cf 91       	pop	r28
    2a30:	08 95       	ret

00002a32 <_Z21button2LongPressStartv>:
}

/*
	Обработчик длинного клика второй клавиши
*/
void button2LongPressStart() {
    2a32:	cf 93       	push	r28
	// При наличии замыкания отключает пищалку
	if (icError.hasIC) {
    2a34:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_start+0x16>
    2a38:	88 23       	and	r24, r24
    2a3a:	79 f0       	breq	.+30     	; 0x2a5a <_Z21button2LongPressStartv+0x28>
		digitalWrite(BEEPER, LOW);
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	80 e1       	ldi	r24, 0x10	; 16
    2a40:	0e 94 ce 23 	call	0x479c	; 0x479c <digitalWrite>
		icError.hasIC = false;
    2a44:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_start+0x16>
		icError.detectStamp = false;
    2a48:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_start+0x17>
    2a4c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_start+0x18>
    2a50:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_start+0x19>
    2a54:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_start+0x1a>
		return;
    2a58:	3e c0       	rjmp	.+124    	; 0x2ad6 <_Z21button2LongPressStartv+0xa4>
	}
	
	// В режиме предупреждения о необходимости натсроек ничего не делает
	if (modeWork.current == MW_NEED_SETUP) {
    2a5a:	c0 91 e5 01 	lds	r28, 0x01E5	; 0x8001e5 <modeWork>
    2a5e:	cc 23       	and	r28, r28
    2a60:	d1 f1       	breq	.+116    	; 0x2ad6 <_Z21button2LongPressStartv+0xa4>
		return;
	}
	
	// В режиме отображения количества выхода за пределы измерений обнуляет их и средние значения
	if (modeWork.current == MW_SHOW_ERRORS_COUNTERS) {
    2a62:	cd 30       	cpi	r28, 0x0D	; 13
    2a64:	a1 f4       	brne	.+40     	; 0x2a8e <_Z21button2LongPressStartv+0x5c>
		for(byte i = 0; i < 3; i++) {
			icError.criticalLvlCount[i] = 0;
    2a66:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_start+0x11>
    2a6a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_start+0x10>
    2a6e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_start+0x13>
    2a72:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_start+0x12>
    2a76:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_start+0x15>
    2a7a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_start+0x14>
		}
		initAvgVars();
    2a7e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_Z11initAvgVarsv>
		modeWork.current = MW_SHOWING_START;
    2a82:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <modeWork>
		lcdUpdateScreen = true;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lcdUpdateScreen>
		return;
    2a8c:	24 c0       	rjmp	.+72     	; 0x2ad6 <_Z21button2LongPressStartv+0xa4>
	}
	
	// Перевод в режим настроек и выход из него
	if (settings.isSetupMode) {
    2a8e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <settings+0xd>
    2a92:	88 23       	and	r24, r24
    2a94:	89 f0       	breq	.+34     	; 0x2ab8 <_Z21button2LongPressStartv+0x86>
		if (modeWork.current == MW_SETUP_STOP) {
    2a96:	ca 30       	cpi	r28, 0x0A	; 10
    2a98:	29 f4       	brne	.+10     	; 0x2aa4 <_Z21button2LongPressStartv+0x72>
			saveSettings();
    2a9a:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z12saveSettingsv>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    2a9e:	cf 91       	pop	r28
	
	// Перевод в режим настроек и выход из него
	if (settings.isSetupMode) {
		if (modeWork.current == MW_SETUP_STOP) {
			saveSettings();
			checkIsReadyToWork();
    2aa0:	0c 94 93 02 	jmp	0x526	; 0x526 <_Z18checkIsReadyToWorkv>
		} else {
			saveSettings();
    2aa4:	0e 94 32 14 	call	0x2864	; 0x2864 <_Z12saveSettingsv>
			modeWork.current++;
    2aa8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <modeWork>
    2aac:	8f 5f       	subi	r24, 0xFF	; 255
    2aae:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <modeWork>
		settings.isReadyToWork = MM_STOP;
		modeWork.current = MW_SETUP_START;
		setEditValue();
		settings.isSetupMode = true;
	}
}
    2ab2:	cf 91       	pop	r28
			saveSettings();
			checkIsReadyToWork();
		} else {
			saveSettings();
			modeWork.current++;
			setEditValue();
    2ab4:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <_Z12setEditValuev>
		}
	} else {
		Serial.println(F("|-ms=0-|"));
    2ab8:	61 e4       	ldi	r22, 0x41	; 65
    2aba:	71 e0       	ldi	r23, 0x01	; 1
    2abc:	85 e3       	ldi	r24, 0x35	; 53
    2abe:	93 e0       	ldi	r25, 0x03	; 3
    2ac0:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print7printlnEPK19__FlashStringHelper>
		settings.isReadyToWork = MM_STOP;
    2ac4:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <settings>
		modeWork.current = MW_SETUP_START;
    2ac8:	c1 e0       	ldi	r28, 0x01	; 1
    2aca:	c0 93 e5 01 	sts	0x01E5, r28	; 0x8001e5 <modeWork>
		setEditValue();
    2ace:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_Z12setEditValuev>
		settings.isSetupMode = true;
    2ad2:	c0 93 08 02 	sts	0x0208, r28	; 0x800208 <settings+0xd>
	}
}
    2ad6:	cf 91       	pop	r28
    2ad8:	08 95       	ret

00002ada <_GLOBAL__sub_I_eeprom_first_start>:
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
	| GAIN_SIXTEEN   | x16  |    0.256    | 0.0078125	 |
	------------------------------------------------------
*/

// Объекты работы с АЦП модулями
Adafruit_ADS1115 adsVoltage(0x48);			
    2ade:	68 e4       	ldi	r22, 0x48	; 72
    2ae0:	8c e6       	ldi	r24, 0x6C	; 108
    2ae2:	92 e0       	ldi	r25, 0x02	; 2
    2ae4:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 adsAmperage(0x49);
    2ae8:	69 e4       	ldi	r22, 0x49	; 73
    2aea:	87 e6       	ldi	r24, 0x67	; 103
    2aec:	92 e0       	ldi	r25, 0x02	; 2
    2aee:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN16Adafruit_ADS1115C1Eh>
		В режиме измерения смена режима показа назад
	Динное нажатие:
		В режиме измерения в меню критических величин сбрасывает счетчик
		Переход в режим настроек/отображения измерений кроме режима критических величин
*/
OneButton button1Callback(BUTTON_1, false);
    2af2:	21 e0       	ldi	r18, 0x01	; 1
    2af4:	40 e0       	ldi	r20, 0x00	; 0
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	6e e0       	ldi	r22, 0x0E	; 14
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	86 e4       	ldi	r24, 0x46	; 70
    2afe:	92 e0       	ldi	r25, 0x02	; 2
    2b00:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <_ZN9OneButtonC1Eiib>
OneButton button2Callback(BUTTON_2, false);
    2b04:	21 e0       	ldi	r18, 0x01	; 1
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	6f e0       	ldi	r22, 0x0F	; 15
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	85 e2       	ldi	r24, 0x25	; 37
    2b10:	92 e0       	ldi	r25, 0x02	; 2
    2b12:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <_ZN9OneButtonC1Eiib>
	currentAmperageGain - индекс усиления АЦП по току
	currentVoltageGain - индекс усиления АЦП по напряжению
	multiplierVoltage - множитель по напряжению для вычисления реального значения
	multiplierAmperage - множитель по току для вычисления реального значения
*/
struct Settings {
    2b16:	cb ef       	ldi	r28, 0xFB	; 251
    2b18:	d1 e0       	ldi	r29, 0x01	; 1
    2b1a:	18 82       	st	Y, r1
    2b1c:	19 82       	std	Y+1, r1	; 0x01
    2b1e:	1a 82       	std	Y+2, r1	; 0x02
    2b20:	1b 82       	std	Y+3, r1	; 0x03
    2b22:	1c 82       	std	Y+4, r1	; 0x04
    2b24:	1d 82       	std	Y+5, r1	; 0x05
    2b26:	1e 82       	std	Y+6, r1	; 0x06
    2b28:	1f 82       	std	Y+7, r1	; 0x07
    2b2a:	18 86       	std	Y+8, r1	; 0x08
    2b2c:	19 86       	std	Y+9, r1	; 0x09
    2b2e:	1a 86       	std	Y+10, r1	; 0x0a
    2b30:	1b 86       	std	Y+11, r1	; 0x0b
    2b32:	1c 86       	std	Y+12, r1	; 0x0c
    2b34:	1e 86       	std	Y+14, r1	; 0x0e
    2b36:	1f 86       	std	Y+15, r1	; 0x0f
    2b38:	8c e0       	ldi	r24, 0x0C	; 12
    2b3a:	ed e8       	ldi	r30, 0x8D	; 141
    2b3c:	f1 e0       	ldi	r31, 0x01	; 1
    2b3e:	ab e0       	ldi	r26, 0x0B	; 11
    2b40:	b2 e0       	ldi	r27, 0x02	; 2
    2b42:	01 90       	ld	r0, Z+
    2b44:	0d 92       	st	X+, r0
    2b46:	8a 95       	dec	r24
    2b48:	e1 f7       	brne	.-8      	; 0x2b42 <_GLOBAL__sub_I_eeprom_first_start+0x68>
    2b4a:	8c e0       	ldi	r24, 0x0C	; 12
    2b4c:	ed e8       	ldi	r30, 0x8D	; 141
    2b4e:	f1 e0       	ldi	r31, 0x01	; 1
    2b50:	a7 e1       	ldi	r26, 0x17	; 23
    2b52:	b2 e0       	ldi	r27, 0x02	; 2
    2b54:	01 90       	ld	r0, Z+
    2b56:	0d 92       	st	X+, r0
    2b58:	8a 95       	dec	r24
    2b5a:	e1 f7       	brne	.-8      	; 0x2b54 <_GLOBAL__sub_I_eeprom_first_start+0x7a>
    2b5c:	18 a6       	std	Y+40, r1	; 0x28
    2b5e:	19 a6       	std	Y+41, r1	; 0x29
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    2b60:	22 e0       	ldi	r18, 0x02	; 2
    2b62:	40 e1       	ldi	r20, 0x10	; 16
    2b64:	67 e2       	ldi	r22, 0x27	; 39
    2b66:	87 ee       	ldi	r24, 0xE7	; 231
    2b68:	91 e0       	ldi	r25, 0x01	; 1
	Инициализация усиления АЦП по току
*/
void initAdsAmperageGain() {
	setAdsGainByIndex(&adsAmperage, settings.currentAmperageGain);
	ads.amperageStep = ads.gainStep[settings.currentAmperageGain] / 1000.0;
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
AdsChars adsChars;
Settings settings;
Ads1115 ads;
Error icError;
SetDigit setDigit;
LiquidCrystal_I2C lcd(0x27, 16, 2);
    2b6e:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <_ZN17LiquidCrystal_I2CC1Ehhh>

00002b72 <_ZN16Adafruit_ADS1115C1Eh>:
  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH, threshold << m_bitShift);

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    2b72:	fc 01       	movw	r30, r24
    2b74:	14 82       	std	Z+4, r1	; 0x04
    2b76:	13 82       	std	Z+3, r1	; 0x03
    2b78:	60 83       	st	Z, r22
    2b7a:	88 e0       	ldi	r24, 0x08	; 8
    2b7c:	81 83       	std	Z+1, r24	; 0x01
    2b7e:	12 82       	std	Z+2, r1	; 0x02
    2b80:	08 95       	ret

00002b82 <_ZN16Adafruit_ADS10155beginEv>:
    2b82:	8f ed       	ldi	r24, 0xDF	; 223
    2b84:	92 e0       	ldi	r25, 0x02	; 2
    2b86:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <_ZN7TwoWire5beginEv>

00002b8a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	74 83       	std	Z+4, r23	; 0x04
    2b8e:	63 83       	std	Z+3, r22	; 0x03
    2b90:	08 95       	ret

00002b92 <_ZL13writeRegisterhhj>:
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	16 2f       	mov	r17, r22
    2b9a:	ea 01       	movw	r28, r20
    2b9c:	68 2f       	mov	r22, r24
    2b9e:	8f ed       	ldi	r24, 0xDF	; 223
    2ba0:	92 e0       	ldi	r25, 0x02	; 2
    2ba2:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN7TwoWire17beginTransmissionEh>
    2ba6:	61 2f       	mov	r22, r17
    2ba8:	8f ed       	ldi	r24, 0xDF	; 223
    2baa:	92 e0       	ldi	r25, 0x02	; 2
    2bac:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <_ZN7TwoWire5writeEh>
    2bb0:	6d 2f       	mov	r22, r29
    2bb2:	8f ed       	ldi	r24, 0xDF	; 223
    2bb4:	92 e0       	ldi	r25, 0x02	; 2
    2bb6:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <_ZN7TwoWire5writeEh>
    2bba:	6c 2f       	mov	r22, r28
    2bbc:	8f ed       	ldi	r24, 0xDF	; 223
    2bbe:	92 e0       	ldi	r25, 0x02	; 2
    2bc0:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <_ZN7TwoWire5writeEh>
    2bc4:	8f ed       	ldi	r24, 0xDF	; 223
    2bc6:	92 e0       	ldi	r25, 0x02	; 2
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	1f 91       	pop	r17
    2bce:	0c 94 26 1c 	jmp	0x384c	; 0x384c <_ZN7TwoWire15endTransmissionEv>

00002bd2 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	18 2f       	mov	r17, r24
  Wire.beginTransmission(i2cAddress);
    2bda:	68 2f       	mov	r22, r24
    2bdc:	8f ed       	ldi	r24, 0xDF	; 223
    2bde:	92 e0       	ldi	r25, 0x02	; 2
    2be0:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN7TwoWire17beginTransmissionEh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	8f ed       	ldi	r24, 0xDF	; 223
    2be8:	92 e0       	ldi	r25, 0x02	; 2
    2bea:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <_ZN7TwoWire5writeEh>
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
    2bee:	8f ed       	ldi	r24, 0xDF	; 223
    2bf0:	92 e0       	ldi	r25, 0x02	; 2
    2bf2:	0e 94 26 1c 	call	0x384c	; 0x384c <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
    2bf6:	42 e0       	ldi	r20, 0x02	; 2
    2bf8:	61 2f       	mov	r22, r17
    2bfa:	8f ed       	ldi	r24, 0xDF	; 223
    2bfc:	92 e0       	ldi	r25, 0x02	; 2
    2bfe:	0e 94 23 1c 	call	0x3846	; 0x3846 <_ZN7TwoWire11requestFromEhh>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
  #if ARDUINO >= 100
  return Wire.read();
    2c02:	8f ed       	ldi	r24, 0xDF	; 223
    2c04:	92 e0       	ldi	r25, 0x02	; 2
    2c06:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN7TwoWire4readEv>
    2c0a:	18 2f       	mov	r17, r24
    2c0c:	8f ed       	ldi	r24, 0xDF	; 223
    2c0e:	92 e0       	ldi	r25, 0x02	; 2
    2c10:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN7TwoWire4readEv>
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
  Wire.endTransmission();
  Wire.requestFrom(i2cAddress, (uint8_t)2);
  return ((i2cread() << 8) | i2cread());  
    2c14:	d1 2f       	mov	r29, r17
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	c2 2f       	mov	r28, r18
}
    2c1a:	9e 01       	movw	r18, r28
    2c1c:	28 2b       	or	r18, r24
    2c1e:	c9 01       	movw	r24, r18
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	1f 91       	pop	r17
    2c26:	08 95       	ret

00002c28 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
  if (channel > 3)
    2c2c:	64 30       	cpi	r22, 0x04	; 4
    2c2e:	50 f5       	brcc	.+84     	; 0x2c84 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x5c>
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
    2c30:	fc 01       	movw	r30, r24
    2c32:	43 81       	ldd	r20, Z+3	; 0x03
    2c34:	54 81       	ldd	r21, Z+4	; 0x04

  // Set single-ended input channel
  switch (channel)
    2c36:	62 30       	cpi	r22, 0x02	; 2
    2c38:	51 f0       	breq	.+20     	; 0x2c4e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
    2c3a:	63 30       	cpi	r22, 0x03	; 3
    2c3c:	59 f0       	breq	.+22     	; 0x2c54 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2c>
    2c3e:	61 30       	cpi	r22, 0x01	; 1
    2c40:	19 f0       	breq	.+6      	; 0x2c48 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    2c42:	43 68       	ori	r20, 0x83	; 131
    2c44:	51 64       	ori	r21, 0x41	; 65
      break;
    2c46:	08 c0       	rjmp	.+16     	; 0x2c58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    2c48:	43 68       	ori	r20, 0x83	; 131
    2c4a:	51 65       	ori	r21, 0x51	; 81
      break;
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    2c4e:	43 68       	ori	r20, 0x83	; 131
    2c50:	51 66       	ori	r21, 0x61	; 97
      break;
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x30>
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    2c54:	43 68       	ori	r20, 0x83	; 131
    2c56:	51 67       	ori	r21, 0x71	; 113
    2c58:	ec 01       	movw	r28, r24

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    2c5a:	50 68       	ori	r21, 0x80	; 128
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	88 81       	ld	r24, Y
    2c60:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZL13writeRegisterhhj>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
    2c64:	69 81       	ldd	r22, Y+1	; 0x01
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 e7 22 	call	0x45ce	; 0x45ce <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
    2c70:	88 81       	ld	r24, Y
    2c72:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZL12readRegisterhh.isra.0>
    2c76:	0a 80       	ldd	r0, Y+2	; 0x02
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x56>
    2c7a:	96 95       	lsr	r25
    2c7c:	87 95       	ror	r24
    2c7e:	0a 94       	dec	r0
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x52>
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x60>
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	08 95       	ret

00002c8e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	08 95       	ret

00002c94 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2c94:	08 95       	ret

00002c96 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    2c96:	fc 01       	movw	r30, r24
    2c98:	13 82       	std	Z+3, r1	; 0x03
    2c9a:	12 82       	std	Z+2, r1	; 0x02
    2c9c:	85 ea       	ldi	r24, 0xA5	; 165
    2c9e:	91 e0       	ldi	r25, 0x01	; 1
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
    2ca4:	64 83       	std	Z+4, r22	; 0x04
    2ca6:	41 87       	std	Z+9, r20	; 0x09
    2ca8:	22 87       	std	Z+10, r18	; 0x0a
    2caa:	13 86       	std	Z+11, r1	; 0x0b
    2cac:	08 95       	ret

00002cae <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2cae:	1f 93       	push	r17
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	ec 01       	movw	r28, r24
    2cb6:	16 2f       	mov	r17, r22
    2cb8:	6c 81       	ldd	r22, Y+4	; 0x04
    2cba:	8f ed       	ldi	r24, 0xDF	; 223
    2cbc:	92 e0       	ldi	r25, 0x02	; 2
    2cbe:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN7TwoWire17beginTransmissionEh>
    2cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc4:	61 2b       	or	r22, r17
    2cc6:	8f ed       	ldi	r24, 0xDF	; 223
    2cc8:	92 e0       	ldi	r25, 0x02	; 2
    2cca:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <_ZN7TwoWire5writeEh>
    2cce:	8f ed       	ldi	r24, 0xDF	; 223
    2cd0:	92 e0       	ldi	r25, 0x02	; 2
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0c 94 26 1c 	jmp	0x384c	; 0x384c <_ZN7TwoWire15endTransmissionEv>

00002cdc <_ZN17LiquidCrystal_I2C9backlightEv>:
    2cdc:	28 e0       	ldi	r18, 0x08	; 8
    2cde:	fc 01       	movw	r30, r24
    2ce0:	23 87       	std	Z+11, r18	; 0x0b
    2ce2:	60 e0       	ldi	r22, 0x00	; 0
    2ce4:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00002ce8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	cf 93       	push	r28
    2cee:	8c 01       	movw	r16, r24
    2cf0:	c6 2f       	mov	r28, r22
    2cf2:	64 60       	ori	r22, 0x04	; 4
    2cf4:	0e 94 57 16 	call	0x2cae	; 0x2cae <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 23 23 	call	0x4646	; 0x4646 <delayMicroseconds>
    2d00:	6c 2f       	mov	r22, r28
    2d02:	6b 7f       	andi	r22, 0xFB	; 251
    2d04:	c8 01       	movw	r24, r16
    2d06:	0e 94 57 16 	call	0x2cae	; 0x2cae <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2d0a:	82 e3       	ldi	r24, 0x32	; 50
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	cf 91       	pop	r28
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	0c 94 23 23 	jmp	0x4646	; 0x4646 <delayMicroseconds>

00002d18 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	ec 01       	movw	r28, r24
    2d20:	16 2f       	mov	r17, r22
    2d22:	0e 94 57 16 	call	0x2cae	; 0x2cae <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2d26:	61 2f       	mov	r22, r17
    2d28:	ce 01       	movw	r24, r28
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002d34 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	8c 01       	movw	r16, r24
    2d3e:	c6 2f       	mov	r28, r22
    2d40:	d4 2f       	mov	r29, r20
    2d42:	60 7f       	andi	r22, 0xF0	; 240
    2d44:	64 2b       	or	r22, r20
    2d46:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    2d4a:	80 e1       	ldi	r24, 0x10	; 16
    2d4c:	c8 9f       	mul	r28, r24
    2d4e:	b0 01       	movw	r22, r0
    2d50:	11 24       	eor	r1, r1
    2d52:	6d 2b       	or	r22, r29
    2d54:	c8 01       	movw	r24, r16
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002d62 <_ZN17LiquidCrystal_I2C7commandEh>:
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <_ZN17LiquidCrystal_I2C4sendEhh>

00002d68 <_ZN17LiquidCrystal_I2C5clearEv>:
    2d68:	61 e0       	ldi	r22, 0x01	; 1
    2d6a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_ZN17LiquidCrystal_I2C7commandEh>
    2d6e:	80 ed       	ldi	r24, 0xD0	; 208
    2d70:	97 e0       	ldi	r25, 0x07	; 7
    2d72:	0c 94 23 23 	jmp	0x4646	; 0x4646 <delayMicroseconds>

00002d76 <_ZN17LiquidCrystal_I2C4homeEv>:
    2d76:	62 e0       	ldi	r22, 0x02	; 2
    2d78:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_ZN17LiquidCrystal_I2C7commandEh>
    2d7c:	80 ed       	ldi	r24, 0xD0	; 208
    2d7e:	97 e0       	ldi	r25, 0x07	; 7
    2d80:	0c 94 23 23 	jmp	0x4646	; 0x4646 <delayMicroseconds>

00002d84 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	28 97       	sbiw	r28, 0x08	; 8
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	9c 01       	movw	r18, r24
    2d9a:	88 e0       	ldi	r24, 0x08	; 8
    2d9c:	e9 e9       	ldi	r30, 0x99	; 153
    2d9e:	f1 e0       	ldi	r31, 0x01	; 1
    2da0:	de 01       	movw	r26, r28
    2da2:	11 96       	adiw	r26, 0x01	; 1
    2da4:	01 90       	ld	r0, Z+
    2da6:	0d 92       	st	X+, r0
    2da8:	8a 95       	dec	r24
    2daa:	e1 f7       	brne	.-8      	; 0x2da4 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    2dac:	f9 01       	movw	r30, r18
    2dae:	80 85       	ldd	r24, Z+8	; 0x08
    2db0:	84 17       	cp	r24, r20
    2db2:	10 f4       	brcc	.+4      	; 0x2db8 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2db4:	4f ef       	ldi	r20, 0xFF	; 255
    2db6:	48 0f       	add	r20, r24
    2db8:	fe 01       	movw	r30, r28
    2dba:	31 96       	adiw	r30, 0x01	; 1
    2dbc:	e4 0f       	add	r30, r20
    2dbe:	f1 1d       	adc	r31, r1
    2dc0:	e4 0f       	add	r30, r20
    2dc2:	f1 1d       	adc	r31, r1
    2dc4:	90 81       	ld	r25, Z
    2dc6:	69 0f       	add	r22, r25
    2dc8:	60 68       	ori	r22, 0x80	; 128
    2dca:	c9 01       	movw	r24, r18
    2dcc:	28 96       	adiw	r28, 0x08	; 8
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <_ZN17LiquidCrystal_I2C7commandEh>

00002de0 <_ZN17LiquidCrystal_I2C7displayEv>:
    2de0:	fc 01       	movw	r30, r24
    2de2:	66 81       	ldd	r22, Z+6	; 0x06
    2de4:	26 2f       	mov	r18, r22
    2de6:	24 60       	ori	r18, 0x04	; 4
    2de8:	26 83       	std	Z+6, r18	; 0x06
    2dea:	6c 60       	ori	r22, 0x0C	; 12
    2dec:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <_ZN17LiquidCrystal_I2C7commandEh>

00002df0 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    2df0:	41 e0       	ldi	r20, 0x01	; 1
    2df2:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	08 95       	ret

00002dfc <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2dfc:	cf 93       	push	r28
    2dfe:	df 93       	push	r29
    2e00:	ec 01       	movw	r28, r24
	if (lines > 1) {
    2e02:	42 30       	cpi	r20, 0x02	; 2
    2e04:	18 f0       	brcs	.+6      	; 0x2e0c <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	88 60       	ori	r24, 0x08	; 8
    2e0a:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    2e0c:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    2e0e:	22 23       	and	r18, r18
    2e10:	29 f0       	breq	.+10     	; 0x2e1c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    2e12:	41 30       	cpi	r20, 0x01	; 1
    2e14:	19 f4       	brne	.+6      	; 0x2e1c <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    2e16:	8d 81       	ldd	r24, Y+5	; 0x05
    2e18:	84 60       	ori	r24, 0x04	; 4
    2e1a:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    2e1c:	62 e3       	ldi	r22, 0x32	; 50
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	0e 94 e7 22 	call	0x45ce	; 0x45ce <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	0e 94 57 16 	call	0x2cae	; 0x2cae <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    2e30:	68 ee       	ldi	r22, 0xE8	; 232
    2e32:	73 e0       	ldi	r23, 0x03	; 3
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	0e 94 e7 22 	call	0x45ce	; 0x45ce <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    2e3c:	60 e3       	ldi	r22, 0x30	; 48
    2e3e:	ce 01       	movw	r24, r28
    2e40:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2e44:	84 e9       	ldi	r24, 0x94	; 148
    2e46:	91 e1       	ldi	r25, 0x11	; 17
    2e48:	0e 94 23 23 	call	0x4646	; 0x4646 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    2e4c:	60 e3       	ldi	r22, 0x30	; 48
    2e4e:	ce 01       	movw	r24, r28
    2e50:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    2e54:	84 e9       	ldi	r24, 0x94	; 148
    2e56:	91 e1       	ldi	r25, 0x11	; 17
    2e58:	0e 94 23 23 	call	0x4646	; 0x4646 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    2e5c:	60 e3       	ldi	r22, 0x30	; 48
    2e5e:	ce 01       	movw	r24, r28
    2e60:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    2e64:	86 e9       	ldi	r24, 0x96	; 150
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 23 23 	call	0x4646	; 0x4646 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    2e6c:	60 e2       	ldi	r22, 0x20	; 32
    2e6e:	ce 01       	movw	r24, r28
    2e70:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <_ZN17LiquidCrystal_I2C10write4bitsEh>


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    2e74:	6d 81       	ldd	r22, Y+5	; 0x05
    2e76:	60 62       	ori	r22, 0x20	; 32
    2e78:	ce 01       	movw	r24, r28
    2e7a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_ZN17LiquidCrystal_I2C7commandEh>
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2e7e:	84 e0       	ldi	r24, 0x04	; 4
    2e80:	8e 83       	std	Y+6, r24	; 0x06
	display();
    2e82:	ce 01       	movw	r24, r28
    2e84:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN17LiquidCrystal_I2C7displayEv>
	
	// clear it off
	clear();
    2e88:	ce 01       	movw	r24, r28
    2e8a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	8f 83       	std	Y+7, r24	; 0x07
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    2e92:	66 e0       	ldi	r22, 0x06	; 6
    2e94:	ce 01       	movw	r24, r28
    2e96:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    2e9a:	ce 01       	movw	r24, r28
  
}
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    2ea0:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <_ZN17LiquidCrystal_I2C4homeEv>

00002ea4 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	ec 01       	movw	r28, r24
	Wire.begin();
    2eaa:	8f ed       	ldi	r24, 0xDF	; 223
    2eac:	92 e0       	ldi	r25, 0x02	; 2
    2eae:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2eb2:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	4a 85       	ldd	r20, Y+10	; 0x0a
    2eb8:	69 85       	ldd	r22, Y+9	; 0x09
    2eba:	ce 01       	movw	r24, r28
}
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    2ec0:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <_ZN17LiquidCrystal_I2C5beginEhhh>

00002ec4 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    2ec4:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <_ZN17LiquidCrystal_I2C9init_privEv>

00002ec8 <_ZN9OneButtonC1Eiib>:

void OneButton::reset(void){
  _state = 0; // restart.
  _startTime = 0;
  _stopTime = 0;
  _isLongPressed = false;
    2ec8:	fc 01       	movw	r30, r24
    2eca:	86 2f       	mov	r24, r22
    2ecc:	a2 e3       	ldi	r26, 0x32	; 50
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	b3 83       	std	Z+3, r27	; 0x03
    2ed2:	a2 83       	std	Z+2, r26	; 0x02
    2ed4:	a8 e5       	ldi	r26, 0x58	; 88
    2ed6:	b2 e0       	ldi	r27, 0x02	; 2
    2ed8:	b5 83       	std	Z+5, r27	; 0x05
    2eda:	a4 83       	std	Z+4, r26	; 0x04
    2edc:	a8 ee       	ldi	r26, 0xE8	; 232
    2ede:	b3 e0       	ldi	r27, 0x03	; 3
    2ee0:	b7 83       	std	Z+7, r27	; 0x07
    2ee2:	a6 83       	std	Z+6, r26	; 0x06
    2ee4:	12 86       	std	Z+10, r1	; 0x0a
    2ee6:	14 86       	std	Z+12, r1	; 0x0c
    2ee8:	13 86       	std	Z+11, r1	; 0x0b
    2eea:	16 86       	std	Z+14, r1	; 0x0e
    2eec:	15 86       	std	Z+13, r1	; 0x0d
    2eee:	10 8a       	std	Z+16, r1	; 0x10
    2ef0:	17 86       	std	Z+15, r1	; 0x0f
    2ef2:	12 8a       	std	Z+18, r1	; 0x12
    2ef4:	11 8a       	std	Z+17, r1	; 0x11
    2ef6:	14 8a       	std	Z+20, r1	; 0x14
    2ef8:	13 8a       	std	Z+19, r1	; 0x13
    2efa:	16 8a       	std	Z+22, r1	; 0x16
    2efc:	15 8a       	std	Z+21, r1	; 0x15
    2efe:	10 8e       	std	Z+24, r1	; 0x18
    2f00:	17 8a       	std	Z+23, r1	; 0x17
    2f02:	60 83       	st	Z, r22
    2f04:	71 83       	std	Z+1, r23	; 0x01
    2f06:	45 2b       	or	r20, r21
    2f08:	19 f0       	breq	.+6      	; 0x2f10 <_ZN9OneButtonC1Eiib+0x48>
    2f0a:	11 86       	std	Z+9, r1	; 0x09
    2f0c:	10 86       	std	Z+8, r1	; 0x08
    2f0e:	04 c0       	rjmp	.+8      	; 0x2f18 <_ZN9OneButtonC1Eiib+0x50>
    2f10:	41 e0       	ldi	r20, 0x01	; 1
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	51 87       	std	Z+9, r21	; 0x09
    2f16:	40 87       	std	Z+8, r20	; 0x08
    2f18:	22 23       	and	r18, r18
    2f1a:	11 f0       	breq	.+4      	; 0x2f20 <_ZN9OneButtonC1Eiib+0x58>
    2f1c:	62 e0       	ldi	r22, 0x02	; 2
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <_ZN9OneButtonC1Eiib+0x5a>
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0c 94 92 23 	jmp	0x4724	; 0x4724 <pinMode>

00002f26 <_ZN9OneButton16setDebounceTicksEi>:
    2f26:	fc 01       	movw	r30, r24
    2f28:	73 83       	std	Z+3, r23	; 0x03
    2f2a:	62 83       	std	Z+2, r22	; 0x02
    2f2c:	08 95       	ret

00002f2e <_ZN9OneButton13setClickTicksEi>:
    2f2e:	fc 01       	movw	r30, r24
    2f30:	75 83       	std	Z+5, r23	; 0x05
    2f32:	64 83       	std	Z+4, r22	; 0x04
    2f34:	08 95       	ret

00002f36 <_ZN9OneButton13setPressTicksEi>:
    2f36:	fc 01       	movw	r30, r24
    2f38:	77 83       	std	Z+7, r23	; 0x07
    2f3a:	66 83       	std	Z+6, r22	; 0x06
    2f3c:	08 95       	ret

00002f3e <_ZN9OneButton11attachClickEPFvvE>:
    2f3e:	fc 01       	movw	r30, r24
    2f40:	74 87       	std	Z+12, r23	; 0x0c
    2f42:	63 87       	std	Z+11, r22	; 0x0b
    2f44:	08 95       	ret

00002f46 <_ZN9OneButton20attachLongPressStartEPFvvE>:
    2f46:	fc 01       	movw	r30, r24
    2f48:	72 8b       	std	Z+18, r23	; 0x12
    2f4a:	61 8b       	std	Z+17, r22	; 0x11
    2f4c:	08 95       	ret

00002f4e <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
    2f4e:	cf 92       	push	r12
    2f50:	df 92       	push	r13
    2f52:	ef 92       	push	r14
    2f54:	ff 92       	push	r15
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	ec 01       	movw	r28, r24
    2f5e:	16 2f       	mov	r17, r22
  unsigned long now = millis(); // current (relative) time in msecs.
    2f60:	0e 94 b6 22 	call	0x456c	; 0x456c <millis>
    2f64:	6b 01       	movw	r12, r22
    2f66:	7c 01       	movw	r14, r24

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
    2f68:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	31 f4       	brne	.+12     	; 0x2f7c <_ZN9OneButton4tickEb+0x2e>
    if (activeLevel) {
    2f70:	11 23       	and	r17, r17
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <_ZN9OneButton4tickEb+0x28>
    2f74:	bc c0       	rjmp	.+376    	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
      _state = 1; // step to state 1
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	78 c0       	rjmp	.+240    	; 0x306c <_ZN9OneButton4tickEb+0x11e>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	91 05       	cpc	r25, r1
    2f80:	d9 f5       	brne	.+118    	; 0x2ff8 <_ZN9OneButton4tickEb+0xaa>
    2f82:	89 8d       	ldd	r24, Y+25	; 0x19
    2f84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f86:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2f88:	bc 8d       	ldd	r27, Y+28	; 0x1c

    if ((!activeLevel) &&
    2f8a:	b7 01       	movw	r22, r14
    2f8c:	a6 01       	movw	r20, r12
    2f8e:	48 1b       	sub	r20, r24
    2f90:	59 0b       	sbc	r21, r25
    2f92:	6a 0b       	sbc	r22, r26
    2f94:	7b 0b       	sbc	r23, r27
    2f96:	11 11       	cpse	r17, r1
    2f98:	0f c0       	rjmp	.+30     	; 0x2fb8 <_ZN9OneButton4tickEb+0x6a>
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	a0 e0       	ldi	r26, 0x00	; 0
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	48 17       	cp	r20, r24
    2fa4:	59 07       	cpc	r21, r25
    2fa6:	6a 07       	cpc	r22, r26
    2fa8:	7b 07       	cpc	r23, r27
    2faa:	18 f4       	brcc	.+6      	; 0x2fb2 <_ZN9OneButton4tickEb+0x64>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
    2fac:	18 8e       	std	Y+24, r1	; 0x18
    2fae:	1f 8a       	std	Y+23, r1	; 0x17
    2fb0:	9e c0       	rjmp	.+316    	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>

    } else if (!activeLevel) {
      _state = 2; // step to state 2
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	1d c0       	rjmp	.+58     	; 0x2ff2 <_ZN9OneButton4tickEb+0xa4>
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
    2fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fba:	9f 81       	ldd	r25, Y+7	; 0x07
    2fbc:	a0 e0       	ldi	r26, 0x00	; 0
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	84 17       	cp	r24, r20
    2fc2:	95 07       	cpc	r25, r21
    2fc4:	a6 07       	cpc	r26, r22
    2fc6:	b7 07       	cpc	r27, r23
    2fc8:	08 f0       	brcs	.+2      	; 0x2fcc <_ZN9OneButton4tickEb+0x7e>
    2fca:	91 c0       	rjmp	.+290    	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true; // Keep track of long press state
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	8a 87       	std	Y+10, r24	; 0x0a
      if (_pressFunc)
    2fd0:	ef 85       	ldd	r30, Y+15	; 0x0f
    2fd2:	f8 89       	ldd	r31, Y+16	; 0x10
    2fd4:	30 97       	sbiw	r30, 0x00	; 0
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <_ZN9OneButton4tickEb+0x8c>
        _pressFunc();
    2fd8:	09 95       	icall
      if (_longPressStartFunc)
    2fda:	e9 89       	ldd	r30, Y+17	; 0x11
    2fdc:	fa 89       	ldd	r31, Y+18	; 0x12
    2fde:	30 97       	sbiw	r30, 0x00	; 0
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <_ZN9OneButton4tickEb+0x96>
        _longPressStartFunc();
    2fe2:	09 95       	icall
      if (_duringLongPressFunc)
    2fe4:	ed 89       	ldd	r30, Y+21	; 0x15
    2fe6:	fe 89       	ldd	r31, Y+22	; 0x16
    2fe8:	30 97       	sbiw	r30, 0x00	; 0
    2fea:	09 f0       	breq	.+2      	; 0x2fee <_ZN9OneButton4tickEb+0xa0>
        _duringLongPressFunc();
    2fec:	09 95       	icall
      _state = 6; // step to state 6
    2fee:	86 e0       	ldi	r24, 0x06	; 6
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	98 8f       	std	Y+24, r25	; 0x18
    2ff4:	8f 8b       	std	Y+23, r24	; 0x17
    2ff6:	68 c0       	rjmp	.+208    	; 0x30c8 <_ZN9OneButton4tickEb+0x17a>
      _stopTime = now; // remember stopping time
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) {
    2ff8:	82 30       	cpi	r24, 0x02	; 2
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	f1 f5       	brne	.+124    	; 0x307a <_ZN9OneButton4tickEb+0x12c>
    // waiting for menu pin being pressed the second time or timeout.
    if (_doubleClickFunc == NULL ||
    2ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3000:	9e 85       	ldd	r25, Y+14	; 0x0e
    3002:	89 2b       	or	r24, r25
    3004:	99 f0       	breq	.+38     	; 0x302c <_ZN9OneButton4tickEb+0xde>
    3006:	89 8d       	ldd	r24, Y+25	; 0x19
    3008:	9a 8d       	ldd	r25, Y+26	; 0x1a
    300a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    300c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    300e:	b7 01       	movw	r22, r14
    3010:	a6 01       	movw	r20, r12
    3012:	48 1b       	sub	r20, r24
    3014:	59 0b       	sbc	r21, r25
    3016:	6a 0b       	sbc	r22, r26
    3018:	7b 0b       	sbc	r23, r27
    301a:	8c 81       	ldd	r24, Y+4	; 0x04
    301c:	9d 81       	ldd	r25, Y+5	; 0x05
    301e:	a0 e0       	ldi	r26, 0x00	; 0
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	84 17       	cp	r24, r20
    3024:	95 07       	cpc	r25, r21
    3026:	a6 07       	cpc	r26, r22
    3028:	b7 07       	cpc	r27, r23
    302a:	38 f4       	brcc	.+14     	; 0x303a <_ZN9OneButton4tickEb+0xec>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
    302c:	eb 85       	ldd	r30, Y+11	; 0x0b
    302e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3030:	30 97       	sbiw	r30, 0x00	; 0
    3032:	09 f4       	brne	.+2      	; 0x3036 <_ZN9OneButton4tickEb+0xe8>
    3034:	bb cf       	rjmp	.-138    	; 0x2fac <_ZN9OneButton4tickEb+0x5e>
        _clickFunc();
    3036:	09 95       	icall
    3038:	b9 cf       	rjmp	.-142    	; 0x2fac <_ZN9OneButton4tickEb+0x5e>
      _state = 0; // restart.

    } else if ((activeLevel) &&
    303a:	11 23       	and	r17, r17
    303c:	09 f4       	brne	.+2      	; 0x3040 <_ZN9OneButton4tickEb+0xf2>
    303e:	57 c0       	rjmp	.+174    	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
    3040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3042:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3044:	af 8d       	ldd	r26, Y+31	; 0x1f
    3046:	b8 a1       	ldd	r27, Y+32	; 0x20
    3048:	b7 01       	movw	r22, r14
    304a:	a6 01       	movw	r20, r12
    304c:	48 1b       	sub	r20, r24
    304e:	59 0b       	sbc	r21, r25
    3050:	6a 0b       	sbc	r22, r26
    3052:	7b 0b       	sbc	r23, r27
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	9b 81       	ldd	r25, Y+3	; 0x03
    3058:	a0 e0       	ldi	r26, 0x00	; 0
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	84 17       	cp	r24, r20
    305e:	95 07       	cpc	r25, r21
    3060:	a6 07       	cpc	r26, r22
    3062:	b7 07       	cpc	r27, r23
    3064:	08 f0       	brcs	.+2      	; 0x3068 <_ZN9OneButton4tickEb+0x11a>
    3066:	43 c0       	rjmp	.+134    	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
    3068:	83 e0       	ldi	r24, 0x03	; 3
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	98 8f       	std	Y+24, r25	; 0x18
    306e:	8f 8b       	std	Y+23, r24	; 0x17
      _startTime = now; // remember starting time
    3070:	c9 8e       	std	Y+25, r12	; 0x19
    3072:	da 8e       	std	Y+26, r13	; 0x1a
    3074:	eb 8e       	std	Y+27, r14	; 0x1b
    3076:	fc 8e       	std	Y+28, r15	; 0x1c
    3078:	3a c0       	rjmp	.+116    	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    307a:	83 30       	cpi	r24, 0x03	; 3
    307c:	91 05       	cpc	r25, r1
    307e:	c1 f4       	brne	.+48     	; 0x30b0 <_ZN9OneButton4tickEb+0x162>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
    3080:	11 11       	cpse	r17, r1
    3082:	35 c0       	rjmp	.+106    	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
    3084:	89 8d       	ldd	r24, Y+25	; 0x19
    3086:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3088:	ab 8d       	ldd	r26, Y+27	; 0x1b
    308a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    308c:	b7 01       	movw	r22, r14
    308e:	a6 01       	movw	r20, r12
    3090:	48 1b       	sub	r20, r24
    3092:	59 0b       	sbc	r21, r25
    3094:	6a 0b       	sbc	r22, r26
    3096:	7b 0b       	sbc	r23, r27
    3098:	8a 81       	ldd	r24, Y+2	; 0x02
    309a:	9b 81       	ldd	r25, Y+3	; 0x03
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	84 17       	cp	r24, r20
    30a2:	95 07       	cpc	r25, r21
    30a4:	a6 07       	cpc	r26, r22
    30a6:	b7 07       	cpc	r27, r23
    30a8:	10 f5       	brcc	.+68     	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      // this was a 2 click sequence.
      if (_doubleClickFunc)
    30aa:	ed 85       	ldd	r30, Y+13	; 0x0d
    30ac:	fe 85       	ldd	r31, Y+14	; 0x0e
    30ae:	07 c0       	rjmp	.+14     	; 0x30be <_ZN9OneButton4tickEb+0x170>
        _doubleClickFunc();
      _state = 0; // restart.
      _stopTime = now; // remember stopping time
    } // if

  } else if (_state == 6) {
    30b0:	06 97       	sbiw	r24, 0x06	; 6
    30b2:	e9 f4       	brne	.+58     	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
    30b4:	11 11       	cpse	r17, r1
    30b6:	0d c0       	rjmp	.+26     	; 0x30d2 <_ZN9OneButton4tickEb+0x184>
      _isLongPressed = false; // Keep track of long press state
    30b8:	1a 86       	std	Y+10, r1	; 0x0a
      if (_longPressStopFunc)
    30ba:	eb 89       	ldd	r30, Y+19	; 0x13
    30bc:	fc 89       	ldd	r31, Y+20	; 0x14
    30be:	30 97       	sbiw	r30, 0x00	; 0
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <_ZN9OneButton4tickEb+0x176>
        _longPressStopFunc();
    30c2:	09 95       	icall
      _state = 0; // restart.
    30c4:	18 8e       	std	Y+24, r1	; 0x18
    30c6:	1f 8a       	std	Y+23, r1	; 0x17
      _stopTime = now; // remember stopping time
    30c8:	cd 8e       	std	Y+29, r12	; 0x1d
    30ca:	de 8e       	std	Y+30, r13	; 0x1e
    30cc:	ef 8e       	std	Y+31, r14	; 0x1f
    30ce:	f8 a2       	std	Y+32, r15	; 0x20
    30d0:	0e c0       	rjmp	.+28     	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	8a 87       	std	Y+10, r24	; 0x0a
      if (_duringLongPressFunc)
    30d6:	ed 89       	ldd	r30, Y+21	; 0x15
    30d8:	fe 89       	ldd	r31, Y+22	; 0x16
    30da:	30 97       	sbiw	r30, 0x00	; 0
    30dc:	41 f0       	breq	.+16     	; 0x30ee <_ZN9OneButton4tickEb+0x1a0>
        _duringLongPressFunc();
    } // if

  } // if
} // OneButton.tick()
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	1f 91       	pop	r17
    30e4:	ff 90       	pop	r15
    30e6:	ef 90       	pop	r14
    30e8:	df 90       	pop	r13
    30ea:	cf 90       	pop	r12
      _stopTime = now; // remember stopping time
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
    30ec:	09 94       	ijmp
    } // if

  } // if
} // OneButton.tick()
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	1f 91       	pop	r17
    30f4:	ff 90       	pop	r15
    30f6:	ef 90       	pop	r14
    30f8:	df 90       	pop	r13
    30fa:	cf 90       	pop	r12
    30fc:	08 95       	ret

000030fe <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	ec 01       	movw	r28, r24
  if (_pin >= 0) {
    3104:	88 81       	ld	r24, Y
    3106:	99 81       	ldd	r25, Y+1	; 0x01
    3108:	97 fd       	sbrc	r25, 7
    310a:	0e c0       	rjmp	.+28     	; 0x3128 <_ZN9OneButton4tickEv+0x2a>
    tick(digitalRead(_pin) == _buttonPressed);
    310c:	0e 94 fd 23 	call	0x47fa	; 0x47fa <digitalRead>
    3110:	61 e0       	ldi	r22, 0x01	; 1
    3112:	28 85       	ldd	r18, Y+8	; 0x08
    3114:	39 85       	ldd	r19, Y+9	; 0x09
    3116:	28 17       	cp	r18, r24
    3118:	39 07       	cpc	r19, r25
    311a:	09 f0       	breq	.+2      	; 0x311e <_ZN9OneButton4tickEv+0x20>
    311c:	60 e0       	ldi	r22, 0x00	; 0
    311e:	ce 01       	movw	r24, r28
  }
}
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
    3124:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <_ZN9OneButton4tickEb>
  }
}
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	08 95       	ret

0000312e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    312e:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_state>
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <twi_sendStop>
    3138:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <twi_inRepStart>
    313c:	61 e0       	ldi	r22, 0x01	; 1
    313e:	82 e1       	ldi	r24, 0x12	; 18
    3140:	0e 94 ce 23 	call	0x479c	; 0x479c <digitalWrite>
    3144:	61 e0       	ldi	r22, 0x01	; 1
    3146:	83 e1       	ldi	r24, 0x13	; 19
    3148:	0e 94 ce 23 	call	0x479c	; 0x479c <digitalWrite>
    314c:	e9 eb       	ldi	r30, 0xB9	; 185
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	8e 7f       	andi	r24, 0xFE	; 254
    3154:	80 83       	st	Z, r24
    3156:	80 81       	ld	r24, Z
    3158:	8d 7f       	andi	r24, 0xFD	; 253
    315a:	80 83       	st	Z, r24
    315c:	88 e4       	ldi	r24, 0x48	; 72
    315e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3162:	85 e4       	ldi	r24, 0x45	; 69
    3164:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3168:	08 95       	ret

0000316a <twi_readFrom>:
    316a:	41 32       	cpi	r20, 0x21	; 33
    316c:	08 f0       	brcs	.+2      	; 0x3170 <twi_readFrom+0x6>
    316e:	43 c0       	rjmp	.+134    	; 0x31f6 <twi_readFrom+0x8c>
    3170:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <twi_state>
    3174:	91 11       	cpse	r25, r1
    3176:	fc cf       	rjmp	.-8      	; 0x3170 <twi_readFrom+0x6>
    3178:	91 e0       	ldi	r25, 0x01	; 1
    317a:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <twi_state>
    317e:	20 93 dc 02 	sts	0x02DC, r18	; 0x8002dc <twi_sendStop>
    3182:	2f ef       	ldi	r18, 0xFF	; 255
    3184:	20 93 71 02 	sts	0x0271, r18	; 0x800271 <twi_error>
    3188:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <twi_masterBufferIndex>
    318c:	24 0f       	add	r18, r20
    318e:	20 93 b5 02 	sts	0x02B5, r18	; 0x8002b5 <twi_masterBufferLength>
    3192:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <twi_slarw>
    3196:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <twi_slarw>
    319a:	88 0f       	add	r24, r24
    319c:	89 2b       	or	r24, r25
    319e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <twi_slarw>
    31a2:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_inRepStart>
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	61 f4       	brne	.+24     	; 0x31c2 <twi_readFrom+0x58>
    31aa:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <twi_inRepStart>
    31ae:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <twi_slarw>
    31b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    31b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    31ba:	83 fd       	sbrc	r24, 3
    31bc:	f8 cf       	rjmp	.-16     	; 0x31ae <twi_readFrom+0x44>
    31be:	85 ec       	ldi	r24, 0xC5	; 197
    31c0:	01 c0       	rjmp	.+2      	; 0x31c4 <twi_readFrom+0x5a>
    31c2:	85 ee       	ldi	r24, 0xE5	; 229
    31c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    31c8:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_state>
    31cc:	81 30       	cpi	r24, 0x01	; 1
    31ce:	e1 f3       	breq	.-8      	; 0x31c8 <twi_readFrom+0x5e>
    31d0:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <twi_masterBufferIndex>
    31d4:	84 17       	cp	r24, r20
    31d6:	10 f4       	brcc	.+4      	; 0x31dc <twi_readFrom+0x72>
    31d8:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <twi_masterBufferIndex>
    31dc:	a7 eb       	ldi	r26, 0xB7	; 183
    31de:	b2 e0       	ldi	r27, 0x02	; 2
    31e0:	96 2f       	mov	r25, r22
    31e2:	fb 01       	movw	r30, r22
    31e4:	8e 2f       	mov	r24, r30
    31e6:	89 1b       	sub	r24, r25
    31e8:	84 17       	cp	r24, r20
    31ea:	18 f4       	brcc	.+6      	; 0x31f2 <twi_readFrom+0x88>
    31ec:	8d 91       	ld	r24, X+
    31ee:	81 93       	st	Z+, r24
    31f0:	f9 cf       	rjmp	.-14     	; 0x31e4 <twi_readFrom+0x7a>
    31f2:	84 2f       	mov	r24, r20
    31f4:	08 95       	ret
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	08 95       	ret

000031fa <twi_writeTo>:
    31fa:	0f 93       	push	r16
    31fc:	41 32       	cpi	r20, 0x21	; 33
    31fe:	08 f0       	brcs	.+2      	; 0x3202 <twi_writeTo+0x8>
    3200:	4a c0       	rjmp	.+148    	; 0x3296 <twi_writeTo+0x9c>
    3202:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <twi_state>
    3206:	91 11       	cpse	r25, r1
    3208:	fc cf       	rjmp	.-8      	; 0x3202 <twi_writeTo+0x8>
    320a:	32 e0       	ldi	r19, 0x02	; 2
    320c:	30 93 de 02 	sts	0x02DE, r19	; 0x8002de <twi_state>
    3210:	00 93 dc 02 	sts	0x02DC, r16	; 0x8002dc <twi_sendStop>
    3214:	3f ef       	ldi	r19, 0xFF	; 255
    3216:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <twi_error>
    321a:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <twi_masterBufferIndex>
    321e:	40 93 b5 02 	sts	0x02B5, r20	; 0x8002b5 <twi_masterBufferLength>
    3222:	56 2f       	mov	r21, r22
    3224:	a7 eb       	ldi	r26, 0xB7	; 183
    3226:	b2 e0       	ldi	r27, 0x02	; 2
    3228:	fb 01       	movw	r30, r22
    322a:	3e 2f       	mov	r19, r30
    322c:	35 1b       	sub	r19, r21
    322e:	34 17       	cp	r19, r20
    3230:	18 f4       	brcc	.+6      	; 0x3238 <twi_writeTo+0x3e>
    3232:	31 91       	ld	r19, Z+
    3234:	3d 93       	st	X+, r19
    3236:	f9 cf       	rjmp	.-14     	; 0x322a <twi_writeTo+0x30>
    3238:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <twi_slarw>
    323c:	30 91 dd 02 	lds	r19, 0x02DD	; 0x8002dd <twi_slarw>
    3240:	88 0f       	add	r24, r24
    3242:	83 2b       	or	r24, r19
    3244:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <twi_slarw>
    3248:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <twi_inRepStart>
    324c:	81 30       	cpi	r24, 0x01	; 1
    324e:	61 f4       	brne	.+24     	; 0x3268 <twi_writeTo+0x6e>
    3250:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <twi_inRepStart>
    3254:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <twi_slarw>
    3258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    325c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3260:	83 fd       	sbrc	r24, 3
    3262:	f8 cf       	rjmp	.-16     	; 0x3254 <twi_writeTo+0x5a>
    3264:	85 ec       	ldi	r24, 0xC5	; 197
    3266:	01 c0       	rjmp	.+2      	; 0x326a <twi_writeTo+0x70>
    3268:	85 ee       	ldi	r24, 0xE5	; 229
    326a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    326e:	22 23       	and	r18, r18
    3270:	21 f0       	breq	.+8      	; 0x327a <twi_writeTo+0x80>
    3272:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <twi_state>
    3276:	82 30       	cpi	r24, 0x02	; 2
    3278:	d1 f3       	breq	.-12     	; 0x326e <twi_writeTo+0x74>
    327a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <twi_error>
    327e:	8f 3f       	cpi	r24, 0xFF	; 255
    3280:	79 f0       	breq	.+30     	; 0x32a0 <twi_writeTo+0xa6>
    3282:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <twi_error>
    3286:	80 32       	cpi	r24, 0x20	; 32
    3288:	41 f0       	breq	.+16     	; 0x329a <twi_writeTo+0xa0>
    328a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <twi_error>
    328e:	80 33       	cpi	r24, 0x30	; 48
    3290:	31 f0       	breq	.+12     	; 0x329e <twi_writeTo+0xa4>
    3292:	94 e0       	ldi	r25, 0x04	; 4
    3294:	05 c0       	rjmp	.+10     	; 0x32a0 <twi_writeTo+0xa6>
    3296:	91 e0       	ldi	r25, 0x01	; 1
    3298:	03 c0       	rjmp	.+6      	; 0x32a0 <twi_writeTo+0xa6>
    329a:	92 e0       	ldi	r25, 0x02	; 2
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <twi_writeTo+0xa6>
    329e:	93 e0       	ldi	r25, 0x03	; 3
    32a0:	89 2f       	mov	r24, r25
    32a2:	0f 91       	pop	r16
    32a4:	08 95       	ret

000032a6 <twi_transmit>:
    32a6:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <twi_txBufferLength>
    32aa:	26 2f       	mov	r18, r22
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	24 0f       	add	r18, r20
    32b0:	31 1d       	adc	r19, r1
    32b2:	21 32       	cpi	r18, 0x21	; 33
    32b4:	31 05       	cpc	r19, r1
    32b6:	dc f4       	brge	.+54     	; 0x32ee <twi_transmit+0x48>
    32b8:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <twi_state>
    32bc:	24 30       	cpi	r18, 0x04	; 4
    32be:	c9 f4       	brne	.+50     	; 0x32f2 <twi_transmit+0x4c>
    32c0:	fc 01       	movw	r30, r24
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	86 17       	cp	r24, r22
    32c8:	58 f4       	brcc	.+22     	; 0x32e0 <twi_transmit+0x3a>
    32ca:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <twi_txBufferLength>
    32ce:	21 91       	ld	r18, Z+
    32d0:	dc 01       	movw	r26, r24
    32d2:	ab 56       	subi	r26, 0x6B	; 107
    32d4:	bd 4f       	sbci	r27, 0xFD	; 253
    32d6:	a3 0f       	add	r26, r19
    32d8:	b1 1d       	adc	r27, r1
    32da:	2c 93       	st	X, r18
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	f3 cf       	rjmp	.-26     	; 0x32c6 <twi_transmit+0x20>
    32e0:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <twi_txBufferLength>
    32e4:	68 0f       	add	r22, r24
    32e6:	60 93 93 02 	sts	0x0293, r22	; 0x800293 <twi_txBufferLength>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	08 95       	ret
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	08 95       	ret
    32f2:	82 e0       	ldi	r24, 0x02	; 2
    32f4:	08 95       	ret

000032f6 <twi_attachSlaveRxEvent>:
    32f6:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <twi_onSlaveReceive+0x1>
    32fa:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_onSlaveReceive>
    32fe:	08 95       	ret

00003300 <twi_attachSlaveTxEvent>:
    3300:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <twi_onSlaveTransmit+0x1>
    3304:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <twi_onSlaveTransmit>
    3308:	08 95       	ret

0000330a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    330a:	85 ed       	ldi	r24, 0xD5	; 213
    330c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3310:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3314:	84 fd       	sbrc	r24, 4
    3316:	fc cf       	rjmp	.-8      	; 0x3310 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3318:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_state>
    331c:	08 95       	ret

0000331e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    331e:	85 ec       	ldi	r24, 0xC5	; 197
    3320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3324:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_state>
    3328:	08 95       	ret

0000332a <__vector_24>:
}

ISR(TWI_vect)
{
    332a:	1f 92       	push	r1
    332c:	0f 92       	push	r0
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	0f 92       	push	r0
    3332:	11 24       	eor	r1, r1
    3334:	2f 93       	push	r18
    3336:	3f 93       	push	r19
    3338:	4f 93       	push	r20
    333a:	5f 93       	push	r21
    333c:	6f 93       	push	r22
    333e:	7f 93       	push	r23
    3340:	8f 93       	push	r24
    3342:	9f 93       	push	r25
    3344:	af 93       	push	r26
    3346:	bf 93       	push	r27
    3348:	ef 93       	push	r30
    334a:	ff 93       	push	r31
  switch(TW_STATUS){
    334c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3350:	88 7f       	andi	r24, 0xF8	; 248
    3352:	80 36       	cpi	r24, 0x60	; 96
    3354:	09 f4       	brne	.+2      	; 0x3358 <__vector_24+0x2e>
    3356:	9e c0       	rjmp	.+316    	; 0x3494 <__vector_24+0x16a>
    3358:	78 f5       	brcc	.+94     	; 0x33b8 <__vector_24+0x8e>
    335a:	88 32       	cpi	r24, 0x28	; 40
    335c:	09 f4       	brne	.+2      	; 0x3360 <__vector_24+0x36>
    335e:	5d c0       	rjmp	.+186    	; 0x341a <__vector_24+0xf0>
    3360:	90 f4       	brcc	.+36     	; 0x3386 <__vector_24+0x5c>
    3362:	80 31       	cpi	r24, 0x10	; 16
    3364:	09 f4       	brne	.+2      	; 0x3368 <__vector_24+0x3e>
    3366:	56 c0       	rjmp	.+172    	; 0x3414 <__vector_24+0xea>
    3368:	38 f4       	brcc	.+14     	; 0x3378 <__vector_24+0x4e>
    336a:	88 23       	and	r24, r24
    336c:	09 f4       	brne	.+2      	; 0x3370 <__vector_24+0x46>
    336e:	f5 c0       	rjmp	.+490    	; 0x355a <__vector_24+0x230>
    3370:	88 30       	cpi	r24, 0x08	; 8
    3372:	09 f4       	brne	.+2      	; 0x3376 <__vector_24+0x4c>
    3374:	4f c0       	rjmp	.+158    	; 0x3414 <__vector_24+0xea>
    3376:	f5 c0       	rjmp	.+490    	; 0x3562 <__vector_24+0x238>
    3378:	88 31       	cpi	r24, 0x18	; 24
    337a:	09 f4       	brne	.+2      	; 0x337e <__vector_24+0x54>
    337c:	4e c0       	rjmp	.+156    	; 0x341a <__vector_24+0xf0>
    337e:	80 32       	cpi	r24, 0x20	; 32
    3380:	09 f4       	brne	.+2      	; 0x3384 <__vector_24+0x5a>
    3382:	5f c0       	rjmp	.+190    	; 0x3442 <__vector_24+0x118>
    3384:	ee c0       	rjmp	.+476    	; 0x3562 <__vector_24+0x238>
    3386:	80 34       	cpi	r24, 0x40	; 64
    3388:	09 f4       	brne	.+2      	; 0x338c <__vector_24+0x62>
    338a:	6a c0       	rjmp	.+212    	; 0x3460 <__vector_24+0x136>
    338c:	58 f4       	brcc	.+22     	; 0x33a4 <__vector_24+0x7a>
    338e:	80 33       	cpi	r24, 0x30	; 48
    3390:	09 f4       	brne	.+2      	; 0x3394 <__vector_24+0x6a>
    3392:	57 c0       	rjmp	.+174    	; 0x3442 <__vector_24+0x118>
    3394:	88 33       	cpi	r24, 0x38	; 56
    3396:	09 f0       	breq	.+2      	; 0x339a <__vector_24+0x70>
    3398:	e4 c0       	rjmp	.+456    	; 0x3562 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    339a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <twi_error>
      twi_releaseBus();
    339e:	0e 94 8f 19 	call	0x331e	; 0x331e <twi_releaseBus>
      break;
    33a2:	df c0       	rjmp	.+446    	; 0x3562 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    33a4:	80 35       	cpi	r24, 0x50	; 80
    33a6:	09 f4       	brne	.+2      	; 0x33aa <__vector_24+0x80>
    33a8:	4f c0       	rjmp	.+158    	; 0x3448 <__vector_24+0x11e>
    33aa:	88 35       	cpi	r24, 0x58	; 88
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <__vector_24+0x86>
    33ae:	5d c0       	rjmp	.+186    	; 0x346a <__vector_24+0x140>
    33b0:	88 34       	cpi	r24, 0x48	; 72
    33b2:	09 f0       	breq	.+2      	; 0x33b6 <__vector_24+0x8c>
    33b4:	d6 c0       	rjmp	.+428    	; 0x3562 <__vector_24+0x238>
    33b6:	d3 c0       	rjmp	.+422    	; 0x355e <__vector_24+0x234>
    33b8:	88 39       	cpi	r24, 0x98	; 152
    33ba:	09 f4       	brne	.+2      	; 0x33be <__vector_24+0x94>
    33bc:	c4 c0       	rjmp	.+392    	; 0x3546 <__vector_24+0x21c>
    33be:	a8 f4       	brcc	.+42     	; 0x33ea <__vector_24+0xc0>
    33c0:	88 37       	cpi	r24, 0x78	; 120
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <__vector_24+0x9c>
    33c4:	67 c0       	rjmp	.+206    	; 0x3494 <__vector_24+0x16a>
    33c6:	38 f4       	brcc	.+14     	; 0x33d6 <__vector_24+0xac>
    33c8:	88 36       	cpi	r24, 0x68	; 104
    33ca:	09 f4       	brne	.+2      	; 0x33ce <__vector_24+0xa4>
    33cc:	63 c0       	rjmp	.+198    	; 0x3494 <__vector_24+0x16a>
    33ce:	80 37       	cpi	r24, 0x70	; 112
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <__vector_24+0xaa>
    33d2:	60 c0       	rjmp	.+192    	; 0x3494 <__vector_24+0x16a>
    33d4:	c6 c0       	rjmp	.+396    	; 0x3562 <__vector_24+0x238>
    33d6:	88 38       	cpi	r24, 0x88	; 136
    33d8:	09 f4       	brne	.+2      	; 0x33dc <__vector_24+0xb2>
    33da:	b5 c0       	rjmp	.+362    	; 0x3546 <__vector_24+0x21c>
    33dc:	80 39       	cpi	r24, 0x90	; 144
    33de:	09 f4       	brne	.+2      	; 0x33e2 <__vector_24+0xb8>
    33e0:	5f c0       	rjmp	.+190    	; 0x34a0 <__vector_24+0x176>
    33e2:	80 38       	cpi	r24, 0x80	; 128
    33e4:	09 f0       	breq	.+2      	; 0x33e8 <__vector_24+0xbe>
    33e6:	bd c0       	rjmp	.+378    	; 0x3562 <__vector_24+0x238>
    33e8:	5b c0       	rjmp	.+182    	; 0x34a0 <__vector_24+0x176>
    33ea:	80 3b       	cpi	r24, 0xB0	; 176
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <__vector_24+0xc6>
    33ee:	83 c0       	rjmp	.+262    	; 0x34f6 <__vector_24+0x1cc>
    33f0:	38 f4       	brcc	.+14     	; 0x3400 <__vector_24+0xd6>
    33f2:	80 3a       	cpi	r24, 0xA0	; 160
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <__vector_24+0xce>
    33f6:	66 c0       	rjmp	.+204    	; 0x34c4 <__vector_24+0x19a>
    33f8:	88 3a       	cpi	r24, 0xA8	; 168
    33fa:	09 f4       	brne	.+2      	; 0x33fe <__vector_24+0xd4>
    33fc:	7c c0       	rjmp	.+248    	; 0x34f6 <__vector_24+0x1cc>
    33fe:	b1 c0       	rjmp	.+354    	; 0x3562 <__vector_24+0x238>
    3400:	80 3c       	cpi	r24, 0xC0	; 192
    3402:	09 f4       	brne	.+2      	; 0x3406 <__vector_24+0xdc>
    3404:	a4 c0       	rjmp	.+328    	; 0x354e <__vector_24+0x224>
    3406:	88 3c       	cpi	r24, 0xC8	; 200
    3408:	09 f4       	brne	.+2      	; 0x340c <__vector_24+0xe2>
    340a:	a1 c0       	rjmp	.+322    	; 0x354e <__vector_24+0x224>
    340c:	88 3b       	cpi	r24, 0xB8	; 184
    340e:	09 f4       	brne	.+2      	; 0x3412 <__vector_24+0xe8>
    3410:	87 c0       	rjmp	.+270    	; 0x3520 <__vector_24+0x1f6>
    3412:	a7 c0       	rjmp	.+334    	; 0x3562 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3414:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <twi_slarw>
    3418:	10 c0       	rjmp	.+32     	; 0x343a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    341a:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <twi_masterBufferIndex>
    341e:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_masterBufferLength>
    3422:	98 17       	cp	r25, r24
    3424:	70 f5       	brcc	.+92     	; 0x3482 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3426:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <twi_masterBufferIndex>
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	8e 0f       	add	r24, r30
    342e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <twi_masterBufferIndex>
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	e9 54       	subi	r30, 0x49	; 73
    3436:	fd 4f       	sbci	r31, 0xFD	; 253
    3438:	80 81       	ld	r24, Z
    343a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    343e:	85 ec       	ldi	r24, 0xC5	; 197
    3440:	83 c0       	rjmp	.+262    	; 0x3548 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3442:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <twi_error>
    3446:	8b c0       	rjmp	.+278    	; 0x355e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3448:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <twi_masterBufferIndex>
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	8e 0f       	add	r24, r30
    3450:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <twi_masterBufferIndex>
    3454:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	e9 54       	subi	r30, 0x49	; 73
    345c:	fd 4f       	sbci	r31, 0xFD	; 253
    345e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3460:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <twi_masterBufferIndex>
    3464:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <twi_masterBufferLength>
    3468:	6b c0       	rjmp	.+214    	; 0x3540 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    346a:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <twi_masterBufferIndex>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	8e 0f       	add	r24, r30
    3472:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <twi_masterBufferIndex>
    3476:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	e9 54       	subi	r30, 0x49	; 73
    347e:	fd 4f       	sbci	r31, 0xFD	; 253
    3480:	80 83       	st	Z, r24
	if (twi_sendStop)
    3482:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <twi_sendStop>
    3486:	81 11       	cpse	r24, r1
    3488:	6a c0       	rjmp	.+212    	; 0x355e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3490:	84 ea       	ldi	r24, 0xA4	; 164
    3492:	5e c0       	rjmp	.+188    	; 0x3550 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3494:	83 e0       	ldi	r24, 0x03	; 3
    3496:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    349a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <twi_rxBufferIndex>
    349e:	cf cf       	rjmp	.-98     	; 0x343e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    34a0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <twi_rxBufferIndex>
    34a4:	80 32       	cpi	r24, 0x20	; 32
    34a6:	08 f0       	brcs	.+2      	; 0x34aa <__vector_24+0x180>
    34a8:	4e c0       	rjmp	.+156    	; 0x3546 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    34aa:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <twi_rxBufferIndex>
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	8e 0f       	add	r24, r30
    34b2:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <twi_rxBufferIndex>
    34b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	ed 58       	subi	r30, 0x8D	; 141
    34be:	fd 4f       	sbci	r31, 0xFD	; 253
    34c0:	80 83       	st	Z, r24
    34c2:	bd cf       	rjmp	.-134    	; 0x343e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    34c4:	0e 94 8f 19 	call	0x331e	; 0x331e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    34c8:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <twi_rxBufferIndex>
    34cc:	80 32       	cpi	r24, 0x20	; 32
    34ce:	30 f4       	brcc	.+12     	; 0x34dc <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    34d0:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <twi_rxBufferIndex>
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	ed 58       	subi	r30, 0x8D	; 141
    34d8:	fd 4f       	sbci	r31, 0xFD	; 253
    34da:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    34dc:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <twi_rxBufferIndex>
    34e0:	70 e0       	ldi	r23, 0x00	; 0
    34e2:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_onSlaveReceive>
    34e6:	f0 91 d8 02 	lds	r31, 0x02D8	; 0x8002d8 <twi_onSlaveReceive+0x1>
    34ea:	83 e7       	ldi	r24, 0x73	; 115
    34ec:	92 e0       	ldi	r25, 0x02	; 2
    34ee:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    34f0:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <twi_rxBufferIndex>
      break;
    34f4:	36 c0       	rjmp	.+108    	; 0x3562 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    34f6:	84 e0       	ldi	r24, 0x04	; 4
    34f8:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    34fc:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3500:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3504:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_onSlaveTransmit>
    3508:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <twi_onSlaveTransmit+0x1>
    350c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    350e:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <twi_txBufferLength>
    3512:	81 11       	cpse	r24, r1
    3514:	05 c0       	rjmp	.+10     	; 0x3520 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    351c:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3520:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <twi_txBufferIndex>
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	8e 0f       	add	r24, r30
    3528:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <twi_txBufferIndex>
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	eb 56       	subi	r30, 0x6B	; 107
    3530:	fd 4f       	sbci	r31, 0xFD	; 253
    3532:	80 81       	ld	r24, Z
    3534:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3538:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <twi_txBufferIndex>
    353c:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <twi_txBufferLength>
    3540:	98 17       	cp	r25, r24
    3542:	08 f4       	brcc	.+2      	; 0x3546 <__vector_24+0x21c>
    3544:	7c cf       	rjmp	.-264    	; 0x343e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3546:	85 e8       	ldi	r24, 0x85	; 133
    3548:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    354c:	0a c0       	rjmp	.+20     	; 0x3562 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    354e:	85 ec       	ldi	r24, 0xC5	; 197
    3550:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3554:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <twi_state>
      break;
    3558:	04 c0       	rjmp	.+8      	; 0x3562 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    355a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <twi_error>
      twi_stop();
    355e:	0e 94 85 19 	call	0x330a	; 0x330a <twi_stop>
      break;
  }
}
    3562:	ff 91       	pop	r31
    3564:	ef 91       	pop	r30
    3566:	bf 91       	pop	r27
    3568:	af 91       	pop	r26
    356a:	9f 91       	pop	r25
    356c:	8f 91       	pop	r24
    356e:	7f 91       	pop	r23
    3570:	6f 91       	pop	r22
    3572:	5f 91       	pop	r21
    3574:	4f 91       	pop	r20
    3576:	3f 91       	pop	r19
    3578:	2f 91       	pop	r18
    357a:	0f 90       	pop	r0
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	0f 90       	pop	r0
    3580:	1f 90       	pop	r1
    3582:	18 95       	reti

00003584 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3584:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZN7TwoWire14rxBufferLengthE>
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZN7TwoWire13rxBufferIndexE>
    358e:	82 1b       	sub	r24, r18
    3590:	91 09       	sbc	r25, r1
    3592:	08 95       	ret

00003594 <_ZN7TwoWire4readEv>:
    3594:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZN7TwoWire13rxBufferIndexE>
    3598:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZN7TwoWire14rxBufferLengthE>
    359c:	98 17       	cp	r25, r24
    359e:	50 f4       	brcc	.+20     	; 0x35b4 <_ZN7TwoWire4readEv+0x20>
    35a0:	e9 2f       	mov	r30, r25
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	eb 5e       	subi	r30, 0xEB	; 235
    35a6:	fc 4f       	sbci	r31, 0xFC	; 252
    35a8:	20 81       	ld	r18, Z
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	9f 5f       	subi	r25, 0xFF	; 255
    35ae:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <_ZN7TwoWire13rxBufferIndexE>
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <_ZN7TwoWire4readEv+0x24>
    35b4:	2f ef       	ldi	r18, 0xFF	; 255
    35b6:	3f ef       	ldi	r19, 0xFF	; 255
    35b8:	c9 01       	movw	r24, r18
    35ba:	08 95       	ret

000035bc <_ZN7TwoWire4peekEv>:
    35bc:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <_ZN7TwoWire13rxBufferIndexE>
    35c0:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZN7TwoWire14rxBufferLengthE>
    35c4:	e8 17       	cp	r30, r24
    35c6:	30 f4       	brcc	.+12     	; 0x35d4 <_ZN7TwoWire4peekEv+0x18>
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	eb 5e       	subi	r30, 0xEB	; 235
    35cc:	fc 4f       	sbci	r31, 0xFC	; 252
    35ce:	80 81       	ld	r24, Z
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	08 95       	ret
    35d4:	8f ef       	ldi	r24, 0xFF	; 255
    35d6:	9f ef       	ldi	r25, 0xFF	; 255
    35d8:	08 95       	ret

000035da <_ZN7TwoWire5flushEv>:
    35da:	08 95       	ret

000035dc <_ZN7TwoWire16onReceiveServiceEPhi>:
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	ec 01       	movw	r28, r24
    35e2:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZN7TwoWire14user_onReceiveE>
    35e6:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <_ZN7TwoWire14user_onReceiveE+0x1>
    35ea:	30 97       	sbiw	r30, 0x00	; 0
    35ec:	f1 f0       	breq	.+60     	; 0x362a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    35ee:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZN7TwoWire13rxBufferIndexE>
    35f2:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZN7TwoWire14rxBufferLengthE>
    35f6:	98 17       	cp	r25, r24
    35f8:	c0 f0       	brcs	.+48     	; 0x362a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	29 2f       	mov	r18, r25
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	26 17       	cp	r18, r22
    3602:	37 07       	cpc	r19, r23
    3604:	54 f4       	brge	.+20     	; 0x361a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3606:	de 01       	movw	r26, r28
    3608:	a2 0f       	add	r26, r18
    360a:	b3 1f       	adc	r27, r19
    360c:	4c 91       	ld	r20, X
    360e:	d9 01       	movw	r26, r18
    3610:	ab 5e       	subi	r26, 0xEB	; 235
    3612:	bc 4f       	sbci	r27, 0xFC	; 252
    3614:	4c 93       	st	X, r20
    3616:	9f 5f       	subi	r25, 0xFF	; 255
    3618:	f1 cf       	rjmp	.-30     	; 0x35fc <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    361a:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire13rxBufferIndexE>
    361e:	60 93 13 03 	sts	0x0313, r22	; 0x800313 <_ZN7TwoWire14rxBufferLengthE>
    3622:	cb 01       	movw	r24, r22
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	09 94       	ijmp
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	08 95       	ret

00003630 <_ZN7TwoWire16onRequestServiceEv>:
    3630:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <_ZN7TwoWire14user_onRequestE>
    3634:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <_ZN7TwoWire14user_onRequestE+0x1>
    3638:	30 97       	sbiw	r30, 0x00	; 0
    363a:	29 f0       	breq	.+10     	; 0x3646 <_ZN7TwoWire16onRequestServiceEv+0x16>
    363c:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <_ZN7TwoWire13txBufferIndexE>
    3640:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <_ZN7TwoWire14txBufferLengthE>
    3644:	09 94       	ijmp
    3646:	08 95       	ret

00003648 <_ZN7TwoWire5writeEPKhj>:
    3648:	cf 92       	push	r12
    364a:	df 92       	push	r13
    364c:	ef 92       	push	r14
    364e:	ff 92       	push	r15
    3650:	0f 93       	push	r16
    3652:	1f 93       	push	r17
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	7c 01       	movw	r14, r24
    365a:	cb 01       	movw	r24, r22
    365c:	8a 01       	movw	r16, r20
    365e:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <_ZN7TwoWire12transmittingE>
    3662:	22 23       	and	r18, r18
    3664:	89 f0       	breq	.+34     	; 0x3688 <_ZN7TwoWire5writeEPKhj+0x40>
    3666:	eb 01       	movw	r28, r22
    3668:	6b 01       	movw	r12, r22
    366a:	c4 0e       	add	r12, r20
    366c:	d5 1e       	adc	r13, r21
    366e:	cc 15       	cp	r28, r12
    3670:	dd 05       	cpc	r29, r13
    3672:	69 f0       	breq	.+26     	; 0x368e <_ZN7TwoWire5writeEPKhj+0x46>
    3674:	69 91       	ld	r22, Y+
    3676:	d7 01       	movw	r26, r14
    3678:	ed 91       	ld	r30, X+
    367a:	fc 91       	ld	r31, X
    367c:	01 90       	ld	r0, Z+
    367e:	f0 81       	ld	r31, Z
    3680:	e0 2d       	mov	r30, r0
    3682:	c7 01       	movw	r24, r14
    3684:	09 95       	icall
    3686:	f3 cf       	rjmp	.-26     	; 0x366e <_ZN7TwoWire5writeEPKhj+0x26>
    3688:	64 2f       	mov	r22, r20
    368a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <twi_transmit>
    368e:	c8 01       	movw	r24, r16
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	ff 90       	pop	r15
    369a:	ef 90       	pop	r14
    369c:	df 90       	pop	r13
    369e:	cf 90       	pop	r12
    36a0:	08 95       	ret

000036a2 <_ZN7TwoWire5writeEh>:
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	1f 92       	push	r1
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
    36ac:	69 83       	std	Y+1, r22	; 0x01
    36ae:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <_ZN7TwoWire12transmittingE>
    36b2:	22 23       	and	r18, r18
    36b4:	d1 f0       	breq	.+52     	; 0x36ea <_ZN7TwoWire5writeEh+0x48>
    36b6:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <_ZN7TwoWire14txBufferLengthE>
    36ba:	20 32       	cpi	r18, 0x20	; 32
    36bc:	40 f0       	brcs	.+16     	; 0x36ce <_ZN7TwoWire5writeEh+0x2c>
    36be:	21 e0       	ldi	r18, 0x01	; 1
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	fc 01       	movw	r30, r24
    36c4:	33 83       	std	Z+3, r19	; 0x03
    36c6:	22 83       	std	Z+2, r18	; 0x02
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	15 c0       	rjmp	.+42     	; 0x36f8 <_ZN7TwoWire5writeEh+0x56>
    36ce:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_ZN7TwoWire13txBufferIndexE>
    36d2:	e8 2f       	mov	r30, r24
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	ee 50       	subi	r30, 0x0E	; 14
    36d8:	fd 4f       	sbci	r31, 0xFD	; 253
    36da:	99 81       	ldd	r25, Y+1	; 0x01
    36dc:	90 83       	st	Z, r25
    36de:	8f 5f       	subi	r24, 0xFF	; 255
    36e0:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <_ZN7TwoWire13txBufferIndexE>
    36e4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <_ZN7TwoWire14txBufferLengthE>
    36e8:	05 c0       	rjmp	.+10     	; 0x36f4 <_ZN7TwoWire5writeEh+0x52>
    36ea:	61 e0       	ldi	r22, 0x01	; 1
    36ec:	ce 01       	movw	r24, r28
    36ee:	01 96       	adiw	r24, 0x01	; 1
    36f0:	0e 94 53 19 	call	0x32a6	; 0x32a6 <twi_transmit>
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	0f 90       	pop	r0
    36fa:	df 91       	pop	r29
    36fc:	cf 91       	pop	r28
    36fe:	08 95       	ret

00003700 <_ZN7TwoWireC1Ev>:
    3700:	fc 01       	movw	r30, r24
    3702:	13 82       	std	Z+3, r1	; 0x03
    3704:	12 82       	std	Z+2, r1	; 0x02
    3706:	88 ee       	ldi	r24, 0xE8	; 232
    3708:	93 e0       	ldi	r25, 0x03	; 3
    370a:	a0 e0       	ldi	r26, 0x00	; 0
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	84 83       	std	Z+4, r24	; 0x04
    3710:	95 83       	std	Z+5, r25	; 0x05
    3712:	a6 83       	std	Z+6, r26	; 0x06
    3714:	b7 83       	std	Z+7, r27	; 0x07
    3716:	81 eb       	ldi	r24, 0xB1	; 177
    3718:	91 e0       	ldi	r25, 0x01	; 1
    371a:	91 83       	std	Z+1, r25	; 0x01
    371c:	80 83       	st	Z, r24
    371e:	08 95       	ret

00003720 <_ZN7TwoWire5beginEv>:
    3720:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire13rxBufferIndexE>
    3724:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZN7TwoWire14rxBufferLengthE>
    3728:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <_ZN7TwoWire13txBufferIndexE>
    372c:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <_ZN7TwoWire14txBufferLengthE>
    3730:	0e 94 97 18 	call	0x312e	; 0x312e <twi_init>
    3734:	88 e1       	ldi	r24, 0x18	; 24
    3736:	9b e1       	ldi	r25, 0x1B	; 27
    3738:	0e 94 80 19 	call	0x3300	; 0x3300 <twi_attachSlaveTxEvent>
    373c:	8e ee       	ldi	r24, 0xEE	; 238
    373e:	9a e1       	ldi	r25, 0x1A	; 26
    3740:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <twi_attachSlaveRxEvent>

00003744 <_ZN7TwoWire17beginTransmissionEh>:
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <_ZN7TwoWire12transmittingE>
    374a:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <_ZN7TwoWire9txAddressE>
    374e:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <_ZN7TwoWire13txBufferIndexE>
    3752:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <_ZN7TwoWire14txBufferLengthE>
    3756:	08 95       	ret

00003758 <_ZN7TwoWire15endTransmissionEh>:
    3758:	0f 93       	push	r16
    375a:	06 2f       	mov	r16, r22
    375c:	21 e0       	ldi	r18, 0x01	; 1
    375e:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <_ZN7TwoWire14txBufferLengthE>
    3762:	62 ef       	ldi	r22, 0xF2	; 242
    3764:	72 e0       	ldi	r23, 0x02	; 2
    3766:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <_ZN7TwoWire9txAddressE>
    376a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <twi_writeTo>
    376e:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <_ZN7TwoWire13txBufferIndexE>
    3772:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <_ZN7TwoWire14txBufferLengthE>
    3776:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <_ZN7TwoWire12transmittingE>
    377a:	0f 91       	pop	r16
    377c:	08 95       	ret

0000377e <_ZN7TwoWire11requestFromEhhmhh>:
    377e:	4f 92       	push	r4
    3780:	5f 92       	push	r5
    3782:	6f 92       	push	r6
    3784:	7f 92       	push	r7
    3786:	af 92       	push	r10
    3788:	bf 92       	push	r11
    378a:	cf 92       	push	r12
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	5c 01       	movw	r10, r24
    379a:	f6 2e       	mov	r15, r22
    379c:	d4 2f       	mov	r29, r20
    379e:	28 01       	movw	r4, r16
    37a0:	39 01       	movw	r6, r18
    37a2:	ee 20       	and	r14, r14
    37a4:	21 f1       	breq	.+72     	; 0x37ee <_ZN7TwoWire11requestFromEhhmhh+0x70>
    37a6:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN7TwoWire17beginTransmissionEh>
    37aa:	ce 2d       	mov	r28, r14
    37ac:	c4 30       	cpi	r28, 0x04	; 4
    37ae:	08 f0       	brcs	.+2      	; 0x37b2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    37b0:	c3 e0       	ldi	r28, 0x03	; 3
    37b2:	c1 50       	subi	r28, 0x01	; 1
    37b4:	c0 f0       	brcs	.+48     	; 0x37e6 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    37b6:	28 e0       	ldi	r18, 0x08	; 8
    37b8:	c2 9f       	mul	r28, r18
    37ba:	c0 01       	movw	r24, r0
    37bc:	11 24       	eor	r1, r1
    37be:	a3 01       	movw	r20, r6
    37c0:	92 01       	movw	r18, r4
    37c2:	04 c0       	rjmp	.+8      	; 0x37cc <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    37c4:	56 95       	lsr	r21
    37c6:	47 95       	ror	r20
    37c8:	37 95       	ror	r19
    37ca:	27 95       	ror	r18
    37cc:	8a 95       	dec	r24
    37ce:	d2 f7       	brpl	.-12     	; 0x37c4 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    37d0:	ca 01       	movw	r24, r20
    37d2:	b9 01       	movw	r22, r18
    37d4:	d5 01       	movw	r26, r10
    37d6:	ed 91       	ld	r30, X+
    37d8:	fc 91       	ld	r31, X
    37da:	01 90       	ld	r0, Z+
    37dc:	f0 81       	ld	r31, Z
    37de:	e0 2d       	mov	r30, r0
    37e0:	c5 01       	movw	r24, r10
    37e2:	09 95       	icall
    37e4:	e6 cf       	rjmp	.-52     	; 0x37b2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	c5 01       	movw	r24, r10
    37ea:	0e 94 ac 1b 	call	0x3758	; 0x3758 <_ZN7TwoWire15endTransmissionEh>
    37ee:	4d 2f       	mov	r20, r29
    37f0:	d1 32       	cpi	r29, 0x21	; 33
    37f2:	08 f0       	brcs	.+2      	; 0x37f6 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    37f4:	40 e2       	ldi	r20, 0x20	; 32
    37f6:	2c 2d       	mov	r18, r12
    37f8:	65 e1       	ldi	r22, 0x15	; 21
    37fa:	73 e0       	ldi	r23, 0x03	; 3
    37fc:	8f 2d       	mov	r24, r15
    37fe:	0e 94 b5 18 	call	0x316a	; 0x316a <twi_readFrom>
    3802:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire13rxBufferIndexE>
    3806:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_ZN7TwoWire14rxBufferLengthE>
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	1f 91       	pop	r17
    3810:	0f 91       	pop	r16
    3812:	ff 90       	pop	r15
    3814:	ef 90       	pop	r14
    3816:	cf 90       	pop	r12
    3818:	bf 90       	pop	r11
    381a:	af 90       	pop	r10
    381c:	7f 90       	pop	r7
    381e:	6f 90       	pop	r6
    3820:	5f 90       	pop	r5
    3822:	4f 90       	pop	r4
    3824:	08 95       	ret

00003826 <_ZN7TwoWire11requestFromEhhh>:
    3826:	cf 92       	push	r12
    3828:	ef 92       	push	r14
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	c2 2e       	mov	r12, r18
    3830:	e1 2c       	mov	r14, r1
    3832:	00 e0       	ldi	r16, 0x00	; 0
    3834:	10 e0       	ldi	r17, 0x00	; 0
    3836:	98 01       	movw	r18, r16
    3838:	0e 94 bf 1b 	call	0x377e	; 0x377e <_ZN7TwoWire11requestFromEhhmhh>
    383c:	1f 91       	pop	r17
    383e:	0f 91       	pop	r16
    3840:	ef 90       	pop	r14
    3842:	cf 90       	pop	r12
    3844:	08 95       	ret

00003846 <_ZN7TwoWire11requestFromEhh>:
    3846:	21 e0       	ldi	r18, 0x01	; 1
    3848:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <_ZN7TwoWire11requestFromEhhh>

0000384c <_ZN7TwoWire15endTransmissionEv>:
    384c:	61 e0       	ldi	r22, 0x01	; 1
    384e:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <_ZN7TwoWire15endTransmissionEh>

00003852 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3852:	8f ed       	ldi	r24, 0xDF	; 223
    3854:	92 e0       	ldi	r25, 0x02	; 2
    3856:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <_ZN7TwoWireC1Ev>

0000385a <__subsf3>:
    385a:	50 58       	subi	r21, 0x80	; 128

0000385c <__addsf3>:
    385c:	bb 27       	eor	r27, r27
    385e:	aa 27       	eor	r26, r26
    3860:	0e 94 45 1c 	call	0x388a	; 0x388a <__addsf3x>
    3864:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__fp_round>
    3868:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__fp_pscA>
    386c:	38 f0       	brcs	.+14     	; 0x387c <__addsf3+0x20>
    386e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__fp_pscB>
    3872:	20 f0       	brcs	.+8      	; 0x387c <__addsf3+0x20>
    3874:	39 f4       	brne	.+14     	; 0x3884 <__addsf3+0x28>
    3876:	9f 3f       	cpi	r25, 0xFF	; 255
    3878:	19 f4       	brne	.+6      	; 0x3880 <__addsf3+0x24>
    387a:	26 f4       	brtc	.+8      	; 0x3884 <__addsf3+0x28>
    387c:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_nan>
    3880:	0e f4       	brtc	.+2      	; 0x3884 <__addsf3+0x28>
    3882:	e0 95       	com	r30
    3884:	e7 fb       	bst	r30, 7
    3886:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__fp_inf>

0000388a <__addsf3x>:
    388a:	e9 2f       	mov	r30, r25
    388c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__fp_split3>
    3890:	58 f3       	brcs	.-42     	; 0x3868 <__addsf3+0xc>
    3892:	ba 17       	cp	r27, r26
    3894:	62 07       	cpc	r22, r18
    3896:	73 07       	cpc	r23, r19
    3898:	84 07       	cpc	r24, r20
    389a:	95 07       	cpc	r25, r21
    389c:	20 f0       	brcs	.+8      	; 0x38a6 <__addsf3x+0x1c>
    389e:	79 f4       	brne	.+30     	; 0x38be <__addsf3x+0x34>
    38a0:	a6 f5       	brtc	.+104    	; 0x390a <__addsf3x+0x80>
    38a2:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__fp_zero>
    38a6:	0e f4       	brtc	.+2      	; 0x38aa <__addsf3x+0x20>
    38a8:	e0 95       	com	r30
    38aa:	0b 2e       	mov	r0, r27
    38ac:	ba 2f       	mov	r27, r26
    38ae:	a0 2d       	mov	r26, r0
    38b0:	0b 01       	movw	r0, r22
    38b2:	b9 01       	movw	r22, r18
    38b4:	90 01       	movw	r18, r0
    38b6:	0c 01       	movw	r0, r24
    38b8:	ca 01       	movw	r24, r20
    38ba:	a0 01       	movw	r20, r0
    38bc:	11 24       	eor	r1, r1
    38be:	ff 27       	eor	r31, r31
    38c0:	59 1b       	sub	r21, r25
    38c2:	99 f0       	breq	.+38     	; 0x38ea <__addsf3x+0x60>
    38c4:	59 3f       	cpi	r21, 0xF9	; 249
    38c6:	50 f4       	brcc	.+20     	; 0x38dc <__addsf3x+0x52>
    38c8:	50 3e       	cpi	r21, 0xE0	; 224
    38ca:	68 f1       	brcs	.+90     	; 0x3926 <__addsf3x+0x9c>
    38cc:	1a 16       	cp	r1, r26
    38ce:	f0 40       	sbci	r31, 0x00	; 0
    38d0:	a2 2f       	mov	r26, r18
    38d2:	23 2f       	mov	r18, r19
    38d4:	34 2f       	mov	r19, r20
    38d6:	44 27       	eor	r20, r20
    38d8:	58 5f       	subi	r21, 0xF8	; 248
    38da:	f3 cf       	rjmp	.-26     	; 0x38c2 <__addsf3x+0x38>
    38dc:	46 95       	lsr	r20
    38de:	37 95       	ror	r19
    38e0:	27 95       	ror	r18
    38e2:	a7 95       	ror	r26
    38e4:	f0 40       	sbci	r31, 0x00	; 0
    38e6:	53 95       	inc	r21
    38e8:	c9 f7       	brne	.-14     	; 0x38dc <__addsf3x+0x52>
    38ea:	7e f4       	brtc	.+30     	; 0x390a <__addsf3x+0x80>
    38ec:	1f 16       	cp	r1, r31
    38ee:	ba 0b       	sbc	r27, r26
    38f0:	62 0b       	sbc	r22, r18
    38f2:	73 0b       	sbc	r23, r19
    38f4:	84 0b       	sbc	r24, r20
    38f6:	ba f0       	brmi	.+46     	; 0x3926 <__addsf3x+0x9c>
    38f8:	91 50       	subi	r25, 0x01	; 1
    38fa:	a1 f0       	breq	.+40     	; 0x3924 <__addsf3x+0x9a>
    38fc:	ff 0f       	add	r31, r31
    38fe:	bb 1f       	adc	r27, r27
    3900:	66 1f       	adc	r22, r22
    3902:	77 1f       	adc	r23, r23
    3904:	88 1f       	adc	r24, r24
    3906:	c2 f7       	brpl	.-16     	; 0x38f8 <__addsf3x+0x6e>
    3908:	0e c0       	rjmp	.+28     	; 0x3926 <__addsf3x+0x9c>
    390a:	ba 0f       	add	r27, r26
    390c:	62 1f       	adc	r22, r18
    390e:	73 1f       	adc	r23, r19
    3910:	84 1f       	adc	r24, r20
    3912:	48 f4       	brcc	.+18     	; 0x3926 <__addsf3x+0x9c>
    3914:	87 95       	ror	r24
    3916:	77 95       	ror	r23
    3918:	67 95       	ror	r22
    391a:	b7 95       	ror	r27
    391c:	f7 95       	ror	r31
    391e:	9e 3f       	cpi	r25, 0xFE	; 254
    3920:	08 f0       	brcs	.+2      	; 0x3924 <__addsf3x+0x9a>
    3922:	b0 cf       	rjmp	.-160    	; 0x3884 <__addsf3+0x28>
    3924:	93 95       	inc	r25
    3926:	88 0f       	add	r24, r24
    3928:	08 f0       	brcs	.+2      	; 0x392c <__addsf3x+0xa2>
    392a:	99 27       	eor	r25, r25
    392c:	ee 0f       	add	r30, r30
    392e:	97 95       	ror	r25
    3930:	87 95       	ror	r24
    3932:	08 95       	ret

00003934 <__cmpsf2>:
    3934:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__fp_cmp>
    3938:	08 f4       	brcc	.+2      	; 0x393c <__cmpsf2+0x8>
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	08 95       	ret

0000393e <__divsf3>:
    393e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__divsf3x>
    3942:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__fp_round>
    3946:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__fp_pscB>
    394a:	58 f0       	brcs	.+22     	; 0x3962 <__divsf3+0x24>
    394c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__fp_pscA>
    3950:	40 f0       	brcs	.+16     	; 0x3962 <__divsf3+0x24>
    3952:	29 f4       	brne	.+10     	; 0x395e <__divsf3+0x20>
    3954:	5f 3f       	cpi	r21, 0xFF	; 255
    3956:	29 f0       	breq	.+10     	; 0x3962 <__divsf3+0x24>
    3958:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__fp_inf>
    395c:	51 11       	cpse	r21, r1
    395e:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__fp_szero>
    3962:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_nan>

00003966 <__divsf3x>:
    3966:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__fp_split3>
    396a:	68 f3       	brcs	.-38     	; 0x3946 <__divsf3+0x8>

0000396c <__divsf3_pse>:
    396c:	99 23       	and	r25, r25
    396e:	b1 f3       	breq	.-20     	; 0x395c <__divsf3+0x1e>
    3970:	55 23       	and	r21, r21
    3972:	91 f3       	breq	.-28     	; 0x3958 <__divsf3+0x1a>
    3974:	95 1b       	sub	r25, r21
    3976:	55 0b       	sbc	r21, r21
    3978:	bb 27       	eor	r27, r27
    397a:	aa 27       	eor	r26, r26
    397c:	62 17       	cp	r22, r18
    397e:	73 07       	cpc	r23, r19
    3980:	84 07       	cpc	r24, r20
    3982:	38 f0       	brcs	.+14     	; 0x3992 <__divsf3_pse+0x26>
    3984:	9f 5f       	subi	r25, 0xFF	; 255
    3986:	5f 4f       	sbci	r21, 0xFF	; 255
    3988:	22 0f       	add	r18, r18
    398a:	33 1f       	adc	r19, r19
    398c:	44 1f       	adc	r20, r20
    398e:	aa 1f       	adc	r26, r26
    3990:	a9 f3       	breq	.-22     	; 0x397c <__divsf3_pse+0x10>
    3992:	35 d0       	rcall	.+106    	; 0x39fe <__divsf3_pse+0x92>
    3994:	0e 2e       	mov	r0, r30
    3996:	3a f0       	brmi	.+14     	; 0x39a6 <__divsf3_pse+0x3a>
    3998:	e0 e8       	ldi	r30, 0x80	; 128
    399a:	32 d0       	rcall	.+100    	; 0x3a00 <__divsf3_pse+0x94>
    399c:	91 50       	subi	r25, 0x01	; 1
    399e:	50 40       	sbci	r21, 0x00	; 0
    39a0:	e6 95       	lsr	r30
    39a2:	00 1c       	adc	r0, r0
    39a4:	ca f7       	brpl	.-14     	; 0x3998 <__divsf3_pse+0x2c>
    39a6:	2b d0       	rcall	.+86     	; 0x39fe <__divsf3_pse+0x92>
    39a8:	fe 2f       	mov	r31, r30
    39aa:	29 d0       	rcall	.+82     	; 0x39fe <__divsf3_pse+0x92>
    39ac:	66 0f       	add	r22, r22
    39ae:	77 1f       	adc	r23, r23
    39b0:	88 1f       	adc	r24, r24
    39b2:	bb 1f       	adc	r27, r27
    39b4:	26 17       	cp	r18, r22
    39b6:	37 07       	cpc	r19, r23
    39b8:	48 07       	cpc	r20, r24
    39ba:	ab 07       	cpc	r26, r27
    39bc:	b0 e8       	ldi	r27, 0x80	; 128
    39be:	09 f0       	breq	.+2      	; 0x39c2 <__divsf3_pse+0x56>
    39c0:	bb 0b       	sbc	r27, r27
    39c2:	80 2d       	mov	r24, r0
    39c4:	bf 01       	movw	r22, r30
    39c6:	ff 27       	eor	r31, r31
    39c8:	93 58       	subi	r25, 0x83	; 131
    39ca:	5f 4f       	sbci	r21, 0xFF	; 255
    39cc:	3a f0       	brmi	.+14     	; 0x39dc <__divsf3_pse+0x70>
    39ce:	9e 3f       	cpi	r25, 0xFE	; 254
    39d0:	51 05       	cpc	r21, r1
    39d2:	78 f0       	brcs	.+30     	; 0x39f2 <__divsf3_pse+0x86>
    39d4:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__fp_inf>
    39d8:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__fp_szero>
    39dc:	5f 3f       	cpi	r21, 0xFF	; 255
    39de:	e4 f3       	brlt	.-8      	; 0x39d8 <__divsf3_pse+0x6c>
    39e0:	98 3e       	cpi	r25, 0xE8	; 232
    39e2:	d4 f3       	brlt	.-12     	; 0x39d8 <__divsf3_pse+0x6c>
    39e4:	86 95       	lsr	r24
    39e6:	77 95       	ror	r23
    39e8:	67 95       	ror	r22
    39ea:	b7 95       	ror	r27
    39ec:	f7 95       	ror	r31
    39ee:	9f 5f       	subi	r25, 0xFF	; 255
    39f0:	c9 f7       	brne	.-14     	; 0x39e4 <__divsf3_pse+0x78>
    39f2:	88 0f       	add	r24, r24
    39f4:	91 1d       	adc	r25, r1
    39f6:	96 95       	lsr	r25
    39f8:	87 95       	ror	r24
    39fa:	97 f9       	bld	r25, 7
    39fc:	08 95       	ret
    39fe:	e1 e0       	ldi	r30, 0x01	; 1
    3a00:	66 0f       	add	r22, r22
    3a02:	77 1f       	adc	r23, r23
    3a04:	88 1f       	adc	r24, r24
    3a06:	bb 1f       	adc	r27, r27
    3a08:	62 17       	cp	r22, r18
    3a0a:	73 07       	cpc	r23, r19
    3a0c:	84 07       	cpc	r24, r20
    3a0e:	ba 07       	cpc	r27, r26
    3a10:	20 f0       	brcs	.+8      	; 0x3a1a <__divsf3_pse+0xae>
    3a12:	62 1b       	sub	r22, r18
    3a14:	73 0b       	sbc	r23, r19
    3a16:	84 0b       	sbc	r24, r20
    3a18:	ba 0b       	sbc	r27, r26
    3a1a:	ee 1f       	adc	r30, r30
    3a1c:	88 f7       	brcc	.-30     	; 0x3a00 <__divsf3_pse+0x94>
    3a1e:	e0 95       	com	r30
    3a20:	08 95       	ret

00003a22 <__fixsfsi>:
    3a22:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__fixunssfsi>
    3a26:	68 94       	set
    3a28:	b1 11       	cpse	r27, r1
    3a2a:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__fp_szero>
    3a2e:	08 95       	ret

00003a30 <__fixunssfsi>:
    3a30:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__fp_splitA>
    3a34:	88 f0       	brcs	.+34     	; 0x3a58 <__fixunssfsi+0x28>
    3a36:	9f 57       	subi	r25, 0x7F	; 127
    3a38:	98 f0       	brcs	.+38     	; 0x3a60 <__fixunssfsi+0x30>
    3a3a:	b9 2f       	mov	r27, r25
    3a3c:	99 27       	eor	r25, r25
    3a3e:	b7 51       	subi	r27, 0x17	; 23
    3a40:	b0 f0       	brcs	.+44     	; 0x3a6e <__fixunssfsi+0x3e>
    3a42:	e1 f0       	breq	.+56     	; 0x3a7c <__fixunssfsi+0x4c>
    3a44:	66 0f       	add	r22, r22
    3a46:	77 1f       	adc	r23, r23
    3a48:	88 1f       	adc	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	1a f0       	brmi	.+6      	; 0x3a54 <__fixunssfsi+0x24>
    3a4e:	ba 95       	dec	r27
    3a50:	c9 f7       	brne	.-14     	; 0x3a44 <__fixunssfsi+0x14>
    3a52:	14 c0       	rjmp	.+40     	; 0x3a7c <__fixunssfsi+0x4c>
    3a54:	b1 30       	cpi	r27, 0x01	; 1
    3a56:	91 f0       	breq	.+36     	; 0x3a7c <__fixunssfsi+0x4c>
    3a58:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__fp_zero>
    3a5c:	b1 e0       	ldi	r27, 0x01	; 1
    3a5e:	08 95       	ret
    3a60:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__fp_zero>
    3a64:	67 2f       	mov	r22, r23
    3a66:	78 2f       	mov	r23, r24
    3a68:	88 27       	eor	r24, r24
    3a6a:	b8 5f       	subi	r27, 0xF8	; 248
    3a6c:	39 f0       	breq	.+14     	; 0x3a7c <__fixunssfsi+0x4c>
    3a6e:	b9 3f       	cpi	r27, 0xF9	; 249
    3a70:	cc f3       	brlt	.-14     	; 0x3a64 <__fixunssfsi+0x34>
    3a72:	86 95       	lsr	r24
    3a74:	77 95       	ror	r23
    3a76:	67 95       	ror	r22
    3a78:	b3 95       	inc	r27
    3a7a:	d9 f7       	brne	.-10     	; 0x3a72 <__fixunssfsi+0x42>
    3a7c:	3e f4       	brtc	.+14     	; 0x3a8c <__fixunssfsi+0x5c>
    3a7e:	90 95       	com	r25
    3a80:	80 95       	com	r24
    3a82:	70 95       	com	r23
    3a84:	61 95       	neg	r22
    3a86:	7f 4f       	sbci	r23, 0xFF	; 255
    3a88:	8f 4f       	sbci	r24, 0xFF	; 255
    3a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8c:	08 95       	ret

00003a8e <__floatunsisf>:
    3a8e:	e8 94       	clt
    3a90:	09 c0       	rjmp	.+18     	; 0x3aa4 <__floatsisf+0x12>

00003a92 <__floatsisf>:
    3a92:	97 fb       	bst	r25, 7
    3a94:	3e f4       	brtc	.+14     	; 0x3aa4 <__floatsisf+0x12>
    3a96:	90 95       	com	r25
    3a98:	80 95       	com	r24
    3a9a:	70 95       	com	r23
    3a9c:	61 95       	neg	r22
    3a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    3aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa4:	99 23       	and	r25, r25
    3aa6:	a9 f0       	breq	.+42     	; 0x3ad2 <__floatsisf+0x40>
    3aa8:	f9 2f       	mov	r31, r25
    3aaa:	96 e9       	ldi	r25, 0x96	; 150
    3aac:	bb 27       	eor	r27, r27
    3aae:	93 95       	inc	r25
    3ab0:	f6 95       	lsr	r31
    3ab2:	87 95       	ror	r24
    3ab4:	77 95       	ror	r23
    3ab6:	67 95       	ror	r22
    3ab8:	b7 95       	ror	r27
    3aba:	f1 11       	cpse	r31, r1
    3abc:	f8 cf       	rjmp	.-16     	; 0x3aae <__floatsisf+0x1c>
    3abe:	fa f4       	brpl	.+62     	; 0x3afe <__floatsisf+0x6c>
    3ac0:	bb 0f       	add	r27, r27
    3ac2:	11 f4       	brne	.+4      	; 0x3ac8 <__floatsisf+0x36>
    3ac4:	60 ff       	sbrs	r22, 0
    3ac6:	1b c0       	rjmp	.+54     	; 0x3afe <__floatsisf+0x6c>
    3ac8:	6f 5f       	subi	r22, 0xFF	; 255
    3aca:	7f 4f       	sbci	r23, 0xFF	; 255
    3acc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ace:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad0:	16 c0       	rjmp	.+44     	; 0x3afe <__floatsisf+0x6c>
    3ad2:	88 23       	and	r24, r24
    3ad4:	11 f0       	breq	.+4      	; 0x3ada <__floatsisf+0x48>
    3ad6:	96 e9       	ldi	r25, 0x96	; 150
    3ad8:	11 c0       	rjmp	.+34     	; 0x3afc <__floatsisf+0x6a>
    3ada:	77 23       	and	r23, r23
    3adc:	21 f0       	breq	.+8      	; 0x3ae6 <__floatsisf+0x54>
    3ade:	9e e8       	ldi	r25, 0x8E	; 142
    3ae0:	87 2f       	mov	r24, r23
    3ae2:	76 2f       	mov	r23, r22
    3ae4:	05 c0       	rjmp	.+10     	; 0x3af0 <__floatsisf+0x5e>
    3ae6:	66 23       	and	r22, r22
    3ae8:	71 f0       	breq	.+28     	; 0x3b06 <__floatsisf+0x74>
    3aea:	96 e8       	ldi	r25, 0x86	; 134
    3aec:	86 2f       	mov	r24, r22
    3aee:	70 e0       	ldi	r23, 0x00	; 0
    3af0:	60 e0       	ldi	r22, 0x00	; 0
    3af2:	2a f0       	brmi	.+10     	; 0x3afe <__floatsisf+0x6c>
    3af4:	9a 95       	dec	r25
    3af6:	66 0f       	add	r22, r22
    3af8:	77 1f       	adc	r23, r23
    3afa:	88 1f       	adc	r24, r24
    3afc:	da f7       	brpl	.-10     	; 0x3af4 <__floatsisf+0x62>
    3afe:	88 0f       	add	r24, r24
    3b00:	96 95       	lsr	r25
    3b02:	87 95       	ror	r24
    3b04:	97 f9       	bld	r25, 7
    3b06:	08 95       	ret

00003b08 <__fp_cmp>:
    3b08:	99 0f       	add	r25, r25
    3b0a:	00 08       	sbc	r0, r0
    3b0c:	55 0f       	add	r21, r21
    3b0e:	aa 0b       	sbc	r26, r26
    3b10:	e0 e8       	ldi	r30, 0x80	; 128
    3b12:	fe ef       	ldi	r31, 0xFE	; 254
    3b14:	16 16       	cp	r1, r22
    3b16:	17 06       	cpc	r1, r23
    3b18:	e8 07       	cpc	r30, r24
    3b1a:	f9 07       	cpc	r31, r25
    3b1c:	c0 f0       	brcs	.+48     	; 0x3b4e <__fp_cmp+0x46>
    3b1e:	12 16       	cp	r1, r18
    3b20:	13 06       	cpc	r1, r19
    3b22:	e4 07       	cpc	r30, r20
    3b24:	f5 07       	cpc	r31, r21
    3b26:	98 f0       	brcs	.+38     	; 0x3b4e <__fp_cmp+0x46>
    3b28:	62 1b       	sub	r22, r18
    3b2a:	73 0b       	sbc	r23, r19
    3b2c:	84 0b       	sbc	r24, r20
    3b2e:	95 0b       	sbc	r25, r21
    3b30:	39 f4       	brne	.+14     	; 0x3b40 <__fp_cmp+0x38>
    3b32:	0a 26       	eor	r0, r26
    3b34:	61 f0       	breq	.+24     	; 0x3b4e <__fp_cmp+0x46>
    3b36:	23 2b       	or	r18, r19
    3b38:	24 2b       	or	r18, r20
    3b3a:	25 2b       	or	r18, r21
    3b3c:	21 f4       	brne	.+8      	; 0x3b46 <__fp_cmp+0x3e>
    3b3e:	08 95       	ret
    3b40:	0a 26       	eor	r0, r26
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <__fp_cmp+0x3e>
    3b44:	a1 40       	sbci	r26, 0x01	; 1
    3b46:	a6 95       	lsr	r26
    3b48:	8f ef       	ldi	r24, 0xFF	; 255
    3b4a:	81 1d       	adc	r24, r1
    3b4c:	81 1d       	adc	r24, r1
    3b4e:	08 95       	ret

00003b50 <__fp_inf>:
    3b50:	97 f9       	bld	r25, 7
    3b52:	9f 67       	ori	r25, 0x7F	; 127
    3b54:	80 e8       	ldi	r24, 0x80	; 128
    3b56:	70 e0       	ldi	r23, 0x00	; 0
    3b58:	60 e0       	ldi	r22, 0x00	; 0
    3b5a:	08 95       	ret

00003b5c <__fp_nan>:
    3b5c:	9f ef       	ldi	r25, 0xFF	; 255
    3b5e:	80 ec       	ldi	r24, 0xC0	; 192
    3b60:	08 95       	ret

00003b62 <__fp_pscA>:
    3b62:	00 24       	eor	r0, r0
    3b64:	0a 94       	dec	r0
    3b66:	16 16       	cp	r1, r22
    3b68:	17 06       	cpc	r1, r23
    3b6a:	18 06       	cpc	r1, r24
    3b6c:	09 06       	cpc	r0, r25
    3b6e:	08 95       	ret

00003b70 <__fp_pscB>:
    3b70:	00 24       	eor	r0, r0
    3b72:	0a 94       	dec	r0
    3b74:	12 16       	cp	r1, r18
    3b76:	13 06       	cpc	r1, r19
    3b78:	14 06       	cpc	r1, r20
    3b7a:	05 06       	cpc	r0, r21
    3b7c:	08 95       	ret

00003b7e <__fp_round>:
    3b7e:	09 2e       	mov	r0, r25
    3b80:	03 94       	inc	r0
    3b82:	00 0c       	add	r0, r0
    3b84:	11 f4       	brne	.+4      	; 0x3b8a <__fp_round+0xc>
    3b86:	88 23       	and	r24, r24
    3b88:	52 f0       	brmi	.+20     	; 0x3b9e <__fp_round+0x20>
    3b8a:	bb 0f       	add	r27, r27
    3b8c:	40 f4       	brcc	.+16     	; 0x3b9e <__fp_round+0x20>
    3b8e:	bf 2b       	or	r27, r31
    3b90:	11 f4       	brne	.+4      	; 0x3b96 <__fp_round+0x18>
    3b92:	60 ff       	sbrs	r22, 0
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <__fp_round+0x20>
    3b96:	6f 5f       	subi	r22, 0xFF	; 255
    3b98:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9e:	08 95       	ret

00003ba0 <__fp_split3>:
    3ba0:	57 fd       	sbrc	r21, 7
    3ba2:	90 58       	subi	r25, 0x80	; 128
    3ba4:	44 0f       	add	r20, r20
    3ba6:	55 1f       	adc	r21, r21
    3ba8:	59 f0       	breq	.+22     	; 0x3bc0 <__fp_splitA+0x10>
    3baa:	5f 3f       	cpi	r21, 0xFF	; 255
    3bac:	71 f0       	breq	.+28     	; 0x3bca <__fp_splitA+0x1a>
    3bae:	47 95       	ror	r20

00003bb0 <__fp_splitA>:
    3bb0:	88 0f       	add	r24, r24
    3bb2:	97 fb       	bst	r25, 7
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	61 f0       	breq	.+24     	; 0x3bd0 <__fp_splitA+0x20>
    3bb8:	9f 3f       	cpi	r25, 0xFF	; 255
    3bba:	79 f0       	breq	.+30     	; 0x3bda <__fp_splitA+0x2a>
    3bbc:	87 95       	ror	r24
    3bbe:	08 95       	ret
    3bc0:	12 16       	cp	r1, r18
    3bc2:	13 06       	cpc	r1, r19
    3bc4:	14 06       	cpc	r1, r20
    3bc6:	55 1f       	adc	r21, r21
    3bc8:	f2 cf       	rjmp	.-28     	; 0x3bae <__fp_split3+0xe>
    3bca:	46 95       	lsr	r20
    3bcc:	f1 df       	rcall	.-30     	; 0x3bb0 <__fp_splitA>
    3bce:	08 c0       	rjmp	.+16     	; 0x3be0 <__fp_splitA+0x30>
    3bd0:	16 16       	cp	r1, r22
    3bd2:	17 06       	cpc	r1, r23
    3bd4:	18 06       	cpc	r1, r24
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	f1 cf       	rjmp	.-30     	; 0x3bbc <__fp_splitA+0xc>
    3bda:	86 95       	lsr	r24
    3bdc:	71 05       	cpc	r23, r1
    3bde:	61 05       	cpc	r22, r1
    3be0:	08 94       	sec
    3be2:	08 95       	ret

00003be4 <__fp_zero>:
    3be4:	e8 94       	clt

00003be6 <__fp_szero>:
    3be6:	bb 27       	eor	r27, r27
    3be8:	66 27       	eor	r22, r22
    3bea:	77 27       	eor	r23, r23
    3bec:	cb 01       	movw	r24, r22
    3bee:	97 f9       	bld	r25, 7
    3bf0:	08 95       	ret

00003bf2 <__gesf2>:
    3bf2:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__fp_cmp>
    3bf6:	08 f4       	brcc	.+2      	; 0x3bfa <__gesf2+0x8>
    3bf8:	8f ef       	ldi	r24, 0xFF	; 255
    3bfa:	08 95       	ret

00003bfc <__mulsf3>:
    3bfc:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <__mulsf3x>
    3c00:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__fp_round>
    3c04:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__fp_pscA>
    3c08:	38 f0       	brcs	.+14     	; 0x3c18 <__mulsf3+0x1c>
    3c0a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__fp_pscB>
    3c0e:	20 f0       	brcs	.+8      	; 0x3c18 <__mulsf3+0x1c>
    3c10:	95 23       	and	r25, r21
    3c12:	11 f0       	breq	.+4      	; 0x3c18 <__mulsf3+0x1c>
    3c14:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__fp_inf>
    3c18:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__fp_nan>
    3c1c:	11 24       	eor	r1, r1
    3c1e:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__fp_szero>

00003c22 <__mulsf3x>:
    3c22:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__fp_split3>
    3c26:	70 f3       	brcs	.-36     	; 0x3c04 <__mulsf3+0x8>

00003c28 <__mulsf3_pse>:
    3c28:	95 9f       	mul	r25, r21
    3c2a:	c1 f3       	breq	.-16     	; 0x3c1c <__mulsf3+0x20>
    3c2c:	95 0f       	add	r25, r21
    3c2e:	50 e0       	ldi	r21, 0x00	; 0
    3c30:	55 1f       	adc	r21, r21
    3c32:	62 9f       	mul	r22, r18
    3c34:	f0 01       	movw	r30, r0
    3c36:	72 9f       	mul	r23, r18
    3c38:	bb 27       	eor	r27, r27
    3c3a:	f0 0d       	add	r31, r0
    3c3c:	b1 1d       	adc	r27, r1
    3c3e:	63 9f       	mul	r22, r19
    3c40:	aa 27       	eor	r26, r26
    3c42:	f0 0d       	add	r31, r0
    3c44:	b1 1d       	adc	r27, r1
    3c46:	aa 1f       	adc	r26, r26
    3c48:	64 9f       	mul	r22, r20
    3c4a:	66 27       	eor	r22, r22
    3c4c:	b0 0d       	add	r27, r0
    3c4e:	a1 1d       	adc	r26, r1
    3c50:	66 1f       	adc	r22, r22
    3c52:	82 9f       	mul	r24, r18
    3c54:	22 27       	eor	r18, r18
    3c56:	b0 0d       	add	r27, r0
    3c58:	a1 1d       	adc	r26, r1
    3c5a:	62 1f       	adc	r22, r18
    3c5c:	73 9f       	mul	r23, r19
    3c5e:	b0 0d       	add	r27, r0
    3c60:	a1 1d       	adc	r26, r1
    3c62:	62 1f       	adc	r22, r18
    3c64:	83 9f       	mul	r24, r19
    3c66:	a0 0d       	add	r26, r0
    3c68:	61 1d       	adc	r22, r1
    3c6a:	22 1f       	adc	r18, r18
    3c6c:	74 9f       	mul	r23, r20
    3c6e:	33 27       	eor	r19, r19
    3c70:	a0 0d       	add	r26, r0
    3c72:	61 1d       	adc	r22, r1
    3c74:	23 1f       	adc	r18, r19
    3c76:	84 9f       	mul	r24, r20
    3c78:	60 0d       	add	r22, r0
    3c7a:	21 1d       	adc	r18, r1
    3c7c:	82 2f       	mov	r24, r18
    3c7e:	76 2f       	mov	r23, r22
    3c80:	6a 2f       	mov	r22, r26
    3c82:	11 24       	eor	r1, r1
    3c84:	9f 57       	subi	r25, 0x7F	; 127
    3c86:	50 40       	sbci	r21, 0x00	; 0
    3c88:	9a f0       	brmi	.+38     	; 0x3cb0 <__mulsf3_pse+0x88>
    3c8a:	f1 f0       	breq	.+60     	; 0x3cc8 <__mulsf3_pse+0xa0>
    3c8c:	88 23       	and	r24, r24
    3c8e:	4a f0       	brmi	.+18     	; 0x3ca2 <__mulsf3_pse+0x7a>
    3c90:	ee 0f       	add	r30, r30
    3c92:	ff 1f       	adc	r31, r31
    3c94:	bb 1f       	adc	r27, r27
    3c96:	66 1f       	adc	r22, r22
    3c98:	77 1f       	adc	r23, r23
    3c9a:	88 1f       	adc	r24, r24
    3c9c:	91 50       	subi	r25, 0x01	; 1
    3c9e:	50 40       	sbci	r21, 0x00	; 0
    3ca0:	a9 f7       	brne	.-22     	; 0x3c8c <__mulsf3_pse+0x64>
    3ca2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ca4:	51 05       	cpc	r21, r1
    3ca6:	80 f0       	brcs	.+32     	; 0x3cc8 <__mulsf3_pse+0xa0>
    3ca8:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__fp_inf>
    3cac:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__fp_szero>
    3cb0:	5f 3f       	cpi	r21, 0xFF	; 255
    3cb2:	e4 f3       	brlt	.-8      	; 0x3cac <__mulsf3_pse+0x84>
    3cb4:	98 3e       	cpi	r25, 0xE8	; 232
    3cb6:	d4 f3       	brlt	.-12     	; 0x3cac <__mulsf3_pse+0x84>
    3cb8:	86 95       	lsr	r24
    3cba:	77 95       	ror	r23
    3cbc:	67 95       	ror	r22
    3cbe:	b7 95       	ror	r27
    3cc0:	f7 95       	ror	r31
    3cc2:	e7 95       	ror	r30
    3cc4:	9f 5f       	subi	r25, 0xFF	; 255
    3cc6:	c1 f7       	brne	.-16     	; 0x3cb8 <__mulsf3_pse+0x90>
    3cc8:	fe 2b       	or	r31, r30
    3cca:	88 0f       	add	r24, r24
    3ccc:	91 1d       	adc	r25, r1
    3cce:	96 95       	lsr	r25
    3cd0:	87 95       	ror	r24
    3cd2:	97 f9       	bld	r25, 7
    3cd4:	08 95       	ret

00003cd6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3cd6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3cd8:	91 8d       	ldd	r25, Z+25	; 0x19
    3cda:	22 8d       	ldd	r18, Z+26	; 0x1a
    3cdc:	89 2f       	mov	r24, r25
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	80 5c       	subi	r24, 0xC0	; 192
    3ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce4:	82 1b       	sub	r24, r18
    3ce6:	91 09       	sbc	r25, r1
}
    3ce8:	8f 73       	andi	r24, 0x3F	; 63
    3cea:	99 27       	eor	r25, r25
    3cec:	08 95       	ret

00003cee <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3cee:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3cf0:	91 8d       	ldd	r25, Z+25	; 0x19
    3cf2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cf4:	98 17       	cp	r25, r24
    3cf6:	31 f0       	breq	.+12     	; 0x3d04 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3cf8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cfa:	e8 0f       	add	r30, r24
    3cfc:	f1 1d       	adc	r31, r1
    3cfe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d04:	8f ef       	ldi	r24, 0xFF	; 255
    3d06:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3d08:	08 95       	ret

00003d0a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3d0a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d0c:	91 8d       	ldd	r25, Z+25	; 0x19
    3d0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d10:	98 17       	cp	r25, r24
    3d12:	61 f0       	breq	.+24     	; 0x3d2c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3d14:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d16:	df 01       	movw	r26, r30
    3d18:	a8 0f       	add	r26, r24
    3d1a:	b1 1d       	adc	r27, r1
    3d1c:	5d 96       	adiw	r26, 0x1d	; 29
    3d1e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3d20:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d22:	9f 5f       	subi	r25, 0xFF	; 255
    3d24:	9f 73       	andi	r25, 0x3F	; 63
    3d26:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d2c:	8f ef       	ldi	r24, 0xFF	; 255
    3d2e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3d30:	08 95       	ret

00003d32 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3d32:	fc 01       	movw	r30, r24
    3d34:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3d36:	44 8d       	ldd	r20, Z+28	; 0x1c
    3d38:	25 2f       	mov	r18, r21
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	84 2f       	mov	r24, r20
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3d40:	82 1b       	sub	r24, r18
    3d42:	93 0b       	sbc	r25, r19
    3d44:	54 17       	cp	r21, r20
    3d46:	10 f0       	brcs	.+4      	; 0x3d4c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3d48:	cf 96       	adiw	r24, 0x3f	; 63
    3d4a:	08 95       	ret
  return tail - head - 1;
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
}
    3d4e:	08 95       	ret

00003d50 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3d50:	84 e0       	ldi	r24, 0x04	; 4
    3d52:	90 e2       	ldi	r25, 0x20	; 32
    3d54:	89 2b       	or	r24, r25
    3d56:	49 f0       	breq	.+18     	; 0x3d6a <_Z14serialEventRunv+0x1a>
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	89 2b       	or	r24, r25
    3d5e:	29 f0       	breq	.+10     	; 0x3d6a <_Z14serialEventRunv+0x1a>
    3d60:	0e 94 04 20 	call	0x4008	; 0x4008 <_Z17Serial0_availablev>
    3d64:	81 11       	cpse	r24, r1
    3d66:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3d6a:	08 95       	ret

00003d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3d6c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3d6e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d70:	df 01       	movw	r26, r30
    3d72:	a8 0f       	add	r26, r24
    3d74:	b1 1d       	adc	r27, r1
    3d76:	a3 5a       	subi	r26, 0xA3	; 163
    3d78:	bf 4f       	sbci	r27, 0xFF	; 255
    3d7a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3d7c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	01 96       	adiw	r24, 0x01	; 1
    3d82:	8f 73       	andi	r24, 0x3F	; 63
    3d84:	99 27       	eor	r25, r25
    3d86:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3d88:	a6 89       	ldd	r26, Z+22	; 0x16
    3d8a:	b7 89       	ldd	r27, Z+23	; 0x17
    3d8c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3d8e:	a0 89       	ldd	r26, Z+16	; 0x10
    3d90:	b1 89       	ldd	r27, Z+17	; 0x11
    3d92:	8c 91       	ld	r24, X
    3d94:	83 70       	andi	r24, 0x03	; 3
    3d96:	80 64       	ori	r24, 0x40	; 64
    3d98:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3d9a:	93 8d       	ldd	r25, Z+27	; 0x1b
    3d9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d9e:	98 13       	cpse	r25, r24
    3da0:	06 c0       	rjmp	.+12     	; 0x3dae <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3da2:	02 88       	ldd	r0, Z+18	; 0x12
    3da4:	f3 89       	ldd	r31, Z+19	; 0x13
    3da6:	e0 2d       	mov	r30, r0
    3da8:	80 81       	ld	r24, Z
    3daa:	8f 7d       	andi	r24, 0xDF	; 223
    3dac:	80 83       	st	Z, r24
    3dae:	08 95       	ret

00003db0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3db0:	ef 92       	push	r14
    3db2:	ff 92       	push	r15
    3db4:	0f 93       	push	r16
    3db6:	1f 93       	push	r17
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	ec 01       	movw	r28, r24
  _written = true;
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3dc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3dc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3dc6:	98 13       	cpse	r25, r24
    3dc8:	05 c0       	rjmp	.+10     	; 0x3dd4 <_ZN14HardwareSerial5writeEh+0x24>
    3dca:	e8 89       	ldd	r30, Y+16	; 0x10
    3dcc:	f9 89       	ldd	r31, Y+17	; 0x11
    3dce:	80 81       	ld	r24, Z
    3dd0:	85 fd       	sbrc	r24, 5
    3dd2:	26 c0       	rjmp	.+76     	; 0x3e20 <_ZN14HardwareSerial5writeEh+0x70>
    3dd4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3dd6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3dd8:	10 e0       	ldi	r17, 0x00	; 0
    3dda:	0f 5f       	subi	r16, 0xFF	; 255
    3ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dde:	0f 73       	andi	r16, 0x3F	; 63
    3de0:	11 27       	eor	r17, r17
    3de2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3de4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3de6:	e8 12       	cpse	r14, r24
    3de8:	0c c0       	rjmp	.+24     	; 0x3e02 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	07 fc       	sbrc	r0, 7
    3dee:	fa cf       	rjmp	.-12     	; 0x3de4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3df0:	e8 89       	ldd	r30, Y+16	; 0x10
    3df2:	f9 89       	ldd	r31, Y+17	; 0x11
    3df4:	80 81       	ld	r24, Z
    3df6:	85 ff       	sbrs	r24, 5
    3df8:	f5 cf       	rjmp	.-22     	; 0x3de4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e00:	f1 cf       	rjmp	.-30     	; 0x3de4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e04:	fe 01       	movw	r30, r28
    3e06:	e8 0f       	add	r30, r24
    3e08:	f1 1d       	adc	r31, r1
    3e0a:	e3 5a       	subi	r30, 0xA3	; 163
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3e10:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3e12:	f8 94       	cli
    _tx_buffer_head = i;
    3e14:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3e16:	ea 89       	ldd	r30, Y+18	; 0x12
    3e18:	fb 89       	ldd	r31, Y+19	; 0x13
    3e1a:	80 81       	ld	r24, Z
    3e1c:	80 62       	ori	r24, 0x20	; 32
    3e1e:	0a c0       	rjmp	.+20     	; 0x3e34 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3e20:	9f b7       	in	r25, 0x3f	; 63
    3e22:	f8 94       	cli
      *_udr = c;
    3e24:	ee 89       	ldd	r30, Y+22	; 0x16
    3e26:	ff 89       	ldd	r31, Y+23	; 0x17
    3e28:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3e2a:	e8 89       	ldd	r30, Y+16	; 0x10
    3e2c:	f9 89       	ldd	r31, Y+17	; 0x11
    3e2e:	80 81       	ld	r24, Z
    3e30:	83 70       	andi	r24, 0x03	; 3
    3e32:	80 64       	ori	r24, 0x40	; 64
    3e34:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3e36:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	1f 91       	pop	r17
    3e42:	0f 91       	pop	r16
    3e44:	ff 90       	pop	r15
    3e46:	ef 90       	pop	r14
    3e48:	08 95       	ret

00003e4a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3e4a:	cf 93       	push	r28
    3e4c:	df 93       	push	r29
    3e4e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3e50:	88 8d       	ldd	r24, Y+24	; 0x18
    3e52:	88 23       	and	r24, r24
    3e54:	c9 f0       	breq	.+50     	; 0x3e88 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3e56:	ea 89       	ldd	r30, Y+18	; 0x12
    3e58:	fb 89       	ldd	r31, Y+19	; 0x13
    3e5a:	80 81       	ld	r24, Z
    3e5c:	85 fd       	sbrc	r24, 5
    3e5e:	05 c0       	rjmp	.+10     	; 0x3e6a <_ZN14HardwareSerial5flushEv+0x20>
    3e60:	a8 89       	ldd	r26, Y+16	; 0x10
    3e62:	b9 89       	ldd	r27, Y+17	; 0x11
    3e64:	8c 91       	ld	r24, X
    3e66:	86 fd       	sbrc	r24, 6
    3e68:	0f c0       	rjmp	.+30     	; 0x3e88 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	07 fc       	sbrc	r0, 7
    3e6e:	f5 cf       	rjmp	.-22     	; 0x3e5a <_ZN14HardwareSerial5flushEv+0x10>
    3e70:	80 81       	ld	r24, Z
    3e72:	85 ff       	sbrs	r24, 5
    3e74:	f2 cf       	rjmp	.-28     	; 0x3e5a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3e76:	a8 89       	ldd	r26, Y+16	; 0x10
    3e78:	b9 89       	ldd	r27, Y+17	; 0x11
    3e7a:	8c 91       	ld	r24, X
    3e7c:	85 ff       	sbrs	r24, 5
    3e7e:	ed cf       	rjmp	.-38     	; 0x3e5a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3e80:	ce 01       	movw	r24, r28
    3e82:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e86:	e7 cf       	rjmp	.-50     	; 0x3e56 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	08 95       	ret

00003e8e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3e8e:	cf 92       	push	r12
    3e90:	df 92       	push	r13
    3e92:	ef 92       	push	r14
    3e94:	ff 92       	push	r15
    3e96:	1f 93       	push	r17
    3e98:	cf 93       	push	r28
    3e9a:	df 93       	push	r29
    3e9c:	ec 01       	movw	r28, r24
    3e9e:	6a 01       	movw	r12, r20
    3ea0:	7b 01       	movw	r14, r22
    3ea2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3ea4:	e8 89       	ldd	r30, Y+16	; 0x10
    3ea6:	f9 89       	ldd	r31, Y+17	; 0x11
    3ea8:	82 e0       	ldi	r24, 0x02	; 2
    3eaa:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3eac:	41 15       	cp	r20, r1
    3eae:	51 4e       	sbci	r21, 0xE1	; 225
    3eb0:	61 05       	cpc	r22, r1
    3eb2:	71 05       	cpc	r23, r1
    3eb4:	b1 f0       	breq	.+44     	; 0x3ee2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3eb6:	60 e0       	ldi	r22, 0x00	; 0
    3eb8:	79 e0       	ldi	r23, 0x09	; 9
    3eba:	8d e3       	ldi	r24, 0x3D	; 61
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	a7 01       	movw	r20, r14
    3ec0:	96 01       	movw	r18, r12
    3ec2:	0e 94 2c 24 	call	0x4858	; 0x4858 <__udivmodsi4>
    3ec6:	da 01       	movw	r26, r20
    3ec8:	c9 01       	movw	r24, r18
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	a1 09       	sbc	r26, r1
    3ece:	b1 09       	sbc	r27, r1
    3ed0:	b6 95       	lsr	r27
    3ed2:	a7 95       	ror	r26
    3ed4:	97 95       	ror	r25
    3ed6:	87 95       	ror	r24
    3ed8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3eda:	21 15       	cp	r18, r1
    3edc:	80 e1       	ldi	r24, 0x10	; 16
    3ede:	38 07       	cpc	r19, r24
    3ee0:	a8 f0       	brcs	.+42     	; 0x3f0c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3ee2:	e8 89       	ldd	r30, Y+16	; 0x10
    3ee4:	f9 89       	ldd	r31, Y+17	; 0x11
    3ee6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3ee8:	60 e8       	ldi	r22, 0x80	; 128
    3eea:	74 e8       	ldi	r23, 0x84	; 132
    3eec:	8e e1       	ldi	r24, 0x1E	; 30
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	a7 01       	movw	r20, r14
    3ef2:	96 01       	movw	r18, r12
    3ef4:	0e 94 2c 24 	call	0x4858	; 0x4858 <__udivmodsi4>
    3ef8:	da 01       	movw	r26, r20
    3efa:	c9 01       	movw	r24, r18
    3efc:	01 97       	sbiw	r24, 0x01	; 1
    3efe:	a1 09       	sbc	r26, r1
    3f00:	b1 09       	sbc	r27, r1
    3f02:	b6 95       	lsr	r27
    3f04:	a7 95       	ror	r26
    3f06:	97 95       	ror	r25
    3f08:	87 95       	ror	r24
    3f0a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3f0c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f0e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f10:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3f12:	ee 85       	ldd	r30, Y+14	; 0x0e
    3f14:	ff 85       	ldd	r31, Y+15	; 0x0f
    3f16:	20 83       	st	Z, r18

  _written = false;
    3f18:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3f1a:	ec 89       	ldd	r30, Y+20	; 0x14
    3f1c:	fd 89       	ldd	r31, Y+21	; 0x15
    3f1e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3f20:	ea 89       	ldd	r30, Y+18	; 0x12
    3f22:	fb 89       	ldd	r31, Y+19	; 0x13
    3f24:	80 81       	ld	r24, Z
    3f26:	80 61       	ori	r24, 0x10	; 16
    3f28:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3f2a:	ea 89       	ldd	r30, Y+18	; 0x12
    3f2c:	fb 89       	ldd	r31, Y+19	; 0x13
    3f2e:	80 81       	ld	r24, Z
    3f30:	88 60       	ori	r24, 0x08	; 8
    3f32:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3f34:	ea 89       	ldd	r30, Y+18	; 0x12
    3f36:	fb 89       	ldd	r31, Y+19	; 0x13
    3f38:	80 81       	ld	r24, Z
    3f3a:	80 68       	ori	r24, 0x80	; 128
    3f3c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3f3e:	ea 89       	ldd	r30, Y+18	; 0x12
    3f40:	fb 89       	ldd	r31, Y+19	; 0x13
    3f42:	80 81       	ld	r24, Z
    3f44:	8f 7d       	andi	r24, 0xDF	; 223
    3f46:	80 83       	st	Z, r24
}
    3f48:	df 91       	pop	r29
    3f4a:	cf 91       	pop	r28
    3f4c:	1f 91       	pop	r17
    3f4e:	ff 90       	pop	r15
    3f50:	ef 90       	pop	r14
    3f52:	df 90       	pop	r13
    3f54:	cf 90       	pop	r12
    3f56:	08 95       	ret

00003f58 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3f58:	1f 92       	push	r1
    3f5a:	0f 92       	push	r0
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	0f 92       	push	r0
    3f60:	11 24       	eor	r1, r1
    3f62:	2f 93       	push	r18
    3f64:	8f 93       	push	r24
    3f66:	9f 93       	push	r25
    3f68:	ef 93       	push	r30
    3f6a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3f6c:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <Serial+0x10>
    3f70:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <Serial+0x11>
    3f74:	80 81       	ld	r24, Z
    3f76:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <Serial+0x16>
    3f7a:	f0 91 4c 03 	lds	r31, 0x034C	; 0x80034c <Serial+0x17>
    3f7e:	82 fd       	sbrc	r24, 2
    3f80:	12 c0       	rjmp	.+36     	; 0x3fa6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3f82:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3f84:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <Serial+0x19>
    3f88:	8f 5f       	subi	r24, 0xFF	; 255
    3f8a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3f8c:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <Serial+0x1a>
    3f90:	82 17       	cp	r24, r18
    3f92:	51 f0       	breq	.+20     	; 0x3fa8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3f94:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <Serial+0x19>
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	eb 5c       	subi	r30, 0xCB	; 203
    3f9c:	fc 4f       	sbci	r31, 0xFC	; 252
    3f9e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3fa0:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <Serial+0x19>
    3fa4:	01 c0       	rjmp	.+2      	; 0x3fa8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3fa6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3fa8:	ff 91       	pop	r31
    3faa:	ef 91       	pop	r30
    3fac:	9f 91       	pop	r25
    3fae:	8f 91       	pop	r24
    3fb0:	2f 91       	pop	r18
    3fb2:	0f 90       	pop	r0
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	0f 90       	pop	r0
    3fb8:	1f 90       	pop	r1
    3fba:	18 95       	reti

00003fbc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3fbc:	1f 92       	push	r1
    3fbe:	0f 92       	push	r0
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	0f 92       	push	r0
    3fc4:	11 24       	eor	r1, r1
    3fc6:	2f 93       	push	r18
    3fc8:	3f 93       	push	r19
    3fca:	4f 93       	push	r20
    3fcc:	5f 93       	push	r21
    3fce:	6f 93       	push	r22
    3fd0:	7f 93       	push	r23
    3fd2:	8f 93       	push	r24
    3fd4:	9f 93       	push	r25
    3fd6:	af 93       	push	r26
    3fd8:	bf 93       	push	r27
    3fda:	ef 93       	push	r30
    3fdc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3fde:	85 e3       	ldi	r24, 0x35	; 53
    3fe0:	93 e0       	ldi	r25, 0x03	; 3
    3fe2:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3fe6:	ff 91       	pop	r31
    3fe8:	ef 91       	pop	r30
    3fea:	bf 91       	pop	r27
    3fec:	af 91       	pop	r26
    3fee:	9f 91       	pop	r25
    3ff0:	8f 91       	pop	r24
    3ff2:	7f 91       	pop	r23
    3ff4:	6f 91       	pop	r22
    3ff6:	5f 91       	pop	r21
    3ff8:	4f 91       	pop	r20
    3ffa:	3f 91       	pop	r19
    3ffc:	2f 91       	pop	r18
    3ffe:	0f 90       	pop	r0
    4000:	0f be       	out	0x3f, r0	; 63
    4002:	0f 90       	pop	r0
    4004:	1f 90       	pop	r1
    4006:	18 95       	reti

00004008 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4008:	85 e3       	ldi	r24, 0x35	; 53
    400a:	93 e0       	ldi	r25, 0x03	; 3
    400c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZN14HardwareSerial9availableEv>
    4010:	21 e0       	ldi	r18, 0x01	; 1
    4012:	89 2b       	or	r24, r25
    4014:	09 f4       	brne	.+2      	; 0x4018 <_Z17Serial0_availablev+0x10>
    4016:	20 e0       	ldi	r18, 0x00	; 0
}
    4018:	82 2f       	mov	r24, r18
    401a:	08 95       	ret

0000401c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    401c:	e5 e3       	ldi	r30, 0x35	; 53
    401e:	f3 e0       	ldi	r31, 0x03	; 3
    4020:	13 82       	std	Z+3, r1	; 0x03
    4022:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4024:	88 ee       	ldi	r24, 0xE8	; 232
    4026:	93 e0       	ldi	r25, 0x03	; 3
    4028:	a0 e0       	ldi	r26, 0x00	; 0
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	84 83       	std	Z+4, r24	; 0x04
    402e:	95 83       	std	Z+5, r25	; 0x05
    4030:	a6 83       	std	Z+6, r26	; 0x06
    4032:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4034:	83 ec       	ldi	r24, 0xC3	; 195
    4036:	91 e0       	ldi	r25, 0x01	; 1
    4038:	91 83       	std	Z+1, r25	; 0x01
    403a:	80 83       	st	Z, r24
    403c:	85 ec       	ldi	r24, 0xC5	; 197
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	95 87       	std	Z+13, r25	; 0x0d
    4042:	84 87       	std	Z+12, r24	; 0x0c
    4044:	84 ec       	ldi	r24, 0xC4	; 196
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	97 87       	std	Z+15, r25	; 0x0f
    404a:	86 87       	std	Z+14, r24	; 0x0e
    404c:	80 ec       	ldi	r24, 0xC0	; 192
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	91 8b       	std	Z+17, r25	; 0x11
    4052:	80 8b       	std	Z+16, r24	; 0x10
    4054:	81 ec       	ldi	r24, 0xC1	; 193
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	93 8b       	std	Z+19, r25	; 0x13
    405a:	82 8b       	std	Z+18, r24	; 0x12
    405c:	82 ec       	ldi	r24, 0xC2	; 194
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	95 8b       	std	Z+21, r25	; 0x15
    4062:	84 8b       	std	Z+20, r24	; 0x14
    4064:	86 ec       	ldi	r24, 0xC6	; 198
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	97 8b       	std	Z+23, r25	; 0x17
    406a:	86 8b       	std	Z+22, r24	; 0x16
    406c:	11 8e       	std	Z+25, r1	; 0x19
    406e:	12 8e       	std	Z+26, r1	; 0x1a
    4070:	13 8e       	std	Z+27, r1	; 0x1b
    4072:	14 8e       	std	Z+28, r1	; 0x1c
    4074:	08 95       	ret

00004076 <initVariant>:
    4076:	08 95       	ret

00004078 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    4078:	0e 94 2e 23 	call	0x465c	; 0x465c <init>

	initVariant();
    407c:	0e 94 3b 20 	call	0x4076	; 0x4076 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4080:	0e 94 5e 11 	call	0x22bc	; 0x22bc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4084:	c8 ea       	ldi	r28, 0xA8	; 168
    4086:	de e1       	ldi	r29, 0x1E	; 30
#endif
	
	setup();
    
	for (;;) {
		loop();
    4088:	0e 94 df 0a 	call	0x15be	; 0x15be <loop>
		if (serialEventRun) serialEventRun();
    408c:	20 97       	sbiw	r28, 0x00	; 0
    408e:	e1 f3       	breq	.-8      	; 0x4088 <main+0x10>
    4090:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_Z14serialEventRunv>
    4094:	f9 cf       	rjmp	.-14     	; 0x4088 <main+0x10>

00004096 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    4096:	cf 92       	push	r12
    4098:	df 92       	push	r13
    409a:	ef 92       	push	r14
    409c:	ff 92       	push	r15
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
    40a6:	6c 01       	movw	r12, r24
    40a8:	7a 01       	movw	r14, r20
    40aa:	8b 01       	movw	r16, r22
    40ac:	c0 e0       	ldi	r28, 0x00	; 0
    40ae:	d0 e0       	ldi	r29, 0x00	; 0
    40b0:	ce 15       	cp	r28, r14
    40b2:	df 05       	cpc	r29, r15
    40b4:	81 f0       	breq	.+32     	; 0x40d6 <_ZN5Print5writeEPKhj+0x40>
    40b6:	d8 01       	movw	r26, r16
    40b8:	6d 91       	ld	r22, X+
    40ba:	8d 01       	movw	r16, r26
    40bc:	d6 01       	movw	r26, r12
    40be:	ed 91       	ld	r30, X+
    40c0:	fc 91       	ld	r31, X
    40c2:	01 90       	ld	r0, Z+
    40c4:	f0 81       	ld	r31, Z
    40c6:	e0 2d       	mov	r30, r0
    40c8:	c6 01       	movw	r24, r12
    40ca:	09 95       	icall
    40cc:	89 2b       	or	r24, r25
    40ce:	11 f0       	breq	.+4      	; 0x40d4 <_ZN5Print5writeEPKhj+0x3e>
    40d0:	21 96       	adiw	r28, 0x01	; 1
    40d2:	ee cf       	rjmp	.-36     	; 0x40b0 <_ZN5Print5writeEPKhj+0x1a>
    40d4:	7e 01       	movw	r14, r28
    40d6:	c7 01       	movw	r24, r14
    40d8:	df 91       	pop	r29
    40da:	cf 91       	pop	r28
    40dc:	1f 91       	pop	r17
    40de:	0f 91       	pop	r16
    40e0:	ff 90       	pop	r15
    40e2:	ef 90       	pop	r14
    40e4:	df 90       	pop	r13
    40e6:	cf 90       	pop	r12
    40e8:	08 95       	ret

000040ea <_ZN5Print5writeEPKc>:
    40ea:	61 15       	cp	r22, r1
    40ec:	71 05       	cpc	r23, r1
    40ee:	79 f0       	breq	.+30     	; 0x410e <_ZN5Print5writeEPKc+0x24>
    40f0:	fb 01       	movw	r30, r22
    40f2:	01 90       	ld	r0, Z+
    40f4:	00 20       	and	r0, r0
    40f6:	e9 f7       	brne	.-6      	; 0x40f2 <_ZN5Print5writeEPKc+0x8>
    40f8:	31 97       	sbiw	r30, 0x01	; 1
    40fa:	af 01       	movw	r20, r30
    40fc:	46 1b       	sub	r20, r22
    40fe:	57 0b       	sbc	r21, r23
    4100:	dc 01       	movw	r26, r24
    4102:	ed 91       	ld	r30, X+
    4104:	fc 91       	ld	r31, X
    4106:	02 80       	ldd	r0, Z+2	; 0x02
    4108:	f3 81       	ldd	r31, Z+3	; 0x03
    410a:	e0 2d       	mov	r30, r0
    410c:	09 94       	ijmp
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	08 95       	ret

00004114 <_ZN5Print5printEPK19__FlashStringHelper>:
    4114:	ef 92       	push	r14
    4116:	ff 92       	push	r15
    4118:	0f 93       	push	r16
    411a:	1f 93       	push	r17
    411c:	cf 93       	push	r28
    411e:	df 93       	push	r29
    4120:	8c 01       	movw	r16, r24
    4122:	7b 01       	movw	r14, r22
    4124:	c0 e0       	ldi	r28, 0x00	; 0
    4126:	d0 e0       	ldi	r29, 0x00	; 0
    4128:	f7 01       	movw	r30, r14
    412a:	ec 0f       	add	r30, r28
    412c:	fd 1f       	adc	r31, r29
    412e:	64 91       	lpm	r22, Z
    4130:	66 23       	and	r22, r22
    4132:	61 f0       	breq	.+24     	; 0x414c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4134:	d8 01       	movw	r26, r16
    4136:	ed 91       	ld	r30, X+
    4138:	fc 91       	ld	r31, X
    413a:	01 90       	ld	r0, Z+
    413c:	f0 81       	ld	r31, Z
    413e:	e0 2d       	mov	r30, r0
    4140:	c8 01       	movw	r24, r16
    4142:	09 95       	icall
    4144:	89 2b       	or	r24, r25
    4146:	11 f0       	breq	.+4      	; 0x414c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4148:	21 96       	adiw	r28, 0x01	; 1
    414a:	ee cf       	rjmp	.-36     	; 0x4128 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    414c:	ce 01       	movw	r24, r28
    414e:	df 91       	pop	r29
    4150:	cf 91       	pop	r28
    4152:	1f 91       	pop	r17
    4154:	0f 91       	pop	r16
    4156:	ff 90       	pop	r15
    4158:	ef 90       	pop	r14
    415a:	08 95       	ret

0000415c <_ZN5Print5printEc>:
    415c:	dc 01       	movw	r26, r24
    415e:	ed 91       	ld	r30, X+
    4160:	fc 91       	ld	r31, X
    4162:	01 90       	ld	r0, Z+
    4164:	f0 81       	ld	r31, Z
    4166:	e0 2d       	mov	r30, r0
    4168:	09 94       	ijmp

0000416a <_ZN5Print7printlnEv>:
    416a:	61 ed       	ldi	r22, 0xD1	; 209
    416c:	71 e0       	ldi	r23, 0x01	; 1
    416e:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <_ZN5Print5writeEPKc>

00004172 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	cf 93       	push	r28
    4178:	df 93       	push	r29
    417a:	ec 01       	movw	r28, r24
    417c:	0e 94 8a 20 	call	0x4114	; 0x4114 <_ZN5Print5printEPK19__FlashStringHelper>
    4180:	8c 01       	movw	r16, r24
    4182:	ce 01       	movw	r24, r28
    4184:	0e 94 b5 20 	call	0x416a	; 0x416a <_ZN5Print7printlnEv>
    4188:	80 0f       	add	r24, r16
    418a:	91 1f       	adc	r25, r17
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	08 95       	ret

00004196 <_ZN5Print11printNumberEmh>:
    4196:	8f 92       	push	r8
    4198:	9f 92       	push	r9
    419a:	af 92       	push	r10
    419c:	bf 92       	push	r11
    419e:	ef 92       	push	r14
    41a0:	ff 92       	push	r15
    41a2:	0f 93       	push	r16
    41a4:	1f 93       	push	r17
    41a6:	cf 93       	push	r28
    41a8:	df 93       	push	r29
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	a1 97       	sbiw	r28, 0x21	; 33
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	7c 01       	movw	r14, r24
    41bc:	fa 01       	movw	r30, r20
    41be:	cb 01       	movw	r24, r22
    41c0:	19 a2       	std	Y+33, r1	; 0x21
    41c2:	22 30       	cpi	r18, 0x02	; 2
    41c4:	08 f4       	brcc	.+2      	; 0x41c8 <_ZN5Print11printNumberEmh+0x32>
    41c6:	2a e0       	ldi	r18, 0x0A	; 10
    41c8:	8e 01       	movw	r16, r28
    41ca:	0f 5d       	subi	r16, 0xDF	; 223
    41cc:	1f 4f       	sbci	r17, 0xFF	; 255
    41ce:	82 2e       	mov	r8, r18
    41d0:	91 2c       	mov	r9, r1
    41d2:	a1 2c       	mov	r10, r1
    41d4:	b1 2c       	mov	r11, r1
    41d6:	bf 01       	movw	r22, r30
    41d8:	a5 01       	movw	r20, r10
    41da:	94 01       	movw	r18, r8
    41dc:	0e 94 2c 24 	call	0x4858	; 0x4858 <__udivmodsi4>
    41e0:	f9 01       	movw	r30, r18
    41e2:	ca 01       	movw	r24, r20
    41e4:	01 50       	subi	r16, 0x01	; 1
    41e6:	11 09       	sbc	r17, r1
    41e8:	6a 30       	cpi	r22, 0x0A	; 10
    41ea:	10 f4       	brcc	.+4      	; 0x41f0 <_ZN5Print11printNumberEmh+0x5a>
    41ec:	60 5d       	subi	r22, 0xD0	; 208
    41ee:	01 c0       	rjmp	.+2      	; 0x41f2 <_ZN5Print11printNumberEmh+0x5c>
    41f0:	69 5c       	subi	r22, 0xC9	; 201
    41f2:	d8 01       	movw	r26, r16
    41f4:	6c 93       	st	X, r22
    41f6:	23 2b       	or	r18, r19
    41f8:	24 2b       	or	r18, r20
    41fa:	25 2b       	or	r18, r21
    41fc:	61 f7       	brne	.-40     	; 0x41d6 <_ZN5Print11printNumberEmh+0x40>
    41fe:	b8 01       	movw	r22, r16
    4200:	c7 01       	movw	r24, r14
    4202:	0e 94 75 20 	call	0x40ea	; 0x40ea <_ZN5Print5writeEPKc>
    4206:	a1 96       	adiw	r28, 0x21	; 33
    4208:	0f b6       	in	r0, 0x3f	; 63
    420a:	f8 94       	cli
    420c:	de bf       	out	0x3e, r29	; 62
    420e:	0f be       	out	0x3f, r0	; 63
    4210:	cd bf       	out	0x3d, r28	; 61
    4212:	df 91       	pop	r29
    4214:	cf 91       	pop	r28
    4216:	1f 91       	pop	r17
    4218:	0f 91       	pop	r16
    421a:	ff 90       	pop	r15
    421c:	ef 90       	pop	r14
    421e:	bf 90       	pop	r11
    4220:	af 90       	pop	r10
    4222:	9f 90       	pop	r9
    4224:	8f 90       	pop	r8
    4226:	08 95       	ret

00004228 <_ZN5Print5printEmi>:
    4228:	21 15       	cp	r18, r1
    422a:	31 05       	cpc	r19, r1
    422c:	41 f4       	brne	.+16     	; 0x423e <_ZN5Print5printEmi+0x16>
    422e:	dc 01       	movw	r26, r24
    4230:	ed 91       	ld	r30, X+
    4232:	fc 91       	ld	r31, X
    4234:	01 90       	ld	r0, Z+
    4236:	f0 81       	ld	r31, Z
    4238:	e0 2d       	mov	r30, r0
    423a:	64 2f       	mov	r22, r20
    423c:	09 94       	ijmp
    423e:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <_ZN5Print11printNumberEmh>

00004242 <_ZN5Print5printEhi>:
    4242:	9a 01       	movw	r18, r20
    4244:	46 2f       	mov	r20, r22
    4246:	50 e0       	ldi	r21, 0x00	; 0
    4248:	60 e0       	ldi	r22, 0x00	; 0
    424a:	70 e0       	ldi	r23, 0x00	; 0
    424c:	0c 94 14 21 	jmp	0x4228	; 0x4228 <_ZN5Print5printEmi>

00004250 <_ZN5Print5printEji>:
    4250:	9a 01       	movw	r18, r20
    4252:	ab 01       	movw	r20, r22
    4254:	60 e0       	ldi	r22, 0x00	; 0
    4256:	70 e0       	ldi	r23, 0x00	; 0
    4258:	0c 94 14 21 	jmp	0x4228	; 0x4228 <_ZN5Print5printEmi>

0000425c <_ZN5Print5printEli>:
    425c:	cf 92       	push	r12
    425e:	df 92       	push	r13
    4260:	ef 92       	push	r14
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	21 15       	cp	r18, r1
    426e:	31 05       	cpc	r19, r1
    4270:	81 f4       	brne	.+32     	; 0x4292 <_ZN5Print5printEli+0x36>
    4272:	dc 01       	movw	r26, r24
    4274:	ed 91       	ld	r30, X+
    4276:	fc 91       	ld	r31, X
    4278:	01 90       	ld	r0, Z+
    427a:	f0 81       	ld	r31, Z
    427c:	e0 2d       	mov	r30, r0
    427e:	64 2f       	mov	r22, r20
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	1f 91       	pop	r17
    4286:	0f 91       	pop	r16
    4288:	ff 90       	pop	r15
    428a:	ef 90       	pop	r14
    428c:	df 90       	pop	r13
    428e:	cf 90       	pop	r12
    4290:	09 94       	ijmp
    4292:	2a 30       	cpi	r18, 0x0A	; 10
    4294:	31 05       	cpc	r19, r1
    4296:	01 f5       	brne	.+64     	; 0x42d8 <_ZN5Print5printEli+0x7c>
    4298:	77 ff       	sbrs	r23, 7
    429a:	1d c0       	rjmp	.+58     	; 0x42d6 <_ZN5Print5printEli+0x7a>
    429c:	6a 01       	movw	r12, r20
    429e:	7b 01       	movw	r14, r22
    42a0:	ec 01       	movw	r28, r24
    42a2:	6d e2       	ldi	r22, 0x2D	; 45
    42a4:	0e 94 ae 20 	call	0x415c	; 0x415c <_ZN5Print5printEc>
    42a8:	8c 01       	movw	r16, r24
    42aa:	44 27       	eor	r20, r20
    42ac:	55 27       	eor	r21, r21
    42ae:	ba 01       	movw	r22, r20
    42b0:	4c 19       	sub	r20, r12
    42b2:	5d 09       	sbc	r21, r13
    42b4:	6e 09       	sbc	r22, r14
    42b6:	7f 09       	sbc	r23, r15
    42b8:	2a e0       	ldi	r18, 0x0A	; 10
    42ba:	ce 01       	movw	r24, r28
    42bc:	0e 94 cb 20 	call	0x4196	; 0x4196 <_ZN5Print11printNumberEmh>
    42c0:	80 0f       	add	r24, r16
    42c2:	91 1f       	adc	r25, r17
    42c4:	df 91       	pop	r29
    42c6:	cf 91       	pop	r28
    42c8:	1f 91       	pop	r17
    42ca:	0f 91       	pop	r16
    42cc:	ff 90       	pop	r15
    42ce:	ef 90       	pop	r14
    42d0:	df 90       	pop	r13
    42d2:	cf 90       	pop	r12
    42d4:	08 95       	ret
    42d6:	2a e0       	ldi	r18, 0x0A	; 10
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	ff 90       	pop	r15
    42e2:	ef 90       	pop	r14
    42e4:	df 90       	pop	r13
    42e6:	cf 90       	pop	r12
    42e8:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <_ZN5Print11printNumberEmh>

000042ec <_ZN5Print5printEii>:
    42ec:	9a 01       	movw	r18, r20
    42ee:	ab 01       	movw	r20, r22
    42f0:	77 0f       	add	r23, r23
    42f2:	66 0b       	sbc	r22, r22
    42f4:	77 0b       	sbc	r23, r23
    42f6:	0c 94 2e 21 	jmp	0x425c	; 0x425c <_ZN5Print5printEli>

000042fa <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    42fa:	7f 92       	push	r7
    42fc:	8f 92       	push	r8
    42fe:	9f 92       	push	r9
    4300:	af 92       	push	r10
    4302:	bf 92       	push	r11
    4304:	cf 92       	push	r12
    4306:	df 92       	push	r13
    4308:	ef 92       	push	r14
    430a:	ff 92       	push	r15
    430c:	0f 93       	push	r16
    430e:	1f 93       	push	r17
    4310:	cf 93       	push	r28
    4312:	df 93       	push	r29
    4314:	8c 01       	movw	r16, r24
    4316:	6a 01       	movw	r12, r20
    4318:	7b 01       	movw	r14, r22
    431a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    431c:	9a 01       	movw	r18, r20
    431e:	ab 01       	movw	r20, r22
    4320:	c7 01       	movw	r24, r14
    4322:	b6 01       	movw	r22, r12
    4324:	0e 94 27 24 	call	0x484e	; 0x484e <__unordsf2>
    4328:	88 23       	and	r24, r24
    432a:	19 f0       	breq	.+6      	; 0x4332 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    432c:	64 ed       	ldi	r22, 0xD4	; 212
    432e:	71 e0       	ldi	r23, 0x01	; 1
    4330:	27 c0       	rjmp	.+78     	; 0x4380 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    4332:	46 01       	movw	r8, r12
    4334:	57 01       	movw	r10, r14
    4336:	e8 94       	clt
    4338:	b7 f8       	bld	r11, 7
    433a:	2f ef       	ldi	r18, 0xFF	; 255
    433c:	3f ef       	ldi	r19, 0xFF	; 255
    433e:	4f e7       	ldi	r20, 0x7F	; 127
    4340:	5f e7       	ldi	r21, 0x7F	; 127
    4342:	c5 01       	movw	r24, r10
    4344:	b4 01       	movw	r22, r8
    4346:	0e 94 27 24 	call	0x484e	; 0x484e <__unordsf2>
    434a:	81 11       	cpse	r24, r1
    434c:	0d c0       	rjmp	.+26     	; 0x4368 <_ZN5Print10printFloatEdh+0x6e>
    434e:	2f ef       	ldi	r18, 0xFF	; 255
    4350:	3f ef       	ldi	r19, 0xFF	; 255
    4352:	4f e7       	ldi	r20, 0x7F	; 127
    4354:	5f e7       	ldi	r21, 0x7F	; 127
    4356:	c5 01       	movw	r24, r10
    4358:	b4 01       	movw	r22, r8
    435a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    435e:	18 16       	cp	r1, r24
    4360:	1c f4       	brge	.+6      	; 0x4368 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4362:	68 ed       	ldi	r22, 0xD8	; 216
    4364:	71 e0       	ldi	r23, 0x01	; 1
    4366:	0c c0       	rjmp	.+24     	; 0x4380 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    4368:	2f ef       	ldi	r18, 0xFF	; 255
    436a:	3f ef       	ldi	r19, 0xFF	; 255
    436c:	4f e7       	ldi	r20, 0x7F	; 127
    436e:	5f e4       	ldi	r21, 0x4F	; 79
    4370:	c7 01       	movw	r24, r14
    4372:	b6 01       	movw	r22, r12
    4374:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gesf2>
    4378:	18 16       	cp	r1, r24
    437a:	94 f4       	brge	.+36     	; 0x43a0 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    437c:	6c ed       	ldi	r22, 0xDC	; 220
    437e:	71 e0       	ldi	r23, 0x01	; 1
    4380:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	1f 91       	pop	r17
    4388:	0f 91       	pop	r16
    438a:	ff 90       	pop	r15
    438c:	ef 90       	pop	r14
    438e:	df 90       	pop	r13
    4390:	cf 90       	pop	r12
    4392:	bf 90       	pop	r11
    4394:	af 90       	pop	r10
    4396:	9f 90       	pop	r9
    4398:	8f 90       	pop	r8
    439a:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    439c:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    43a0:	2f ef       	ldi	r18, 0xFF	; 255
    43a2:	3f ef       	ldi	r19, 0xFF	; 255
    43a4:	4f e7       	ldi	r20, 0x7F	; 127
    43a6:	5f ec       	ldi	r21, 0xCF	; 207
    43a8:	c7 01       	movw	r24, r14
    43aa:	b6 01       	movw	r22, r12
    43ac:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    43b0:	87 fd       	sbrc	r24, 7
    43b2:	e4 cf       	rjmp	.-56     	; 0x437c <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	a9 01       	movw	r20, r18
    43ba:	c7 01       	movw	r24, r14
    43bc:	b6 01       	movw	r22, r12
    43be:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__cmpsf2>
    43c2:	87 ff       	sbrs	r24, 7
    43c4:	0a c0       	rjmp	.+20     	; 0x43da <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    43c6:	6d e2       	ldi	r22, 0x2D	; 45
    43c8:	c8 01       	movw	r24, r16
    43ca:	0e 94 ae 20 	call	0x415c	; 0x415c <_ZN5Print5printEc>
    43ce:	ec 01       	movw	r28, r24
     number = -number;
    43d0:	f7 fa       	bst	r15, 7
    43d2:	f0 94       	com	r15
    43d4:	f7 f8       	bld	r15, 7
    43d6:	f0 94       	com	r15
    43d8:	02 c0       	rjmp	.+4      	; 0x43de <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    43da:	c0 e0       	ldi	r28, 0x00	; 0
    43dc:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    43de:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    43e0:	60 e0       	ldi	r22, 0x00	; 0
    43e2:	70 e0       	ldi	r23, 0x00	; 0
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    43e8:	7b 14       	cp	r7, r11
    43ea:	41 f0       	breq	.+16     	; 0x43fc <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    43ec:	20 e0       	ldi	r18, 0x00	; 0
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	40 e2       	ldi	r20, 0x20	; 32
    43f2:	51 e4       	ldi	r21, 0x41	; 65
    43f4:	0e 94 9f 1c 	call	0x393e	; 0x393e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    43f8:	b3 94       	inc	r11
    43fa:	f6 cf       	rjmp	.-20     	; 0x43e8 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    43fc:	a7 01       	movw	r20, r14
    43fe:	96 01       	movw	r18, r12
    4400:	0e 94 2e 1c 	call	0x385c	; 0x385c <__addsf3>
    4404:	6b 01       	movw	r12, r22
    4406:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4408:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__fixunssfsi>
    440c:	4b 01       	movw	r8, r22
    440e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4410:	2a e0       	ldi	r18, 0x0A	; 10
    4412:	ab 01       	movw	r20, r22
    4414:	bc 01       	movw	r22, r24
    4416:	c8 01       	movw	r24, r16
    4418:	0e 94 cb 20 	call	0x4196	; 0x4196 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    441c:	c8 0f       	add	r28, r24
    441e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4420:	77 20       	and	r7, r7
    4422:	b9 f1       	breq	.+110    	; 0x4492 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4424:	c5 01       	movw	r24, r10
    4426:	b4 01       	movw	r22, r8
    4428:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__floatunsisf>
    442c:	9b 01       	movw	r18, r22
    442e:	ac 01       	movw	r20, r24
    4430:	c7 01       	movw	r24, r14
    4432:	b6 01       	movw	r22, r12
    4434:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
    4438:	6b 01       	movw	r12, r22
    443a:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    443c:	6e e2       	ldi	r22, 0x2E	; 46
    443e:	c8 01       	movw	r24, r16
    4440:	0e 94 ae 20 	call	0x415c	; 0x415c <_ZN5Print5printEc>
    4444:	c8 0f       	add	r28, r24
    4446:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e2       	ldi	r20, 0x20	; 32
    444e:	51 e4       	ldi	r21, 0x41	; 65
    4450:	c7 01       	movw	r24, r14
    4452:	b6 01       	movw	r22, r12
    4454:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__mulsf3>
    4458:	4b 01       	movw	r8, r22
    445a:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    445c:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <__fixunssfsi>
    4460:	6b 01       	movw	r12, r22
    4462:	7c 01       	movw	r14, r24
    n += print(toPrint);
    4464:	4a e0       	ldi	r20, 0x0A	; 10
    4466:	50 e0       	ldi	r21, 0x00	; 0
    4468:	c8 01       	movw	r24, r16
    446a:	0e 94 28 21 	call	0x4250	; 0x4250 <_ZN5Print5printEji>
    446e:	c8 0f       	add	r28, r24
    4470:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    4472:	b6 01       	movw	r22, r12
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__floatunsisf>
    447c:	9b 01       	movw	r18, r22
    447e:	ac 01       	movw	r20, r24
    4480:	c5 01       	movw	r24, r10
    4482:	b4 01       	movw	r22, r8
    4484:	0e 94 2d 1c 	call	0x385a	; 0x385a <__subsf3>
    4488:	6b 01       	movw	r12, r22
    448a:	7c 01       	movw	r14, r24
    448c:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    448e:	71 10       	cpse	r7, r1
    4490:	db cf       	rjmp	.-74     	; 0x4448 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    4492:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4494:	df 91       	pop	r29
    4496:	cf 91       	pop	r28
    4498:	1f 91       	pop	r17
    449a:	0f 91       	pop	r16
    449c:	ff 90       	pop	r15
    449e:	ef 90       	pop	r14
    44a0:	df 90       	pop	r13
    44a2:	cf 90       	pop	r12
    44a4:	bf 90       	pop	r11
    44a6:	af 90       	pop	r10
    44a8:	9f 90       	pop	r9
    44aa:	8f 90       	pop	r8
    44ac:	7f 90       	pop	r7
    44ae:	08 95       	ret

000044b0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    44b0:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <_ZN5Print10printFloatEdh>

000044b4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
    44bc:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    44be:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_ZN5Print10printFloatEdh>
    44c2:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    44c4:	ce 01       	movw	r24, r28
    44c6:	0e 94 b5 20 	call	0x416a	; 0x416a <_ZN5Print7printlnEv>
  return n;
}
    44ca:	80 0f       	add	r24, r16
    44cc:	91 1f       	adc	r25, r17
    44ce:	df 91       	pop	r29
    44d0:	cf 91       	pop	r28
    44d2:	1f 91       	pop	r17
    44d4:	0f 91       	pop	r16
    44d6:	08 95       	ret

000044d8 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    44d8:	1f 92       	push	r1
    44da:	0f 92       	push	r0
    44dc:	0f b6       	in	r0, 0x3f	; 63
    44de:	0f 92       	push	r0
    44e0:	11 24       	eor	r1, r1
    44e2:	2f 93       	push	r18
    44e4:	3f 93       	push	r19
    44e6:	8f 93       	push	r24
    44e8:	9f 93       	push	r25
    44ea:	af 93       	push	r26
    44ec:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    44ee:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <timer0_millis>
    44f2:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <timer0_millis+0x1>
    44f6:	a0 91 d5 03 	lds	r26, 0x03D5	; 0x8003d5 <timer0_millis+0x2>
    44fa:	b0 91 d6 03 	lds	r27, 0x03D6	; 0x8003d6 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    44fe:	30 91 d2 03 	lds	r19, 0x03D2	; 0x8003d2 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4502:	23 e0       	ldi	r18, 0x03	; 3
    4504:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4506:	2d 37       	cpi	r18, 0x7D	; 125
    4508:	20 f4       	brcc	.+8      	; 0x4512 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    450a:	01 96       	adiw	r24, 0x01	; 1
    450c:	a1 1d       	adc	r26, r1
    450e:	b1 1d       	adc	r27, r1
    4510:	05 c0       	rjmp	.+10     	; 0x451c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4512:	26 e8       	ldi	r18, 0x86	; 134
    4514:	23 0f       	add	r18, r19
		m += 1;
    4516:	02 96       	adiw	r24, 0x02	; 2
    4518:	a1 1d       	adc	r26, r1
    451a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    451c:	20 93 d2 03 	sts	0x03D2, r18	; 0x8003d2 <timer0_fract>
	timer0_millis = m;
    4520:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <timer0_millis>
    4524:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <timer0_millis+0x1>
    4528:	a0 93 d5 03 	sts	0x03D5, r26	; 0x8003d5 <timer0_millis+0x2>
    452c:	b0 93 d6 03 	sts	0x03D6, r27	; 0x8003d6 <timer0_millis+0x3>
	timer0_overflow_count++;
    4530:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <timer0_overflow_count>
    4534:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <timer0_overflow_count+0x1>
    4538:	a0 91 d9 03 	lds	r26, 0x03D9	; 0x8003d9 <timer0_overflow_count+0x2>
    453c:	b0 91 da 03 	lds	r27, 0x03DA	; 0x8003da <timer0_overflow_count+0x3>
    4540:	01 96       	adiw	r24, 0x01	; 1
    4542:	a1 1d       	adc	r26, r1
    4544:	b1 1d       	adc	r27, r1
    4546:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <timer0_overflow_count>
    454a:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <timer0_overflow_count+0x1>
    454e:	a0 93 d9 03 	sts	0x03D9, r26	; 0x8003d9 <timer0_overflow_count+0x2>
    4552:	b0 93 da 03 	sts	0x03DA, r27	; 0x8003da <timer0_overflow_count+0x3>
}
    4556:	bf 91       	pop	r27
    4558:	af 91       	pop	r26
    455a:	9f 91       	pop	r25
    455c:	8f 91       	pop	r24
    455e:	3f 91       	pop	r19
    4560:	2f 91       	pop	r18
    4562:	0f 90       	pop	r0
    4564:	0f be       	out	0x3f, r0	; 63
    4566:	0f 90       	pop	r0
    4568:	1f 90       	pop	r1
    456a:	18 95       	reti

0000456c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    456c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    456e:	f8 94       	cli
	m = timer0_millis;
    4570:	60 91 d3 03 	lds	r22, 0x03D3	; 0x8003d3 <timer0_millis>
    4574:	70 91 d4 03 	lds	r23, 0x03D4	; 0x8003d4 <timer0_millis+0x1>
    4578:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <timer0_millis+0x2>
    457c:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <timer0_millis+0x3>
	SREG = oldSREG;
    4580:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4582:	08 95       	ret

00004584 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4584:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4586:	f8 94       	cli
	m = timer0_overflow_count;
    4588:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <timer0_overflow_count>
    458c:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <timer0_overflow_count+0x1>
    4590:	a0 91 d9 03 	lds	r26, 0x03D9	; 0x8003d9 <timer0_overflow_count+0x2>
    4594:	b0 91 da 03 	lds	r27, 0x03DA	; 0x8003da <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4598:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    459a:	a8 9b       	sbis	0x15, 0	; 21
    459c:	05 c0       	rjmp	.+10     	; 0x45a8 <micros+0x24>
    459e:	2f 3f       	cpi	r18, 0xFF	; 255
    45a0:	19 f0       	breq	.+6      	; 0x45a8 <micros+0x24>
		m++;
    45a2:	01 96       	adiw	r24, 0x01	; 1
    45a4:	a1 1d       	adc	r26, r1
    45a6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    45a8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    45aa:	ba 2f       	mov	r27, r26
    45ac:	a9 2f       	mov	r26, r25
    45ae:	98 2f       	mov	r25, r24
    45b0:	88 27       	eor	r24, r24
    45b2:	82 0f       	add	r24, r18
    45b4:	91 1d       	adc	r25, r1
    45b6:	a1 1d       	adc	r26, r1
    45b8:	b1 1d       	adc	r27, r1
    45ba:	bc 01       	movw	r22, r24
    45bc:	cd 01       	movw	r24, r26
    45be:	42 e0       	ldi	r20, 0x02	; 2
    45c0:	66 0f       	add	r22, r22
    45c2:	77 1f       	adc	r23, r23
    45c4:	88 1f       	adc	r24, r24
    45c6:	99 1f       	adc	r25, r25
    45c8:	4a 95       	dec	r20
    45ca:	d1 f7       	brne	.-12     	; 0x45c0 <micros+0x3c>
}
    45cc:	08 95       	ret

000045ce <delay>:

void delay(unsigned long ms)
{
    45ce:	8f 92       	push	r8
    45d0:	9f 92       	push	r9
    45d2:	af 92       	push	r10
    45d4:	bf 92       	push	r11
    45d6:	cf 92       	push	r12
    45d8:	df 92       	push	r13
    45da:	ef 92       	push	r14
    45dc:	ff 92       	push	r15
    45de:	6b 01       	movw	r12, r22
    45e0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    45e2:	0e 94 c2 22 	call	0x4584	; 0x4584 <micros>
    45e6:	4b 01       	movw	r8, r22
    45e8:	5c 01       	movw	r10, r24

	while (ms > 0) {
    45ea:	c1 14       	cp	r12, r1
    45ec:	d1 04       	cpc	r13, r1
    45ee:	e1 04       	cpc	r14, r1
    45f0:	f1 04       	cpc	r15, r1
    45f2:	01 f1       	breq	.+64     	; 0x4634 <delay+0x66>
		yield();
    45f4:	0e 94 26 24 	call	0x484c	; 0x484c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    45f8:	0e 94 c2 22 	call	0x4584	; 0x4584 <micros>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	88 19       	sub	r24, r8
    4602:	99 09       	sbc	r25, r9
    4604:	aa 09       	sbc	r26, r10
    4606:	bb 09       	sbc	r27, r11
    4608:	88 3e       	cpi	r24, 0xE8	; 232
    460a:	93 40       	sbci	r25, 0x03	; 3
    460c:	a1 05       	cpc	r26, r1
    460e:	b1 05       	cpc	r27, r1
    4610:	60 f3       	brcs	.-40     	; 0x45ea <delay+0x1c>
			ms--;
    4612:	21 e0       	ldi	r18, 0x01	; 1
    4614:	c2 1a       	sub	r12, r18
    4616:	d1 08       	sbc	r13, r1
    4618:	e1 08       	sbc	r14, r1
    461a:	f1 08       	sbc	r15, r1
			start += 1000;
    461c:	88 ee       	ldi	r24, 0xE8	; 232
    461e:	88 0e       	add	r8, r24
    4620:	83 e0       	ldi	r24, 0x03	; 3
    4622:	98 1e       	adc	r9, r24
    4624:	a1 1c       	adc	r10, r1
    4626:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4628:	c1 14       	cp	r12, r1
    462a:	d1 04       	cpc	r13, r1
    462c:	e1 04       	cpc	r14, r1
    462e:	f1 04       	cpc	r15, r1
    4630:	19 f7       	brne	.-58     	; 0x45f8 <delay+0x2a>
    4632:	db cf       	rjmp	.-74     	; 0x45ea <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    4634:	ff 90       	pop	r15
    4636:	ef 90       	pop	r14
    4638:	df 90       	pop	r13
    463a:	cf 90       	pop	r12
    463c:	bf 90       	pop	r11
    463e:	af 90       	pop	r10
    4640:	9f 90       	pop	r9
    4642:	8f 90       	pop	r8
    4644:	08 95       	ret

00004646 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4646:	82 30       	cpi	r24, 0x02	; 2
    4648:	91 05       	cpc	r25, r1
    464a:	38 f0       	brcs	.+14     	; 0x465a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    464c:	88 0f       	add	r24, r24
    464e:	99 1f       	adc	r25, r25
    4650:	88 0f       	add	r24, r24
    4652:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4654:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	f1 f7       	brne	.-4      	; 0x4656 <delayMicroseconds+0x10>
    465a:	08 95       	ret

0000465c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    465c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    465e:	84 b5       	in	r24, 0x24	; 36
    4660:	82 60       	ori	r24, 0x02	; 2
    4662:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4664:	84 b5       	in	r24, 0x24	; 36
    4666:	81 60       	ori	r24, 0x01	; 1
    4668:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    466a:	85 b5       	in	r24, 0x25	; 37
    466c:	82 60       	ori	r24, 0x02	; 2
    466e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4670:	85 b5       	in	r24, 0x25	; 37
    4672:	81 60       	ori	r24, 0x01	; 1
    4674:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4676:	ee e6       	ldi	r30, 0x6E	; 110
    4678:	f0 e0       	ldi	r31, 0x00	; 0
    467a:	80 81       	ld	r24, Z
    467c:	81 60       	ori	r24, 0x01	; 1
    467e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4680:	e1 e8       	ldi	r30, 0x81	; 129
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4686:	80 81       	ld	r24, Z
    4688:	82 60       	ori	r24, 0x02	; 2
    468a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    468c:	80 81       	ld	r24, Z
    468e:	81 60       	ori	r24, 0x01	; 1
    4690:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4692:	e0 e8       	ldi	r30, 0x80	; 128
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	80 81       	ld	r24, Z
    4698:	81 60       	ori	r24, 0x01	; 1
    469a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    469c:	e1 eb       	ldi	r30, 0xB1	; 177
    469e:	f0 e0       	ldi	r31, 0x00	; 0
    46a0:	80 81       	ld	r24, Z
    46a2:	84 60       	ori	r24, 0x04	; 4
    46a4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    46a6:	e0 eb       	ldi	r30, 0xB0	; 176
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	80 81       	ld	r24, Z
    46ac:	81 60       	ori	r24, 0x01	; 1
    46ae:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    46b0:	ea e7       	ldi	r30, 0x7A	; 122
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	80 81       	ld	r24, Z
    46b6:	84 60       	ori	r24, 0x04	; 4
    46b8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    46ba:	80 81       	ld	r24, Z
    46bc:	82 60       	ori	r24, 0x02	; 2
    46be:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    46c0:	80 81       	ld	r24, Z
    46c2:	81 60       	ori	r24, 0x01	; 1
    46c4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    46c6:	80 81       	ld	r24, Z
    46c8:	80 68       	ori	r24, 0x80	; 128
    46ca:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    46cc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    46d0:	08 95       	ret

000046d2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    46d2:	83 30       	cpi	r24, 0x03	; 3
    46d4:	81 f0       	breq	.+32     	; 0x46f6 <turnOffPWM+0x24>
    46d6:	28 f4       	brcc	.+10     	; 0x46e2 <turnOffPWM+0x10>
    46d8:	81 30       	cpi	r24, 0x01	; 1
    46da:	99 f0       	breq	.+38     	; 0x4702 <turnOffPWM+0x30>
    46dc:	82 30       	cpi	r24, 0x02	; 2
    46de:	a1 f0       	breq	.+40     	; 0x4708 <turnOffPWM+0x36>
    46e0:	08 95       	ret
    46e2:	87 30       	cpi	r24, 0x07	; 7
    46e4:	a9 f0       	breq	.+42     	; 0x4710 <turnOffPWM+0x3e>
    46e6:	88 30       	cpi	r24, 0x08	; 8
    46e8:	b9 f0       	breq	.+46     	; 0x4718 <turnOffPWM+0x46>
    46ea:	84 30       	cpi	r24, 0x04	; 4
    46ec:	d1 f4       	brne	.+52     	; 0x4722 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    46ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    46f2:	8f 7d       	andi	r24, 0xDF	; 223
    46f4:	03 c0       	rjmp	.+6      	; 0x46fc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    46f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    46fa:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    46fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4700:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4702:	84 b5       	in	r24, 0x24	; 36
    4704:	8f 77       	andi	r24, 0x7F	; 127
    4706:	02 c0       	rjmp	.+4      	; 0x470c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4708:	84 b5       	in	r24, 0x24	; 36
    470a:	8f 7d       	andi	r24, 0xDF	; 223
    470c:	84 bd       	out	0x24, r24	; 36
    470e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4710:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4714:	8f 77       	andi	r24, 0x7F	; 127
    4716:	03 c0       	rjmp	.+6      	; 0x471e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4718:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    471c:	8f 7d       	andi	r24, 0xDF	; 223
    471e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4722:	08 95       	ret

00004724 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4724:	cf 93       	push	r28
    4726:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	fc 01       	movw	r30, r24
    472c:	eb 57       	subi	r30, 0x7B	; 123
    472e:	fb 4f       	sbci	r31, 0xFB	; 251
    4730:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4732:	fc 01       	movw	r30, r24
    4734:	e7 56       	subi	r30, 0x67	; 103
    4736:	fb 4f       	sbci	r31, 0xFB	; 251
    4738:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    473a:	88 23       	and	r24, r24
    473c:	61 f1       	breq	.+88     	; 0x4796 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	88 0f       	add	r24, r24
    4742:	99 1f       	adc	r25, r25
    4744:	fc 01       	movw	r30, r24
    4746:	ef 53       	subi	r30, 0x3F	; 63
    4748:	fb 4f       	sbci	r31, 0xFB	; 251
    474a:	c5 91       	lpm	r28, Z+
    474c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    474e:	fc 01       	movw	r30, r24
    4750:	e9 54       	subi	r30, 0x49	; 73
    4752:	fb 4f       	sbci	r31, 0xFB	; 251
    4754:	a5 91       	lpm	r26, Z+
    4756:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4758:	61 11       	cpse	r22, r1
    475a:	09 c0       	rjmp	.+18     	; 0x476e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    475c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    475e:	f8 94       	cli
		*reg &= ~bit;
    4760:	88 81       	ld	r24, Y
    4762:	20 95       	com	r18
    4764:	82 23       	and	r24, r18
    4766:	88 83       	st	Y, r24
		*out &= ~bit;
    4768:	ec 91       	ld	r30, X
    476a:	2e 23       	and	r18, r30
    476c:	0b c0       	rjmp	.+22     	; 0x4784 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    476e:	62 30       	cpi	r22, 0x02	; 2
    4770:	61 f4       	brne	.+24     	; 0x478a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4772:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4774:	f8 94       	cli
		*reg &= ~bit;
    4776:	88 81       	ld	r24, Y
    4778:	32 2f       	mov	r19, r18
    477a:	30 95       	com	r19
    477c:	83 23       	and	r24, r19
    477e:	88 83       	st	Y, r24
		*out |= bit;
    4780:	ec 91       	ld	r30, X
    4782:	2e 2b       	or	r18, r30
    4784:	2c 93       	st	X, r18
		SREG = oldSREG;
    4786:	9f bf       	out	0x3f, r25	; 63
    4788:	06 c0       	rjmp	.+12     	; 0x4796 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    478a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    478c:	f8 94       	cli
		*reg |= bit;
    478e:	e8 81       	ld	r30, Y
    4790:	2e 2b       	or	r18, r30
    4792:	28 83       	st	Y, r18
		SREG = oldSREG;
    4794:	8f bf       	out	0x3f, r24	; 63
	}
}
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	08 95       	ret

0000479c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    479c:	1f 93       	push	r17
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    47a2:	28 2f       	mov	r18, r24
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	f9 01       	movw	r30, r18
    47a8:	ef 58       	subi	r30, 0x8F	; 143
    47aa:	fb 4f       	sbci	r31, 0xFB	; 251
    47ac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    47ae:	f9 01       	movw	r30, r18
    47b0:	eb 57       	subi	r30, 0x7B	; 123
    47b2:	fb 4f       	sbci	r31, 0xFB	; 251
    47b4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    47b6:	f9 01       	movw	r30, r18
    47b8:	e7 56       	subi	r30, 0x67	; 103
    47ba:	fb 4f       	sbci	r31, 0xFB	; 251
    47bc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    47be:	cc 23       	and	r28, r28
    47c0:	c1 f0       	breq	.+48     	; 0x47f2 <digitalWrite+0x56>
    47c2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    47c4:	81 11       	cpse	r24, r1
    47c6:	0e 94 69 23 	call	0x46d2	; 0x46d2 <turnOffPWM>

	out = portOutputRegister(port);
    47ca:	ec 2f       	mov	r30, r28
    47cc:	f0 e0       	ldi	r31, 0x00	; 0
    47ce:	ee 0f       	add	r30, r30
    47d0:	ff 1f       	adc	r31, r31
    47d2:	e9 54       	subi	r30, 0x49	; 73
    47d4:	fb 4f       	sbci	r31, 0xFB	; 251
    47d6:	a5 91       	lpm	r26, Z+
    47d8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    47da:	9f b7       	in	r25, 0x3f	; 63
	cli();
    47dc:	f8 94       	cli

	if (val == LOW) {
    47de:	11 11       	cpse	r17, r1
    47e0:	04 c0       	rjmp	.+8      	; 0x47ea <digitalWrite+0x4e>
		*out &= ~bit;
    47e2:	8c 91       	ld	r24, X
    47e4:	d0 95       	com	r29
    47e6:	d8 23       	and	r29, r24
    47e8:	02 c0       	rjmp	.+4      	; 0x47ee <digitalWrite+0x52>
	} else {
		*out |= bit;
    47ea:	ec 91       	ld	r30, X
    47ec:	de 2b       	or	r29, r30
    47ee:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    47f0:	9f bf       	out	0x3f, r25	; 63
}
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	1f 91       	pop	r17
    47f8:	08 95       	ret

000047fa <digitalRead>:

int digitalRead(uint8_t pin)
{
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    47fe:	28 2f       	mov	r18, r24
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	f9 01       	movw	r30, r18
    4804:	ef 58       	subi	r30, 0x8F	; 143
    4806:	fb 4f       	sbci	r31, 0xFB	; 251
    4808:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    480a:	f9 01       	movw	r30, r18
    480c:	eb 57       	subi	r30, 0x7B	; 123
    480e:	fb 4f       	sbci	r31, 0xFB	; 251
    4810:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4812:	f9 01       	movw	r30, r18
    4814:	e7 56       	subi	r30, 0x67	; 103
    4816:	fb 4f       	sbci	r31, 0xFB	; 251
    4818:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    481a:	cc 23       	and	r28, r28
    481c:	91 f0       	breq	.+36     	; 0x4842 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    481e:	81 11       	cpse	r24, r1
    4820:	0e 94 69 23 	call	0x46d2	; 0x46d2 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    4824:	ec 2f       	mov	r30, r28
    4826:	f0 e0       	ldi	r31, 0x00	; 0
    4828:	ee 0f       	add	r30, r30
    482a:	ff 1f       	adc	r31, r31
    482c:	e3 55       	subi	r30, 0x53	; 83
    482e:	fb 4f       	sbci	r31, 0xFB	; 251
    4830:	a5 91       	lpm	r26, Z+
    4832:	b4 91       	lpm	r27, Z
    4834:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4836:	ed 23       	and	r30, r29
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	21 f4       	brne	.+8      	; 0x4846 <digitalRead+0x4c>
    483e:	80 e0       	ldi	r24, 0x00	; 0
    4840:	02 c0       	rjmp	.+4      	; 0x4846 <digitalRead+0x4c>
    4842:	80 e0       	ldi	r24, 0x00	; 0
    4844:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4846:	df 91       	pop	r29
    4848:	cf 91       	pop	r28
    484a:	08 95       	ret

0000484c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    484c:	08 95       	ret

0000484e <__unordsf2>:
    484e:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__fp_cmp>
    4852:	88 0b       	sbc	r24, r24
    4854:	99 0b       	sbc	r25, r25
    4856:	08 95       	ret

00004858 <__udivmodsi4>:
    4858:	a1 e2       	ldi	r26, 0x21	; 33
    485a:	1a 2e       	mov	r1, r26
    485c:	aa 1b       	sub	r26, r26
    485e:	bb 1b       	sub	r27, r27
    4860:	fd 01       	movw	r30, r26
    4862:	0d c0       	rjmp	.+26     	; 0x487e <__udivmodsi4_ep>

00004864 <__udivmodsi4_loop>:
    4864:	aa 1f       	adc	r26, r26
    4866:	bb 1f       	adc	r27, r27
    4868:	ee 1f       	adc	r30, r30
    486a:	ff 1f       	adc	r31, r31
    486c:	a2 17       	cp	r26, r18
    486e:	b3 07       	cpc	r27, r19
    4870:	e4 07       	cpc	r30, r20
    4872:	f5 07       	cpc	r31, r21
    4874:	20 f0       	brcs	.+8      	; 0x487e <__udivmodsi4_ep>
    4876:	a2 1b       	sub	r26, r18
    4878:	b3 0b       	sbc	r27, r19
    487a:	e4 0b       	sbc	r30, r20
    487c:	f5 0b       	sbc	r31, r21

0000487e <__udivmodsi4_ep>:
    487e:	66 1f       	adc	r22, r22
    4880:	77 1f       	adc	r23, r23
    4882:	88 1f       	adc	r24, r24
    4884:	99 1f       	adc	r25, r25
    4886:	1a 94       	dec	r1
    4888:	69 f7       	brne	.-38     	; 0x4864 <__udivmodsi4_loop>
    488a:	60 95       	com	r22
    488c:	70 95       	com	r23
    488e:	80 95       	com	r24
    4890:	90 95       	com	r25
    4892:	9b 01       	movw	r18, r22
    4894:	ac 01       	movw	r20, r24
    4896:	bd 01       	movw	r22, r26
    4898:	cf 01       	movw	r24, r30
    489a:	08 95       	ret

0000489c <__tablejump2__>:
    489c:	ee 0f       	add	r30, r30
    489e:	ff 1f       	adc	r31, r31
    48a0:	05 90       	lpm	r0, Z+
    48a2:	f4 91       	lpm	r31, Z
    48a4:	e0 2d       	mov	r30, r0
    48a6:	09 94       	ijmp

000048a8 <eeprom_read_byte>:
    48a8:	f9 99       	sbic	0x1f, 1	; 31
    48aa:	fe cf       	rjmp	.-4      	; 0x48a8 <eeprom_read_byte>
    48ac:	92 bd       	out	0x22, r25	; 34
    48ae:	81 bd       	out	0x21, r24	; 33
    48b0:	f8 9a       	sbi	0x1f, 0	; 31
    48b2:	99 27       	eor	r25, r25
    48b4:	80 b5       	in	r24, 0x20	; 32
    48b6:	08 95       	ret

000048b8 <eeprom_read_dword>:
    48b8:	a6 e1       	ldi	r26, 0x16	; 22
    48ba:	b0 e0       	ldi	r27, 0x00	; 0
    48bc:	44 e0       	ldi	r20, 0x04	; 4
    48be:	50 e0       	ldi	r21, 0x00	; 0
    48c0:	0c 94 82 24 	jmp	0x4904	; 0x4904 <eeprom_read_blraw>

000048c4 <eeprom_update_byte>:
    48c4:	26 2f       	mov	r18, r22

000048c6 <eeprom_update_r18>:
    48c6:	f9 99       	sbic	0x1f, 1	; 31
    48c8:	fe cf       	rjmp	.-4      	; 0x48c6 <eeprom_update_r18>
    48ca:	92 bd       	out	0x22, r25	; 34
    48cc:	81 bd       	out	0x21, r24	; 33
    48ce:	f8 9a       	sbi	0x1f, 0	; 31
    48d0:	01 97       	sbiw	r24, 0x01	; 1
    48d2:	00 b4       	in	r0, 0x20	; 32
    48d4:	02 16       	cp	r0, r18
    48d6:	39 f0       	breq	.+14     	; 0x48e6 <eeprom_update_r18+0x20>
    48d8:	1f ba       	out	0x1f, r1	; 31
    48da:	20 bd       	out	0x20, r18	; 32
    48dc:	0f b6       	in	r0, 0x3f	; 63
    48de:	f8 94       	cli
    48e0:	fa 9a       	sbi	0x1f, 2	; 31
    48e2:	f9 9a       	sbi	0x1f, 1	; 31
    48e4:	0f be       	out	0x3f, r0	; 63
    48e6:	08 95       	ret

000048e8 <eeprom_update_dword>:
    48e8:	03 96       	adiw	r24, 0x03	; 3
    48ea:	27 2f       	mov	r18, r23
    48ec:	0e 94 63 24 	call	0x48c6	; 0x48c6 <eeprom_update_r18>
    48f0:	0e 94 62 24 	call	0x48c4	; 0x48c4 <eeprom_update_byte>
    48f4:	25 2f       	mov	r18, r21
    48f6:	0e 94 63 24 	call	0x48c6	; 0x48c6 <eeprom_update_r18>
    48fa:	24 2f       	mov	r18, r20
    48fc:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <eeprom_update_r18>

00004900 <eeprom_read_block>:
    4900:	dc 01       	movw	r26, r24
    4902:	cb 01       	movw	r24, r22

00004904 <eeprom_read_blraw>:
    4904:	fc 01       	movw	r30, r24
    4906:	f9 99       	sbic	0x1f, 1	; 31
    4908:	fe cf       	rjmp	.-4      	; 0x4906 <eeprom_read_blraw+0x2>
    490a:	06 c0       	rjmp	.+12     	; 0x4918 <eeprom_read_blraw+0x14>
    490c:	f2 bd       	out	0x22, r31	; 34
    490e:	e1 bd       	out	0x21, r30	; 33
    4910:	f8 9a       	sbi	0x1f, 0	; 31
    4912:	31 96       	adiw	r30, 0x01	; 1
    4914:	00 b4       	in	r0, 0x20	; 32
    4916:	0d 92       	st	X+, r0
    4918:	41 50       	subi	r20, 0x01	; 1
    491a:	50 40       	sbci	r21, 0x00	; 0
    491c:	b8 f7       	brcc	.-18     	; 0x490c <eeprom_read_blraw+0x8>
    491e:	08 95       	ret

00004920 <_exit>:
    4920:	f8 94       	cli

00004922 <__stop_program>:
    4922:	ff cf       	rjmp	.-2      	; 0x4922 <__stop_program>
